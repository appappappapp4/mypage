(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src='https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);})(window,document,'script','dataLayer','GTM-TCB9HK');
/*! jQuery v3.4.1 | (c) JS Foundation and other contributors | jquery.org/license */
!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(C,e){"use strict";var t=[],E=C.document,r=Object.getPrototypeOf,s=t.slice,g=t.concat,u=t.push,i=t.indexOf,n={},o=n.toString,v=n.hasOwnProperty,a=v.toString,l=a.call(Object),y={},m=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},x=function(e){return null!=e&&e===e.window},c={type:!0,src:!0,nonce:!0,noModule:!0};function b(e,t,n){var r,i,o=(n=n||E).createElement("script");if(o.text=e,t)for(r in c)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function w(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?n[o.call(e)]||"object":typeof e}var f="3.4.1",k=function(e,t){return new k.fn.init(e,t)},p=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function d(e){var t=!!e&&"length"in e&&e.length,n=w(e);return!m(e)&&!x(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}k.fn=k.prototype={jquery:f,constructor:k,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=k.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return k.each(this,e)},map:function(n){return this.pushStack(k.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:t.sort,splice:t.splice},k.extend=k.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for("boolean"==typeof a&&(l=a,a=arguments[s]||{},s++),"object"==typeof a||m(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],"__proto__"!==t&&a!==r&&(l&&r&&(k.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[t],o=i&&!Array.isArray(n)?[]:i||k.isPlainObject(n)?n:{},i=!1,a[t]=k.extend(l,o,r)):void 0!==r&&(a[t]=r));return a},k.extend({expando:"jQuery"+(f+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==o.call(e))&&(!(t=r(e))||"function"==typeof(n=v.call(t,"constructor")&&t.constructor)&&a.call(n)===l)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t){b(e,{nonce:t&&t.nonce})},each:function(e,t){var n,r=0;if(d(e)){for(n=e.length;r<n;r++)if(!1===t.call(e[r],r,e[r]))break}else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(p,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(d(Object(e))?k.merge(n,"string"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:i.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(d(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return g.apply([],a)},guid:1,support:y}),"function"==typeof Symbol&&(k.fn[Symbol.iterator]=t[Symbol.iterator]),k.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){n["[object "+t+"]"]=t.toLowerCase()});var h=function(n){var e,d,b,o,i,h,f,g,w,u,l,T,C,a,E,v,s,c,y,k="sizzle"+1*new Date,m=n.document,S=0,r=0,p=ue(),x=ue(),N=ue(),A=ue(),D=function(e,t){return e===t&&(l=!0),0},j={}.hasOwnProperty,t=[],q=t.pop,L=t.push,H=t.push,O=t.slice,P=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},R="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",I="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",W="\\["+M+"*("+I+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+I+"))|)"+M+"*\\]",$=":("+I+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+W+")*)|.*)\\)|)",F=new RegExp(M+"+","g"),B=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),_=new RegExp("^"+M+"*,"+M+"*"),z=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),U=new RegExp(M+"|>"),X=new RegExp($),V=new RegExp("^"+I+"$"),G={ID:new RegExp("^#("+I+")"),CLASS:new RegExp("^\\.("+I+")"),TAG:new RegExp("^("+I+"|[*])"),ATTR:new RegExp("^"+W),PSEUDO:new RegExp("^"+$),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+R+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},Y=/HTML$/i,Q=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,K=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\([\\da-f]{1,6}"+M+"?|("+M+")|.)","ig"),ne=function(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=function(e,t){return t?"\0"===e?"\ufffd":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},oe=function(){T()},ae=be(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{H.apply(t=O.call(m.childNodes),m.childNodes),t[m.childNodes.length].nodeType}catch(e){H={apply:t.length?function(e,t){L.apply(e,O.call(t))}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]);e.length=n-1}}}function se(t,e,n,r){var i,o,a,s,u,l,c,f=e&&e.ownerDocument,p=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==p&&9!==p&&11!==p)return n;if(!r&&((e?e.ownerDocument||e:m)!==C&&T(e),e=e||C,E)){if(11!==p&&(u=Z.exec(t)))if(i=u[1]){if(9===p){if(!(a=e.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(f&&(a=f.getElementById(i))&&y(e,a)&&a.id===i)return n.push(a),n}else{if(u[2])return H.apply(n,e.getElementsByTagName(t)),n;if((i=u[3])&&d.getElementsByClassName&&e.getElementsByClassName)return H.apply(n,e.getElementsByClassName(i)),n}if(d.qsa&&!A[t+" "]&&(!v||!v.test(t))&&(1!==p||"object"!==e.nodeName.toLowerCase())){if(c=t,f=e,1===p&&U.test(t)){(s=e.getAttribute("id"))?s=s.replace(re,ie):e.setAttribute("id",s=k),o=(l=h(t)).length;while(o--)l[o]="#"+s+" "+xe(l[o]);c=l.join(","),f=ee.test(t)&&ye(e.parentNode)||e}try{return H.apply(n,f.querySelectorAll(c)),n}catch(e){A(t,!0)}finally{s===k&&e.removeAttribute("id")}}}return g(t.replace(B,"$1"),e,n,r)}function ue(){var r=[];return function e(t,n){return r.push(t+" ")>b.cacheLength&&delete e[r.shift()],e[t+" "]=n}}function le(e){return e[k]=!0,e}function ce(e){var t=C.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function fe(e,t){var n=e.split("|"),r=n.length;while(r--)b.attrHandle[n[r]]=t}function pe(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function de(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function he(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}function ge(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&ae(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function ve(a){return le(function(o){return o=+o,le(function(e,t){var n,r=a([],e.length,o),i=r.length;while(i--)e[n=r[i]]&&(e[n]=!(t[n]=e[n]))})})}function ye(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}for(e in d=se.support={},i=se.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!Y.test(t||n&&n.nodeName||"HTML")},T=se.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:m;return r!==C&&9===r.nodeType&&r.documentElement&&(a=(C=r).documentElement,E=!i(C),m!==C&&(n=C.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",oe,!1):n.attachEvent&&n.attachEvent("onunload",oe)),d.attributes=ce(function(e){return e.className="i",!e.getAttribute("className")}),d.getElementsByTagName=ce(function(e){return e.appendChild(C.createComment("")),!e.getElementsByTagName("*").length}),d.getElementsByClassName=K.test(C.getElementsByClassName),d.getById=ce(function(e){return a.appendChild(e).id=k,!C.getElementsByName||!C.getElementsByName(k).length}),d.getById?(b.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},b.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&E){var n=t.getElementById(e);return n?[n]:[]}}):(b.filter.ID=function(e){var n=e.replace(te,ne);return function(e){var t="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===n}},b.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&E){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];i=t.getElementsByName(e),r=0;while(o=i[r++])if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),b.find.TAG=d.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):d.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},b.find.CLASS=d.getElementsByClassName&&function(e,t){if("undefined"!=typeof t.getElementsByClassName&&E)return t.getElementsByClassName(e)},s=[],v=[],(d.qsa=K.test(C.querySelectorAll))&&(ce(function(e){a.appendChild(e).innerHTML="<a id='"+k+"'></a><select id='"+k+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&v.push("[*^$]="+M+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||v.push("\\["+M+"*(?:value|"+R+")"),e.querySelectorAll("[id~="+k+"-]").length||v.push("~="),e.querySelectorAll(":checked").length||v.push(":checked"),e.querySelectorAll("a#"+k+"+*").length||v.push(".#.+[+~]")}),ce(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=C.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&v.push("name"+M+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&v.push(":enabled",":disabled"),a.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&v.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),v.push(",.*:")})),(d.matchesSelector=K.test(c=a.matches||a.webkitMatchesSelector||a.mozMatchesSelector||a.oMatchesSelector||a.msMatchesSelector))&&ce(function(e){d.disconnectedMatch=c.call(e,"*"),c.call(e,"[s!='']:x"),s.push("!=",$)}),v=v.length&&new RegExp(v.join("|")),s=s.length&&new RegExp(s.join("|")),t=K.test(a.compareDocumentPosition),y=t||K.test(a.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},D=t?function(e,t){if(e===t)return l=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!d.sortDetached&&t.compareDocumentPosition(e)===n?e===C||e.ownerDocument===m&&y(m,e)?-1:t===C||t.ownerDocument===m&&y(m,t)?1:u?P(u,e)-P(u,t):0:4&n?-1:1)}:function(e,t){if(e===t)return l=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e===C?-1:t===C?1:i?-1:o?1:u?P(u,e)-P(u,t):0;if(i===o)return pe(e,t);n=e;while(n=n.parentNode)a.unshift(n);n=t;while(n=n.parentNode)s.unshift(n);while(a[r]===s[r])r++;return r?pe(a[r],s[r]):a[r]===m?-1:s[r]===m?1:0}),C},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if((e.ownerDocument||e)!==C&&T(e),d.matchesSelector&&E&&!A[t+" "]&&(!s||!s.test(t))&&(!v||!v.test(t)))try{var n=c.call(e,t);if(n||d.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){A(t,!0)}return 0<se(t,C,null,[e]).length},se.contains=function(e,t){return(e.ownerDocument||e)!==C&&T(e),y(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!==C&&T(e);var n=b.attrHandle[t.toLowerCase()],r=n&&j.call(b.attrHandle,t.toLowerCase())?n(e,t,!E):void 0;return void 0!==r?r:d.attributes||!E?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},se.escape=function(e){return(e+"").replace(re,ie)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,n=[],r=0,i=0;if(l=!d.detectDuplicates,u=!d.sortStable&&e.slice(0),e.sort(D),l){while(t=e[i++])t===e[i]&&(r=n.push(i));while(r--)e.splice(n[r],1)}return u=null,e},o=se.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else while(t=e[r++])n+=o(t);return n},(b=se.selectors={cacheLength:50,createPseudo:le,match:G,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return G.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&X.test(n)&&(t=h(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=p[e+" "];return t||(t=new RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&p(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(n,r,i){return function(e){var t=se.attr(e,n);return null==t?"!="===r:!r||(t+="","="===r?t===i:"!="===r?t!==i:"^="===r?i&&0===t.indexOf(i):"*="===r?i&&-1<t.indexOf(i):"$="===r?i&&t.slice(-i.length)===i:"~="===r?-1<(" "+t.replace(F," ")+" ").indexOf(i):"|="===r&&(t===i||t.slice(0,i.length+1)===i+"-"))}},CHILD:function(h,e,t,g,v){var y="nth"!==h.slice(0,3),m="last"!==h.slice(-4),x="of-type"===e;return 1===g&&0===v?function(e){return!!e.parentNode}:function(e,t,n){var r,i,o,a,s,u,l=y!==m?"nextSibling":"previousSibling",c=e.parentNode,f=x&&e.nodeName.toLowerCase(),p=!n&&!x,d=!1;if(c){if(y){while(l){a=e;while(a=a[l])if(x?a.nodeName.toLowerCase()===f:1===a.nodeType)return!1;u=l="only"===h&&!u&&"nextSibling"}return!0}if(u=[m?c.firstChild:c.lastChild],m&&p){d=(s=(r=(i=(o=(a=c)[k]||(a[k]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]||[])[0]===S&&r[1])&&r[2],a=s&&c.childNodes[s];while(a=++s&&a&&a[l]||(d=s=0)||u.pop())if(1===a.nodeType&&++d&&a===e){i[h]=[S,s,d];break}}else if(p&&(d=s=(r=(i=(o=(a=e)[k]||(a[k]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]||[])[0]===S&&r[1]),!1===d)while(a=++s&&a&&a[l]||(d=s=0)||u.pop())if((x?a.nodeName.toLowerCase()===f:1===a.nodeType)&&++d&&(p&&((i=(o=a[k]||(a[k]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]=[S,d]),a===e))break;return(d-=v)===g||d%g==0&&0<=d/g}}},PSEUDO:function(e,o){var t,a=b.pseudos[e]||b.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return a[k]?a(o):1<a.length?(t=[e,e,"",o],b.setFilters.hasOwnProperty(e.toLowerCase())?le(function(e,t){var n,r=a(e,o),i=r.length;while(i--)e[n=P(e,r[i])]=!(t[n]=r[i])}):function(e){return a(e,0,t)}):a}},pseudos:{not:le(function(e){var r=[],i=[],s=f(e.replace(B,"$1"));return s[k]?le(function(e,t,n,r){var i,o=s(e,null,r,[]),a=e.length;while(a--)(i=o[a])&&(e[a]=!(t[a]=i))}):function(e,t,n){return r[0]=e,s(r,null,n,i),r[0]=null,!i.pop()}}),has:le(function(t){return function(e){return 0<se(t,e).length}}),contains:le(function(t){return t=t.replace(te,ne),function(e){return-1<(e.textContent||o(e)).indexOf(t)}}),lang:le(function(n){return V.test(n||"")||se.error("unsupported lang: "+n),n=n.replace(te,ne).toLowerCase(),function(e){var t;do{if(t=E?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===a},focus:function(e){return e===C.activeElement&&(!C.hasFocus||C.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!b.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return Q.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ve(function(){return[0]}),last:ve(function(e,t){return[t-1]}),eq:ve(function(e,t,n){return[n<0?n+t:n]}),even:ve(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:ve(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:ve(function(e,t,n){for(var r=n<0?n+t:t<n?t:n;0<=--r;)e.push(r);return e}),gt:ve(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=b.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})b.pseudos[e]=de(e);for(e in{submit:!0,reset:!0})b.pseudos[e]=he(e);function me(){}function xe(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function be(s,e,t){var u=e.dir,l=e.next,c=l||u,f=t&&"parentNode"===c,p=r++;return e.first?function(e,t,n){while(e=e[u])if(1===e.nodeType||f)return s(e,t,n);return!1}:function(e,t,n){var r,i,o,a=[S,p];if(n){while(e=e[u])if((1===e.nodeType||f)&&s(e,t,n))return!0}else while(e=e[u])if(1===e.nodeType||f)if(i=(o=e[k]||(e[k]={}))[e.uniqueID]||(o[e.uniqueID]={}),l&&l===e.nodeName.toLowerCase())e=e[u]||e;else{if((r=i[c])&&r[0]===S&&r[1]===p)return a[2]=r[2];if((i[c]=a)[2]=s(e,t,n))return!0}return!1}}function we(i){return 1<i.length?function(e,t,n){var r=i.length;while(r--)if(!i[r](e,t,n))return!1;return!0}:i[0]}function Te(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,l=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),l&&t.push(s)));return a}function Ce(d,h,g,v,y,e){return v&&!v[k]&&(v=Ce(v)),y&&!y[k]&&(y=Ce(y,e)),le(function(e,t,n,r){var i,o,a,s=[],u=[],l=t.length,c=e||function(e,t,n){for(var r=0,i=t.length;r<i;r++)se(e,t[r],n);return n}(h||"*",n.nodeType?[n]:n,[]),f=!d||!e&&h?c:Te(c,s,d,n,r),p=g?y||(e?d:l||v)?[]:t:f;if(g&&g(f,p,n,r),v){i=Te(p,u),v(i,[],n,r),o=i.length;while(o--)(a=i[o])&&(p[u[o]]=!(f[u[o]]=a))}if(e){if(y||d){if(y){i=[],o=p.length;while(o--)(a=p[o])&&i.push(f[o]=a);y(null,p=[],i,r)}o=p.length;while(o--)(a=p[o])&&-1<(i=y?P(e,a):s[o])&&(e[i]=!(t[i]=a))}}else p=Te(p===t?p.splice(l,p.length):p),y?y(null,t,p,r):H.apply(t,p)})}function Ee(e){for(var i,t,n,r=e.length,o=b.relative[e[0].type],a=o||b.relative[" "],s=o?1:0,u=be(function(e){return e===i},a,!0),l=be(function(e){return-1<P(i,e)},a,!0),c=[function(e,t,n){var r=!o&&(n||t!==w)||((i=t).nodeType?u(e,t,n):l(e,t,n));return i=null,r}];s<r;s++)if(t=b.relative[e[s].type])c=[be(we(c),t)];else{if((t=b.filter[e[s].type].apply(null,e[s].matches))[k]){for(n=++s;n<r;n++)if(b.relative[e[n].type])break;return Ce(1<s&&we(c),1<s&&xe(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(B,"$1"),t,s<n&&Ee(e.slice(s,n)),n<r&&Ee(e=e.slice(n)),n<r&&xe(e))}c.push(t)}return we(c)}return me.prototype=b.filters=b.pseudos,b.setFilters=new me,h=se.tokenize=function(e,t){var n,r,i,o,a,s,u,l=x[e+" "];if(l)return t?0:l.slice(0);a=e,s=[],u=b.preFilter;while(a){for(o in n&&!(r=_.exec(a))||(r&&(a=a.slice(r[0].length)||a),s.push(i=[])),n=!1,(r=z.exec(a))&&(n=r.shift(),i.push({value:n,type:r[0].replace(B," ")}),a=a.slice(n.length)),b.filter)!(r=G[o].exec(a))||u[o]&&!(r=u[o](r))||(n=r.shift(),i.push({value:n,type:o,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?se.error(e):x(e,s).slice(0)},f=se.compile=function(e,t){var n,v,y,m,x,r,i=[],o=[],a=N[e+" "];if(!a){t||(t=h(e)),n=t.length;while(n--)(a=Ee(t[n]))[k]?i.push(a):o.push(a);(a=N(e,(v=o,m=0<(y=i).length,x=0<v.length,r=function(e,t,n,r,i){var o,a,s,u=0,l="0",c=e&&[],f=[],p=w,d=e||x&&b.find.TAG("*",i),h=S+=null==p?1:Math.random()||.1,g=d.length;for(i&&(w=t===C||t||i);l!==g&&null!=(o=d[l]);l++){if(x&&o){a=0,t||o.ownerDocument===C||(T(o),n=!E);while(s=v[a++])if(s(o,t||C,n)){r.push(o);break}i&&(S=h)}m&&((o=!s&&o)&&u--,e&&c.push(o))}if(u+=l,m&&l!==u){a=0;while(s=y[a++])s(c,f,t,n);if(e){if(0<u)while(l--)c[l]||f[l]||(f[l]=q.call(r));f=Te(f)}H.apply(r,f),i&&!e&&0<f.length&&1<u+y.length&&se.uniqueSort(r)}return i&&(S=h,w=p),c},m?le(r):r))).selector=e}return a},g=se.select=function(e,t,n,r){var i,o,a,s,u,l="function"==typeof e&&e,c=!r&&h(e=l.selector||e);if(n=n||[],1===c.length){if(2<(o=c[0]=c[0].slice(0)).length&&"ID"===(a=o[0]).type&&9===t.nodeType&&E&&b.relative[o[1].type]){if(!(t=(b.find.ID(a.matches[0].replace(te,ne),t)||[])[0]))return n;l&&(t=t.parentNode),e=e.slice(o.shift().value.length)}i=G.needsContext.test(e)?0:o.length;while(i--){if(a=o[i],b.relative[s=a.type])break;if((u=b.find[s])&&(r=u(a.matches[0].replace(te,ne),ee.test(o[0].type)&&ye(t.parentNode)||t))){if(o.splice(i,1),!(e=r.length&&xe(o)))return H.apply(n,r),n;break}}}return(l||f(e,c))(r,t,!E,n,!t||ee.test(e)&&ye(t.parentNode)||t),n},d.sortStable=k.split("").sort(D).join("")===k,d.detectDuplicates=!!l,T(),d.sortDetached=ce(function(e){return 1&e.compareDocumentPosition(C.createElement("fieldset"))}),ce(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||fe("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),d.attributes&&ce(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||fe("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ce(function(e){return null==e.getAttribute("disabled")})||fe(R,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),se}(C);k.find=h,k.expr=h.selectors,k.expr[":"]=k.expr.pseudos,k.uniqueSort=k.unique=h.uniqueSort,k.text=h.getText,k.isXMLDoc=h.isXML,k.contains=h.contains,k.escapeSelector=h.escape;var T=function(e,t,n){var r=[],i=void 0!==n;while((e=e[t])&&9!==e.nodeType)if(1===e.nodeType){if(i&&k(e).is(n))break;r.push(e)}return r},S=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},N=k.expr.match.needsContext;function A(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var D=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function j(e,n,r){return m(n)?k.grep(e,function(e,t){return!!n.call(e,t,e)!==r}):n.nodeType?k.grep(e,function(e){return e===n!==r}):"string"!=typeof n?k.grep(e,function(e){return-1<i.call(n,e)!==r}):k.filter(n,e,r)}k.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?k.find.matchesSelector(r,e)?[r]:[]:k.find.matches(e,k.grep(t,function(e){return 1===e.nodeType}))},k.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(k(e).filter(function(){for(t=0;t<r;t++)if(k.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)k.find(e,i[t],n);return 1<r?k.uniqueSort(n):n},filter:function(e){return this.pushStack(j(this,e||[],!1))},not:function(e){return this.pushStack(j(this,e||[],!0))},is:function(e){return!!j(this,"string"==typeof e&&N.test(e)?k(e):e||[],!1).length}});var q,L=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(k.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||q,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:L.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof k?t[0]:t,k.merge(this,k.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:E,!0)),D.test(r[1])&&k.isPlainObject(t))for(r in t)m(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=E.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):m(e)?void 0!==n.ready?n.ready(e):e(k):k.makeArray(e,this)}).prototype=k.fn,q=k(E);var H=/^(?:parents|prev(?:Until|All))/,O={children:!0,contents:!0,next:!0,prev:!0};function P(e,t){while((e=e[t])&&1!==e.nodeType);return e}k.fn.extend({has:function(e){var t=k(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(k.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&k(e);if(!N.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?-1<a.index(n):1===n.nodeType&&k.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(1<o.length?k.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?i.call(k(e),this[0]):i.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(k.uniqueSort(k.merge(this.get(),k(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),k.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return T(e,"parentNode")},parentsUntil:function(e,t,n){return T(e,"parentNode",n)},next:function(e){return P(e,"nextSibling")},prev:function(e){return P(e,"previousSibling")},nextAll:function(e){return T(e,"nextSibling")},prevAll:function(e){return T(e,"previousSibling")},nextUntil:function(e,t,n){return T(e,"nextSibling",n)},prevUntil:function(e,t,n){return T(e,"previousSibling",n)},siblings:function(e){return S((e.parentNode||{}).firstChild,e)},children:function(e){return S(e.firstChild)},contents:function(e){return"undefined"!=typeof e.contentDocument?e.contentDocument:(A(e,"template")&&(e=e.content||e),k.merge([],e.childNodes))}},function(r,i){k.fn[r]=function(e,t){var n=k.map(this,i,e);return"Until"!==r.slice(-5)&&(t=e),t&&"string"==typeof t&&(n=k.filter(t,n)),1<this.length&&(O[r]||k.uniqueSort(n),H.test(r)&&n.reverse()),this.pushStack(n)}});var R=/[^\x20\t\r\n\f]+/g;function M(e){return e}function I(e){throw e}function W(e,t,n,r){var i;try{e&&m(i=e.promise)?i.call(e).done(t).fail(n):e&&m(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}k.Callbacks=function(r){var e,n;r="string"==typeof r?(e=r,n={},k.each(e.match(R)||[],function(e,t){n[t]=!0}),n):k.extend({},r);var i,t,o,a,s=[],u=[],l=-1,c=function(){for(a=a||r.once,o=i=!0;u.length;l=-1){t=u.shift();while(++l<s.length)!1===s[l].apply(t[0],t[1])&&r.stopOnFalse&&(l=s.length,t=!1)}r.memory||(t=!1),i=!1,a&&(s=t?[]:"")},f={add:function(){return s&&(t&&!i&&(l=s.length-1,u.push(t)),function n(e){k.each(e,function(e,t){m(t)?r.unique&&f.has(t)||s.push(t):t&&t.length&&"string"!==w(t)&&n(t)})}(arguments),t&&!i&&c()),this},remove:function(){return k.each(arguments,function(e,t){var n;while(-1<(n=k.inArray(t,s,n)))s.splice(n,1),n<=l&&l--}),this},has:function(e){return e?-1<k.inArray(e,s):0<s.length},empty:function(){return s&&(s=[]),this},disable:function(){return a=u=[],s=t="",this},disabled:function(){return!s},lock:function(){return a=u=[],t||i||(s=t=""),this},locked:function(){return!!a},fireWith:function(e,t){return a||(t=[e,(t=t||[]).slice?t.slice():t],u.push(t),i||c()),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!o}};return f},k.extend({Deferred:function(e){var o=[["notify","progress",k.Callbacks("memory"),k.Callbacks("memory"),2],["resolve","done",k.Callbacks("once memory"),k.Callbacks("once memory"),0,"resolved"],["reject","fail",k.Callbacks("once memory"),k.Callbacks("once memory"),1,"rejected"]],i="pending",a={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},"catch":function(e){return a.then(null,e)},pipe:function(){var i=arguments;return k.Deferred(function(r){k.each(o,function(e,t){var n=m(i[t[4]])&&i[t[4]];s[t[1]](function(){var e=n&&n.apply(this,arguments);e&&m(e.promise)?e.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[t[0]+"With"](this,n?[e]:arguments)})}),i=null}).promise()},then:function(t,n,r){var u=0;function l(i,o,a,s){return function(){var n=this,r=arguments,e=function(){var e,t;if(!(i<u)){if((e=a.apply(n,r))===o.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"==typeof e||"function"==typeof e)&&e.then,m(t)?s?t.call(e,l(u,o,M,s),l(u,o,I,s)):(u++,t.call(e,l(u,o,M,s),l(u,o,I,s),l(u,o,M,o.notifyWith))):(a!==M&&(n=void 0,r=[e]),(s||o.resolveWith)(n,r))}},t=s?e:function(){try{e()}catch(e){k.Deferred.exceptionHook&&k.Deferred.exceptionHook(e,t.stackTrace),u<=i+1&&(a!==I&&(n=void 0,r=[e]),o.rejectWith(n,r))}};i?t():(k.Deferred.getStackHook&&(t.stackTrace=k.Deferred.getStackHook()),C.setTimeout(t))}}return k.Deferred(function(e){o[0][3].add(l(0,e,m(r)?r:M,e.notifyWith)),o[1][3].add(l(0,e,m(t)?t:M)),o[2][3].add(l(0,e,m(n)?n:I))}).promise()},promise:function(e){return null!=e?k.extend(e,a):a}},s={};return k.each(o,function(e,t){var n=t[2],r=t[5];a[t[1]]=n.add,r&&n.add(function(){i=r},o[3-e][2].disable,o[3-e][3].disable,o[0][2].lock,o[0][3].lock),n.add(t[3].fire),s[t[0]]=function(){return s[t[0]+"With"](this===s?void 0:this,arguments),this},s[t[0]+"With"]=n.fireWith}),a.promise(s),e&&e.call(s,s),s},when:function(e){var n=arguments.length,t=n,r=Array(t),i=s.call(arguments),o=k.Deferred(),a=function(t){return function(e){r[t]=this,i[t]=1<arguments.length?s.call(arguments):e,--n||o.resolveWith(r,i)}};if(n<=1&&(W(e,o.done(a(t)).resolve,o.reject,!n),"pending"===o.state()||m(i[t]&&i[t].then)))return o.then();while(t--)W(i[t],a(t),o.reject);return o.promise()}});var $=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;k.Deferred.exceptionHook=function(e,t){C.console&&C.console.warn&&e&&$.test(e.name)&&C.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},k.readyException=function(e){C.setTimeout(function(){throw e})};var F=k.Deferred();function B(){E.removeEventListener("DOMContentLoaded",B),C.removeEventListener("load",B),k.ready()}k.fn.ready=function(e){return F.then(e)["catch"](function(e){k.readyException(e)}),this},k.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--k.readyWait:k.isReady)||(k.isReady=!0)!==e&&0<--k.readyWait||F.resolveWith(E,[k])}}),k.ready.then=F.then,"complete"===E.readyState||"loading"!==E.readyState&&!E.documentElement.doScroll?C.setTimeout(k.ready):(E.addEventListener("DOMContentLoaded",B),C.addEventListener("load",B));var _=function(e,t,n,r,i,o,a){var s=0,u=e.length,l=null==n;if("object"===w(n))for(s in i=!0,n)_(e,t,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,m(r)||(a=!0),l&&(a?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(k(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:l?t.call(e):u?t(e[0],n):o},z=/^-ms-/,U=/-([a-z])/g;function X(e,t){return t.toUpperCase()}function V(e){return e.replace(z,"ms-").replace(U,X)}var G=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Y(){this.expando=k.expando+Y.uid++}Y.uid=1,Y.prototype={cache:function(e){var t=e[this.expando];return t||(t={},G(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[V(t)]=n;else for(r in t)i[V(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][V(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(V):(t=V(t))in r?[t]:t.match(R)||[]).length;while(n--)delete r[t[n]]}(void 0===t||k.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!k.isEmptyObject(t)}};var Q=new Y,J=new Y,K=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Z=/[A-Z]/g;function ee(e,t,n){var r,i;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(Z,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n="true"===(i=n)||"false"!==i&&("null"===i?null:i===+i+""?+i:K.test(i)?JSON.parse(i):i)}catch(e){}J.set(e,t,n)}else n=void 0;return n}k.extend({hasData:function(e){return J.hasData(e)||Q.hasData(e)},data:function(e,t,n){return J.access(e,t,n)},removeData:function(e,t){J.remove(e,t)},_data:function(e,t,n){return Q.access(e,t,n)},_removeData:function(e,t){Q.remove(e,t)}}),k.fn.extend({data:function(n,e){var t,r,i,o=this[0],a=o&&o.attributes;if(void 0===n){if(this.length&&(i=J.get(o),1===o.nodeType&&!Q.get(o,"hasDataAttrs"))){t=a.length;while(t--)a[t]&&0===(r=a[t].name).indexOf("data-")&&(r=V(r.slice(5)),ee(o,r,i[r]));Q.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof n?this.each(function(){J.set(this,n)}):_(this,function(e){var t;if(o&&void 0===e)return void 0!==(t=J.get(o,n))?t:void 0!==(t=ee(o,n))?t:void 0;this.each(function(){J.set(this,n,e)})},null,e,1<arguments.length,null,!0)},removeData:function(e){return this.each(function(){J.remove(this,e)})}}),k.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=Q.get(e,t),n&&(!r||Array.isArray(n)?r=Q.access(e,t,k.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=k.queue(e,t),r=n.length,i=n.shift(),o=k._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,function(){k.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Q.get(e,n)||Q.access(e,n,{empty:k.Callbacks("once memory").add(function(){Q.remove(e,[t+"queue",n])})})}}),k.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?k.queue(this[0],t):void 0===n?this:this.each(function(){var e=k.queue(this,t,n);k._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&k.dequeue(this,t)})},dequeue:function(e){return this.each(function(){k.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=k.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};"string"!=typeof e&&(t=e,e=void 0),e=e||"fx";while(a--)(n=Q.get(o[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var te=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ne=new RegExp("^(?:([+-])=|)("+te+")([a-z%]*)$","i"),re=["Top","Right","Bottom","Left"],ie=E.documentElement,oe=function(e){return k.contains(e.ownerDocument,e)},ae={composed:!0};ie.getRootNode&&(oe=function(e){return k.contains(e.ownerDocument,e)||e.getRootNode(ae)===e.ownerDocument});var se=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&oe(e)&&"none"===k.css(e,"display")},ue=function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];for(o in i=n.apply(e,r||[]),t)e.style[o]=a[o];return i};function le(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return k.css(e,t,"")},u=s(),l=n&&n[3]||(k.cssNumber[t]?"":"px"),c=e.nodeType&&(k.cssNumber[t]||"px"!==l&&+u)&&ne.exec(k.css(e,t));if(c&&c[3]!==l){u/=2,l=l||c[3],c=+u||1;while(a--)k.style(e,t,c+l),(1-o)*(1-(o=s()/u||.5))<=0&&(a=0),c/=o;c*=2,k.style(e,t,c+l),n=n||[]}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}var ce={};function fe(e,t){for(var n,r,i,o,a,s,u,l=[],c=0,f=e.length;c<f;c++)(r=e[c]).style&&(n=r.style.display,t?("none"===n&&(l[c]=Q.get(r,"display")||null,l[c]||(r.style.display="")),""===r.style.display&&se(r)&&(l[c]=(u=a=o=void 0,a=(i=r).ownerDocument,s=i.nodeName,(u=ce[s])||(o=a.body.appendChild(a.createElement(s)),u=k.css(o,"display"),o.parentNode.removeChild(o),"none"===u&&(u="block"),ce[s]=u)))):"none"!==n&&(l[c]="none",Q.set(r,"display",n)));for(c=0;c<f;c++)null!=l[c]&&(e[c].style.display=l[c]);return e}k.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){se(this)?k(this).show():k(this).hide()})}});var pe=/^(?:checkbox|radio)$/i,de=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,he=/^$|^module$|\/(?:java|ecma)script/i,ge={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ve(e,t){var n;return n="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&A(e,t)?k.merge([e],n):n}function ye(e,t){for(var n=0,r=e.length;n<r;n++)Q.set(e[n],"globalEval",!t||Q.get(t[n],"globalEval"))}ge.optgroup=ge.option,ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead,ge.th=ge.td;var me,xe,be=/<|&#?\w+;/;function we(e,t,n,r,i){for(var o,a,s,u,l,c,f=t.createDocumentFragment(),p=[],d=0,h=e.length;d<h;d++)if((o=e[d])||0===o)if("object"===w(o))k.merge(p,o.nodeType?[o]:o);else if(be.test(o)){a=a||f.appendChild(t.createElement("div")),s=(de.exec(o)||["",""])[1].toLowerCase(),u=ge[s]||ge._default,a.innerHTML=u[1]+k.htmlPrefilter(o)+u[2],c=u[0];while(c--)a=a.lastChild;k.merge(p,a.childNodes),(a=f.firstChild).textContent=""}else p.push(t.createTextNode(o));f.textContent="",d=0;while(o=p[d++])if(r&&-1<k.inArray(o,r))i&&i.push(o);else if(l=oe(o),a=ve(f.appendChild(o),"script"),l&&ye(a),n){c=0;while(o=a[c++])he.test(o.type||"")&&n.push(o)}return f}me=E.createDocumentFragment().appendChild(E.createElement("div")),(xe=E.createElement("input")).setAttribute("type","radio"),xe.setAttribute("checked","checked"),xe.setAttribute("name","t"),me.appendChild(xe),y.checkClone=me.cloneNode(!0).cloneNode(!0).lastChild.checked,me.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!me.cloneNode(!0).lastChild.defaultValue;var Te=/^key/,Ce=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ee=/^([^.]*)(?:\.(.+)|)/;function ke(){return!0}function Se(){return!1}function Ne(e,t){return e===function(){try{return E.activeElement}catch(e){}}()==("focus"===t)}function Ae(e,t,n,r,i,o){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)Ae(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Se;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return k().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=k.guid++)),e.each(function(){k.event.add(this,t,i,r,n)})}function De(e,i,o){o?(Q.set(e,i,!1),k.event.add(e,i,{namespace:!1,handler:function(e){var t,n,r=Q.get(this,i);if(1&e.isTrigger&&this[i]){if(r.length)(k.event.special[i]||{}).delegateType&&e.stopPropagation();else if(r=s.call(arguments),Q.set(this,i,r),t=o(this,i),this[i](),r!==(n=Q.get(this,i))||t?Q.set(this,i,!1):n={},r!==n)return e.stopImmediatePropagation(),e.preventDefault(),n.value}else r.length&&(Q.set(this,i,{value:k.event.trigger(k.extend(r[0],k.Event.prototype),r.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Q.get(e,i)&&k.event.add(e,i,ke)}k.event={global:{},add:function(t,e,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,v=Q.get(t);if(v){n.handler&&(n=(o=n).handler,i=o.selector),i&&k.find.matchesSelector(ie,i),n.guid||(n.guid=k.guid++),(u=v.events)||(u=v.events={}),(a=v.handle)||(a=v.handle=function(e){return"undefined"!=typeof k&&k.event.triggered!==e.type?k.event.dispatch.apply(t,arguments):void 0}),l=(e=(e||"").match(R)||[""]).length;while(l--)d=g=(s=Ee.exec(e[l])||[])[1],h=(s[2]||"").split(".").sort(),d&&(f=k.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=k.event.special[d]||{},c=k.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&k.expr.match.needsContext.test(i),namespace:h.join(".")},o),(p=u[d])||((p=u[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,h,a)||t.addEventListener&&t.addEventListener(d,a)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,c):p.push(c),k.event.global[d]=!0)}},remove:function(e,t,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,v=Q.hasData(e)&&Q.get(e);if(v&&(u=v.events)){l=(t=(t||"").match(R)||[""]).length;while(l--)if(d=g=(s=Ee.exec(t[l])||[])[1],h=(s[2]||"").split(".").sort(),d){f=k.event.special[d]||{},p=u[d=(r?f.delegateType:f.bindType)||d]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=p.length;while(o--)c=p[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,f.remove&&f.remove.call(e,c));a&&!p.length&&(f.teardown&&!1!==f.teardown.call(e,h,v.handle)||k.removeEvent(e,d,v.handle),delete u[d])}else for(d in u)k.event.remove(e,d+t[l],n,r,!0);k.isEmptyObject(u)&&Q.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,a,s=k.event.fix(e),u=new Array(arguments.length),l=(Q.get(this,"events")||{})[s.type]||[],c=k.event.special[s.type]||{};for(u[0]=s,t=1;t<arguments.length;t++)u[t]=arguments[t];if(s.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,s)){a=k.event.handlers.call(this,s,l),t=0;while((i=a[t++])&&!s.isPropagationStopped()){s.currentTarget=i.elem,n=0;while((o=i.handlers[n++])&&!s.isImmediatePropagationStopped())s.rnamespace&&!1!==o.namespace&&!s.rnamespace.test(o.namespace)||(s.handleObj=o,s.data=o.data,void 0!==(r=((k.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,u))&&!1===(s.result=r)&&(s.preventDefault(),s.stopPropagation()))}return c.postDispatch&&c.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!("click"===e.type&&1<=e.button))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?-1<k(i,this).index(l):k.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&s.push({elem:l,handlers:o})}return l=this,u<t.length&&s.push({elem:l,handlers:t.slice(u)}),s},addProp:function(t,e){Object.defineProperty(k.Event.prototype,t,{enumerable:!0,configurable:!0,get:m(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[k.expando]?e:new k.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return pe.test(t.type)&&t.click&&A(t,"input")&&De(t,"click",ke),!1},trigger:function(e){var t=this||e;return pe.test(t.type)&&t.click&&A(t,"input")&&De(t,"click"),!0},_default:function(e){var t=e.target;return pe.test(t.type)&&t.click&&A(t,"input")&&Q.get(t,"click")||A(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},k.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},k.Event=function(e,t){if(!(this instanceof k.Event))return new k.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?ke:Se,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&k.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[k.expando]=!0},k.Event.prototype={constructor:k.Event,isDefaultPrevented:Se,isPropagationStopped:Se,isImmediatePropagationStopped:Se,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=ke,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=ke,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=ke,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},k.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Te.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ce.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},k.event.addProp),k.each({focus:"focusin",blur:"focusout"},function(e,t){k.event.special[e]={setup:function(){return De(this,e,Ne),!1},trigger:function(){return De(this,e),!0},delegateType:t}}),k.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,i){k.event.special[e]={delegateType:i,bindType:i,handle:function(e){var t,n=e.relatedTarget,r=e.handleObj;return n&&(n===this||k.contains(this,n))||(e.type=r.origType,t=r.handler.apply(this,arguments),e.type=i),t}}}),k.fn.extend({on:function(e,t,n,r){return Ae(this,e,t,n,r)},one:function(e,t,n,r){return Ae(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,k(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Se),this.each(function(){k.event.remove(this,e,n,t)})}});var je=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,qe=/<script|<style|<link/i,Le=/checked\s*(?:[^=]|=\s*.checked.)/i,He=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Oe(e,t){return A(e,"table")&&A(11!==t.nodeType?t:t.firstChild,"tr")&&k(e).children("tbody")[0]||e}function Pe(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Re(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Me(e,t){var n,r,i,o,a,s,u,l;if(1===t.nodeType){if(Q.hasData(e)&&(o=Q.access(e),a=Q.set(t,o),l=o.events))for(i in delete a.handle,a.events={},l)for(n=0,r=l[i].length;n<r;n++)k.event.add(t,i,l[i][n]);J.hasData(e)&&(s=J.access(e),u=k.extend({},s),J.set(t,u))}}function Ie(n,r,i,o){r=g.apply([],r);var e,t,a,s,u,l,c=0,f=n.length,p=f-1,d=r[0],h=m(d);if(h||1<f&&"string"==typeof d&&!y.checkClone&&Le.test(d))return n.each(function(e){var t=n.eq(e);h&&(r[0]=d.call(this,e,t.html())),Ie(t,r,i,o)});if(f&&(t=(e=we(r,n[0].ownerDocument,!1,n,o)).firstChild,1===e.childNodes.length&&(e=t),t||o)){for(s=(a=k.map(ve(e,"script"),Pe)).length;c<f;c++)u=e,c!==p&&(u=k.clone(u,!0,!0),s&&k.merge(a,ve(u,"script"))),i.call(n[c],u,c);if(s)for(l=a[a.length-1].ownerDocument,k.map(a,Re),c=0;c<s;c++)u=a[c],he.test(u.type||"")&&!Q.access(u,"globalEval")&&k.contains(l,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?k._evalUrl&&!u.noModule&&k._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")}):b(u.textContent.replace(He,""),u,l))}return n}function We(e,t,n){for(var r,i=t?k.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||k.cleanData(ve(r)),r.parentNode&&(n&&oe(r)&&ye(ve(r,"script")),r.parentNode.removeChild(r));return e}k.extend({htmlPrefilter:function(e){return e.replace(je,"<$1></$2>")},clone:function(e,t,n){var r,i,o,a,s,u,l,c=e.cloneNode(!0),f=oe(e);if(!(y.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||k.isXMLDoc(e)))for(a=ve(c),r=0,i=(o=ve(e)).length;r<i;r++)s=o[r],u=a[r],void 0,"input"===(l=u.nodeName.toLowerCase())&&pe.test(s.type)?u.checked=s.checked:"input"!==l&&"textarea"!==l||(u.defaultValue=s.defaultValue);if(t)if(n)for(o=o||ve(e),a=a||ve(c),r=0,i=o.length;r<i;r++)Me(o[r],a[r]);else Me(e,c);return 0<(a=ve(c,"script")).length&&ye(a,!f&&ve(e,"script")),c},cleanData:function(e){for(var t,n,r,i=k.event.special,o=0;void 0!==(n=e[o]);o++)if(G(n)){if(t=n[Q.expando]){if(t.events)for(r in t.events)i[r]?k.event.remove(n,r):k.removeEvent(n,r,t.handle);n[Q.expando]=void 0}n[J.expando]&&(n[J.expando]=void 0)}}}),k.fn.extend({detach:function(e){return We(this,e,!0)},remove:function(e){return We(this,e)},text:function(e){return _(this,function(e){return void 0===e?k.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Ie(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Oe(this,e).appendChild(e)})},prepend:function(){return Ie(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Oe(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Ie(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Ie(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(k.cleanData(ve(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return k.clone(this,e,t)})},html:function(e){return _(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!qe.test(e)&&!ge[(de.exec(e)||["",""])[1].toLowerCase()]){e=k.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(k.cleanData(ve(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return Ie(this,arguments,function(e){var t=this.parentNode;k.inArray(this,n)<0&&(k.cleanData(ve(this)),t&&t.replaceChild(e,this))},n)}}),k.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,a){k.fn[e]=function(e){for(var t,n=[],r=k(e),i=r.length-1,o=0;o<=i;o++)t=o===i?this:this.clone(!0),k(r[o])[a](t),u.apply(n,t.get());return this.pushStack(n)}});var $e=new RegExp("^("+te+")(?!px)[a-z%]+$","i"),Fe=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=C),t.getComputedStyle(e)},Be=new RegExp(re.join("|"),"i");function _e(e,t,n){var r,i,o,a,s=e.style;return(n=n||Fe(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||oe(e)||(a=k.style(e,t)),!y.pixelBoxStyles()&&$e.test(a)&&Be.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function ze(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(u){s.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ie.appendChild(s).appendChild(u);var e=C.getComputedStyle(u);n="1%"!==e.top,a=12===t(e.marginLeft),u.style.right="60%",o=36===t(e.right),r=36===t(e.width),u.style.position="absolute",i=12===t(u.offsetWidth/3),ie.removeChild(s),u=null}}function t(e){return Math.round(parseFloat(e))}var n,r,i,o,a,s=E.createElement("div"),u=E.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===u.style.backgroundClip,k.extend(y,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),o},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),a},scrollboxSize:function(){return e(),i}}))}();var Ue=["Webkit","Moz","ms"],Xe=E.createElement("div").style,Ve={};function Ge(e){var t=k.cssProps[e]||Ve[e];return t||(e in Xe?e:Ve[e]=function(e){var t=e[0].toUpperCase()+e.slice(1),n=Ue.length;while(n--)if((e=Ue[n]+t)in Xe)return e}(e)||e)}var Ye=/^(none|table(?!-c[ea]).+)/,Qe=/^--/,Je={position:"absolute",visibility:"hidden",display:"block"},Ke={letterSpacing:"0",fontWeight:"400"};function Ze(e,t,n){var r=ne.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function et(e,t,n,r,i,o){var a="width"===t?1:0,s=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=k.css(e,n+re[a],!0,i)),r?("content"===n&&(u-=k.css(e,"padding"+re[a],!0,i)),"margin"!==n&&(u-=k.css(e,"border"+re[a]+"Width",!0,i))):(u+=k.css(e,"padding"+re[a],!0,i),"padding"!==n?u+=k.css(e,"border"+re[a]+"Width",!0,i):s+=k.css(e,"border"+re[a]+"Width",!0,i));return!r&&0<=o&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-u-s-.5))||0),u}function tt(e,t,n){var r=Fe(e),i=(!y.boxSizingReliable()||n)&&"border-box"===k.css(e,"boxSizing",!1,r),o=i,a=_e(e,t,r),s="offset"+t[0].toUpperCase()+t.slice(1);if($e.test(a)){if(!n)return a;a="auto"}return(!y.boxSizingReliable()&&i||"auto"===a||!parseFloat(a)&&"inline"===k.css(e,"display",!1,r))&&e.getClientRects().length&&(i="border-box"===k.css(e,"boxSizing",!1,r),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+et(e,t,n||(i?"border":"content"),o,r,a)+"px"}function nt(e,t,n,r,i){return new nt.prototype.init(e,t,n,r,i)}k.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=_e(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=V(t),u=Qe.test(t),l=e.style;if(u||(t=Ge(s)),a=k.cssHooks[t]||k.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:l[t];"string"===(o=typeof n)&&(i=ne.exec(n))&&i[1]&&(n=le(e,t,i),o="number"),null!=n&&n==n&&("number"!==o||u||(n+=i&&i[3]||(k.cssNumber[s]?"":"px")),y.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,r){var i,o,a,s=V(t);return Qe.test(t)||(t=Ge(s)),(a=k.cssHooks[t]||k.cssHooks[s])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=_e(e,t,r)),"normal"===i&&t in Ke&&(i=Ke[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),k.each(["height","width"],function(e,u){k.cssHooks[u]={get:function(e,t,n){if(t)return!Ye.test(k.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?tt(e,u,n):ue(e,Je,function(){return tt(e,u,n)})},set:function(e,t,n){var r,i=Fe(e),o=!y.scrollboxSize()&&"absolute"===i.position,a=(o||n)&&"border-box"===k.css(e,"boxSizing",!1,i),s=n?et(e,u,n,a,i):0;return a&&o&&(s-=Math.ceil(e["offset"+u[0].toUpperCase()+u.slice(1)]-parseFloat(i[u])-et(e,u,"border",!1,i)-.5)),s&&(r=ne.exec(t))&&"px"!==(r[3]||"px")&&(e.style[u]=t,t=k.css(e,u)),Ze(0,t,s)}}}),k.cssHooks.marginLeft=ze(y.reliableMarginLeft,function(e,t){if(t)return(parseFloat(_e(e,"marginLeft"))||e.getBoundingClientRect().left-ue(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),k.each({margin:"",padding:"",border:"Width"},function(i,o){k.cssHooks[i+o]={expand:function(e){for(var t=0,n={},r="string"==typeof e?e.split(" "):[e];t<4;t++)n[i+re[t]+o]=r[t]||r[t-2]||r[0];return n}},"margin"!==i&&(k.cssHooks[i+o].set=Ze)}),k.fn.extend({css:function(e,t){return _(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=Fe(e),i=t.length;a<i;a++)o[t[a]]=k.css(e,t[a],!1,r);return o}return void 0!==n?k.style(e,t,n):k.css(e,t)},e,t,1<arguments.length)}}),((k.Tween=nt).prototype={constructor:nt,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||k.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(k.cssNumber[n]?"":"px")},cur:function(){var e=nt.propHooks[this.prop];return e&&e.get?e.get(this):nt.propHooks._default.get(this)},run:function(e){var t,n=nt.propHooks[this.prop];return this.options.duration?this.pos=t=k.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):nt.propHooks._default.set(this),this}}).init.prototype=nt.prototype,(nt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=k.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){k.fx.step[e.prop]?k.fx.step[e.prop](e):1!==e.elem.nodeType||!k.cssHooks[e.prop]&&null==e.elem.style[Ge(e.prop)]?e.elem[e.prop]=e.now:k.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=nt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},k.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},k.fx=nt.prototype.init,k.fx.step={};var rt,it,ot,at,st=/^(?:toggle|show|hide)$/,ut=/queueHooks$/;function lt(){it&&(!1===E.hidden&&C.requestAnimationFrame?C.requestAnimationFrame(lt):C.setTimeout(lt,k.fx.interval),k.fx.tick())}function ct(){return C.setTimeout(function(){rt=void 0}),rt=Date.now()}function ft(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=re[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function pt(e,t,n){for(var r,i=(dt.tweeners[t]||[]).concat(dt.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function dt(o,e,t){var n,a,r=0,i=dt.prefilters.length,s=k.Deferred().always(function(){delete u.elem}),u=function(){if(a)return!1;for(var e=rt||ct(),t=Math.max(0,l.startTime+l.duration-e),n=1-(t/l.duration||0),r=0,i=l.tweens.length;r<i;r++)l.tweens[r].run(n);return s.notifyWith(o,[l,n,t]),n<1&&i?t:(i||s.notifyWith(o,[l,1,0]),s.resolveWith(o,[l]),!1)},l=s.promise({elem:o,props:k.extend({},e),opts:k.extend(!0,{specialEasing:{},easing:k.easing._default},t),originalProperties:e,originalOptions:t,startTime:rt||ct(),duration:t.duration,tweens:[],createTween:function(e,t){var n=k.Tween(o,l.opts,e,t,l.opts.specialEasing[e]||l.opts.easing);return l.tweens.push(n),n},stop:function(e){var t=0,n=e?l.tweens.length:0;if(a)return this;for(a=!0;t<n;t++)l.tweens[t].run(1);return e?(s.notifyWith(o,[l,1,0]),s.resolveWith(o,[l,e])):s.rejectWith(o,[l,e]),this}}),c=l.props;for(!function(e,t){var n,r,i,o,a;for(n in e)if(i=t[r=V(n)],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=k.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete e[r],o)n in e||(e[n]=o[n],t[n]=i);else t[r]=i}(c,l.opts.specialEasing);r<i;r++)if(n=dt.prefilters[r].call(l,o,c,l.opts))return m(n.stop)&&(k._queueHooks(l.elem,l.opts.queue).stop=n.stop.bind(n)),n;return k.map(c,pt,l),m(l.opts.start)&&l.opts.start.call(o,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),k.fx.timer(k.extend(u,{elem:o,anim:l,queue:l.opts.queue})),l}k.Animation=k.extend(dt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return le(n.elem,e,ne.exec(t),n),n}]},tweener:function(e,t){m(e)?(t=e,e=["*"]):e=e.match(R);for(var n,r=0,i=e.length;r<i;r++)n=e[r],dt.tweeners[n]=dt.tweeners[n]||[],dt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,a,s,u,l,c,f="width"in t||"height"in t,p=this,d={},h=e.style,g=e.nodeType&&se(e),v=Q.get(e,"fxshow");for(r in n.queue||(null==(a=k._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,p.always(function(){p.always(function(){a.unqueued--,k.queue(e,"fx").length||a.empty.fire()})})),t)if(i=t[r],st.test(i)){if(delete t[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!v||void 0===v[r])continue;g=!0}d[r]=v&&v[r]||k.style(e,r)}if((u=!k.isEmptyObject(t))||!k.isEmptyObject(d))for(r in f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(l=v&&v.display)&&(l=Q.get(e,"display")),"none"===(c=k.css(e,"display"))&&(l?c=l:(fe([e],!0),l=e.style.display||l,c=k.css(e,"display"),fe([e]))),("inline"===c||"inline-block"===c&&null!=l)&&"none"===k.css(e,"float")&&(u||(p.done(function(){h.display=l}),null==l&&(c=h.display,l="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1,d)u||(v?"hidden"in v&&(g=v.hidden):v=Q.access(e,"fxshow",{display:l}),o&&(v.hidden=!g),g&&fe([e],!0),p.done(function(){for(r in g||fe([e]),Q.remove(e,"fxshow"),d)k.style(e,r,d[r])})),u=pt(g?v[r]:0,r,p),r in v||(v[r]=u.start,g&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?dt.prefilters.unshift(e):dt.prefilters.push(e)}}),k.speed=function(e,t,n){var r=e&&"object"==typeof e?k.extend({},e):{complete:n||!n&&t||m(e)&&e,duration:e,easing:n&&t||t&&!m(t)&&t};return k.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in k.fx.speeds?r.duration=k.fx.speeds[r.duration]:r.duration=k.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){m(r.old)&&r.old.call(this),r.queue&&k.dequeue(this,r.queue)},r},k.fn.extend({fadeTo:function(e,t,n,r){return this.filter(se).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(t,e,n,r){var i=k.isEmptyObject(t),o=k.speed(e,n,r),a=function(){var e=dt(this,k.extend({},t),o);(i||Q.get(this,"finish"))&&e.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(i,e,o){var a=function(e){var t=e.stop;delete e.stop,t(o)};return"string"!=typeof i&&(o=e,e=i,i=void 0),e&&!1!==i&&this.queue(i||"fx",[]),this.each(function(){var e=!0,t=null!=i&&i+"queueHooks",n=k.timers,r=Q.get(this);if(t)r[t]&&r[t].stop&&a(r[t]);else for(t in r)r[t]&&r[t].stop&&ut.test(t)&&a(r[t]);for(t=n.length;t--;)n[t].elem!==this||null!=i&&n[t].queue!==i||(n[t].anim.stop(o),e=!1,n.splice(t,1));!e&&o||k.dequeue(this,i)})},finish:function(a){return!1!==a&&(a=a||"fx"),this.each(function(){var e,t=Q.get(this),n=t[a+"queue"],r=t[a+"queueHooks"],i=k.timers,o=n?n.length:0;for(t.finish=!0,k.queue(this,a,[]),r&&r.stop&&r.stop.call(this,!0),e=i.length;e--;)i[e].elem===this&&i[e].queue===a&&(i[e].anim.stop(!0),i.splice(e,1));for(e=0;e<o;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),k.each(["toggle","show","hide"],function(e,r){var i=k.fn[r];k.fn[r]=function(e,t,n){return null==e||"boolean"==typeof e?i.apply(this,arguments):this.animate(ft(r,!0),e,t,n)}}),k.each({slideDown:ft("show"),slideUp:ft("hide"),slideToggle:ft("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,r){k.fn[e]=function(e,t,n){return this.animate(r,e,t,n)}}),k.timers=[],k.fx.tick=function(){var e,t=0,n=k.timers;for(rt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||k.fx.stop(),rt=void 0},k.fx.timer=function(e){k.timers.push(e),k.fx.start()},k.fx.interval=13,k.fx.start=function(){it||(it=!0,lt())},k.fx.stop=function(){it=null},k.fx.speeds={slow:600,fast:200,_default:400},k.fn.delay=function(r,e){return r=k.fx&&k.fx.speeds[r]||r,e=e||"fx",this.queue(e,function(e,t){var n=C.setTimeout(e,r);t.stop=function(){C.clearTimeout(n)}})},ot=E.createElement("input"),at=E.createElement("select").appendChild(E.createElement("option")),ot.type="checkbox",y.checkOn=""!==ot.value,y.optSelected=at.selected,(ot=E.createElement("input")).value="t",ot.type="radio",y.radioValue="t"===ot.value;var ht,gt=k.expr.attrHandle;k.fn.extend({attr:function(e,t){return _(this,k.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){k.removeAttr(this,e)})}}),k.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof e.getAttribute?k.prop(e,t,n):(1===o&&k.isXMLDoc(e)||(i=k.attrHooks[t.toLowerCase()]||(k.expr.match.bool.test(t)?ht:void 0)),void 0!==n?null===n?void k.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=k.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!y.radioValue&&"radio"===t&&A(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(R);if(i&&1===e.nodeType)while(n=i[r++])e.removeAttribute(n)}}),ht={set:function(e,t,n){return!1===t?k.removeAttr(e,n):e.setAttribute(n,n),n}},k.each(k.expr.match.bool.source.match(/\w+/g),function(e,t){var a=gt[t]||k.find.attr;gt[t]=function(e,t,n){var r,i,o=t.toLowerCase();return n||(i=gt[o],gt[o]=r,r=null!=a(e,t,n)?o:null,gt[o]=i),r}});var vt=/^(?:input|select|textarea|button)$/i,yt=/^(?:a|area)$/i;function mt(e){return(e.match(R)||[]).join(" ")}function xt(e){return e.getAttribute&&e.getAttribute("class")||""}function bt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(R)||[]}k.fn.extend({prop:function(e,t){return _(this,k.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[k.propFix[e]||e]})}}),k.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&k.isXMLDoc(e)||(t=k.propFix[t]||t,i=k.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=k.find.attr(e,"tabindex");return t?parseInt(t,10):vt.test(e.nodeName)||yt.test(e.nodeName)&&e.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),y.optSelected||(k.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),k.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){k.propFix[this.toLowerCase()]=this}),k.fn.extend({addClass:function(t){var e,n,r,i,o,a,s,u=0;if(m(t))return this.each(function(e){k(this).addClass(t.call(this,e,xt(this)))});if((e=bt(t)).length)while(n=this[u++])if(i=xt(n),r=1===n.nodeType&&" "+mt(i)+" "){a=0;while(o=e[a++])r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(s=mt(r))&&n.setAttribute("class",s)}return this},removeClass:function(t){var e,n,r,i,o,a,s,u=0;if(m(t))return this.each(function(e){k(this).removeClass(t.call(this,e,xt(this)))});if(!arguments.length)return this.attr("class","");if((e=bt(t)).length)while(n=this[u++])if(i=xt(n),r=1===n.nodeType&&" "+mt(i)+" "){a=0;while(o=e[a++])while(-1<r.indexOf(" "+o+" "))r=r.replace(" "+o+" "," ");i!==(s=mt(r))&&n.setAttribute("class",s)}return this},toggleClass:function(i,t){var o=typeof i,a="string"===o||Array.isArray(i);return"boolean"==typeof t&&a?t?this.addClass(i):this.removeClass(i):m(i)?this.each(function(e){k(this).toggleClass(i.call(this,e,xt(this),t),t)}):this.each(function(){var e,t,n,r;if(a){t=0,n=k(this),r=bt(i);while(e=r[t++])n.hasClass(e)?n.removeClass(e):n.addClass(e)}else void 0!==i&&"boolean"!==o||((e=xt(this))&&Q.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===i?"":Q.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;t=" "+e+" ";while(n=this[r++])if(1===n.nodeType&&-1<(" "+mt(xt(n))+" ").indexOf(t))return!0;return!1}});var wt=/\r/g;k.fn.extend({val:function(n){var r,e,i,t=this[0];return arguments.length?(i=m(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=i?n.call(this,e,k(this).val()):n)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=k.map(t,function(e){return null==e?"":e+""})),(r=k.valHooks[this.type]||k.valHooks[this.nodeName.toLowerCase()])&&"set"in r&&void 0!==r.set(this,t,"value")||(this.value=t))})):t?(r=k.valHooks[t.type]||k.valHooks[t.nodeName.toLowerCase()])&&"get"in r&&void 0!==(e=r.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(wt,""):null==e?"":e:void 0}}),k.extend({valHooks:{option:{get:function(e){var t=k.find.attr(e,"value");return null!=t?t:mt(k.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!A(n.parentNode,"optgroup"))){if(t=k(n).val(),a)return t;s.push(t)}return s},set:function(e,t){var n,r,i=e.options,o=k.makeArray(t),a=i.length;while(a--)((r=i[a]).selected=-1<k.inArray(k.valHooks.option.get(r),o))&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),k.each(["radio","checkbox"],function(){k.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<k.inArray(k(e).val(),t)}},y.checkOn||(k.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),y.focusin="onfocusin"in C;var Tt=/^(?:focusinfocus|focusoutblur)$/,Ct=function(e){e.stopPropagation()};k.extend(k.event,{trigger:function(e,t,n,r){var i,o,a,s,u,l,c,f,p=[n||E],d=v.call(e,"type")?e.type:e,h=v.call(e,"namespace")?e.namespace.split("."):[];if(o=f=a=n=n||E,3!==n.nodeType&&8!==n.nodeType&&!Tt.test(d+k.event.triggered)&&(-1<d.indexOf(".")&&(d=(h=d.split(".")).shift(),h.sort()),u=d.indexOf(":")<0&&"on"+d,(e=e[k.expando]?e:new k.Event(d,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=h.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:k.makeArray(t,[e]),c=k.event.special[d]||{},r||!c.trigger||!1!==c.trigger.apply(n,t))){if(!r&&!c.noBubble&&!x(n)){for(s=c.delegateType||d,Tt.test(s+d)||(o=o.parentNode);o;o=o.parentNode)p.push(o),a=o;a===(n.ownerDocument||E)&&p.push(a.defaultView||a.parentWindow||C)}i=0;while((o=p[i++])&&!e.isPropagationStopped())f=o,e.type=1<i?s:c.bindType||d,(l=(Q.get(o,"events")||{})[e.type]&&Q.get(o,"handle"))&&l.apply(o,t),(l=u&&o[u])&&l.apply&&G(o)&&(e.result=l.apply(o,t),!1===e.result&&e.preventDefault());return e.type=d,r||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(p.pop(),t)||!G(n)||u&&m(n[d])&&!x(n)&&((a=n[u])&&(n[u]=null),k.event.triggered=d,e.isPropagationStopped()&&f.addEventListener(d,Ct),n[d](),e.isPropagationStopped()&&f.removeEventListener(d,Ct),k.event.triggered=void 0,a&&(n[u]=a)),e.result}},simulate:function(e,t,n){var r=k.extend(new k.Event,n,{type:e,isSimulated:!0});k.event.trigger(r,null,t)}}),k.fn.extend({trigger:function(e,t){return this.each(function(){k.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return k.event.trigger(e,t,n,!0)}}),y.focusin||k.each({focus:"focusin",blur:"focusout"},function(n,r){var i=function(e){k.event.simulate(r,e.target,k.event.fix(e))};k.event.special[r]={setup:function(){var e=this.ownerDocument||this,t=Q.access(e,r);t||e.addEventListener(n,i,!0),Q.access(e,r,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this,t=Q.access(e,r)-1;t?Q.access(e,r,t):(e.removeEventListener(n,i,!0),Q.remove(e,r))}}});var Et=C.location,kt=Date.now(),St=/\?/;k.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new C.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||k.error("Invalid XML: "+e),t};var Nt=/\[\]$/,At=/\r?\n/g,Dt=/^(?:submit|button|image|reset|file)$/i,jt=/^(?:input|select|textarea|keygen)/i;function qt(n,e,r,i){var t;if(Array.isArray(e))k.each(e,function(e,t){r||Nt.test(n)?i(n,t):qt(n+"["+("object"==typeof t&&null!=t?e:"")+"]",t,r,i)});else if(r||"object"!==w(e))i(n,e);else for(t in e)qt(n+"["+t+"]",e[t],r,i)}k.param=function(e,t){var n,r=[],i=function(e,t){var n=m(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!k.isPlainObject(e))k.each(e,function(){i(this.name,this.value)});else for(n in e)qt(n,e[n],t,i);return r.join("&")},k.fn.extend({serialize:function(){return k.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=k.prop(this,"elements");return e?k.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!k(this).is(":disabled")&&jt.test(this.nodeName)&&!Dt.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var n=k(this).val();return null==n?null:Array.isArray(n)?k.map(n,function(e){return{name:t.name,value:e.replace(At,"\r\n")}}):{name:t.name,value:n.replace(At,"\r\n")}}).get()}});var Lt=/%20/g,Ht=/#.*$/,Ot=/([?&])_=[^&]*/,Pt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Rt=/^(?:GET|HEAD)$/,Mt=/^\/\//,It={},Wt={},$t="*/".concat("*"),Ft=E.createElement("a");function Bt(o){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,r=0,i=e.toLowerCase().match(R)||[];if(m(t))while(n=i[r++])"+"===n[0]?(n=n.slice(1)||"*",(o[n]=o[n]||[]).unshift(t)):(o[n]=o[n]||[]).push(t)}}function _t(t,i,o,a){var s={},u=t===Wt;function l(e){var r;return s[e]=!0,k.each(t[e]||[],function(e,t){var n=t(i,o,a);return"string"!=typeof n||u||s[n]?u?!(r=n):void 0:(i.dataTypes.unshift(n),l(n),!1)}),r}return l(i.dataTypes[0])||!s["*"]&&l("*")}function zt(e,t){var n,r,i=k.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&k.extend(!0,e,r),e}Ft.href=Et.href,k.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Et.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Et.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":$t,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":k.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?zt(zt(e,k.ajaxSettings),t):zt(k.ajaxSettings,e)},ajaxPrefilter:Bt(It),ajaxTransport:Bt(Wt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var c,f,p,n,d,r,h,g,i,o,v=k.ajaxSetup({},t),y=v.context||v,m=v.context&&(y.nodeType||y.jquery)?k(y):k.event,x=k.Deferred(),b=k.Callbacks("once memory"),w=v.statusCode||{},a={},s={},u="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(h){if(!n){n={};while(t=Pt.exec(p))n[t[1].toLowerCase()+" "]=(n[t[1].toLowerCase()+" "]||[]).concat(t[2])}t=n[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return h?p:null},setRequestHeader:function(e,t){return null==h&&(e=s[e.toLowerCase()]=s[e.toLowerCase()]||e,a[e]=t),this},overrideMimeType:function(e){return null==h&&(v.mimeType=e),this},statusCode:function(e){var t;if(e)if(h)T.always(e[T.status]);else for(t in e)w[t]=[w[t],e[t]];return this},abort:function(e){var t=e||u;return c&&c.abort(t),l(0,t),this}};if(x.promise(T),v.url=((e||v.url||Et.href)+"").replace(Mt,Et.protocol+"//"),v.type=t.method||t.type||v.method||v.type,v.dataTypes=(v.dataType||"*").toLowerCase().match(R)||[""],null==v.crossDomain){r=E.createElement("a");try{r.href=v.url,r.href=r.href,v.crossDomain=Ft.protocol+"//"+Ft.host!=r.protocol+"//"+r.host}catch(e){v.crossDomain=!0}}if(v.data&&v.processData&&"string"!=typeof v.data&&(v.data=k.param(v.data,v.traditional)),_t(It,v,t,T),h)return T;for(i in(g=k.event&&v.global)&&0==k.active++&&k.event.trigger("ajaxStart"),v.type=v.type.toUpperCase(),v.hasContent=!Rt.test(v.type),f=v.url.replace(Ht,""),v.hasContent?v.data&&v.processData&&0===(v.contentType||"").indexOf("application/x-www-form-urlencoded")&&(v.data=v.data.replace(Lt,"+")):(o=v.url.slice(f.length),v.data&&(v.processData||"string"==typeof v.data)&&(f+=(St.test(f)?"&":"?")+v.data,delete v.data),!1===v.cache&&(f=f.replace(Ot,"$1"),o=(St.test(f)?"&":"?")+"_="+kt+++o),v.url=f+o),v.ifModified&&(k.lastModified[f]&&T.setRequestHeader("If-Modified-Since",k.lastModified[f]),k.etag[f]&&T.setRequestHeader("If-None-Match",k.etag[f])),(v.data&&v.hasContent&&!1!==v.contentType||t.contentType)&&T.setRequestHeader("Content-Type",v.contentType),T.setRequestHeader("Accept",v.dataTypes[0]&&v.accepts[v.dataTypes[0]]?v.accepts[v.dataTypes[0]]+("*"!==v.dataTypes[0]?", "+$t+"; q=0.01":""):v.accepts["*"]),v.headers)T.setRequestHeader(i,v.headers[i]);if(v.beforeSend&&(!1===v.beforeSend.call(y,T,v)||h))return T.abort();if(u="abort",b.add(v.complete),T.done(v.success),T.fail(v.error),c=_t(Wt,v,t,T)){if(T.readyState=1,g&&m.trigger("ajaxSend",[T,v]),h)return T;v.async&&0<v.timeout&&(d=C.setTimeout(function(){T.abort("timeout")},v.timeout));try{h=!1,c.send(a,l)}catch(e){if(h)throw e;l(-1,e)}}else l(-1,"No Transport");function l(e,t,n,r){var i,o,a,s,u,l=t;h||(h=!0,d&&C.clearTimeout(d),c=void 0,p=r||"",T.readyState=0<e?4:0,i=200<=e&&e<300||304===e,n&&(s=function(e,t,n){var r,i,o,a,s=e.contents,u=e.dataTypes;while("*"===u[0])u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}(v,T,n)),s=function(e,t,n,r){var i,o,a,s,u,l={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)l[a.toLowerCase()]=e.converters[a];o=c.shift();while(o)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(a=l[u+" "+o]||l["* "+o]))for(i in l)if((s=i.split(" "))[1]===o&&(a=l[u+" "+s[0]]||l["* "+s[0]])){!0===a?a=l[i]:!0!==l[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&e["throws"])t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}(v,s,T,i),i?(v.ifModified&&((u=T.getResponseHeader("Last-Modified"))&&(k.lastModified[f]=u),(u=T.getResponseHeader("etag"))&&(k.etag[f]=u)),204===e||"HEAD"===v.type?l="nocontent":304===e?l="notmodified":(l=s.state,o=s.data,i=!(a=s.error))):(a=l,!e&&l||(l="error",e<0&&(e=0))),T.status=e,T.statusText=(t||l)+"",i?x.resolveWith(y,[o,l,T]):x.rejectWith(y,[T,l,a]),T.statusCode(w),w=void 0,g&&m.trigger(i?"ajaxSuccess":"ajaxError",[T,v,i?o:a]),b.fireWith(y,[T,l]),g&&(m.trigger("ajaxComplete",[T,v]),--k.active||k.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,n){return k.get(e,t,n,"json")},getScript:function(e,t){return k.get(e,void 0,t,"script")}}),k.each(["get","post"],function(e,i){k[i]=function(e,t,n,r){return m(t)&&(r=r||n,n=t,t=void 0),k.ajax(k.extend({url:e,type:i,dataType:r,data:t,success:n},k.isPlainObject(e)&&e))}}),k._evalUrl=function(e,t){return k.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){k.globalEval(e,t)}})},k.fn.extend({wrapAll:function(e){var t;return this[0]&&(m(e)&&(e=e.call(this[0])),t=k(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstElementChild)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return m(n)?this.each(function(e){k(this).wrapInner(n.call(this,e))}):this.each(function(){var e=k(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=m(t);return this.each(function(e){k(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){k(this).replaceWith(this.childNodes)}),this}}),k.expr.pseudos.hidden=function(e){return!k.expr.pseudos.visible(e)},k.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},k.ajaxSettings.xhr=function(){try{return new C.XMLHttpRequest}catch(e){}};var Ut={0:200,1223:204},Xt=k.ajaxSettings.xhr();y.cors=!!Xt&&"withCredentials"in Xt,y.ajax=Xt=!!Xt,k.ajaxTransport(function(i){var o,a;if(y.cors||Xt&&!i.crossDomain)return{send:function(e,t){var n,r=i.xhr();if(r.open(i.type,i.url,i.async,i.username,i.password),i.xhrFields)for(n in i.xhrFields)r[n]=i.xhrFields[n];for(n in i.mimeType&&r.overrideMimeType&&r.overrideMimeType(i.mimeType),i.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)r.setRequestHeader(n,e[n]);o=function(e){return function(){o&&(o=a=r.onload=r.onerror=r.onabort=r.ontimeout=r.onreadystatechange=null,"abort"===e?r.abort():"error"===e?"number"!=typeof r.status?t(0,"error"):t(r.status,r.statusText):t(Ut[r.status]||r.status,r.statusText,"text"!==(r.responseType||"text")||"string"!=typeof r.responseText?{binary:r.response}:{text:r.responseText},r.getAllResponseHeaders()))}},r.onload=o(),a=r.onerror=r.ontimeout=o("error"),void 0!==r.onabort?r.onabort=a:r.onreadystatechange=function(){4===r.readyState&&C.setTimeout(function(){o&&a()})},o=o("abort");try{r.send(i.hasContent&&i.data||null)}catch(e){if(o)throw e}},abort:function(){o&&o()}}}),k.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),k.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return k.globalEval(e),e}}}),k.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),k.ajaxTransport("script",function(n){var r,i;if(n.crossDomain||n.scriptAttrs)return{send:function(e,t){r=k("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",i=function(e){r.remove(),i=null,e&&t("error"===e.type?404:200,e.type)}),E.head.appendChild(r[0])},abort:function(){i&&i()}}});var Vt,Gt=[],Yt=/(=)\?(?=&|$)|\?\?/;k.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Gt.pop()||k.expando+"_"+kt++;return this[e]=!0,e}}),k.ajaxPrefilter("json jsonp",function(e,t,n){var r,i,o,a=!1!==e.jsonp&&(Yt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Yt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=m(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Yt,"$1"+r):!1!==e.jsonp&&(e.url+=(St.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return o||k.error(r+" was not called"),o[0]},e.dataTypes[0]="json",i=C[r],C[r]=function(){o=arguments},n.always(function(){void 0===i?k(C).removeProp(r):C[r]=i,e[r]&&(e.jsonpCallback=t.jsonpCallback,Gt.push(r)),o&&m(i)&&i(o[0]),o=i=void 0}),"script"}),y.createHTMLDocument=((Vt=E.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Vt.childNodes.length),k.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(y.createHTMLDocument?((r=(t=E.implementation.createHTMLDocument("")).createElement("base")).href=E.location.href,t.head.appendChild(r)):t=E),o=!n&&[],(i=D.exec(e))?[t.createElement(i[1])]:(i=we([e],t,o),o&&o.length&&k(o).remove(),k.merge([],i.childNodes)));var r,i,o},k.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(" ");return-1<s&&(r=mt(e.slice(s)),e=e.slice(0,s)),m(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),0<a.length&&k.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(r?k("<div>").append(k.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},k.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){k.fn[t]=function(e){return this.on(t,e)}}),k.expr.pseudos.animated=function(t){return k.grep(k.timers,function(e){return t===e.elem}).length},k.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,l=k.css(e,"position"),c=k(e),f={};"static"===l&&(e.style.position="relative"),s=c.offset(),o=k.css(e,"top"),u=k.css(e,"left"),("absolute"===l||"fixed"===l)&&-1<(o+u).indexOf("auto")?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),m(t)&&(t=t.call(e,n,k.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+i),"using"in t?t.using.call(e,f):c.css(f)}},k.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){k.offset.setOffset(this,t,e)});var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===k.css(r,"position"))t=r.getBoundingClientRect();else{t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;while(e&&(e===n.body||e===n.documentElement)&&"static"===k.css(e,"position"))e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=k(e).offset()).top+=k.css(e,"borderTopWidth",!0),i.left+=k.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-k.css(r,"marginTop",!0),left:t.left-i.left-k.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent;while(e&&"static"===k.css(e,"position"))e=e.offsetParent;return e||ie})}}),k.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,i){var o="pageYOffset"===i;k.fn[t]=function(e){return _(this,function(e,t,n){var r;if(x(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===n)return r?r[i]:e[t];r?r.scrollTo(o?r.pageXOffset:n,o?n:r.pageYOffset):e[t]=n},t,e,arguments.length)}}),k.each(["top","left"],function(e,n){k.cssHooks[n]=ze(y.pixelPosition,function(e,t){if(t)return t=_e(e,n),$e.test(t)?k(e).position()[n]+"px":t})}),k.each({Height:"height",Width:"width"},function(a,s){k.each({padding:"inner"+a,content:s,"":"outer"+a},function(r,o){k.fn[o]=function(e,t){var n=arguments.length&&(r||"boolean"!=typeof e),i=r||(!0===e||!0===t?"margin":"border");return _(this,function(e,t,n){var r;return x(e)?0===o.indexOf("outer")?e["inner"+a]:e.document.documentElement["client"+a]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+a],r["scroll"+a],e.body["offset"+a],r["offset"+a],r["client"+a])):void 0===n?k.css(e,t,i):k.style(e,t,n,i)},s,n?e:void 0,n)}})}),k.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){k.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}}),k.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),k.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),k.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),m(e))return r=s.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||k.guid++,i},k.holdReady=function(e){e?k.readyWait++:k.ready(!0)},k.isArray=Array.isArray,k.parseJSON=JSON.parse,k.nodeName=A,k.isFunction=m,k.isWindow=x,k.camelCase=V,k.type=w,k.now=Date.now,k.isNumeric=function(e){var t=k.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return k});var Qt=C.jQuery,Jt=C.$;return k.noConflict=function(e){return C.$===k&&(C.$=Jt),e&&C.jQuery===k&&(C.jQuery=Qt),k},e||(C.jQuery=C.$=k),k});
!function(t){"use strict";t.fn.fitVids=function(e){var i={customSelector:null,ignore:null};if(!document.getElementById("fit-vids-style")){var r=document.head||document.getElementsByTagName("head")[0],a=".fluid-width-video-wrapper{width:100%;position:relative;padding:0;}.fluid-width-video-wrapper iframe,.fluid-width-video-wrapper object,.fluid-width-video-wrapper embed {position:absolute;top:0;left:0;width:100%;height:100%;}",d=document.createElement("div");d.innerHTML='<p>x</p><style id="fit-vids-style">'+a+"</style>",r.appendChild(d.childNodes[1])}return e&&t.extend(i,e),this.each(function(){var e=['iframe[src*="player.vimeo.com"]','iframe[src*="youtube.com"]','iframe[src*="youtube-nocookie.com"]','iframe[src*="kickstarter.com"][src*="video.html"]',"object","embed"];i.customSelector&&e.push(i.customSelector);var r=".fitvidsignore";i.ignore&&(r=r+", "+i.ignore);var a=t(this).find(e.join(","));a=a.not("object object"),a=a.not(r),a.each(function(e){var i=t(this);if(!(i.parents(r).length>0||"embed"===this.tagName.toLowerCase()&&i.parent("object").length||i.parent(".fluid-width-video-wrapper").length)){i.css("height")||i.css("width")||!isNaN(i.attr("height"))&&!isNaN(i.attr("width"))||(i.attr("height",9),i.attr("width",16));var a="object"===this.tagName.toLowerCase()||i.attr("height")&&!isNaN(parseInt(i.attr("height"),10))?parseInt(i.attr("height"),10):i.height(),d=isNaN(parseInt(i.attr("width"),10))?i.width():parseInt(i.attr("width"),10),o=a/d;if(!i.attr("id")){var h="fitvid"+e;i.attr("id",h)}i.wrap('<div class="fluid-width-video-wrapper"></div>').parent(".fluid-width-video-wrapper").css("padding-top",100*o+"%"),i.removeAttr("height").removeAttr("width")}})})}}(window.jQuery||window.Zepto);
var initFeaturedVideoPlus;!function(t){"use strict";function a(){t(".has-post-video a>.featured-video-plus,.has-post-video a>.fvp-dynamic,.has-post-video a>.fvp-overlay,.has-post-video a>.wp-video,.has-post-video a>.wp-video-shortcode").unwrap(),t(".has-post-video .post-thumbnail>.post-thumbnail").removeClass("post-thumbnail"),t("a.post-thumbnail:empty").not(".fvp-dynamic, .fvp-overlay").remove()}function e(){fvpdata.fitvids&&t(".featured-video-plus.fvp-responsive").fitVids({customSelector:["iframe","object","embed"]})}function o(){if(fvpdata.width&&!fvpdata.fitvids){t(".fvp-local .wp-video").css({width:fvpdata.width,height:"auto"});var a=t(".fvp-local .wp-video .wp-video-shortcode");a.attr({width:fvpdata.width,height:fvpdata.width/a.attr("width")*a.attr("heigth")})}}function i(a){var e=t(a),o=e.children(".fvp-actionicon");return o.css({height:e.height(),width:e.width(),margin:e.css("margin")}),o}function d(a){var e=t(a.currentTarget).children("img"),o=i(a.currentTarget);o.toggleClass("play"),o.hasClass("play")?e.animate({opacity:fvpdata.opacity}):e.animate({opacity:1})}function n(o){o.preventDefault();var d=t(o.currentTarget),n=parseInt(d.attr("data-id"),10),r=i(o.currentTarget);r.addClass("load "+fvpdata.color),t.post(fvpdata.ajaxurl,{action:"fvp_get_embed",fvp_nonce:fvpdata.nonce,id:n},function(t){if(t.success){var o=d.parent();d.replaceWith(t.data),o.find(".wp-audio-shortcode, .wp-video-shortcode").mediaelementplayer(),e(),a()}r.removeClass("load "+fvpdata.color)})}function r(a){a.preventDefault();var e=t(a.currentTarget),i=parseInt(e.attr("data-id"),10);e.openDOMWindow({eventType:null,windowPadding:0,borderSize:0,windowBGColor:"transparent",overlayOpacity:100*fvpdata.opacity,width:"100%",height:"100%"}),s[i]?(t("#DOMWindow").html(s[i]),o(),t(window).trigger("scroll")):t.post(fvpdata.ajaxurl,{action:"fvp_get_embed",fvp_nonce:fvpdata.nonce,id:i},function(a){a.success&&(s[i]=a.data,t("#DOMWindow").html(a.data),o(),t(window).trigger("scroll"))})}function c(){var i=t(".featured-video-plus, .fvp-overlay, .fvp-dynamic");return!i.is(p)&&(p=i,a(),setTimeout(a,1e3),e(),o(),t(".fvp-overlay, .fvp-dynamic").off("mouseenter").on("mouseenter",d).off("mouseleave").on("mouseleave",d),t(".fvp-dynamic").off("click").on("click",n),void t(".fvp-overlay").off("click").on("click",r))}var p,s={},v=0;initFeaturedVideoPlus=function(){0===v?(c(),v=setTimeout(function(){},100)):(clearTimeout(v),v=setTimeout(c,100))},t(document).ready(function(){window.chrome&&t(".featured-video-plus iframe").each(function(){this.src=this.src}),[fvpdata.playicon,fvpdata.loadicon].forEach(function(a){t("body").append(t("<img/>",{src:a,alt:"preload image"}).hide())})})}(jQuery);
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = global || self, factory(global.THREE = {}));
}(this, function (exports) { 'use strict';
	if ( Number.EPSILON === undefined ) {
		Number.EPSILON = Math.pow( 2, - 52 );
	}
	if ( Number.isInteger === undefined ) {
		Number.isInteger = function ( value ) {
			return typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;
		};
	}
	if ( Math.sign === undefined ) {
		Math.sign = function ( x ) {
			return ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;
		};
	}
	if ( 'name' in Function.prototype === false ) {
		Object.defineProperty( Function.prototype, 'name', {
			get: function () {
				return this.toString().match( /^\s*function\s*([^\(\s]*)/ )[ 1 ];
			}
		} );
	}
	if ( Object.assign === undefined ) {
		( function () {
			Object.assign = function ( target ) {
				if ( target === undefined || target === null ) {
					throw new TypeError( 'Cannot convert undefined or null to object' );
				}
				var output = Object( target );
				for ( var index = 1; index < arguments.length; index ++ ) {
					var source = arguments[ index ];
					if ( source !== undefined && source !== null ) {
						for ( var nextKey in source ) {
							if ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {
								output[ nextKey ] = source[ nextKey ];
							}
						}
					}
				}
				return output;
			};
		} )();
	}
	/**
	 * https://github.com/mrdoob/eventdispatcher.js/
	 */
	function EventDispatcher() {}
	Object.assign( EventDispatcher.prototype, {
		addEventListener: function ( type, listener ) {
			if ( this._listeners === undefined ) this._listeners = {};
			var listeners = this._listeners;
			if ( listeners[ type ] === undefined ) {
				listeners[ type ] = [];
			}
			if ( listeners[ type ].indexOf( listener ) === - 1 ) {
				listeners[ type ].push( listener );
			}
		},
		hasEventListener: function ( type, listener ) {
			if ( this._listeners === undefined ) return false;
			var listeners = this._listeners;
			return listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;
		},
		removeEventListener: function ( type, listener ) {
			if ( this._listeners === undefined ) return;
			var listeners = this._listeners;
			var listenerArray = listeners[ type ];
			if ( listenerArray !== undefined ) {
				var index = listenerArray.indexOf( listener );
				if ( index !== - 1 ) {
					listenerArray.splice( index, 1 );
				}
			}
		},
		dispatchEvent: function ( event ) {
			if ( this._listeners === undefined ) return;
			var listeners = this._listeners;
			var listenerArray = listeners[ event.type ];
			if ( listenerArray !== undefined ) {
				event.target = this;
				var array = listenerArray.slice( 0 );
				for ( var i = 0, l = array.length; i < l; i ++ ) {
					array[ i ].call( this, event );
				}
			}
		}
	} );
	var REVISION = '107';
	var MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };
	var TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };
	var CullFaceNone = 0;
	var CullFaceBack = 1;
	var CullFaceFront = 2;
	var CullFaceFrontBack = 3;
	var FrontFaceDirectionCW = 0;
	var FrontFaceDirectionCCW = 1;
	var BasicShadowMap = 0;
	var PCFShadowMap = 1;
	var PCFSoftShadowMap = 2;
	var FrontSide = 0;
	var BackSide = 1;
	var DoubleSide = 2;
	var FlatShading = 1;
	var SmoothShading = 2;
	var NoColors = 0;
	var FaceColors = 1;
	var VertexColors = 2;
	var NoBlending = 0;
	var NormalBlending = 1;
	var AdditiveBlending = 2;
	var SubtractiveBlending = 3;
	var MultiplyBlending = 4;
	var CustomBlending = 5;
	var AddEquation = 100;
	var SubtractEquation = 101;
	var ReverseSubtractEquation = 102;
	var MinEquation = 103;
	var MaxEquation = 104;
	var ZeroFactor = 200;
	var OneFactor = 201;
	var SrcColorFactor = 202;
	var OneMinusSrcColorFactor = 203;
	var SrcAlphaFactor = 204;
	var OneMinusSrcAlphaFactor = 205;
	var DstAlphaFactor = 206;
	var OneMinusDstAlphaFactor = 207;
	var DstColorFactor = 208;
	var OneMinusDstColorFactor = 209;
	var SrcAlphaSaturateFactor = 210;
	var NeverDepth = 0;
	var AlwaysDepth = 1;
	var LessDepth = 2;
	var LessEqualDepth = 3;
	var EqualDepth = 4;
	var GreaterEqualDepth = 5;
	var GreaterDepth = 6;
	var NotEqualDepth = 7;
	var MultiplyOperation = 0;
	var MixOperation = 1;
	var AddOperation = 2;
	var NoToneMapping = 0;
	var LinearToneMapping = 1;
	var ReinhardToneMapping = 2;
	var Uncharted2ToneMapping = 3;
	var CineonToneMapping = 4;
	var ACESFilmicToneMapping = 5;
	var UVMapping = 300;
	var CubeReflectionMapping = 301;
	var CubeRefractionMapping = 302;
	var EquirectangularReflectionMapping = 303;
	var EquirectangularRefractionMapping = 304;
	var SphericalReflectionMapping = 305;
	var CubeUVReflectionMapping = 306;
	var CubeUVRefractionMapping = 307;
	var RepeatWrapping = 1000;
	var ClampToEdgeWrapping = 1001;
	var MirroredRepeatWrapping = 1002;
	var NearestFilter = 1003;
	var NearestMipmapNearestFilter = 1004;
	var NearestMipMapNearestFilter = 1004;
	var NearestMipmapLinearFilter = 1005;
	var NearestMipMapLinearFilter = 1005;
	var LinearFilter = 1006;
	var LinearMipmapNearestFilter = 1007;
	var LinearMipMapNearestFilter = 1007;
	var LinearMipmapLinearFilter = 1008;
	var LinearMipMapLinearFilter = 1008;
	var UnsignedByteType = 1009;
	var ByteType = 1010;
	var ShortType = 1011;
	var UnsignedShortType = 1012;
	var IntType = 1013;
	var UnsignedIntType = 1014;
	var FloatType = 1015;
	var HalfFloatType = 1016;
	var UnsignedShort4444Type = 1017;
	var UnsignedShort5551Type = 1018;
	var UnsignedShort565Type = 1019;
	var UnsignedInt248Type = 1020;
	var AlphaFormat = 1021;
	var RGBFormat = 1022;
	var RGBAFormat = 1023;
	var LuminanceFormat = 1024;
	var LuminanceAlphaFormat = 1025;
	var RGBEFormat = RGBAFormat;
	var DepthFormat = 1026;
	var DepthStencilFormat = 1027;
	var RedFormat = 1028;
	var RGB_S3TC_DXT1_Format = 33776;
	var RGBA_S3TC_DXT1_Format = 33777;
	var RGBA_S3TC_DXT3_Format = 33778;
	var RGBA_S3TC_DXT5_Format = 33779;
	var RGB_PVRTC_4BPPV1_Format = 35840;
	var RGB_PVRTC_2BPPV1_Format = 35841;
	var RGBA_PVRTC_4BPPV1_Format = 35842;
	var RGBA_PVRTC_2BPPV1_Format = 35843;
	var RGB_ETC1_Format = 36196;
	var RGBA_ASTC_4x4_Format = 37808;
	var RGBA_ASTC_5x4_Format = 37809;
	var RGBA_ASTC_5x5_Format = 37810;
	var RGBA_ASTC_6x5_Format = 37811;
	var RGBA_ASTC_6x6_Format = 37812;
	var RGBA_ASTC_8x5_Format = 37813;
	var RGBA_ASTC_8x6_Format = 37814;
	var RGBA_ASTC_8x8_Format = 37815;
	var RGBA_ASTC_10x5_Format = 37816;
	var RGBA_ASTC_10x6_Format = 37817;
	var RGBA_ASTC_10x8_Format = 37818;
	var RGBA_ASTC_10x10_Format = 37819;
	var RGBA_ASTC_12x10_Format = 37820;
	var RGBA_ASTC_12x12_Format = 37821;
	var LoopOnce = 2200;
	var LoopRepeat = 2201;
	var LoopPingPong = 2202;
	var InterpolateDiscrete = 2300;
	var InterpolateLinear = 2301;
	var InterpolateSmooth = 2302;
	var ZeroCurvatureEnding = 2400;
	var ZeroSlopeEnding = 2401;
	var WrapAroundEnding = 2402;
	var TrianglesDrawMode = 0;
	var TriangleStripDrawMode = 1;
	var TriangleFanDrawMode = 2;
	var LinearEncoding = 3000;
	var sRGBEncoding = 3001;
	var GammaEncoding = 3007;
	var RGBEEncoding = 3002;
	var LogLuvEncoding = 3003;
	var RGBM7Encoding = 3004;
	var RGBM16Encoding = 3005;
	var RGBDEncoding = 3006;
	var BasicDepthPacking = 3200;
	var RGBADepthPacking = 3201;
	var TangentSpaceNormalMap = 0;
	var ObjectSpaceNormalMap = 1;
	var ZeroStencilOp = 0;
	var KeepStencilOp = 7680;
	var ReplaceStencilOp = 7681;
	var IncrementStencilOp = 7682;
	var DecrementStencilOp = 7683;
	var IncrementWrapStencilOp = 34055;
	var DecrementWrapStencilOp = 34056;
	var InvertStencilOp = 5386;
	var NeverStencilFunc = 512;
	var LessStencilFunc = 513;
	var EqualStencilFunc = 514;
	var LessEqualStencilFunc = 515;
	var GreaterStencilFunc = 516;
	var NotEqualStencilFunc = 517;
	var GreaterEqualStencilFunc = 518;
	var AlwaysStencilFunc = 519;
	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */
	var _Math = {
		DEG2RAD: Math.PI / 180,
		RAD2DEG: 180 / Math.PI,
		generateUUID: ( function () {
			var lut = [];
			for ( var i = 0; i < 256; i ++ ) {
				lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );
			}
			return function generateUUID() {
				var d0 = Math.random() * 0xffffffff | 0;
				var d1 = Math.random() * 0xffffffff | 0;
				var d2 = Math.random() * 0xffffffff | 0;
				var d3 = Math.random() * 0xffffffff | 0;
				var uuid = lut[ d0 & 0xff ] + lut[ d0 >> 8 & 0xff ] + lut[ d0 >> 16 & 0xff ] + lut[ d0 >> 24 & 0xff ] + '-' +
					lut[ d1 & 0xff ] + lut[ d1 >> 8 & 0xff ] + '-' + lut[ d1 >> 16 & 0x0f | 0x40 ] + lut[ d1 >> 24 & 0xff ] + '-' +
					lut[ d2 & 0x3f | 0x80 ] + lut[ d2 >> 8 & 0xff ] + '-' + lut[ d2 >> 16 & 0xff ] + lut[ d2 >> 24 & 0xff ] +
					lut[ d3 & 0xff ] + lut[ d3 >> 8 & 0xff ] + lut[ d3 >> 16 & 0xff ] + lut[ d3 >> 24 & 0xff ];
				return uuid.toUpperCase();
			};
		} )(),
		clamp: function ( value, min, max ) {
			return Math.max( min, Math.min( max, value ) );
		},
		euclideanModulo: function ( n, m ) {
			return ( ( n % m ) + m ) % m;
		},
		mapLinear: function ( x, a1, a2, b1, b2 ) {
			return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );
		},
		lerp: function ( x, y, t ) {
			return ( 1 - t ) * x + t * y;
		},
		smoothstep: function ( x, min, max ) {
			if ( x <= min ) return 0;
			if ( x >= max ) return 1;
			x = ( x - min ) / ( max - min );
			return x * x * ( 3 - 2 * x );
		},
		smootherstep: function ( x, min, max ) {
			if ( x <= min ) return 0;
			if ( x >= max ) return 1;
			x = ( x - min ) / ( max - min );
			return x * x * x * ( x * ( x * 6 - 15 ) + 10 );
		},
		randInt: function ( low, high ) {
			return low + Math.floor( Math.random() * ( high - low + 1 ) );
		},
		randFloat: function ( low, high ) {
			return low + Math.random() * ( high - low );
		},
		randFloatSpread: function ( range ) {
			return range * ( 0.5 - Math.random() );
		},
		degToRad: function ( degrees ) {
			return degrees * _Math.DEG2RAD;
		},
		radToDeg: function ( radians ) {
			return radians * _Math.RAD2DEG;
		},
		isPowerOfTwo: function ( value ) {
			return ( value & ( value - 1 ) ) === 0 && value !== 0;
		},
		ceilPowerOfTwo: function ( value ) {
			return Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );
		},
		floorPowerOfTwo: function ( value ) {
			return Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );
		}
	};
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author philogb / http://blog.thejit.org/
	 * @author egraether / http://egraether.com/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */
	function Vector2( x, y ) {
		this.x = x || 0;
		this.y = y || 0;
	}
	Object.defineProperties( Vector2.prototype, {
		"width": {
			get: function () {
				return this.x;
			},
			set: function ( value ) {
				this.x = value;
			}
		},
		"height": {
			get: function () {
				return this.y;
			},
			set: function ( value ) {
				this.y = value;
			}
		}
	} );
	Object.assign( Vector2.prototype, {
		isVector2: true,
		set: function ( x, y ) {
			this.x = x;
			this.y = y;
			return this;
		},
		setScalar: function ( scalar ) {
			this.x = scalar;
			this.y = scalar;
			return this;
		},
		setX: function ( x ) {
			this.x = x;
			return this;
		},
		setY: function ( y ) {
			this.y = y;
			return this;
		},
		setComponent: function ( index, value ) {
			switch ( index ) {
				case 0: this.x = value; break;
				case 1: this.y = value; break;
				default: throw new Error( 'index is out of range: ' + index );
			}
			return this;
		},
		getComponent: function ( index ) {
			switch ( index ) {
				case 0: return this.x;
				case 1: return this.y;
				default: throw new Error( 'index is out of range: ' + index );
			}
		},
		clone: function () {
			return new this.constructor( this.x, this.y );
		},
		copy: function ( v ) {
			this.x = v.x;
			this.y = v.y;
			return this;
		},
		add: function ( v, w ) {
			if ( w !== undefined ) {
				console.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );
			}
			this.x += v.x;
			this.y += v.y;
			return this;
		},
		addScalar: function ( s ) {
			this.x += s;
			this.y += s;
			return this;
		},
		addVectors: function ( a, b ) {
			this.x = a.x + b.x;
			this.y = a.y + b.y;
			return this;
		},
		addScaledVector: function ( v, s ) {
			this.x += v.x * s;
			this.y += v.y * s;
			return this;
		},
		sub: function ( v, w ) {
			if ( w !== undefined ) {
				console.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );
			}
			this.x -= v.x;
			this.y -= v.y;
			return this;
		},
		subScalar: function ( s ) {
			this.x -= s;
			this.y -= s;
			return this;
		},
		subVectors: function ( a, b ) {
			this.x = a.x - b.x;
			this.y = a.y - b.y;
			return this;
		},
		multiply: function ( v ) {
			this.x *= v.x;
			this.y *= v.y;
			return this;
		},
		multiplyScalar: function ( scalar ) {
			this.x *= scalar;
			this.y *= scalar;
			return this;
		},
		divide: function ( v ) {
			this.x /= v.x;
			this.y /= v.y;
			return this;
		},
		divideScalar: function ( scalar ) {
			return this.multiplyScalar( 1 / scalar );
		},
		applyMatrix3: function ( m ) {
			var x = this.x, y = this.y;
			var e = m.elements;
			this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];
			this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];
			return this;
		},
		min: function ( v ) {
			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );
			return this;
		},
		max: function ( v ) {
			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );
			return this;
		},
		clamp: function ( min, max ) {
			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );
			return this;
		},
		clampScalar: function ( minVal, maxVal ) {
			this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
			this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
			return this;
		},
		clampLength: function ( min, max ) {
			var length = this.length();
			return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );
		},
		floor: function () {
			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );
			return this;
		},
		ceil: function () {
			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );
			return this;
		},
		round: function () {
			this.x = Math.round( this.x );
			this.y = Math.round( this.y );
			return this;
		},
		roundToZero: function () {
			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
			return this;
		},
		negate: function () {
			this.x = - this.x;
			this.y = - this.y;
			return this;
		},
		dot: function ( v ) {
			return this.x * v.x + this.y * v.y;
		},
		cross: function ( v ) {
			return this.x * v.y - this.y * v.x;
		},
		lengthSq: function () {
			return this.x * this.x + this.y * this.y;
		},
		length: function () {
			return Math.sqrt( this.x * this.x + this.y * this.y );
		},
		manhattanLength: function () {
			return Math.abs( this.x ) + Math.abs( this.y );
		},
		normalize: function () {
			return this.divideScalar( this.length() || 1 );
		},
		angle: function () {
			var angle = Math.atan2( this.y, this.x );
			if ( angle < 0 ) angle += 2 * Math.PI;
			return angle;
		},
		distanceTo: function ( v ) {
			return Math.sqrt( this.distanceToSquared( v ) );
		},
		distanceToSquared: function ( v ) {
			var dx = this.x - v.x, dy = this.y - v.y;
			return dx * dx + dy * dy;
		},
		manhattanDistanceTo: function ( v ) {
			return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );
		},
		setLength: function ( length ) {
			return this.normalize().multiplyScalar( length );
		},
		lerp: function ( v, alpha ) {
			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;
			return this;
		},
		lerpVectors: function ( v1, v2, alpha ) {
			return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );
		},
		equals: function ( v ) {
			return ( ( v.x === this.x ) && ( v.y === this.y ) );
		},
		fromArray: function ( array, offset ) {
			if ( offset === undefined ) offset = 0;
			this.x = array[ offset ];
			this.y = array[ offset + 1 ];
			return this;
		},
		toArray: function ( array, offset ) {
			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;
			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;
			return array;
		},
		fromBufferAttribute: function ( attribute, index, offset ) {
			if ( offset !== undefined ) {
				console.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );
			}
			this.x = attribute.getX( index );
			this.y = attribute.getY( index );
			return this;
		},
		rotateAround: function ( center, angle ) {
			var c = Math.cos( angle ), s = Math.sin( angle );
			var x = this.x - center.x;
			var y = this.y - center.y;
			this.x = x * c - y * s + center.x;
			this.y = x * s + y * c + center.y;
			return this;
		}
	} );
	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 */
	function Quaternion( x, y, z, w ) {
		this._x = x || 0;
		this._y = y || 0;
		this._z = z || 0;
		this._w = ( w !== undefined ) ? w : 1;
	}
	Object.assign( Quaternion, {
		slerp: function ( qa, qb, qm, t ) {
			return qm.copy( qa ).slerp( qb, t );
		},
		slerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {
			var x0 = src0[ srcOffset0 + 0 ],
				y0 = src0[ srcOffset0 + 1 ],
				z0 = src0[ srcOffset0 + 2 ],
				w0 = src0[ srcOffset0 + 3 ],
				x1 = src1[ srcOffset1 + 0 ],
				y1 = src1[ srcOffset1 + 1 ],
				z1 = src1[ srcOffset1 + 2 ],
				w1 = src1[ srcOffset1 + 3 ];
			if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {
				var s = 1 - t,
					cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,
					dir = ( cos >= 0 ? 1 : - 1 ),
					sqrSin = 1 - cos * cos;
				if ( sqrSin > Number.EPSILON ) {
					var sin = Math.sqrt( sqrSin ),
						len = Math.atan2( sin, cos * dir );
					s = Math.sin( s * len ) / sin;
					t = Math.sin( t * len ) / sin;
				}
				var tDir = t * dir;
				x0 = x0 * s + x1 * tDir;
				y0 = y0 * s + y1 * tDir;
				z0 = z0 * s + z1 * tDir;
				w0 = w0 * s + w1 * tDir;
				if ( s === 1 - t ) {
					var f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );
					x0 *= f;
					y0 *= f;
					z0 *= f;
					w0 *= f;
				}
			}
			dst[ dstOffset ] = x0;
			dst[ dstOffset + 1 ] = y0;
			dst[ dstOffset + 2 ] = z0;
			dst[ dstOffset + 3 ] = w0;
		}
	} );
	Object.defineProperties( Quaternion.prototype, {
		x: {
			get: function () {
				return this._x;
			},
			set: function ( value ) {
				this._x = value;
				this._onChangeCallback();
			}
		},
		y: {
			get: function () {
				return this._y;
			},
			set: function ( value ) {
				this._y = value;
				this._onChangeCallback();
			}
		},
		z: {
			get: function () {
				return this._z;
			},
			set: function ( value ) {
				this._z = value;
				this._onChangeCallback();
			}
		},
		w: {
			get: function () {
				return this._w;
			},
			set: function ( value ) {
				this._w = value;
				this._onChangeCallback();
			}
		}
	} );
	Object.assign( Quaternion.prototype, {
		isQuaternion: true,
		set: function ( x, y, z, w ) {
			this._x = x;
			this._y = y;
			this._z = z;
			this._w = w;
			this._onChangeCallback();
			return this;
		},
		clone: function () {
			return new this.constructor( this._x, this._y, this._z, this._w );
		},
		copy: function ( quaternion ) {
			this._x = quaternion.x;
			this._y = quaternion.y;
			this._z = quaternion.z;
			this._w = quaternion.w;
			this._onChangeCallback();
			return this;
		},
		setFromEuler: function ( euler, update ) {
			if ( ! ( euler && euler.isEuler ) ) {
				throw new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );
			}
			var x = euler._x, y = euler._y, z = euler._z, order = euler.order;
			var cos = Math.cos;
			var sin = Math.sin;
			var c1 = cos( x / 2 );
			var c2 = cos( y / 2 );
			var c3 = cos( z / 2 );
			var s1 = sin( x / 2 );
			var s2 = sin( y / 2 );
			var s3 = sin( z / 2 );
			if ( order === 'XYZ' ) {
				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;
			} else if ( order === 'YXZ' ) {
				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;
			} else if ( order === 'ZXY' ) {
				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;
			} else if ( order === 'ZYX' ) {
				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;
			} else if ( order === 'YZX' ) {
				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;
			} else if ( order === 'XZY' ) {
				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;
			}
			if ( update !== false ) this._onChangeCallback();
			return this;
		},
		setFromAxisAngle: function ( axis, angle ) {
			var halfAngle = angle / 2, s = Math.sin( halfAngle );
			this._x = axis.x * s;
			this._y = axis.y * s;
			this._z = axis.z * s;
			this._w = Math.cos( halfAngle );
			this._onChangeCallback();
			return this;
		},
		setFromRotationMatrix: function ( m ) {
			var te = m.elements,
				m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
				m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
				m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],
				trace = m11 + m22 + m33,
				s;
			if ( trace > 0 ) {
				s = 0.5 / Math.sqrt( trace + 1.0 );
				this._w = 0.25 / s;
				this._x = ( m32 - m23 ) * s;
				this._y = ( m13 - m31 ) * s;
				this._z = ( m21 - m12 ) * s;
			} else if ( m11 > m22 && m11 > m33 ) {
				s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );
				this._w = ( m32 - m23 ) / s;
				this._x = 0.25 * s;
				this._y = ( m12 + m21 ) / s;
				this._z = ( m13 + m31 ) / s;
			} else if ( m22 > m33 ) {
				s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );
				this._w = ( m13 - m31 ) / s;
				this._x = ( m12 + m21 ) / s;
				this._y = 0.25 * s;
				this._z = ( m23 + m32 ) / s;
			} else {
				s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );
				this._w = ( m21 - m12 ) / s;
				this._x = ( m13 + m31 ) / s;
				this._y = ( m23 + m32 ) / s;
				this._z = 0.25 * s;
			}
			this._onChangeCallback();
			return this;
		},
		setFromUnitVectors: function ( vFrom, vTo ) {
			var EPS = 0.000001;
			var r = vFrom.dot( vTo ) + 1;
			if ( r < EPS ) {
				r = 0;
				if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {
					this._x = - vFrom.y;
					this._y = vFrom.x;
					this._z = 0;
					this._w = r;
				} else {
					this._x = 0;
					this._y = - vFrom.z;
					this._z = vFrom.y;
					this._w = r;
				}
			} else {
				this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
				this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
				this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
				this._w = r;
			}
			return this.normalize();
		},
		angleTo: function ( q ) {
			return 2 * Math.acos( Math.abs( _Math.clamp( this.dot( q ), - 1, 1 ) ) );
		},
		rotateTowards: function ( q, step ) {
			var angle = this.angleTo( q );
			if ( angle === 0 ) return this;
			var t = Math.min( 1, step / angle );
			this.slerp( q, t );
			return this;
		},
		inverse: function () {
			return this.conjugate();
		},
		conjugate: function () {
			this._x *= - 1;
			this._y *= - 1;
			this._z *= - 1;
			this._onChangeCallback();
			return this;
		},
		dot: function ( v ) {
			return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
		},
		lengthSq: function () {
			return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
		},
		length: function () {
			return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );
		},
		normalize: function () {
			var l = this.length();
			if ( l === 0 ) {
				this._x = 0;
				this._y = 0;
				this._z = 0;
				this._w = 1;
			} else {
				l = 1 / l;
				this._x = this._x * l;
				this._y = this._y * l;
				this._z = this._z * l;
				this._w = this._w * l;
			}
			this._onChangeCallback();
			return this;
		},
		multiply: function ( q, p ) {
			if ( p !== undefined ) {
				console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
				return this.multiplyQuaternions( q, p );
			}
			return this.multiplyQuaternions( this, q );
		},
		premultiply: function ( q ) {
			return this.multiplyQuaternions( q, this );
		},
		multiplyQuaternions: function ( a, b ) {
			var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
			var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;
			this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
			this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
			this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
			this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
			this._onChangeCallback();
			return this;
		},
		slerp: function ( qb, t ) {
			if ( t === 0 ) return this;
			if ( t === 1 ) return this.copy( qb );
			var x = this._x, y = this._y, z = this._z, w = this._w;
			var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;
			if ( cosHalfTheta < 0 ) {
				this._w = - qb._w;
				this._x = - qb._x;
				this._y = - qb._y;
				this._z = - qb._z;
				cosHalfTheta = - cosHalfTheta;
			} else {
				this.copy( qb );
			}
			if ( cosHalfTheta >= 1.0 ) {
				this._w = w;
				this._x = x;
				this._y = y;
				this._z = z;
				return this;
			}
			var sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;
			if ( sqrSinHalfTheta <= Number.EPSILON ) {
				var s = 1 - t;
				this._w = s * w + t * this._w;
				this._x = s * x + t * this._x;
				this._y = s * y + t * this._y;
				this._z = s * z + t * this._z;
				this.normalize();
				this._onChangeCallback();
				return this;
			}
			var sinHalfTheta = Math.sqrt( sqrSinHalfTheta );
			var halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
			var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
				ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;
			this._w = ( w * ratioA + this._w * ratioB );
			this._x = ( x * ratioA + this._x * ratioB );
			this._y = ( y * ratioA + this._y * ratioB );
			this._z = ( z * ratioA + this._z * ratioB );
			this._onChangeCallback();
			return this;
		},
		equals: function ( quaternion ) {
			return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );
		},
		fromArray: function ( array, offset ) {
			if ( offset === undefined ) offset = 0;
			this._x = array[ offset ];
			this._y = array[ offset + 1 ];
			this._z = array[ offset + 2 ];
			this._w = array[ offset + 3 ];
			this._onChangeCallback();
			return this;
		},
		toArray: function ( array, offset ) {
			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;
			array[ offset ] = this._x;
			array[ offset + 1 ] = this._y;
			array[ offset + 2 ] = this._z;
			array[ offset + 3 ] = this._w;
			return array;
		},
		_onChange: function ( callback ) {
			this._onChangeCallback = callback;
			return this;
		},
		_onChangeCallback: function () {}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author kile / http://kile.stravaganza.org/
	 * @author philogb / http://blog.thejit.org/
	 * @author mikael emtinger / http://gomo.se/
	 * @author egraether / http://egraether.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */
	function Vector3( x, y, z ) {
		this.x = x || 0;
		this.y = y || 0;
		this.z = z || 0;
	}
	Object.assign( Vector3.prototype, {
		isVector3: true,
		set: function ( x, y, z ) {
			this.x = x;
			this.y = y;
			this.z = z;
			return this;
		},
		setScalar: function ( scalar ) {
			this.x = scalar;
			this.y = scalar;
			this.z = scalar;
			return this;
		},
		setX: function ( x ) {
			this.x = x;
			return this;
		},
		setY: function ( y ) {
			this.y = y;
			return this;
		},
		setZ: function ( z ) {
			this.z = z;
			return this;
		},
		setComponent: function ( index, value ) {
			switch ( index ) {
				case 0: this.x = value; break;
				case 1: this.y = value; break;
				case 2: this.z = value; break;
				default: throw new Error( 'index is out of range: ' + index );
			}
			return this;
		},
		getComponent: function ( index ) {
			switch ( index ) {
				case 0: return this.x;
				case 1: return this.y;
				case 2: return this.z;
				default: throw new Error( 'index is out of range: ' + index );
			}
		},
		clone: function () {
			return new this.constructor( this.x, this.y, this.z );
		},
		copy: function ( v ) {
			this.x = v.x;
			this.y = v.y;
			this.z = v.z;
			return this;
		},
		add: function ( v, w ) {
			if ( w !== undefined ) {
				console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );
			}
			this.x += v.x;
			this.y += v.y;
			this.z += v.z;
			return this;
		},
		addScalar: function ( s ) {
			this.x += s;
			this.y += s;
			this.z += s;
			return this;
		},
		addVectors: function ( a, b ) {
			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;
			return this;
		},
		addScaledVector: function ( v, s ) {
			this.x += v.x * s;
			this.y += v.y * s;
			this.z += v.z * s;
			return this;
		},
		sub: function ( v, w ) {
			if ( w !== undefined ) {
				console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );
			}
			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;
			return this;
		},
		subScalar: function ( s ) {
			this.x -= s;
			this.y -= s;
			this.z -= s;
			return this;
		},
		subVectors: function ( a, b ) {
			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;
			return this;
		},
		multiply: function ( v, w ) {
			if ( w !== undefined ) {
				console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
				return this.multiplyVectors( v, w );
			}
			this.x *= v.x;
			this.y *= v.y;
			this.z *= v.z;
			return this;
		},
		multiplyScalar: function ( scalar ) {
			this.x *= scalar;
			this.y *= scalar;
			this.z *= scalar;
			return this;
		},
		multiplyVectors: function ( a, b ) {
			this.x = a.x * b.x;
			this.y = a.y * b.y;
			this.z = a.z * b.z;
			return this;
		},
		applyEuler: function () {
			var quaternion = new Quaternion();
			return function applyEuler( euler ) {
				if ( ! ( euler && euler.isEuler ) ) {
					console.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );
				}
				return this.applyQuaternion( quaternion.setFromEuler( euler ) );
			};
		}(),
		applyAxisAngle: function () {
			var quaternion = new Quaternion();
			return function applyAxisAngle( axis, angle ) {
				return this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );
			};
		}(),
		applyMatrix3: function ( m ) {
			var x = this.x, y = this.y, z = this.z;
			var e = m.elements;
			this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
			this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
			this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;
			return this;
		},
		applyMatrix4: function ( m ) {
			var x = this.x, y = this.y, z = this.z;
			var e = m.elements;
			var w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );
			this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;
			this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;
			this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;
			return this;
		},
		applyQuaternion: function ( q ) {
			var x = this.x, y = this.y, z = this.z;
			var qx = q.x, qy = q.y, qz = q.z, qw = q.w;
			var ix = qw * x + qy * z - qz * y;
			var iy = qw * y + qz * x - qx * z;
			var iz = qw * z + qx * y - qy * x;
			var iw = - qx * x - qy * y - qz * z;
			this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
			this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
			this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;
			return this;
		},
		project: function ( camera ) {
			return this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );
		},
		unproject: function ( camera ) {
			return this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );
		},
		transformDirection: function ( m ) {
			var x = this.x, y = this.y, z = this.z;
			var e = m.elements;
			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;
			return this.normalize();
		},
		divide: function ( v ) {
			this.x /= v.x;
			this.y /= v.y;
			this.z /= v.z;
			return this;
		},
		divideScalar: function ( scalar ) {
			return this.multiplyScalar( 1 / scalar );
		},
		min: function ( v ) {
			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );
			this.z = Math.min( this.z, v.z );
			return this;
		},
		max: function ( v ) {
			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );
			this.z = Math.max( this.z, v.z );
			return this;
		},
		clamp: function ( min, max ) {
			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );
			this.z = Math.max( min.z, Math.min( max.z, this.z ) );
			return this;
		},
		clampScalar: function ( minVal, maxVal ) {
			this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
			this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
			this.z = Math.max( minVal, Math.min( maxVal, this.z ) );
			return this;
		},
		clampLength: function ( min, max ) {
			var length = this.length();
			return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );
		},
		floor: function () {
			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );
			this.z = Math.floor( this.z );
			return this;
		},
		ceil: function () {
			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );
			this.z = Math.ceil( this.z );
			return this;
		},
		round: function () {
			this.x = Math.round( this.x );
			this.y = Math.round( this.y );
			this.z = Math.round( this.z );
			return this;
		},
		roundToZero: function () {
			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
			this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
			return this;
		},
		negate: function () {
			this.x = - this.x;
			this.y = - this.y;
			this.z = - this.z;
			return this;
		},
		dot: function ( v ) {
			return this.x * v.x + this.y * v.y + this.z * v.z;
		},
		lengthSq: function () {
			return this.x * this.x + this.y * this.y + this.z * this.z;
		},
		length: function () {
			return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );
		},
		manhattanLength: function () {
			return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );
		},
		normalize: function () {
			return this.divideScalar( this.length() || 1 );
		},
		setLength: function ( length ) {
			return this.normalize().multiplyScalar( length );
		},
		lerp: function ( v, alpha ) {
			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;
			this.z += ( v.z - this.z ) * alpha;
			return this;
		},
		lerpVectors: function ( v1, v2, alpha ) {
			return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );
		},
		cross: function ( v, w ) {
			if ( w !== undefined ) {
				console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
				return this.crossVectors( v, w );
			}
			return this.crossVectors( this, v );
		},
		crossVectors: function ( a, b ) {
			var ax = a.x, ay = a.y, az = a.z;
			var bx = b.x, by = b.y, bz = b.z;
			this.x = ay * bz - az * by;
			this.y = az * bx - ax * bz;
			this.z = ax * by - ay * bx;
			return this;
		},
		projectOnVector: function ( vector ) {
			var scalar = vector.dot( this ) / vector.lengthSq();
			return this.copy( vector ).multiplyScalar( scalar );
		},
		projectOnPlane: function () {
			var v1 = new Vector3();
			return function projectOnPlane( planeNormal ) {
				v1.copy( this ).projectOnVector( planeNormal );
				return this.sub( v1 );
			};
		}(),
		reflect: function () {
			var v1 = new Vector3();
			return function reflect( normal ) {
				return this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );
			};
		}(),
		angleTo: function ( v ) {
			var theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );
			return Math.acos( _Math.clamp( theta, - 1, 1 ) );
		},
		distanceTo: function ( v ) {
			return Math.sqrt( this.distanceToSquared( v ) );
		},
		distanceToSquared: function ( v ) {
			var dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;
			return dx * dx + dy * dy + dz * dz;
		},
		manhattanDistanceTo: function ( v ) {
			return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );
		},
		setFromSpherical: function ( s ) {
			return this.setFromSphericalCoords( s.radius, s.phi, s.theta );
		},
		setFromSphericalCoords: function ( radius, phi, theta ) {
			var sinPhiRadius = Math.sin( phi ) * radius;
			this.x = sinPhiRadius * Math.sin( theta );
			this.y = Math.cos( phi ) * radius;
			this.z = sinPhiRadius * Math.cos( theta );
			return this;
		},
		setFromCylindrical: function ( c ) {
			return this.setFromCylindricalCoords( c.radius, c.theta, c.y );
		},
		setFromCylindricalCoords: function ( radius, theta, y ) {
			this.x = radius * Math.sin( theta );
			this.y = y;
			this.z = radius * Math.cos( theta );
			return this;
		},
		setFromMatrixPosition: function ( m ) {
			var e = m.elements;
			this.x = e[ 12 ];
			this.y = e[ 13 ];
			this.z = e[ 14 ];
			return this;
		},
		setFromMatrixScale: function ( m ) {
			var sx = this.setFromMatrixColumn( m, 0 ).length();
			var sy = this.setFromMatrixColumn( m, 1 ).length();
			var sz = this.setFromMatrixColumn( m, 2 ).length();
			this.x = sx;
			this.y = sy;
			this.z = sz;
			return this;
		},
		setFromMatrixColumn: function ( m, index ) {
			return this.fromArray( m.elements, index * 4 );
		},
		equals: function ( v ) {
			return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );
		},
		fromArray: function ( array, offset ) {
			if ( offset === undefined ) offset = 0;
			this.x = array[ offset ];
			this.y = array[ offset + 1 ];
			this.z = array[ offset + 2 ];
			return this;
		},
		toArray: function ( array, offset ) {
			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;
			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;
			array[ offset + 2 ] = this.z;
			return array;
		},
		fromBufferAttribute: function ( attribute, index, offset ) {
			if ( offset !== undefined ) {
				console.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );
			}
			this.x = attribute.getX( index );
			this.y = attribute.getY( index );
			this.z = attribute.getZ( index );
			return this;
		}
	} );
	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 * @author tschw
	 */
	var _vector;
	function Matrix3() {
		this.elements = [
			1, 0, 0,
			0, 1, 0,
			0, 0, 1
		];
		if ( arguments.length > 0 ) {
			console.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );
		}
	}
	Object.assign( Matrix3.prototype, {
		isMatrix3: true,
		set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {
			var te = this.elements;
			te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
			te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
			te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;
			return this;
		},
		identity: function () {
			this.set(
				1, 0, 0,
				0, 1, 0,
				0, 0, 1
			);
			return this;
		},
		clone: function () {
			return new this.constructor().fromArray( this.elements );
		},
		copy: function ( m ) {
			var te = this.elements;
			var me = m.elements;
			te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];
			te[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];
			te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];
			return this;
		},
		setFromMatrix4: function ( m ) {
			var me = m.elements;
			this.set(
				me[ 0 ], me[ 4 ], me[ 8 ],
				me[ 1 ], me[ 5 ], me[ 9 ],
				me[ 2 ], me[ 6 ], me[ 10 ]
			);
			return this;
		},
		applyToBufferAttribute: function ( attribute ) {
			if ( _vector === undefined ) _vector = new Vector3();
			for ( var i = 0, l = attribute.count; i < l; i ++ ) {
				_vector.x = attribute.getX( i );
				_vector.y = attribute.getY( i );
				_vector.z = attribute.getZ( i );
				_vector.applyMatrix3( this );
				attribute.setXYZ( i, _vector.x, _vector.y, _vector.z );
			}
			return attribute;
		},
		multiply: function ( m ) {
			return this.multiplyMatrices( this, m );
		},
		premultiply: function ( m ) {
			return this.multiplyMatrices( m, this );
		},
		multiplyMatrices: function ( a, b ) {
			var ae = a.elements;
			var be = b.elements;
			var te = this.elements;
			var a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];
			var a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];
			var a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];
			var b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];
			var b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];
			var b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];
			te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;
			te[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;
			te[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;
			te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;
			te[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;
			te[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;
			te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;
			te[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;
			te[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;
			return this;
		},
		multiplyScalar: function ( s ) {
			var te = this.elements;
			te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
			te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
			te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;
			return this;
		},
		determinant: function () {
			var te = this.elements;
			var a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
				d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
				g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];
			return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;
		},
		getInverse: function ( matrix, throwOnDegenerate ) {
			if ( matrix && matrix.isMatrix4 ) {
				console.error( "THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument." );
			}
			var me = matrix.elements,
				te = this.elements,
				n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],
				n12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],
				n13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],
				t11 = n33 * n22 - n32 * n23,
				t12 = n32 * n13 - n33 * n12,
				t13 = n23 * n12 - n22 * n13,
				det = n11 * t11 + n21 * t12 + n31 * t13;
			if ( det === 0 ) {
				var msg = "THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";
				if ( throwOnDegenerate === true ) {
					throw new Error( msg );
				} else {
					console.warn( msg );
				}
				return this.identity();
			}
			var detInv = 1 / det;
			te[ 0 ] = t11 * detInv;
			te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
			te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;
			te[ 3 ] = t12 * detInv;
			te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
			te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;
			te[ 6 ] = t13 * detInv;
			te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
			te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;
			return this;
		},
		transpose: function () {
			var tmp, m = this.elements;
			tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
			tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
			tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;
			return this;
		},
		getNormalMatrix: function ( matrix4 ) {
			return this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();
		},
		transposeIntoArray: function ( r ) {
			var m = this.elements;
			r[ 0 ] = m[ 0 ];
			r[ 1 ] = m[ 3 ];
			r[ 2 ] = m[ 6 ];
			r[ 3 ] = m[ 1 ];
			r[ 4 ] = m[ 4 ];
			r[ 5 ] = m[ 7 ];
			r[ 6 ] = m[ 2 ];
			r[ 7 ] = m[ 5 ];
			r[ 8 ] = m[ 8 ];
			return this;
		},
		setUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {
			var c = Math.cos( rotation );
			var s = Math.sin( rotation );
			this.set(
				sx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,
				- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,
				0, 0, 1
			);
		},
		scale: function ( sx, sy ) {
			var te = this.elements;
			te[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;
			te[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;
			return this;
		},
		rotate: function ( theta ) {
			var c = Math.cos( theta );
			var s = Math.sin( theta );
			var te = this.elements;
			var a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];
			var a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];
			te[ 0 ] = c * a11 + s * a21;
			te[ 3 ] = c * a12 + s * a22;
			te[ 6 ] = c * a13 + s * a23;
			te[ 1 ] = - s * a11 + c * a21;
			te[ 4 ] = - s * a12 + c * a22;
			te[ 7 ] = - s * a13 + c * a23;
			return this;
		},
		translate: function ( tx, ty ) {
			var te = this.elements;
			te[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];
			te[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];
			return this;
		},
		equals: function ( matrix ) {
			var te = this.elements;
			var me = matrix.elements;
			for ( var i = 0; i < 9; i ++ ) {
				if ( te[ i ] !== me[ i ] ) return false;
			}
			return true;
		},
		fromArray: function ( array, offset ) {
			if ( offset === undefined ) offset = 0;
			for ( var i = 0; i < 9; i ++ ) {
				this.elements[ i ] = array[ i + offset ];
			}
			return this;
		},
		toArray: function ( array, offset ) {
			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;
			var te = this.elements;
			array[ offset ] = te[ 0 ];
			array[ offset + 1 ] = te[ 1 ];
			array[ offset + 2 ] = te[ 2 ];
			array[ offset + 3 ] = te[ 3 ];
			array[ offset + 4 ] = te[ 4 ];
			array[ offset + 5 ] = te[ 5 ];
			array[ offset + 6 ] = te[ 6 ];
			array[ offset + 7 ] = te[ 7 ];
			array[ offset + 8 ] = te[ 8 ];
			return array;
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author szimek / https://github.com/szimek/
	 */
	var _canvas;
	var ImageUtils = {
		getDataURL: function ( image ) {
			var canvas;
			if ( typeof HTMLCanvasElement == 'undefined' ) {
				return image.src;
			} else if ( image instanceof HTMLCanvasElement ) {
				canvas = image;
			} else {
				if ( _canvas === undefined ) _canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
				_canvas.width = image.width;
				_canvas.height = image.height;
				var context = _canvas.getContext( '2d' );
				if ( image instanceof ImageData ) {
					context.putImageData( image, 0, 0 );
				} else {
					context.drawImage( image, 0, 0, image.width, image.height );
				}
				canvas = _canvas;
			}
			if ( canvas.width > 2048 || canvas.height > 2048 ) {
				return canvas.toDataURL( 'image/jpeg', 0.6 );
			} else {
				return canvas.toDataURL( 'image/png' );
			}
		}
	};
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author szimek / https://github.com/szimek/
	 */
	var textureId = 0;
	function Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {
		Object.defineProperty( this, 'id', { value: textureId ++ } );
		this.uuid = _Math.generateUUID();
		this.name = '';
		this.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;
		this.mipmaps = [];
		this.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;
		this.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;
		this.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;
		this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
		this.minFilter = minFilter !== undefined ? minFilter : LinearMipmapLinearFilter;
		this.anisotropy = anisotropy !== undefined ? anisotropy : 1;
		this.format = format !== undefined ? format : RGBAFormat;
		this.type = type !== undefined ? type : UnsignedByteType;
		this.offset = new Vector2( 0, 0 );
		this.repeat = new Vector2( 1, 1 );
		this.center = new Vector2( 0, 0 );
		this.rotation = 0;
		this.matrixAutoUpdate = true;
		this.matrix = new Matrix3();
		this.generateMipmaps = true;
		this.premultiplyAlpha = false;
		this.flipY = true;
		this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)
		this.encoding = encoding !== undefined ? encoding : LinearEncoding;
		this.version = 0;
		this.onUpdate = null;
	}
	Texture.DEFAULT_IMAGE = undefined;
	Texture.DEFAULT_MAPPING = UVMapping;
	Texture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {
		constructor: Texture,
		isTexture: true,
		updateMatrix: function () {
			this.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );
		},
		clone: function () {
			return new this.constructor().copy( this );
		},
		copy: function ( source ) {
			this.name = source.name;
			this.image = source.image;
			this.mipmaps = source.mipmaps.slice( 0 );
			this.mapping = source.mapping;
			this.wrapS = source.wrapS;
			this.wrapT = source.wrapT;
			this.magFilter = source.magFilter;
			this.minFilter = source.minFilter;
			this.anisotropy = source.anisotropy;
			this.format = source.format;
			this.type = source.type;
			this.offset.copy( source.offset );
			this.repeat.copy( source.repeat );
			this.center.copy( source.center );
			this.rotation = source.rotation;
			this.matrixAutoUpdate = source.matrixAutoUpdate;
			this.matrix.copy( source.matrix );
			this.generateMipmaps = source.generateMipmaps;
			this.premultiplyAlpha = source.premultiplyAlpha;
			this.flipY = source.flipY;
			this.unpackAlignment = source.unpackAlignment;
			this.encoding = source.encoding;
			return this;
		},
		toJSON: function ( meta ) {
			var isRootObject = ( meta === undefined || typeof meta === 'string' );
			if ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {
				return meta.textures[ this.uuid ];
			}
			var output = {
				metadata: {
					version: 4.5,
					type: 'Texture',
					generator: 'Texture.toJSON'
				},
				uuid: this.uuid,
				name: this.name,
				mapping: this.mapping,
				repeat: [ this.repeat.x, this.repeat.y ],
				offset: [ this.offset.x, this.offset.y ],
				center: [ this.center.x, this.center.y ],
				rotation: this.rotation,
				wrap: [ this.wrapS, this.wrapT ],
				format: this.format,
				type: this.type,
				encoding: this.encoding,
				minFilter: this.minFilter,
				magFilter: this.magFilter,
				anisotropy: this.anisotropy,
				flipY: this.flipY,
				premultiplyAlpha: this.premultiplyAlpha,
				unpackAlignment: this.unpackAlignment
			};
			if ( this.image !== undefined ) {
				var image = this.image;
				if ( image.uuid === undefined ) {
					image.uuid = _Math.generateUUID(); // UGH
				}
				if ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {
					var url;
					if ( Array.isArray( image ) ) {
						url = [];
						for ( var i = 0, l = image.length; i < l; i ++ ) {
							url.push( ImageUtils.getDataURL( image[ i ] ) );
						}
					} else {
						url = ImageUtils.getDataURL( image );
					}
					meta.images[ image.uuid ] = {
						uuid: image.uuid,
						url: url
					};
				}
				output.image = image.uuid;
			}
			if ( ! isRootObject ) {
				meta.textures[ this.uuid ] = output;
			}
			return output;
		},
		dispose: function () {
			this.dispatchEvent( { type: 'dispose' } );
		},
		transformUv: function ( uv ) {
			if ( this.mapping !== UVMapping ) return uv;
			uv.applyMatrix3( this.matrix );
			if ( uv.x < 0 || uv.x > 1 ) {
				switch ( this.wrapS ) {
					case RepeatWrapping:
						uv.x = uv.x - Math.floor( uv.x );
						break;
					case ClampToEdgeWrapping:
						uv.x = uv.x < 0 ? 0 : 1;
						break;
					case MirroredRepeatWrapping:
						if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {
							uv.x = Math.ceil( uv.x ) - uv.x;
						} else {
							uv.x = uv.x - Math.floor( uv.x );
						}
						break;
				}
			}
			if ( uv.y < 0 || uv.y > 1 ) {
				switch ( this.wrapT ) {
					case RepeatWrapping:
						uv.y = uv.y - Math.floor( uv.y );
						break;
					case ClampToEdgeWrapping:
						uv.y = uv.y < 0 ? 0 : 1;
						break;
					case MirroredRepeatWrapping:
						if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {
							uv.y = Math.ceil( uv.y ) - uv.y;
						} else {
							uv.y = uv.y - Math.floor( uv.y );
						}
						break;
				}
			}
			if ( this.flipY ) {
				uv.y = 1 - uv.y;
			}
			return uv;
		}
	} );
	Object.defineProperty( Texture.prototype, "needsUpdate", {
		set: function ( value ) {
			if ( value === true ) this.version ++;
		}
	} );
	/**
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author philogb / http://blog.thejit.org/
	 * @author mikael emtinger / http://gomo.se/
	 * @author egraether / http://egraether.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */
	function Vector4( x, y, z, w ) {
		this.x = x || 0;
		this.y = y || 0;
		this.z = z || 0;
		this.w = ( w !== undefined ) ? w : 1;
	}
	Object.defineProperties( Vector4.prototype, {
		"width": {
			get: function () {
				return this.z;
			},
			set: function ( value ) {
				this.z = value;
			}
		},
		"height": {
			get: function () {
				return this.w;
			},
			set: function ( value ) {
				this.w = value;
			}
		}
	} );
	Object.assign( Vector4.prototype, {
		isVector4: true,
		set: function ( x, y, z, w ) {
			this.x = x;
			this.y = y;
			this.z = z;
			this.w = w;
			return this;
		},
		setScalar: function ( scalar ) {
			this.x = scalar;
			this.y = scalar;
			this.z = scalar;
			this.w = scalar;
			return this;
		},
		setX: function ( x ) {
			this.x = x;
			return this;
		},
		setY: function ( y ) {
			this.y = y;
			return this;
		},
		setZ: function ( z ) {
			this.z = z;
			return this;
		},
		setW: function ( w ) {
			this.w = w;
			return this;
		},
		setComponent: function ( index, value ) {
			switch ( index ) {
				case 0: this.x = value; break;
				case 1: this.y = value; break;
				case 2: this.z = value; break;
				case 3: this.w = value; break;
				default: throw new Error( 'index is out of range: ' + index );
			}
			return this;
		},
		getComponent: function ( index ) {
			switch ( index ) {
				case 0: return this.x;
				case 1: return this.y;
				case 2: return this.z;
				case 3: return this.w;
				default: throw new Error( 'index is out of range: ' + index );
			}
		},
		clone: function () {
			return new this.constructor( this.x, this.y, this.z, this.w );
		},
		copy: function ( v ) {
			this.x = v.x;
			this.y = v.y;
			this.z = v.z;
			this.w = ( v.w !== undefined ) ? v.w : 1;
			return this;
		},
		add: function ( v, w ) {
			if ( w !== undefined ) {
				console.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );
			}
			this.x += v.x;
			this.y += v.y;
			this.z += v.z;
			this.w += v.w;
			return this;
		},
		addScalar: function ( s ) {
			this.x += s;
			this.y += s;
			this.z += s;
			this.w += s;
			return this;
		},
		addVectors: function ( a, b ) {
			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;
			this.w = a.w + b.w;
			return this;
		},
		addScaledVector: function ( v, s ) {
			this.x += v.x * s;
			this.y += v.y * s;
			this.z += v.z * s;
			this.w += v.w * s;
			return this;
		},
		sub: function ( v, w ) {
			if ( w !== undefined ) {
				console.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );
			}
			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;
			this.w -= v.w;
			return this;
		},
		subScalar: function ( s ) {
			this.x -= s;
			this.y -= s;
			this.z -= s;
			this.w -= s;
			return this;
		},
		subVectors: function ( a, b ) {
			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;
			this.w = a.w - b.w;
			return this;
		},
		multiplyScalar: function ( scalar ) {
			this.x *= scalar;
			this.y *= scalar;
			this.z *= scalar;
			this.w *= scalar;
			return this;
		},
		applyMatrix4: function ( m ) {
			var x = this.x, y = this.y, z = this.z, w = this.w;
			var e = m.elements;
			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
			this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;
			return this;
		},
		divideScalar: function ( scalar ) {
			return this.multiplyScalar( 1 / scalar );
		},
		setAxisAngleFromQuaternion: function ( q ) {
			this.w = 2 * Math.acos( q.w );
			var s = Math.sqrt( 1 - q.w * q.w );
			if ( s < 0.0001 ) {
				this.x = 1;
				this.y = 0;
				this.z = 0;
			} else {
				this.x = q.x / s;
				this.y = q.y / s;
				this.z = q.z / s;
			}
			return this;
		},
		setAxisAngleFromRotationMatrix: function ( m ) {
			var angle, x, y, z,		// variables for result
				epsilon = 0.01,		// margin to allow for rounding errors
				epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees
				te = m.elements,
				m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
				m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
				m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];
			if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
			     ( Math.abs( m13 - m31 ) < epsilon ) &&
			     ( Math.abs( m23 - m32 ) < epsilon ) ) {
				if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
				     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
				     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
				     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {
					this.set( 1, 0, 0, 0 );
					return this; // zero angle, arbitrary axis
				}
				angle = Math.PI;
				var xx = ( m11 + 1 ) / 2;
				var yy = ( m22 + 1 ) / 2;
				var zz = ( m33 + 1 ) / 2;
				var xy = ( m12 + m21 ) / 4;
				var xz = ( m13 + m31 ) / 4;
				var yz = ( m23 + m32 ) / 4;
				if ( ( xx > yy ) && ( xx > zz ) ) {
					if ( xx < epsilon ) {
						x = 0;
						y = 0.707106781;
						z = 0.707106781;
					} else {
						x = Math.sqrt( xx );
						y = xy / x;
						z = xz / x;
					}
				} else if ( yy > zz ) {
					if ( yy < epsilon ) {
						x = 0.707106781;
						y = 0;
						z = 0.707106781;
					} else {
						y = Math.sqrt( yy );
						x = xy / y;
						z = yz / y;
					}
				} else {
					if ( zz < epsilon ) {
						x = 0.707106781;
						y = 0.707106781;
						z = 0;
					} else {
						z = Math.sqrt( zz );
						x = xz / z;
						y = yz / z;
					}
				}
				this.set( x, y, z, angle );
				return this; // return 180 deg rotation
			}
			var s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
			                   ( m13 - m31 ) * ( m13 - m31 ) +
			                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize
			if ( Math.abs( s ) < 0.001 ) s = 1;
			this.x = ( m32 - m23 ) / s;
			this.y = ( m13 - m31 ) / s;
			this.z = ( m21 - m12 ) / s;
			this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );
			return this;
		},
		min: function ( v ) {
			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );
			this.z = Math.min( this.z, v.z );
			this.w = Math.min( this.w, v.w );
			return this;
		},
		max: function ( v ) {
			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );
			this.z = Math.max( this.z, v.z );
			this.w = Math.max( this.w, v.w );
			return this;
		},
		clamp: function ( min, max ) {
			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );
			this.z = Math.max( min.z, Math.min( max.z, this.z ) );
			this.w = Math.max( min.w, Math.min( max.w, this.w ) );
			return this;
		},
		clampScalar: function ( minVal, maxVal ) {
			this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
			this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
			this.z = Math.max( minVal, Math.min( maxVal, this.z ) );
			this.w = Math.max( minVal, Math.min( maxVal, this.w ) );
			return this;
		},
		clampLength: function ( min, max ) {
			var length = this.length();
			return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );
		},
		floor: function () {
			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );
			this.z = Math.floor( this.z );
			this.w = Math.floor( this.w );
			return this;
		},
		ceil: function () {
			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );
			this.z = Math.ceil( this.z );
			this.w = Math.ceil( this.w );
			return this;
		},
		round: function () {
			this.x = Math.round( this.x );
			this.y = Math.round( this.y );
			this.z = Math.round( this.z );
			this.w = Math.round( this.w );
			return this;
		},
		roundToZero: function () {
			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
			this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
			this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );
			return this;
		},
		negate: function () {
			this.x = - this.x;
			this.y = - this.y;
			this.z = - this.z;
			this.w = - this.w;
			return this;
		},
		dot: function ( v ) {
			return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
		},
		lengthSq: function () {
			return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
		},
		length: function () {
			return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );
		},
		manhattanLength: function () {
			return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );
		},
		normalize: function () {
			return this.divideScalar( this.length() || 1 );
		},
		setLength: function ( length ) {
			return this.normalize().multiplyScalar( length );
		},
		lerp: function ( v, alpha ) {
			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;
			this.z += ( v.z - this.z ) * alpha;
			this.w += ( v.w - this.w ) * alpha;
			return this;
		},
		lerpVectors: function ( v1, v2, alpha ) {
			return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );
		},
		equals: function ( v ) {
			return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );
		},
		fromArray: function ( array, offset ) {
			if ( offset === undefined ) offset = 0;
			this.x = array[ offset ];
			this.y = array[ offset + 1 ];
			this.z = array[ offset + 2 ];
			this.w = array[ offset + 3 ];
			return this;
		},
		toArray: function ( array, offset ) {
			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;
			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;
			array[ offset + 2 ] = this.z;
			array[ offset + 3 ] = this.w;
			return array;
		},
		fromBufferAttribute: function ( attribute, index, offset ) {
			if ( offset !== undefined ) {
				console.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );
			}
			this.x = attribute.getX( index );
			this.y = attribute.getY( index );
			this.z = attribute.getZ( index );
			this.w = attribute.getW( index );
			return this;
		}
	} );
	/**
	 * @author szimek / https://github.com/szimek/
	 * @author alteredq / http://alteredqualia.com/
	 * @author Marius Kintel / https://github.com/kintel
	 */
	/*
	 In options, we can specify:
	 * Texture parameters for an auto-generated target texture
	 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
	*/
	function WebGLRenderTarget( width, height, options ) {
		this.width = width;
		this.height = height;
		this.scissor = new Vector4( 0, 0, width, height );
		this.scissorTest = false;
		this.viewport = new Vector4( 0, 0, width, height );
		options = options || {};
		this.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );
		this.texture.image = {};
		this.texture.image.width = width;
		this.texture.image.height = height;
		this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
		this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;
		this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
		this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;
		this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;
	}
	WebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {
		constructor: WebGLRenderTarget,
		isWebGLRenderTarget: true,
		setSize: function ( width, height ) {
			if ( this.width !== width || this.height !== height ) {
				this.width = width;
				this.height = height;
				this.texture.image.width = width;
				this.texture.image.height = height;
				this.dispose();
			}
			this.viewport.set( 0, 0, width, height );
			this.scissor.set( 0, 0, width, height );
		},
		clone: function () {
			return new this.constructor().copy( this );
		},
		copy: function ( source ) {
			this.width = source.width;
			this.height = source.height;
			this.viewport.copy( source.viewport );
			this.texture = source.texture.clone();
			this.depthBuffer = source.depthBuffer;
			this.stencilBuffer = source.stencilBuffer;
			this.depthTexture = source.depthTexture;
			return this;
		},
		dispose: function () {
			this.dispatchEvent( { type: 'dispose' } );
		}
	} );
	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 * @author Matt DesLauriers / @mattdesl
	 */
	function WebGLMultisampleRenderTarget( width, height, options ) {
		WebGLRenderTarget.call( this, width, height, options );
		this.samples = 4;
	}
	WebGLMultisampleRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {
		constructor: WebGLMultisampleRenderTarget,
		isWebGLMultisampleRenderTarget: true,
		copy: function ( source ) {
			WebGLRenderTarget.prototype.copy.call( this, source );
			this.samples = source.samples;
			return this;
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author philogb / http://blog.thejit.org/
	 * @author jordi_ros / http://plattsoft.com
	 * @author D1plo1d / http://github.com/D1plo1d
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author timknip / http://www.floorplanner.com/
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 */
	function Matrix4() {
		this.elements = [
			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1
		];
		if ( arguments.length > 0 ) {
			console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );
		}
	}
	Object.assign( Matrix4.prototype, {
		isMatrix4: true,
		set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {
			var te = this.elements;
			te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
			te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
			te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
			te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;
			return this;
		},
		identity: function () {
			this.set(
				1, 0, 0, 0,
				0, 1, 0, 0,
				0, 0, 1, 0,
				0, 0, 0, 1
			);
			return this;
		},
		clone: function () {
			return new Matrix4().fromArray( this.elements );
		},
		copy: function ( m ) {
			var te = this.elements;
			var me = m.elements;
			te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];
			te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];
			te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];
			te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];
			return this;
		},
		copyPosition: function ( m ) {
			var te = this.elements, me = m.elements;
			te[ 12 ] = me[ 12 ];
			te[ 13 ] = me[ 13 ];
			te[ 14 ] = me[ 14 ];
			return this;
		},
		extractBasis: function ( xAxis, yAxis, zAxis ) {
			xAxis.setFromMatrixColumn( this, 0 );
			yAxis.setFromMatrixColumn( this, 1 );
			zAxis.setFromMatrixColumn( this, 2 );
			return this;
		},
		makeBasis: function ( xAxis, yAxis, zAxis ) {
			this.set(
				xAxis.x, yAxis.x, zAxis.x, 0,
				xAxis.y, yAxis.y, zAxis.y, 0,
				xAxis.z, yAxis.z, zAxis.z, 0,
				0, 0, 0, 1
			);
			return this;
		},
		extractRotation: function () {
			var v1 = new Vector3();
			return function extractRotation( m ) {
				var te = this.elements;
				var me = m.elements;
				var scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();
				var scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();
				var scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();
				te[ 0 ] = me[ 0 ] * scaleX;
				te[ 1 ] = me[ 1 ] * scaleX;
				te[ 2 ] = me[ 2 ] * scaleX;
				te[ 3 ] = 0;
				te[ 4 ] = me[ 4 ] * scaleY;
				te[ 5 ] = me[ 5 ] * scaleY;
				te[ 6 ] = me[ 6 ] * scaleY;
				te[ 7 ] = 0;
				te[ 8 ] = me[ 8 ] * scaleZ;
				te[ 9 ] = me[ 9 ] * scaleZ;
				te[ 10 ] = me[ 10 ] * scaleZ;
				te[ 11 ] = 0;
				te[ 12 ] = 0;
				te[ 13 ] = 0;
				te[ 14 ] = 0;
				te[ 15 ] = 1;
				return this;
			};
		}(),
		makeRotationFromEuler: function ( euler ) {
			if ( ! ( euler && euler.isEuler ) ) {
				console.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );
			}
			var te = this.elements;
			var x = euler.x, y = euler.y, z = euler.z;
			var a = Math.cos( x ), b = Math.sin( x );
			var c = Math.cos( y ), d = Math.sin( y );
			var e = Math.cos( z ), f = Math.sin( z );
			if ( euler.order === 'XYZ' ) {
				var ae = a * e, af = a * f, be = b * e, bf = b * f;
				te[ 0 ] = c * e;
				te[ 4 ] = - c * f;
				te[ 8 ] = d;
				te[ 1 ] = af + be * d;
				te[ 5 ] = ae - bf * d;
				te[ 9 ] = - b * c;
				te[ 2 ] = bf - ae * d;
				te[ 6 ] = be + af * d;
				te[ 10 ] = a * c;
			} else if ( euler.order === 'YXZ' ) {
				var ce = c * e, cf = c * f, de = d * e, df = d * f;
				te[ 0 ] = ce + df * b;
				te[ 4 ] = de * b - cf;
				te[ 8 ] = a * d;
				te[ 1 ] = a * f;
				te[ 5 ] = a * e;
				te[ 9 ] = - b;
				te[ 2 ] = cf * b - de;
				te[ 6 ] = df + ce * b;
				te[ 10 ] = a * c;
			} else if ( euler.order === 'ZXY' ) {
				var ce = c * e, cf = c * f, de = d * e, df = d * f;
				te[ 0 ] = ce - df * b;
				te[ 4 ] = - a * f;
				te[ 8 ] = de + cf * b;
				te[ 1 ] = cf + de * b;
				te[ 5 ] = a * e;
				te[ 9 ] = df - ce * b;
				te[ 2 ] = - a * d;
				te[ 6 ] = b;
				te[ 10 ] = a * c;
			} else if ( euler.order === 'ZYX' ) {
				var ae = a * e, af = a * f, be = b * e, bf = b * f;
				te[ 0 ] = c * e;
				te[ 4 ] = be * d - af;
				te[ 8 ] = ae * d + bf;
				te[ 1 ] = c * f;
				te[ 5 ] = bf * d + ae;
				te[ 9 ] = af * d - be;
				te[ 2 ] = - d;
				te[ 6 ] = b * c;
				te[ 10 ] = a * c;
			} else if ( euler.order === 'YZX' ) {
				var ac = a * c, ad = a * d, bc = b * c, bd = b * d;
				te[ 0 ] = c * e;
				te[ 4 ] = bd - ac * f;
				te[ 8 ] = bc * f + ad;
				te[ 1 ] = f;
				te[ 5 ] = a * e;
				te[ 9 ] = - b * e;
				te[ 2 ] = - d * e;
				te[ 6 ] = ad * f + bc;
				te[ 10 ] = ac - bd * f;
			} else if ( euler.order === 'XZY' ) {
				var ac = a * c, ad = a * d, bc = b * c, bd = b * d;
				te[ 0 ] = c * e;
				te[ 4 ] = - f;
				te[ 8 ] = d * e;
				te[ 1 ] = ac * f + bd;
				te[ 5 ] = a * e;
				te[ 9 ] = ad * f - bc;
				te[ 2 ] = bc * f - ad;
				te[ 6 ] = b * e;
				te[ 10 ] = bd * f + ac;
			}
			te[ 3 ] = 0;
			te[ 7 ] = 0;
			te[ 11 ] = 0;
			te[ 12 ] = 0;
			te[ 13 ] = 0;
			te[ 14 ] = 0;
			te[ 15 ] = 1;
			return this;
		},
		makeRotationFromQuaternion: function () {
			var zero = new Vector3( 0, 0, 0 );
			var one = new Vector3( 1, 1, 1 );
			return function makeRotationFromQuaternion( q ) {
				return this.compose( zero, q, one );
			};
		}(),
		lookAt: function () {
			var x = new Vector3();
			var y = new Vector3();
			var z = new Vector3();
			return function lookAt( eye, target, up ) {
				var te = this.elements;
				z.subVectors( eye, target );
				if ( z.lengthSq() === 0 ) {
					z.z = 1;
				}
				z.normalize();
				x.crossVectors( up, z );
				if ( x.lengthSq() === 0 ) {
					if ( Math.abs( up.z ) === 1 ) {
						z.x += 0.0001;
					} else {
						z.z += 0.0001;
					}
					z.normalize();
					x.crossVectors( up, z );
				}
				x.normalize();
				y.crossVectors( z, x );
				te[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;
				te[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;
				te[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;
				return this;
			};
		}(),
		multiply: function ( m, n ) {
			if ( n !== undefined ) {
				console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
				return this.multiplyMatrices( m, n );
			}
			return this.multiplyMatrices( this, m );
		},
		premultiply: function ( m ) {
			return this.multiplyMatrices( m, this );
		},
		multiplyMatrices: function ( a, b ) {
			var ae = a.elements;
			var be = b.elements;
			var te = this.elements;
			var a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
			var a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
			var a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
			var a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];
			var b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
			var b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
			var b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
			var b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];
			te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
			te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
			te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
			te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
			te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
			te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
			te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
			te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
			te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
			te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
			te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
			te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
			te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
			te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
			te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
			te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
			return this;
		},
		multiplyScalar: function ( s ) {
			var te = this.elements;
			te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
			te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
			te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
			te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;
			return this;
		},
		applyToBufferAttribute: function () {
			var v1 = new Vector3();
			return function applyToBufferAttribute( attribute ) {
				for ( var i = 0, l = attribute.count; i < l; i ++ ) {
					v1.x = attribute.getX( i );
					v1.y = attribute.getY( i );
					v1.z = attribute.getZ( i );
					v1.applyMatrix4( this );
					attribute.setXYZ( i, v1.x, v1.y, v1.z );
				}
				return attribute;
			};
		}(),
		determinant: function () {
			var te = this.elements;
			var n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
			var n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
			var n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
			var n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];
			return (
				n41 * (
					+ n14 * n23 * n32
					 - n13 * n24 * n32
					 - n14 * n22 * n33
					 + n12 * n24 * n33
					 + n13 * n22 * n34
					 - n12 * n23 * n34
				) +
				n42 * (
					+ n11 * n23 * n34
					 - n11 * n24 * n33
					 + n14 * n21 * n33
					 - n13 * n21 * n34
					 + n13 * n24 * n31
					 - n14 * n23 * n31
				) +
				n43 * (
					+ n11 * n24 * n32
					 - n11 * n22 * n34
					 - n14 * n21 * n32
					 + n12 * n21 * n34
					 + n14 * n22 * n31
					 - n12 * n24 * n31
				) +
				n44 * (
					- n13 * n22 * n31
					 - n11 * n23 * n32
					 + n11 * n22 * n33
					 + n13 * n21 * n32
					 - n12 * n21 * n33
					 + n12 * n23 * n31
				)
			);
		},
		transpose: function () {
			var te = this.elements;
			var tmp;
			tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
			tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
			tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;
			tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
			tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
			tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;
			return this;
		},
		setPosition: function ( x, y, z ) {
			var te = this.elements;
			if ( x.isVector3 ) {
				te[ 12 ] = x.x;
				te[ 13 ] = x.y;
				te[ 14 ] = x.z;
			} else {
				te[ 12 ] = x;
				te[ 13 ] = y;
				te[ 14 ] = z;
			}
			return this;
		},
		getInverse: function ( m, throwOnDegenerate ) {
			var te = this.elements,
				me = m.elements,
				n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],
				n12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],
				n13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],
				n14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],
				t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
				t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
				t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
				t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
			var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
			if ( det === 0 ) {
				var msg = "THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";
				if ( throwOnDegenerate === true ) {
					throw new Error( msg );
				} else {
					console.warn( msg );
				}
				return this.identity();
			}
			var detInv = 1 / det;
			te[ 0 ] = t11 * detInv;
			te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
			te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
			te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;
			te[ 4 ] = t12 * detInv;
			te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
			te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
			te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;
			te[ 8 ] = t13 * detInv;
			te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
			te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
			te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;
			te[ 12 ] = t14 * detInv;
			te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
			te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
			te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;
			return this;
		},
		scale: function ( v ) {
			var te = this.elements;
			var x = v.x, y = v.y, z = v.z;
			te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
			te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
			te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
			te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;
			return this;
		},
		getMaxScaleOnAxis: function () {
			var te = this.elements;
			var scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
			var scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
			var scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];
			return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );
		},
		makeTranslation: function ( x, y, z ) {
			this.set(
				1, 0, 0, x,
				0, 1, 0, y,
				0, 0, 1, z,
				0, 0, 0, 1
			);
			return this;
		},
		makeRotationX: function ( theta ) {
			var c = Math.cos( theta ), s = Math.sin( theta );
			this.set(
				1, 0, 0, 0,
				0, c, - s, 0,
				0, s, c, 0,
				0, 0, 0, 1
			);
			return this;
		},
		makeRotationY: function ( theta ) {
			var c = Math.cos( theta ), s = Math.sin( theta );
			this.set(
				 c, 0, s, 0,
				 0, 1, 0, 0,
				- s, 0, c, 0,
				 0, 0, 0, 1
			);
			return this;
		},
		makeRotationZ: function ( theta ) {
			var c = Math.cos( theta ), s = Math.sin( theta );
			this.set(
				c, - s, 0, 0,
				s, c, 0, 0,
				0, 0, 1, 0,
				0, 0, 0, 1
			);
			return this;
		},
		makeRotationAxis: function ( axis, angle ) {
			var c = Math.cos( angle );
			var s = Math.sin( angle );
			var t = 1 - c;
			var x = axis.x, y = axis.y, z = axis.z;
			var tx = t * x, ty = t * y;
			this.set(
				tx * x + c, tx * y - s * z, tx * z + s * y, 0,
				tx * y + s * z, ty * y + c, ty * z - s * x, 0,
				tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
				0, 0, 0, 1
			);
			 return this;
		},
		makeScale: function ( x, y, z ) {
			this.set(
				x, 0, 0, 0,
				0, y, 0, 0,
				0, 0, z, 0,
				0, 0, 0, 1
			);
			return this;
		},
		makeShear: function ( x, y, z ) {
			this.set(
				1, y, z, 0,
				x, 1, z, 0,
				x, y, 1, 0,
				0, 0, 0, 1
			);
			return this;
		},
		compose: function ( position, quaternion, scale ) {
			var te = this.elements;
			var x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
			var x2 = x + x,	y2 = y + y, z2 = z + z;
			var xx = x * x2, xy = x * y2, xz = x * z2;
			var yy = y * y2, yz = y * z2, zz = z * z2;
			var wx = w * x2, wy = w * y2, wz = w * z2;
			var sx = scale.x, sy = scale.y, sz = scale.z;
			te[ 0 ] = ( 1 - ( yy + zz ) ) * sx;
			te[ 1 ] = ( xy + wz ) * sx;
			te[ 2 ] = ( xz - wy ) * sx;
			te[ 3 ] = 0;
			te[ 4 ] = ( xy - wz ) * sy;
			te[ 5 ] = ( 1 - ( xx + zz ) ) * sy;
			te[ 6 ] = ( yz + wx ) * sy;
			te[ 7 ] = 0;
			te[ 8 ] = ( xz + wy ) * sz;
			te[ 9 ] = ( yz - wx ) * sz;
			te[ 10 ] = ( 1 - ( xx + yy ) ) * sz;
			te[ 11 ] = 0;
			te[ 12 ] = position.x;
			te[ 13 ] = position.y;
			te[ 14 ] = position.z;
			te[ 15 ] = 1;
			return this;
		},
		decompose: function () {
			var vector = new Vector3();
			var matrix = new Matrix4();
			return function decompose( position, quaternion, scale ) {
				var te = this.elements;
				var sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
				var sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
				var sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();
				var det = this.determinant();
				if ( det < 0 ) sx = - sx;
				position.x = te[ 12 ];
				position.y = te[ 13 ];
				position.z = te[ 14 ];
				matrix.copy( this );
				var invSX = 1 / sx;
				var invSY = 1 / sy;
				var invSZ = 1 / sz;
				matrix.elements[ 0 ] *= invSX;
				matrix.elements[ 1 ] *= invSX;
				matrix.elements[ 2 ] *= invSX;
				matrix.elements[ 4 ] *= invSY;
				matrix.elements[ 5 ] *= invSY;
				matrix.elements[ 6 ] *= invSY;
				matrix.elements[ 8 ] *= invSZ;
				matrix.elements[ 9 ] *= invSZ;
				matrix.elements[ 10 ] *= invSZ;
				quaternion.setFromRotationMatrix( matrix );
				scale.x = sx;
				scale.y = sy;
				scale.z = sz;
				return this;
			};
		}(),
		makePerspective: function ( left, right, top, bottom, near, far ) {
			if ( far === undefined ) {
				console.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );
			}
			var te = this.elements;
			var x = 2 * near / ( right - left );
			var y = 2 * near / ( top - bottom );
			var a = ( right + left ) / ( right - left );
			var b = ( top + bottom ) / ( top - bottom );
			var c = - ( far + near ) / ( far - near );
			var d = - 2 * far * near / ( far - near );
			te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
			te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
			te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
			te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;
			return this;
		},
		makeOrthographic: function ( left, right, top, bottom, near, far ) {
			var te = this.elements;
			var w = 1.0 / ( right - left );
			var h = 1.0 / ( top - bottom );
			var p = 1.0 / ( far - near );
			var x = ( right + left ) * w;
			var y = ( top + bottom ) * h;
			var z = ( far + near ) * p;
			te[ 0 ] = 2 * w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
			te[ 1 ] = 0;	te[ 5 ] = 2 * h;	te[ 9 ] = 0;	te[ 13 ] = - y;
			te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 * p;	te[ 14 ] = - z;
			te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;
			return this;
		},
		equals: function ( matrix ) {
			var te = this.elements;
			var me = matrix.elements;
			for ( var i = 0; i < 16; i ++ ) {
				if ( te[ i ] !== me[ i ] ) return false;
			}
			return true;
		},
		fromArray: function ( array, offset ) {
			if ( offset === undefined ) offset = 0;
			for ( var i = 0; i < 16; i ++ ) {
				this.elements[ i ] = array[ i + offset ];
			}
			return this;
		},
		toArray: function ( array, offset ) {
			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;
			var te = this.elements;
			array[ offset ] = te[ 0 ];
			array[ offset + 1 ] = te[ 1 ];
			array[ offset + 2 ] = te[ 2 ];
			array[ offset + 3 ] = te[ 3 ];
			array[ offset + 4 ] = te[ 4 ];
			array[ offset + 5 ] = te[ 5 ];
			array[ offset + 6 ] = te[ 6 ];
			array[ offset + 7 ] = te[ 7 ];
			array[ offset + 8 ] = te[ 8 ];
			array[ offset + 9 ] = te[ 9 ];
			array[ offset + 10 ] = te[ 10 ];
			array[ offset + 11 ] = te[ 11 ];
			array[ offset + 12 ] = te[ 12 ];
			array[ offset + 13 ] = te[ 13 ];
			array[ offset + 14 ] = te[ 14 ];
			array[ offset + 15 ] = te[ 15 ];
			return array;
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 */
	var _matrix, _quaternion;
	function Euler( x, y, z, order ) {
		this._x = x || 0;
		this._y = y || 0;
		this._z = z || 0;
		this._order = order || Euler.DefaultOrder;
	}
	Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];
	Euler.DefaultOrder = 'XYZ';
	Object.defineProperties( Euler.prototype, {
		x: {
			get: function () {
				return this._x;
			},
			set: function ( value ) {
				this._x = value;
				this._onChangeCallback();
			}
		},
		y: {
			get: function () {
				return this._y;
			},
			set: function ( value ) {
				this._y = value;
				this._onChangeCallback();
			}
		},
		z: {
			get: function () {
				return this._z;
			},
			set: function ( value ) {
				this._z = value;
				this._onChangeCallback();
			}
		},
		order: {
			get: function () {
				return this._order;
			},
			set: function ( value ) {
				this._order = value;
				this._onChangeCallback();
			}
		}
	} );
	Object.assign( Euler.prototype, {
		isEuler: true,
		set: function ( x, y, z, order ) {
			this._x = x;
			this._y = y;
			this._z = z;
			this._order = order || this._order;
			this._onChangeCallback();
			return this;
		},
		clone: function () {
			return new this.constructor( this._x, this._y, this._z, this._order );
		},
		copy: function ( euler ) {
			this._x = euler._x;
			this._y = euler._y;
			this._z = euler._z;
			this._order = euler._order;
			this._onChangeCallback();
			return this;
		},
		setFromRotationMatrix: function ( m, order, update ) {
			var clamp = _Math.clamp;
			var te = m.elements;
			var m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
			var m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
			var m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];
			order = order || this._order;
			if ( order === 'XYZ' ) {
				this._y = Math.asin( clamp( m13, - 1, 1 ) );
				if ( Math.abs( m13 ) < 0.99999 ) {
					this._x = Math.atan2( - m23, m33 );
					this._z = Math.atan2( - m12, m11 );
				} else {
					this._x = Math.atan2( m32, m22 );
					this._z = 0;
				}
			} else if ( order === 'YXZ' ) {
				this._x = Math.asin( - clamp( m23, - 1, 1 ) );
				if ( Math.abs( m23 ) < 0.99999 ) {
					this._y = Math.atan2( m13, m33 );
					this._z = Math.atan2( m21, m22 );
				} else {
					this._y = Math.atan2( - m31, m11 );
					this._z = 0;
				}
			} else if ( order === 'ZXY' ) {
				this._x = Math.asin( clamp( m32, - 1, 1 ) );
				if ( Math.abs( m32 ) < 0.99999 ) {
					this._y = Math.atan2( - m31, m33 );
					this._z = Math.atan2( - m12, m22 );
				} else {
					this._y = 0;
					this._z = Math.atan2( m21, m11 );
				}
			} else if ( order === 'ZYX' ) {
				this._y = Math.asin( - clamp( m31, - 1, 1 ) );
				if ( Math.abs( m31 ) < 0.99999 ) {
					this._x = Math.atan2( m32, m33 );
					this._z = Math.atan2( m21, m11 );
				} else {
					this._x = 0;
					this._z = Math.atan2( - m12, m22 );
				}
			} else if ( order === 'YZX' ) {
				this._z = Math.asin( clamp( m21, - 1, 1 ) );
				if ( Math.abs( m21 ) < 0.99999 ) {
					this._x = Math.atan2( - m23, m22 );
					this._y = Math.atan2( - m31, m11 );
				} else {
					this._x = 0;
					this._y = Math.atan2( m13, m33 );
				}
			} else if ( order === 'XZY' ) {
				this._z = Math.asin( - clamp( m12, - 1, 1 ) );
				if ( Math.abs( m12 ) < 0.99999 ) {
					this._x = Math.atan2( m32, m22 );
					this._y = Math.atan2( m13, m11 );
				} else {
					this._x = Math.atan2( - m23, m33 );
					this._y = 0;
				}
			} else {
				console.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );
			}
			this._order = order;
			if ( update !== false ) this._onChangeCallback();
			return this;
		},
		setFromQuaternion: function ( q, order, update ) {
			if ( _matrix === undefined ) _matrix = new Matrix4();
			_matrix.makeRotationFromQuaternion( q );
			return this.setFromRotationMatrix( _matrix, order, update );
		},
		setFromVector3: function ( v, order ) {
			return this.set( v.x, v.y, v.z, order || this._order );
		},
		reorder: function ( newOrder ) {
			if ( _quaternion === undefined ) _quaternion = new Quaternion();
			_quaternion.setFromEuler( this );
			return this.setFromQuaternion( _quaternion, newOrder );
		},
		equals: function ( euler ) {
			return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );
		},
		fromArray: function ( array ) {
			this._x = array[ 0 ];
			this._y = array[ 1 ];
			this._z = array[ 2 ];
			if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];
			this._onChangeCallback();
			return this;
		},
		toArray: function ( array, offset ) {
			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;
			array[ offset ] = this._x;
			array[ offset + 1 ] = this._y;
			array[ offset + 2 ] = this._z;
			array[ offset + 3 ] = this._order;
			return array;
		},
		toVector3: function ( optionalResult ) {
			if ( optionalResult ) {
				return optionalResult.set( this._x, this._y, this._z );
			} else {
				return new Vector3( this._x, this._y, this._z );
			}
		},
		_onChange: function ( callback ) {
			this._onChangeCallback = callback;
			return this;
		},
		_onChangeCallback: function () {}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function Layers() {
		this.mask = 1 | 0;
	}
	Object.assign( Layers.prototype, {
		set: function ( channel ) {
			this.mask = 1 << channel | 0;
		},
		enable: function ( channel ) {
			this.mask |= 1 << channel | 0;
		},
		toggle: function ( channel ) {
			this.mask ^= 1 << channel | 0;
		},
		disable: function ( channel ) {
			this.mask &= ~ ( 1 << channel | 0 );
		},
		test: function ( layers ) {
			return ( this.mask & layers.mask ) !== 0;
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author elephantatwork / www.elephantatwork.ch
	 */
	var object3DId = 0;
	function Object3D() {
		Object.defineProperty( this, 'id', { value: object3DId ++ } );
		this.uuid = _Math.generateUUID();
		this.name = '';
		this.type = 'Object3D';
		this.parent = null;
		this.children = [];
		this.up = Object3D.DefaultUp.clone();
		var position = new Vector3();
		var rotation = new Euler();
		var quaternion = new Quaternion();
		var scale = new Vector3( 1, 1, 1 );
		function onRotationChange() {
			quaternion.setFromEuler( rotation, false );
		}
		function onQuaternionChange() {
			rotation.setFromQuaternion( quaternion, undefined, false );
		}
		rotation._onChange( onRotationChange );
		quaternion._onChange( onQuaternionChange );
		Object.defineProperties( this, {
			position: {
				configurable: true,
				enumerable: true,
				value: position
			},
			rotation: {
				configurable: true,
				enumerable: true,
				value: rotation
			},
			quaternion: {
				configurable: true,
				enumerable: true,
				value: quaternion
			},
			scale: {
				configurable: true,
				enumerable: true,
				value: scale
			},
			modelViewMatrix: {
				value: new Matrix4()
			},
			normalMatrix: {
				value: new Matrix3()
			}
		} );
		this.matrix = new Matrix4();
		this.matrixWorld = new Matrix4();
		this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
		this.matrixWorldNeedsUpdate = false;
		this.layers = new Layers();
		this.visible = true;
		this.castShadow = false;
		this.receiveShadow = false;
		this.frustumCulled = true;
		this.renderOrder = 0;
		this.userData = {};
	}
	Object3D.DefaultUp = new Vector3( 0, 1, 0 );
	Object3D.DefaultMatrixAutoUpdate = true;
	Object3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {
		constructor: Object3D,
		isObject3D: true,
		onBeforeRender: function () {},
		onAfterRender: function () {},
		applyMatrix: function ( matrix ) {
			if ( this.matrixAutoUpdate ) this.updateMatrix();
			this.matrix.premultiply( matrix );
			this.matrix.decompose( this.position, this.quaternion, this.scale );
		},
		applyQuaternion: function ( q ) {
			this.quaternion.premultiply( q );
			return this;
		},
		setRotationFromAxisAngle: function ( axis, angle ) {
			this.quaternion.setFromAxisAngle( axis, angle );
		},
		setRotationFromEuler: function ( euler ) {
			this.quaternion.setFromEuler( euler, true );
		},
		setRotationFromMatrix: function ( m ) {
			this.quaternion.setFromRotationMatrix( m );
		},
		setRotationFromQuaternion: function ( q ) {
			this.quaternion.copy( q );
		},
		rotateOnAxis: function () {
			var q1 = new Quaternion();
			return function rotateOnAxis( axis, angle ) {
				q1.setFromAxisAngle( axis, angle );
				this.quaternion.multiply( q1 );
				return this;
			};
		}(),
		rotateOnWorldAxis: function () {
			var q1 = new Quaternion();
			return function rotateOnWorldAxis( axis, angle ) {
				q1.setFromAxisAngle( axis, angle );
				this.quaternion.premultiply( q1 );
				return this;
			};
		}(),
		rotateX: function () {
			var v1 = new Vector3( 1, 0, 0 );
			return function rotateX( angle ) {
				return this.rotateOnAxis( v1, angle );
			};
		}(),
		rotateY: function () {
			var v1 = new Vector3( 0, 1, 0 );
			return function rotateY( angle ) {
				return this.rotateOnAxis( v1, angle );
			};
		}(),
		rotateZ: function () {
			var v1 = new Vector3( 0, 0, 1 );
			return function rotateZ( angle ) {
				return this.rotateOnAxis( v1, angle );
			};
		}(),
		translateOnAxis: function () {
			var v1 = new Vector3();
			return function translateOnAxis( axis, distance ) {
				v1.copy( axis ).applyQuaternion( this.quaternion );
				this.position.add( v1.multiplyScalar( distance ) );
				return this;
			};
		}(),
		translateX: function () {
			var v1 = new Vector3( 1, 0, 0 );
			return function translateX( distance ) {
				return this.translateOnAxis( v1, distance );
			};
		}(),
		translateY: function () {
			var v1 = new Vector3( 0, 1, 0 );
			return function translateY( distance ) {
				return this.translateOnAxis( v1, distance );
			};
		}(),
		translateZ: function () {
			var v1 = new Vector3( 0, 0, 1 );
			return function translateZ( distance ) {
				return this.translateOnAxis( v1, distance );
			};
		}(),
		localToWorld: function ( vector ) {
			return vector.applyMatrix4( this.matrixWorld );
		},
		worldToLocal: function () {
			var m1 = new Matrix4();
			return function worldToLocal( vector ) {
				return vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );
			};
		}(),
		lookAt: function () {
			var q1 = new Quaternion();
			var m1 = new Matrix4();
			var target = new Vector3();
			var position = new Vector3();
			return function lookAt( x, y, z ) {
				if ( x.isVector3 ) {
					target.copy( x );
				} else {
					target.set( x, y, z );
				}
				var parent = this.parent;
				this.updateWorldMatrix( true, false );
				position.setFromMatrixPosition( this.matrixWorld );
				if ( this.isCamera || this.isLight ) {
					m1.lookAt( position, target, this.up );
				} else {
					m1.lookAt( target, position, this.up );
				}
				this.quaternion.setFromRotationMatrix( m1 );
				if ( parent ) {
					m1.extractRotation( parent.matrixWorld );
					q1.setFromRotationMatrix( m1 );
					this.quaternion.premultiply( q1.inverse() );
				}
			};
		}(),
		add: function ( object ) {
			if ( arguments.length > 1 ) {
				for ( var i = 0; i < arguments.length; i ++ ) {
					this.add( arguments[ i ] );
				}
				return this;
			}
			if ( object === this ) {
				console.error( "THREE.Object3D.add: object can't be added as a child of itself.", object );
				return this;
			}
			if ( ( object && object.isObject3D ) ) {
				if ( object.parent !== null ) {
					object.parent.remove( object );
				}
				object.parent = this;
				this.children.push( object );
				object.dispatchEvent( { type: 'added' } );
			} else {
				console.error( "THREE.Object3D.add: object not an instance of THREE.Object3D.", object );
			}
			return this;
		},
		remove: function ( object ) {
			if ( arguments.length > 1 ) {
				for ( var i = 0; i < arguments.length; i ++ ) {
					this.remove( arguments[ i ] );
				}
				return this;
			}
			var index = this.children.indexOf( object );
			if ( index !== - 1 ) {
				object.parent = null;
				this.children.splice( index, 1 );
				object.dispatchEvent( { type: 'removed' } );
			}
			return this;
		},
		attach: function () {
			var m = new Matrix4();
			return function attach( object ) {
				this.updateWorldMatrix( true, false );
				m.getInverse( this.matrixWorld );
				if ( object.parent !== null ) {
					object.parent.updateWorldMatrix( true, false );
					m.multiply( object.parent.matrixWorld );
				}
				object.applyMatrix( m );
				object.updateWorldMatrix( false, false );
				this.add( object );
				return this;
			};
		}(),
		getObjectById: function ( id ) {
			return this.getObjectByProperty( 'id', id );
		},
		getObjectByName: function ( name ) {
			return this.getObjectByProperty( 'name', name );
		},
		getObjectByProperty: function ( name, value ) {
			if ( this[ name ] === value ) return this;
			for ( var i = 0, l = this.children.length; i < l; i ++ ) {
				var child = this.children[ i ];
				var object = child.getObjectByProperty( name, value );
				if ( object !== undefined ) {
					return object;
				}
			}
			return undefined;
		},
		getWorldPosition: function ( target ) {
			if ( target === undefined ) {
				console.warn( 'THREE.Object3D: .getWorldPosition() target is now required' );
				target = new Vector3();
			}
			this.updateMatrixWorld( true );
			return target.setFromMatrixPosition( this.matrixWorld );
		},
		getWorldQuaternion: function () {
			var position = new Vector3();
			var scale = new Vector3();
			return function getWorldQuaternion( target ) {
				if ( target === undefined ) {
					console.warn( 'THREE.Object3D: .getWorldQuaternion() target is now required' );
					target = new Quaternion();
				}
				this.updateMatrixWorld( true );
				this.matrixWorld.decompose( position, target, scale );
				return target;
			};
		}(),
		getWorldScale: function () {
			var position = new Vector3();
			var quaternion = new Quaternion();
			return function getWorldScale( target ) {
				if ( target === undefined ) {
					console.warn( 'THREE.Object3D: .getWorldScale() target is now required' );
					target = new Vector3();
				}
				this.updateMatrixWorld( true );
				this.matrixWorld.decompose( position, quaternion, target );
				return target;
			};
		}(),
		getWorldDirection: function ( target ) {
			if ( target === undefined ) {
				console.warn( 'THREE.Object3D: .getWorldDirection() target is now required' );
				target = new Vector3();
			}
			this.updateMatrixWorld( true );
			var e = this.matrixWorld.elements;
			return target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();
		},
		raycast: function () {},
		traverse: function ( callback ) {
			callback( this );
			var children = this.children;
			for ( var i = 0, l = children.length; i < l; i ++ ) {
				children[ i ].traverse( callback );
			}
		},
		traverseVisible: function ( callback ) {
			if ( this.visible === false ) return;
			callback( this );
			var children = this.children;
			for ( var i = 0, l = children.length; i < l; i ++ ) {
				children[ i ].traverseVisible( callback );
			}
		},
		traverseAncestors: function ( callback ) {
			var parent = this.parent;
			if ( parent !== null ) {
				callback( parent );
				parent.traverseAncestors( callback );
			}
		},
		updateMatrix: function () {
			this.matrix.compose( this.position, this.quaternion, this.scale );
			this.matrixWorldNeedsUpdate = true;
		},
		updateMatrixWorld: function ( force ) {
			if ( this.matrixAutoUpdate ) this.updateMatrix();
			if ( this.matrixWorldNeedsUpdate || force ) {
				if ( this.parent === null ) {
					this.matrixWorld.copy( this.matrix );
				} else {
					this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );
				}
				this.matrixWorldNeedsUpdate = false;
				force = true;
			}
			var children = this.children;
			for ( var i = 0, l = children.length; i < l; i ++ ) {
				children[ i ].updateMatrixWorld( force );
			}
		},
		updateWorldMatrix: function ( updateParents, updateChildren ) {
			var parent = this.parent;
			if ( updateParents === true && parent !== null ) {
				parent.updateWorldMatrix( true, false );
			}
			if ( this.matrixAutoUpdate ) this.updateMatrix();
			if ( this.parent === null ) {
				this.matrixWorld.copy( this.matrix );
			} else {
				this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );
			}
			if ( updateChildren === true ) {
				var children = this.children;
				for ( var i = 0, l = children.length; i < l; i ++ ) {
					children[ i ].updateWorldMatrix( false, true );
				}
			}
		},
		toJSON: function ( meta ) {
			var isRootObject = ( meta === undefined || typeof meta === 'string' );
			var output = {};
			if ( isRootObject ) {
				meta = {
					geometries: {},
					materials: {},
					textures: {},
					images: {},
					shapes: {}
				};
				output.metadata = {
					version: 4.5,
					type: 'Object',
					generator: 'Object3D.toJSON'
				};
			}
			var object = {};
			object.uuid = this.uuid;
			object.type = this.type;
			if ( this.name !== '' ) object.name = this.name;
			if ( this.castShadow === true ) object.castShadow = true;
			if ( this.receiveShadow === true ) object.receiveShadow = true;
			if ( this.visible === false ) object.visible = false;
			if ( this.frustumCulled === false ) object.frustumCulled = false;
			if ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;
			if ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;
			object.layers = this.layers.mask;
			object.matrix = this.matrix.toArray();
			if ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;
			if ( this.isMesh && this.drawMode !== TrianglesDrawMode ) object.drawMode = this.drawMode;
			function serialize( library, element ) {
				if ( library[ element.uuid ] === undefined ) {
					library[ element.uuid ] = element.toJSON( meta );
				}
				return element.uuid;
			}
			if ( this.isMesh || this.isLine || this.isPoints ) {
				object.geometry = serialize( meta.geometries, this.geometry );
				var parameters = this.geometry.parameters;
				if ( parameters !== undefined && parameters.shapes !== undefined ) {
					var shapes = parameters.shapes;
					if ( Array.isArray( shapes ) ) {
						for ( var i = 0, l = shapes.length; i < l; i ++ ) {
							var shape = shapes[ i ];
							serialize( meta.shapes, shape );
						}
					} else {
						serialize( meta.shapes, shapes );
					}
				}
			}
			if ( this.material !== undefined ) {
				if ( Array.isArray( this.material ) ) {
					var uuids = [];
					for ( var i = 0, l = this.material.length; i < l; i ++ ) {
						uuids.push( serialize( meta.materials, this.material[ i ] ) );
					}
					object.material = uuids;
				} else {
					object.material = serialize( meta.materials, this.material );
				}
			}
			if ( this.children.length > 0 ) {
				object.children = [];
				for ( var i = 0; i < this.children.length; i ++ ) {
					object.children.push( this.children[ i ].toJSON( meta ).object );
				}
			}
			if ( isRootObject ) {
				var geometries = extractFromCache( meta.geometries );
				var materials = extractFromCache( meta.materials );
				var textures = extractFromCache( meta.textures );
				var images = extractFromCache( meta.images );
				var shapes = extractFromCache( meta.shapes );
				if ( geometries.length > 0 ) output.geometries = geometries;
				if ( materials.length > 0 ) output.materials = materials;
				if ( textures.length > 0 ) output.textures = textures;
				if ( images.length > 0 ) output.images = images;
				if ( shapes.length > 0 ) output.shapes = shapes;
			}
			output.object = object;
			return output;
			function extractFromCache( cache ) {
				var values = [];
				for ( var key in cache ) {
					var data = cache[ key ];
					delete data.metadata;
					values.push( data );
				}
				return values;
			}
		},
		clone: function ( recursive ) {
			return new this.constructor().copy( this, recursive );
		},
		copy: function ( source, recursive ) {
			if ( recursive === undefined ) recursive = true;
			this.name = source.name;
			this.up.copy( source.up );
			this.position.copy( source.position );
			this.quaternion.copy( source.quaternion );
			this.scale.copy( source.scale );
			this.matrix.copy( source.matrix );
			this.matrixWorld.copy( source.matrixWorld );
			this.matrixAutoUpdate = source.matrixAutoUpdate;
			this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
			this.layers.mask = source.layers.mask;
			this.visible = source.visible;
			this.castShadow = source.castShadow;
			this.receiveShadow = source.receiveShadow;
			this.frustumCulled = source.frustumCulled;
			this.renderOrder = source.renderOrder;
			this.userData = JSON.parse( JSON.stringify( source.userData ) );
			if ( recursive === true ) {
				for ( var i = 0; i < source.children.length; i ++ ) {
					var child = source.children[ i ];
					this.add( child.clone() );
				}
			}
			return this;
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function Scene() {
		Object3D.call( this );
		this.type = 'Scene';
		this.background = null;
		this.fog = null;
		this.overrideMaterial = null;
		this.autoUpdate = true; // checked by the renderer
		if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {
			__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef
		}
	}
	Scene.prototype = Object.assign( Object.create( Object3D.prototype ), {
		constructor: Scene,
		isScene: true,
		copy: function ( source, recursive ) {
			Object3D.prototype.copy.call( this, source, recursive );
			if ( source.background !== null ) this.background = source.background.clone();
			if ( source.fog !== null ) this.fog = source.fog.clone();
			if ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();
			this.autoUpdate = source.autoUpdate;
			this.matrixAutoUpdate = source.matrixAutoUpdate;
			return this;
		},
		toJSON: function ( meta ) {
			var data = Object3D.prototype.toJSON.call( this, meta );
			if ( this.background !== null ) data.object.background = this.background.toJSON( meta );
			if ( this.fog !== null ) data.object.fog = this.fog.toJSON();
			return data;
		},
		dispose: function () {
			this.dispatchEvent( { type: 'dispose' } );
		}
	} );
	/**
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 */
	function Box3( min, max ) {
		this.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );
		this.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );
	}
	Object.assign( Box3.prototype, {
		isBox3: true,
		set: function ( min, max ) {
			this.min.copy( min );
			this.max.copy( max );
			return this;
		},
		setFromArray: function ( array ) {
			var minX = + Infinity;
			var minY = + Infinity;
			var minZ = + Infinity;
			var maxX = - Infinity;
			var maxY = - Infinity;
			var maxZ = - Infinity;
			for ( var i = 0, l = array.length; i < l; i += 3 ) {
				var x = array[ i ];
				var y = array[ i + 1 ];
				var z = array[ i + 2 ];
				if ( x < minX ) minX = x;
				if ( y < minY ) minY = y;
				if ( z < minZ ) minZ = z;
				if ( x > maxX ) maxX = x;
				if ( y > maxY ) maxY = y;
				if ( z > maxZ ) maxZ = z;
			}
			this.min.set( minX, minY, minZ );
			this.max.set( maxX, maxY, maxZ );
			return this;
		},
		setFromBufferAttribute: function ( attribute ) {
			var minX = + Infinity;
			var minY = + Infinity;
			var minZ = + Infinity;
			var maxX = - Infinity;
			var maxY = - Infinity;
			var maxZ = - Infinity;
			for ( var i = 0, l = attribute.count; i < l; i ++ ) {
				var x = attribute.getX( i );
				var y = attribute.getY( i );
				var z = attribute.getZ( i );
				if ( x < minX ) minX = x;
				if ( y < minY ) minY = y;
				if ( z < minZ ) minZ = z;
				if ( x > maxX ) maxX = x;
				if ( y > maxY ) maxY = y;
				if ( z > maxZ ) maxZ = z;
			}
			this.min.set( minX, minY, minZ );
			this.max.set( maxX, maxY, maxZ );
			return this;
		},
		setFromPoints: function ( points ) {
			this.makeEmpty();
			for ( var i = 0, il = points.length; i < il; i ++ ) {
				this.expandByPoint( points[ i ] );
			}
			return this;
		},
		setFromCenterAndSize: function () {
			var v1 = new Vector3();
			return function setFromCenterAndSize( center, size ) {
				var halfSize = v1.copy( size ).multiplyScalar( 0.5 );
				this.min.copy( center ).sub( halfSize );
				this.max.copy( center ).add( halfSize );
				return this;
			};
		}(),
		setFromObject: function ( object ) {
			this.makeEmpty();
			return this.expandByObject( object );
		},
		clone: function () {
			return new this.constructor().copy( this );
		},
		copy: function ( box ) {
			this.min.copy( box.min );
			this.max.copy( box.max );
			return this;
		},
		makeEmpty: function () {
			this.min.x = this.min.y = this.min.z = + Infinity;
			this.max.x = this.max.y = this.max.z = - Infinity;
			return this;
		},
		isEmpty: function () {
			return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );
		},
		getCenter: function ( target ) {
			if ( target === undefined ) {
				console.warn( 'THREE.Box3: .getCenter() target is now required' );
				target = new Vector3();
			}
			return this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );
		},
		getSize: function ( target ) {
			if ( target === undefined ) {
				console.warn( 'THREE.Box3: .getSize() target is now required' );
				target = new Vector3();
			}
			return this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );
		},
		expandByPoint: function ( point ) {
			this.min.min( point );
			this.max.max( point );
			return this;
		},
		expandByVector: function ( vector ) {
			this.min.sub( vector );
			this.max.add( vector );
			return this;
		},
		expandByScalar: function ( scalar ) {
			this.min.addScalar( - scalar );
			this.max.addScalar( scalar );
			return this;
		},
		expandByObject: function () {
			var scope, i, l;
			var v1 = new Vector3();
			function traverse( node ) {
				var geometry = node.geometry;
				if ( geometry !== undefined ) {
					if ( geometry.isGeometry ) {
						var vertices = geometry.vertices;
						for ( i = 0, l = vertices.length; i < l; i ++ ) {
							v1.copy( vertices[ i ] );
							v1.applyMatrix4( node.matrixWorld );
							scope.expandByPoint( v1 );
						}
					} else if ( geometry.isBufferGeometry ) {
						var attribute = geometry.attributes.position;
						if ( attribute !== undefined ) {
							for ( i = 0, l = attribute.count; i < l; i ++ ) {
								v1.fromBufferAttribute( attribute, i ).applyMatrix4( node.matrixWorld );
								scope.expandByPoint( v1 );
							}
						}
					}
				}
			}
			return function expandByObject( object ) {
				scope = this;
				object.updateMatrixWorld( true );
				object.traverse( traverse );
				return this;
			};
		}(),
		containsPoint: function ( point ) {
			return point.x < this.min.x || point.x > this.max.x ||
				point.y < this.min.y || point.y > this.max.y ||
				point.z < this.min.z || point.z > this.max.z ? false : true;
		},
		containsBox: function ( box ) {
			return this.min.x <= box.min.x && box.max.x <= this.max.x &&
				this.min.y <= box.min.y && box.max.y <= this.max.y &&
				this.min.z <= box.min.z && box.max.z <= this.max.z;
		},
		getParameter: function ( point, target ) {
			if ( target === undefined ) {
				console.warn( 'THREE.Box3: .getParameter() target is now required' );
				target = new Vector3();
			}
			return target.set(
				( point.x - this.min.x ) / ( this.max.x - this.min.x ),
				( point.y - this.min.y ) / ( this.max.y - this.min.y ),
				( point.z - this.min.z ) / ( this.max.z - this.min.z )
			);
		},
		intersectsBox: function ( box ) {
			return box.max.x < this.min.x || box.min.x > this.max.x ||
				box.max.y < this.min.y || box.min.y > this.max.y ||
				box.max.z < this.min.z || box.min.z > this.max.z ? false : true;
		},
		intersectsSphere: ( function () {
			var closestPoint = new Vector3();
			return function intersectsSphere( sphere ) {
				this.clampPoint( sphere.center, closestPoint );
				return closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );
			};
		} )(),
		intersectsPlane: function ( plane ) {
			var min, max;
			if ( plane.normal.x > 0 ) {
				min = plane.normal.x * this.min.x;
				max = plane.normal.x * this.max.x;
			} else {
				min = plane.normal.x * this.max.x;
				max = plane.normal.x * this.min.x;
			}
			if ( plane.normal.y > 0 ) {
				min += plane.normal.y * this.min.y;
				max += plane.normal.y * this.max.y;
			} else {
				min += plane.normal.y * this.max.y;
				max += plane.normal.y * this.min.y;
			}
			if ( plane.normal.z > 0 ) {
				min += plane.normal.z * this.min.z;
				max += plane.normal.z * this.max.z;
			} else {
				min += plane.normal.z * this.max.z;
				max += plane.normal.z * this.min.z;
			}
			return ( min <= - plane.constant && max >= - plane.constant );
		},
		intersectsTriangle: ( function () {
			var v0 = new Vector3();
			var v1 = new Vector3();
			var v2 = new Vector3();
			var f0 = new Vector3();
			var f1 = new Vector3();
			var f2 = new Vector3();
			var testAxis = new Vector3();
			var center = new Vector3();
			var extents = new Vector3();
			var triangleNormal = new Vector3();
			function satForAxes( axes ) {
				var i, j;
				for ( i = 0, j = axes.length - 3; i <= j; i += 3 ) {
					testAxis.fromArray( axes, i );
					var r = extents.x * Math.abs( testAxis.x ) + extents.y * Math.abs( testAxis.y ) + extents.z * Math.abs( testAxis.z );
					var p0 = v0.dot( testAxis );
					var p1 = v1.dot( testAxis );
					var p2 = v2.dot( testAxis );
					if ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {
						return false;
					}
				}
				return true;
			}
			return function intersectsTriangle( triangle ) {
				if ( this.isEmpty() ) {
					return false;
				}
				this.getCenter( center );
				extents.subVectors( this.max, center );
				v0.subVectors( triangle.a, center );
				v1.subVectors( triangle.b, center );
				v2.subVectors( triangle.c, center );
				f0.subVectors( v1, v0 );
				f1.subVectors( v2, v1 );
				f2.subVectors( v0, v2 );
				var axes = [
					0, - f0.z, f0.y, 0, - f1.z, f1.y, 0, - f2.z, f2.y,
					f0.z, 0, - f0.x, f1.z, 0, - f1.x, f2.z, 0, - f2.x,
					- f0.y, f0.x, 0, - f1.y, f1.x, 0, - f2.y, f2.x, 0
				];
				if ( ! satForAxes( axes ) ) {
					return false;
				}
				axes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];
				if ( ! satForAxes( axes ) ) {
					return false;
				}
				triangleNormal.crossVectors( f0, f1 );
				axes = [ triangleNormal.x, triangleNormal.y, triangleNormal.z ];
				return satForAxes( axes );
			};
		} )(),
		clampPoint: function ( point, target ) {
			if ( target === undefined ) {
				console.warn( 'THREE.Box3: .clampPoint() target is now required' );
				target = new Vector3();
			}
			return target.copy( point ).clamp( this.min, this.max );
		},
		distanceToPoint: function () {
			var v1 = new Vector3();
			return function distanceToPoint( point ) {
				var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
				return clampedPoint.sub( point ).length();
			};
		}(),
		getBoundingSphere: function () {
			var v1 = new Vector3();
			return function getBoundingSphere( target ) {
				if ( target === undefined ) {
					console.error( 'THREE.Box3: .getBoundingSphere() target is now required' );
				}
				this.getCenter( target.center );
				target.radius = this.getSize( v1 ).length() * 0.5;
				return target;
			};
		}(),
		intersect: function ( box ) {
			this.min.max( box.min );
			this.max.min( box.max );
			if ( this.isEmpty() ) this.makeEmpty();
			return this;
		},
		union: function ( box ) {
			this.min.min( box.min );
			this.max.max( box.max );
			return this;
		},
		applyMatrix4: function () {
			var points = [
				new Vector3(),
				new Vector3(),
				new Vector3(),
				new Vector3(),
				new Vector3(),
				new Vector3(),
				new Vector3(),
				new Vector3()
			];
			return function applyMatrix4( matrix ) {
				if ( this.isEmpty() ) return this;
				points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
				points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
				points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
				points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
				points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
				points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
				points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
				points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111
				this.setFromPoints( points );
				return this;
			};
		}(),
		translate: function ( offset ) {
			this.min.add( offset );
			this.max.add( offset );
			return this;
		},
		equals: function ( box ) {
			return box.min.equals( this.min ) && box.max.equals( this.max );
		}
	} );
	/**
	 * @author bhouston / http://clara.io
	 * @author mrdoob / http://mrdoob.com/
	 */
	var _box;
	function Sphere( center, radius ) {
		this.center = ( center !== undefined ) ? center : new Vector3();
		this.radius = ( radius !== undefined ) ? radius : 0;
	}
	Object.assign( Sphere.prototype, {
		set: function ( center, radius ) {
			this.center.copy( center );
			this.radius = radius;
			return this;
		},
		setFromPoints: function ( points, optionalCenter ) {
			if ( _box === undefined ) _box = new Box3();
			var center = this.center;
			if ( optionalCenter !== undefined ) {
				center.copy( optionalCenter );
			} else {
				_box.setFromPoints( points ).getCenter( center );
			}
			var maxRadiusSq = 0;
			for ( var i = 0, il = points.length; i < il; i ++ ) {
				maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );
			}
			this.radius = Math.sqrt( maxRadiusSq );
			return this;
		},
		clone: function () {
			return new this.constructor().copy( this );
		},
		copy: function ( sphere ) {
			this.center.copy( sphere.center );
			this.radius = sphere.radius;
			return this;
		},
		empty: function () {
			return ( this.radius <= 0 );
		},
		containsPoint: function ( point ) {
			return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );
		},
		distanceToPoint: function ( point ) {
			return ( point.distanceTo( this.center ) - this.radius );
		},
		intersectsSphere: function ( sphere ) {
			var radiusSum = this.radius + sphere.radius;
			return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );
		},
		intersectsBox: function ( box ) {
			return box.intersectsSphere( this );
		},
		intersectsPlane: function ( plane ) {
			return Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;
		},
		clampPoint: function ( point, target ) {
			var deltaLengthSq = this.center.distanceToSquared( point );
			if ( target === undefined ) {
				console.warn( 'THREE.Sphere: .clampPoint() target is now required' );
				target = new Vector3();
			}
			target.copy( point );
			if ( deltaLengthSq > ( this.radius * this.radius ) ) {
				target.sub( this.center ).normalize();
				target.multiplyScalar( this.radius ).add( this.center );
			}
			return target;
		},
		getBoundingBox: function ( target ) {
			if ( target === undefined ) {
				console.warn( 'THREE.Sphere: .getBoundingBox() target is now required' );
				target = new Box3();
			}
			target.set( this.center, this.center );
			target.expandByScalar( this.radius );
			return target;
		},
		applyMatrix4: function ( matrix ) {
			this.center.applyMatrix4( matrix );
			this.radius = this.radius * matrix.getMaxScaleOnAxis();
			return this;
		},
		translate: function ( offset ) {
			this.center.add( offset );
			return this;
		},
		equals: function ( sphere ) {
			return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );
		}
	} );
	/**
	 * @author bhouston / http://clara.io
	 */
	function Ray( origin, direction ) {
		this.origin = ( origin !== undefined ) ? origin : new Vector3();
		this.direction = ( direction !== undefined ) ? direction : new Vector3();
	}
	Object.assign( Ray.prototype, {
		set: function ( origin, direction ) {
			this.origin.copy( origin );
			this.direction.copy( direction );
			return this;
		},
		clone: function () {
			return new this.constructor().copy( this );
		},
		copy: function ( ray ) {
			this.origin.copy( ray.origin );
			this.direction.copy( ray.direction );
			return this;
		},
		at: function ( t, target ) {
			if ( target === undefined ) {
				console.warn( 'THREE.Ray: .at() target is now required' );
				target = new Vector3();
			}
			return target.copy( this.direction ).multiplyScalar( t ).add( this.origin );
		},
		lookAt: function ( v ) {
			this.direction.copy( v ).sub( this.origin ).normalize();
			return this;
		},
		recast: function () {
			var v1 = new Vector3();
			return function recast( t ) {
				this.origin.copy( this.at( t, v1 ) );
				return this;
			};
		}(),
		closestPointToPoint: function ( point, target ) {
			if ( target === undefined ) {
				console.warn( 'THREE.Ray: .closestPointToPoint() target is now required' );
				target = new Vector3();
			}
			target.subVectors( point, this.origin );
			var directionDistance = target.dot( this.direction );
			if ( directionDistance < 0 ) {
				return target.copy( this.origin );
			}
			return target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );
		},
		distanceToPoint: function ( point ) {
			return Math.sqrt( this.distanceSqToPoint( point ) );
		},
		distanceSqToPoint: function () {
			var v1 = new Vector3();
			return function distanceSqToPoint( point ) {
				var directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );
				if ( directionDistance < 0 ) {
					return this.origin.distanceToSquared( point );
				}
				v1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );
				return v1.distanceToSquared( point );
			};
		}(),
		distanceSqToSegment: function () {
			var segCenter = new Vector3();
			var segDir = new Vector3();
			var diff = new Vector3();
			return function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {
				segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
				segDir.copy( v1 ).sub( v0 ).normalize();
				diff.copy( this.origin ).sub( segCenter );
				var segExtent = v0.distanceTo( v1 ) * 0.5;
				var a01 = - this.direction.dot( segDir );
				var b0 = diff.dot( this.direction );
				var b1 = - diff.dot( segDir );
				var c = diff.lengthSq();
				var det = Math.abs( 1 - a01 * a01 );
				var s0, s1, sqrDist, extDet;
				if ( det > 0 ) {
					s0 = a01 * b1 - b0;
					s1 = a01 * b0 - b1;
					extDet = segExtent * det;
					if ( s0 >= 0 ) {
						if ( s1 >= - extDet ) {
							if ( s1 <= extDet ) {
								var invDet = 1 / det;
								s0 *= invDet;
								s1 *= invDet;
								sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;
							} else {
								s1 = segExtent;
								s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
								sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
							}
						} else {
							s1 = - segExtent;
							s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
						}
					} else {
						if ( s1 <= - extDet ) {
							s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
							s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
						} else if ( s1 <= extDet ) {
							s0 = 0;
							s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
							sqrDist = s1 * ( s1 + 2 * b1 ) + c;
						} else {
							s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
							s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
						}
					}
				} else {
					s1 = ( a01 > 0 ) ? - segExtent : segExtent;
					s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
				}
				if ( optionalPointOnRay ) {
					optionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );
				}
				if ( optionalPointOnSegment ) {
					optionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );
				}
				return sqrDist;
			};
		}(),
		intersectSphere: function () {
			var v1 = new Vector3();
			return function intersectSphere( sphere, target ) {
				v1.subVectors( sphere.center, this.origin );
				var tca = v1.dot( this.direction );
				var d2 = v1.dot( v1 ) - tca * tca;
				var radius2 = sphere.radius * sphere.radius;
				if ( d2 > radius2 ) return null;
				var thc = Math.sqrt( radius2 - d2 );
				var t0 = tca - thc;
				var t1 = tca + thc;
				if ( t0 < 0 && t1 < 0 ) return null;
				if ( t0 < 0 ) return this.at( t1, target );
				return this.at( t0, target );
			};
		}(),
		intersectsSphere: function ( sphere ) {
			return this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );
		},
		distanceToPlane: function ( plane ) {
			var denominator = plane.normal.dot( this.direction );
			if ( denominator === 0 ) {
				if ( plane.distanceToPoint( this.origin ) === 0 ) {
					return 0;
				}
				return null;
			}
			var t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;
			return t >= 0 ? t : null;
		},
		intersectPlane: function ( plane, target ) {
			var t = this.distanceToPlane( plane );
			if ( t === null ) {
				return null;
			}
			return this.at( t, target );
		},
		intersectsPlane: function ( plane ) {
			var distToPoint = plane.distanceToPoint( this.origin );
			if ( distToPoint === 0 ) {
				return true;
			}
			var denominator = plane.normal.dot( this.direction );
			if ( denominator * distToPoint < 0 ) {
				return true;
			}
			return false;
		},
		intersectBox: function ( box, target ) {
			var tmin, tmax, tymin, tymax, tzmin, tzmax;
			var invdirx = 1 / this.direction.x,
				invdiry = 1 / this.direction.y,
				invdirz = 1 / this.direction.z;
			var origin = this.origin;
			if ( invdirx >= 0 ) {
				tmin = ( box.min.x - origin.x ) * invdirx;
				tmax = ( box.max.x - origin.x ) * invdirx;
			} else {
				tmin = ( box.max.x - origin.x ) * invdirx;
				tmax = ( box.min.x - origin.x ) * invdirx;
			}
			if ( invdiry >= 0 ) {
				tymin = ( box.min.y - origin.y ) * invdiry;
				tymax = ( box.max.y - origin.y ) * invdiry;
			} else {
				tymin = ( box.max.y - origin.y ) * invdiry;
				tymax = ( box.min.y - origin.y ) * invdiry;
			}
			if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;
			if ( tymin > tmin || tmin !== tmin ) tmin = tymin;
			if ( tymax < tmax || tmax !== tmax ) tmax = tymax;
			if ( invdirz >= 0 ) {
				tzmin = ( box.min.z - origin.z ) * invdirz;
				tzmax = ( box.max.z - origin.z ) * invdirz;
			} else {
				tzmin = ( box.max.z - origin.z ) * invdirz;
				tzmax = ( box.min.z - origin.z ) * invdirz;
			}
			if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;
			if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;
			if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;
			if ( tmax < 0 ) return null;
			return this.at( tmin >= 0 ? tmin : tmax, target );
		},
		intersectsBox: ( function () {
			var v = new Vector3();
			return function intersectsBox( box ) {
				return this.intersectBox( box, v ) !== null;
			};
		} )(),
		intersectTriangle: function () {
			var diff = new Vector3();
			var edge1 = new Vector3();
			var edge2 = new Vector3();
			var normal = new Vector3();
			return function intersectTriangle( a, b, c, backfaceCulling, target ) {
				edge1.subVectors( b, a );
				edge2.subVectors( c, a );
				normal.crossVectors( edge1, edge2 );
				var DdN = this.direction.dot( normal );
				var sign;
				if ( DdN > 0 ) {
					if ( backfaceCulling ) return null;
					sign = 1;
				} else if ( DdN < 0 ) {
					sign = - 1;
					DdN = - DdN;
				} else {
					return null;
				}
				diff.subVectors( this.origin, a );
				var DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );
				if ( DdQxE2 < 0 ) {
					return null;
				}
				var DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );
				if ( DdE1xQ < 0 ) {
					return null;
				}
				if ( DdQxE2 + DdE1xQ > DdN ) {
					return null;
				}
				var QdN = - sign * diff.dot( normal );
				if ( QdN < 0 ) {
					return null;
				}
				return this.at( QdN / DdN, target );
			};
		}(),
		applyMatrix4: function ( matrix4 ) {
			this.origin.applyMatrix4( matrix4 );
			this.direction.transformDirection( matrix4 );
			return this;
		},
		equals: function ( ray ) {
			return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );
		}
	} );
	/**
	 * @author bhouston / http://clara.io
	 * @author mrdoob / http://mrdoob.com/
	 */
	function Triangle( a, b, c ) {
		this.a = ( a !== undefined ) ? a : new Vector3();
		this.b = ( b !== undefined ) ? b : new Vector3();
		this.c = ( c !== undefined ) ? c : new Vector3();
	}
	Object.assign( Triangle, {
		getNormal: function () {
			var v0 = new Vector3();
			return function getNormal( a, b, c, target ) {
				if ( target === undefined ) {
					console.warn( 'THREE.Triangle: .getNormal() target is now required' );
					target = new Vector3();
				}
				target.subVectors( c, b );
				v0.subVectors( a, b );
				target.cross( v0 );
				var targetLengthSq = target.lengthSq();
				if ( targetLengthSq > 0 ) {
					return target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );
				}
				return target.set( 0, 0, 0 );
			};
		}(),
		getBarycoord: function () {
			var v0 = new Vector3();
			var v1 = new Vector3();
			var v2 = new Vector3();
			return function getBarycoord( point, a, b, c, target ) {
				v0.subVectors( c, a );
				v1.subVectors( b, a );
				v2.subVectors( point, a );
				var dot00 = v0.dot( v0 );
				var dot01 = v0.dot( v1 );
				var dot02 = v0.dot( v2 );
				var dot11 = v1.dot( v1 );
				var dot12 = v1.dot( v2 );
				var denom = ( dot00 * dot11 - dot01 * dot01 );
				if ( target === undefined ) {
					console.warn( 'THREE.Triangle: .getBarycoord() target is now required' );
					target = new Vector3();
				}
				if ( denom === 0 ) {
					return target.set( - 2, - 1, - 1 );
				}
				var invDenom = 1 / denom;
				var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
				var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;
				return target.set( 1 - u - v, v, u );
			};
		}(),
		containsPoint: function () {
			var v1 = new Vector3();
			return function containsPoint( point, a, b, c ) {
				Triangle.getBarycoord( point, a, b, c, v1 );
				return ( v1.x >= 0 ) && ( v1.y >= 0 ) && ( ( v1.x + v1.y ) <= 1 );
			};
		}(),
		getUV: function () {
			var barycoord = new Vector3();
			return function getUV( point, p1, p2, p3, uv1, uv2, uv3, target ) {
				this.getBarycoord( point, p1, p2, p3, barycoord );
				target.set( 0, 0 );
				target.addScaledVector( uv1, barycoord.x );
				target.addScaledVector( uv2, barycoord.y );
				target.addScaledVector( uv3, barycoord.z );
				return target;
			};
		}(),
		isFrontFacing: function () {
			var v0 = new Vector3();
			var v1 = new Vector3();
			return function isFrontFacing( a, b, c, direction ) {
				v0.subVectors( c, b );
				v1.subVectors( a, b );
				return ( v0.cross( v1 ).dot( direction ) < 0 ) ? true : false;
			};
		}()
	} );
	Object.assign( Triangle.prototype, {
		set: function ( a, b, c ) {
			this.a.copy( a );
			this.b.copy( b );
			this.c.copy( c );
			return this;
		},
		setFromPointsAndIndices: function ( points, i0, i1, i2 ) {
			this.a.copy( points[ i0 ] );
			this.b.copy( points[ i1 ] );
			this.c.copy( points[ i2 ] );
			return this;
		},
		clone: function () {
			return new this.constructor().copy( this );
		},
		copy: function ( triangle ) {
			this.a.copy( triangle.a );
			this.b.copy( triangle.b );
			this.c.copy( triangle.c );
			return this;
		},
		getArea: function () {
			var v0 = new Vector3();
			var v1 = new Vector3();
			return function getArea() {
				v0.subVectors( this.c, this.b );
				v1.subVectors( this.a, this.b );
				return v0.cross( v1 ).length() * 0.5;
			};
		}(),
		getMidpoint: function ( target ) {
			if ( target === undefined ) {
				console.warn( 'THREE.Triangle: .getMidpoint() target is now required' );
				target = new Vector3();
			}
			return target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );
		},
		getNormal: function ( target ) {
			return Triangle.getNormal( this.a, this.b, this.c, target );
		},
		getPlane: function ( target ) {
			if ( target === undefined ) {
				console.warn( 'THREE.Triangle: .getPlane() target is now required' );
				target = new Vector3();
			}
			return target.setFromCoplanarPoints( this.a, this.b, this.c );
		},
		getBarycoord: function ( point, target ) {
			return Triangle.getBarycoord( point, this.a, this.b, this.c, target );
		},
		getUV: function ( point, uv1, uv2, uv3, target ) {
			return Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );
		},
		containsPoint: function ( point ) {
			return Triangle.containsPoint( point, this.a, this.b, this.c );
		},
		isFrontFacing: function ( direction ) {
			return Triangle.isFrontFacing( this.a, this.b, this.c, direction );
		},
		intersectsBox: function ( box ) {
			return box.intersectsTriangle( this );
		},
		closestPointToPoint: function () {
			var vab = new Vector3();
			var vac = new Vector3();
			var vbc = new Vector3();
			var vap = new Vector3();
			var vbp = new Vector3();
			var vcp = new Vector3();
			return function closestPointToPoint( p, target ) {
				if ( target === undefined ) {
					console.warn( 'THREE.Triangle: .closestPointToPoint() target is now required' );
					target = new Vector3();
				}
				var a = this.a, b = this.b, c = this.c;
				var v, w;
				vab.subVectors( b, a );
				vac.subVectors( c, a );
				vap.subVectors( p, a );
				var d1 = vab.dot( vap );
				var d2 = vac.dot( vap );
				if ( d1 <= 0 && d2 <= 0 ) {
					return target.copy( a );
				}
				vbp.subVectors( p, b );
				var d3 = vab.dot( vbp );
				var d4 = vac.dot( vbp );
				if ( d3 >= 0 && d4 <= d3 ) {
					return target.copy( b );
				}
				var vc = d1 * d4 - d3 * d2;
				if ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {
					v = d1 / ( d1 - d3 );
					return target.copy( a ).addScaledVector( vab, v );
				}
				vcp.subVectors( p, c );
				var d5 = vab.dot( vcp );
				var d6 = vac.dot( vcp );
				if ( d6 >= 0 && d5 <= d6 ) {
					return target.copy( c );
				}
				var vb = d5 * d2 - d1 * d6;
				if ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {
					w = d2 / ( d2 - d6 );
					return target.copy( a ).addScaledVector( vac, w );
				}
				var va = d3 * d6 - d5 * d4;
				if ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {
					vbc.subVectors( c, b );
					w = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );
					return target.copy( b ).addScaledVector( vbc, w ); // edge region of BC
				}
				var denom = 1 / ( va + vb + vc );
				v = vb * denom;
				w = vc * denom;
				return target.copy( a ).addScaledVector( vab, v ).addScaledVector( vac, w );
			};
		}(),
		equals: function ( triangle ) {
			return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	var ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
		'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
		'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
		'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
		'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
		'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
		'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
		'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
		'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
		'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
		'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
		'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
		'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
		'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
		'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
		'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
		'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
		'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
		'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
		'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
		'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
		'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
		'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
		'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };
	function Color( r, g, b ) {
		if ( g === undefined && b === undefined ) {
			return this.set( r );
		}
		return this.setRGB( r, g, b );
	}
	function hue2rgb( p, q, t ) {
		if ( t < 0 ) t += 1;
		if ( t > 1 ) t -= 1;
		if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
		if ( t < 1 / 2 ) return q;
		if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
		return p;
	}
	function SRGBToLinear( c ) {
		return ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );
	}
	function LinearToSRGB( c ) {
		return ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;
	}
	Object.assign( Color.prototype, {
		isColor: true,
		r: 1, g: 1, b: 1,
		set: function ( value ) {
			if ( value && value.isColor ) {
				this.copy( value );
			} else if ( typeof value === 'number' ) {
				this.setHex( value );
			} else if ( typeof value === 'string' ) {
				this.setStyle( value );
			}
			return this;
		},
		setScalar: function ( scalar ) {
			this.r = scalar;
			this.g = scalar;
			this.b = scalar;
			return this;
		},
		setHex: function ( hex ) {
			hex = Math.floor( hex );
			this.r = ( hex >> 16 & 255 ) / 255;
			this.g = ( hex >> 8 & 255 ) / 255;
			this.b = ( hex & 255 ) / 255;
			return this;
		},
		setRGB: function ( r, g, b ) {
			this.r = r;
			this.g = g;
			this.b = b;
			return this;
		},
		setHSL: function ( h, s, l ) {
			h = _Math.euclideanModulo( h, 1 );
			s = _Math.clamp( s, 0, 1 );
			l = _Math.clamp( l, 0, 1 );
			if ( s === 0 ) {
				this.r = this.g = this.b = l;
			} else {
				var p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
				var q = ( 2 * l ) - p;
				this.r = hue2rgb( q, p, h + 1 / 3 );
				this.g = hue2rgb( q, p, h );
				this.b = hue2rgb( q, p, h - 1 / 3 );
			}
			return this;
		},
		setStyle: function ( style ) {
			function handleAlpha( string ) {
				if ( string === undefined ) return;
				if ( parseFloat( string ) < 1 ) {
					console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );
				}
			}
			var m;
			if ( m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec( style ) ) {
				var color;
				var name = m[ 1 ];
				var components = m[ 2 ];
				switch ( name ) {
					case 'rgb':
					case 'rgba':
						if ( color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {
							this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
							this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
							this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;
							handleAlpha( color[ 5 ] );
							return this;
						}
						if ( color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {
							this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
							this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
							this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;
							handleAlpha( color[ 5 ] );
							return this;
						}
						break;
					case 'hsl':
					case 'hsla':
						if ( color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {
							var h = parseFloat( color[ 1 ] ) / 360;
							var s = parseInt( color[ 2 ], 10 ) / 100;
							var l = parseInt( color[ 3 ], 10 ) / 100;
							handleAlpha( color[ 5 ] );
							return this.setHSL( h, s, l );
						}
						break;
				}
			} else if ( m = /^\#([A-Fa-f0-9]+)$/.exec( style ) ) {
				var hex = m[ 1 ];
				var size = hex.length;
				if ( size === 3 ) {
					this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;
					this.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;
					this.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;
					return this;
				} else if ( size === 6 ) {
					this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;
					this.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;
					this.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;
					return this;
				}
			}
			if ( style && style.length > 0 ) {
				var hex = ColorKeywords[ style ];
				if ( hex !== undefined ) {
					this.setHex( hex );
				} else {
					console.warn( 'THREE.Color: Unknown color ' + style );
				}
			}
			return this;
		},
		clone: function () {
			return new this.constructor( this.r, this.g, this.b );
		},
		copy: function ( color ) {
			this.r = color.r;
			this.g = color.g;
			this.b = color.b;
			return this;
		},
		copyGammaToLinear: function ( color, gammaFactor ) {
			if ( gammaFactor === undefined ) gammaFactor = 2.0;
			this.r = Math.pow( color.r, gammaFactor );
			this.g = Math.pow( color.g, gammaFactor );
			this.b = Math.pow( color.b, gammaFactor );
			return this;
		},
		copyLinearToGamma: function ( color, gammaFactor ) {
			if ( gammaFactor === undefined ) gammaFactor = 2.0;
			var safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;
			this.r = Math.pow( color.r, safeInverse );
			this.g = Math.pow( color.g, safeInverse );
			this.b = Math.pow( color.b, safeInverse );
			return this;
		},
		convertGammaToLinear: function ( gammaFactor ) {
			this.copyGammaToLinear( this, gammaFactor );
			return this;
		},
		convertLinearToGamma: function ( gammaFactor ) {
			this.copyLinearToGamma( this, gammaFactor );
			return this;
		},
		copySRGBToLinear: function ( color ) {
			this.r = SRGBToLinear( color.r );
			this.g = SRGBToLinear( color.g );
			this.b = SRGBToLinear( color.b );
			return this;
		},
		copyLinearToSRGB: function ( color ) {
			this.r = LinearToSRGB( color.r );
			this.g = LinearToSRGB( color.g );
			this.b = LinearToSRGB( color.b );
			return this;
		},
		convertSRGBToLinear: function () {
			this.copySRGBToLinear( this );
			return this;
		},
		convertLinearToSRGB: function () {
			this.copyLinearToSRGB( this );
			return this;
		},
		getHex: function () {
			return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;
		},
		getHexString: function () {
			return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );
		},
		getHSL: function ( target ) {
			if ( target === undefined ) {
				console.warn( 'THREE.Color: .getHSL() target is now required' );
				target = { h: 0, s: 0, l: 0 };
			}
			var r = this.r, g = this.g, b = this.b;
			var max = Math.max( r, g, b );
			var min = Math.min( r, g, b );
			var hue, saturation;
			var lightness = ( min + max ) / 2.0;
			if ( min === max ) {
				hue = 0;
				saturation = 0;
			} else {
				var delta = max - min;
				saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );
				switch ( max ) {
					case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
					case g: hue = ( b - r ) / delta + 2; break;
					case b: hue = ( r - g ) / delta + 4; break;
				}
				hue /= 6;
			}
			target.h = hue;
			target.s = saturation;
			target.l = lightness;
			return target;
		},
		getStyle: function () {
			return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';
		},
		offsetHSL: function () {
			var hsl = {};
			return function ( h, s, l ) {
				this.getHSL( hsl );
				hsl.h += h; hsl.s += s; hsl.l += l;
				this.setHSL( hsl.h, hsl.s, hsl.l );
				return this;
			};
		}(),
		add: function ( color ) {
			this.r += color.r;
			this.g += color.g;
			this.b += color.b;
			return this;
		},
		addColors: function ( color1, color2 ) {
			this.r = color1.r + color2.r;
			this.g = color1.g + color2.g;
			this.b = color1.b + color2.b;
			return this;
		},
		addScalar: function ( s ) {
			this.r += s;
			this.g += s;
			this.b += s;
			return this;
		},
		sub: function ( color ) {
			this.r = Math.max( 0, this.r - color.r );
			this.g = Math.max( 0, this.g - color.g );
			this.b = Math.max( 0, this.b - color.b );
			return this;
		},
		multiply: function ( color ) {
			this.r *= color.r;
			this.g *= color.g;
			this.b *= color.b;
			return this;
		},
		multiplyScalar: function ( s ) {
			this.r *= s;
			this.g *= s;
			this.b *= s;
			return this;
		},
		lerp: function ( color, alpha ) {
			this.r += ( color.r - this.r ) * alpha;
			this.g += ( color.g - this.g ) * alpha;
			this.b += ( color.b - this.b ) * alpha;
			return this;
		},
		lerpHSL: function () {
			var hslA = { h: 0, s: 0, l: 0 };
			var hslB = { h: 0, s: 0, l: 0 };
			return function lerpHSL( color, alpha ) {
				this.getHSL( hslA );
				color.getHSL( hslB );
				var h = _Math.lerp( hslA.h, hslB.h, alpha );
				var s = _Math.lerp( hslA.s, hslB.s, alpha );
				var l = _Math.lerp( hslA.l, hslB.l, alpha );
				this.setHSL( h, s, l );
				return this;
			};
		}(),
		equals: function ( c ) {
			return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );
		},
		fromArray: function ( array, offset ) {
			if ( offset === undefined ) offset = 0;
			this.r = array[ offset ];
			this.g = array[ offset + 1 ];
			this.b = array[ offset + 2 ];
			return this;
		},
		toArray: function ( array, offset ) {
			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;
			array[ offset ] = this.r;
			array[ offset + 1 ] = this.g;
			array[ offset + 2 ] = this.b;
			return array;
		},
		toJSON: function () {
			return this.getHex();
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */
	function Face3( a, b, c, normal, color, materialIndex ) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();
		this.vertexNormals = Array.isArray( normal ) ? normal : [];
		this.color = ( color && color.isColor ) ? color : new Color();
		this.vertexColors = Array.isArray( color ) ? color : [];
		this.materialIndex = materialIndex !== undefined ? materialIndex : 0;
	}
	Object.assign( Face3.prototype, {
		clone: function () {
			return new this.constructor().copy( this );
		},
		copy: function ( source ) {
			this.a = source.a;
			this.b = source.b;
			this.c = source.c;
			this.normal.copy( source.normal );
			this.color.copy( source.color );
			this.materialIndex = source.materialIndex;
			for ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {
				this.vertexNormals[ i ] = source.vertexNormals[ i ].clone();
			}
			for ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {
				this.vertexColors[ i ] = source.vertexColors[ i ].clone();
			}
			return this;
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */
	var materialId = 0;
	function Material() {
		Object.defineProperty( this, 'id', { value: materialId ++ } );
		this.uuid = _Math.generateUUID();
		this.name = '';
		this.type = 'Material';
		this.fog = true;
		this.lights = true;
		this.blending = NormalBlending;
		this.side = FrontSide;
		this.flatShading = false;
		this.vertexTangents = false;
		this.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors
		this.opacity = 1;
		this.transparent = false;
		this.blendSrc = SrcAlphaFactor;
		this.blendDst = OneMinusSrcAlphaFactor;
		this.blendEquation = AddEquation;
		this.blendSrcAlpha = null;
		this.blendDstAlpha = null;
		this.blendEquationAlpha = null;
		this.depthFunc = LessEqualDepth;
		this.depthTest = true;
		this.depthWrite = true;
		this.stencilFunc = AlwaysStencilFunc;
		this.stencilRef = 0;
		this.stencilMask = 0xff;
		this.stencilFail = KeepStencilOp;
		this.stencilZFail = KeepStencilOp;
		this.stencilZPass = KeepStencilOp;
		this.stencilWrite = false;
		this.clippingPlanes = null;
		this.clipIntersection = false;
		this.clipShadows = false;
		this.shadowSide = null;
		this.colorWrite = true;
		this.precision = null; // override the renderer's default precision for this material
		this.polygonOffset = false;
		this.polygonOffsetFactor = 0;
		this.polygonOffsetUnits = 0;
		this.dithering = false;
		this.alphaTest = 0;
		this.premultipliedAlpha = false;
		this.visible = true;
		this.userData = {};
		this.needsUpdate = true;
	}
	Material.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {
		constructor: Material,
		isMaterial: true,
		onBeforeCompile: function () {},
		setValues: function ( values ) {
			if ( values === undefined ) return;
			for ( var key in values ) {
				var newValue = values[ key ];
				if ( newValue === undefined ) {
					console.warn( "THREE.Material: '" + key + "' parameter is undefined." );
					continue;
				}
				if ( key === 'shading' ) {
					console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
					this.flatShading = ( newValue === FlatShading ) ? true : false;
					continue;
				}
				var currentValue = this[ key ];
				if ( currentValue === undefined ) {
					console.warn( "THREE." + this.type + ": '" + key + "' is not a property of this material." );
					continue;
				}
				if ( currentValue && currentValue.isColor ) {
					currentValue.set( newValue );
				} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {
					currentValue.copy( newValue );
				} else {
					this[ key ] = newValue;
				}
			}
		},
		toJSON: function ( meta ) {
			var isRoot = ( meta === undefined || typeof meta === 'string' );
			if ( isRoot ) {
				meta = {
					textures: {},
					images: {}
				};
			}
			var data = {
				metadata: {
					version: 4.5,
					type: 'Material',
					generator: 'Material.toJSON'
				}
			};
			data.uuid = this.uuid;
			data.type = this.type;
			if ( this.name !== '' ) data.name = this.name;
			if ( this.color && this.color.isColor ) data.color = this.color.getHex();
			if ( this.roughness !== undefined ) data.roughness = this.roughness;
			if ( this.metalness !== undefined ) data.metalness = this.metalness;
			if ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();
			if ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;
			if ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();
			if ( this.shininess !== undefined ) data.shininess = this.shininess;
			if ( this.clearCoat !== undefined ) data.clearCoat = this.clearCoat;
			if ( this.clearCoatRoughness !== undefined ) data.clearCoatRoughness = this.clearCoatRoughness;
			if ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;
			if ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;
			if ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;
			if ( this.lightMap && this.lightMap.isTexture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;
			if ( this.aoMap && this.aoMap.isTexture ) {
				data.aoMap = this.aoMap.toJSON( meta ).uuid;
				data.aoMapIntensity = this.aoMapIntensity;
			}
			if ( this.bumpMap && this.bumpMap.isTexture ) {
				data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
				data.bumpScale = this.bumpScale;
			}
			if ( this.normalMap && this.normalMap.isTexture ) {
				data.normalMap = this.normalMap.toJSON( meta ).uuid;
				data.normalMapType = this.normalMapType;
				data.normalScale = this.normalScale.toArray();
			}
			if ( this.displacementMap && this.displacementMap.isTexture ) {
				data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
				data.displacementScale = this.displacementScale;
				data.displacementBias = this.displacementBias;
			}
			if ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;
			if ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;
			if ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;
			if ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;
			if ( this.envMap && this.envMap.isTexture ) {
				data.envMap = this.envMap.toJSON( meta ).uuid;
				data.reflectivity = this.reflectivity; // Scale behind envMap
				data.refractionRatio = this.refractionRatio;
				if ( this.combine !== undefined ) data.combine = this.combine;
				if ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;
			}
			if ( this.gradientMap && this.gradientMap.isTexture ) {
				data.gradientMap = this.gradientMap.toJSON( meta ).uuid;
			}
			if ( this.size !== undefined ) data.size = this.size;
			if ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;
			if ( this.blending !== NormalBlending ) data.blending = this.blending;
			if ( this.flatShading === true ) data.flatShading = this.flatShading;
			if ( this.side !== FrontSide ) data.side = this.side;
			if ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;
			if ( this.opacity < 1 ) data.opacity = this.opacity;
			if ( this.transparent === true ) data.transparent = this.transparent;
			data.depthFunc = this.depthFunc;
			data.depthTest = this.depthTest;
			data.depthWrite = this.depthWrite;
			data.stencilWrite = this.stencilWrite;
			data.stencilFunc = this.stencilFunc;
			data.stencilRef = this.stencilRef;
			data.stencilMask = this.stencilMask;
			data.stencilFail = this.stencilFail;
			data.stencilZFail = this.stencilZFail;
			data.stencilZPass = this.stencilZPass;
			if ( this.rotation && this.rotation !== 0 ) data.rotation = this.rotation;
			if ( this.polygonOffset === true ) data.polygonOffset = true;
			if ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;
			if ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;
			if ( this.linewidth && this.linewidth !== 1 ) data.linewidth = this.linewidth;
			if ( this.dashSize !== undefined ) data.dashSize = this.dashSize;
			if ( this.gapSize !== undefined ) data.gapSize = this.gapSize;
			if ( this.scale !== undefined ) data.scale = this.scale;
			if ( this.dithering === true ) data.dithering = true;
			if ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;
			if ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;
			if ( this.wireframe === true ) data.wireframe = this.wireframe;
			if ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;
			if ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;
			if ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;
			if ( this.morphTargets === true ) data.morphTargets = true;
			if ( this.morphNormals === true ) data.morphNormals = true;
			if ( this.skinning === true ) data.skinning = true;
			if ( this.visible === false ) data.visible = false;
			if ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;
			function extractFromCache( cache ) {
				var values = [];
				for ( var key in cache ) {
					var data = cache[ key ];
					delete data.metadata;
					values.push( data );
				}
				return values;
			}
			if ( isRoot ) {
				var textures = extractFromCache( meta.textures );
				var images = extractFromCache( meta.images );
				if ( textures.length > 0 ) data.textures = textures;
				if ( images.length > 0 ) data.images = images;
			}
			return data;
		},
		clone: function () {
			return new this.constructor().copy( this );
		},
		copy: function ( source ) {
			this.name = source.name;
			this.fog = source.fog;
			this.lights = source.lights;
			this.blending = source.blending;
			this.side = source.side;
			this.flatShading = source.flatShading;
			this.vertexColors = source.vertexColors;
			this.opacity = source.opacity;
			this.transparent = source.transparent;
			this.blendSrc = source.blendSrc;
			this.blendDst = source.blendDst;
			this.blendEquation = source.blendEquation;
			this.blendSrcAlpha = source.blendSrcAlpha;
			this.blendDstAlpha = source.blendDstAlpha;
			this.blendEquationAlpha = source.blendEquationAlpha;
			this.depthFunc = source.depthFunc;
			this.depthTest = source.depthTest;
			this.depthWrite = source.depthWrite;
			this.stencilWrite = source.stencilWrite;
			this.stencilFunc = source.stencilFunc;
			this.stencilRef = source.stencilRef;
			this.stencilMask = source.stencilMask;
			this.stencilFail = source.stencilFail;
			this.stencilZFail = source.stencilZFail;
			this.stencilZPass = source.stencilZPass;
			this.colorWrite = source.colorWrite;
			this.precision = source.precision;
			this.polygonOffset = source.polygonOffset;
			this.polygonOffsetFactor = source.polygonOffsetFactor;
			this.polygonOffsetUnits = source.polygonOffsetUnits;
			this.dithering = source.dithering;
			this.alphaTest = source.alphaTest;
			this.premultipliedAlpha = source.premultipliedAlpha;
			this.visible = source.visible;
			this.userData = JSON.parse( JSON.stringify( source.userData ) );
			this.clipShadows = source.clipShadows;
			this.clipIntersection = source.clipIntersection;
			var srcPlanes = source.clippingPlanes,
				dstPlanes = null;
			if ( srcPlanes !== null ) {
				var n = srcPlanes.length;
				dstPlanes = new Array( n );
				for ( var i = 0; i !== n; ++ i )
					dstPlanes[ i ] = srcPlanes[ i ].clone();
			}
			this.clippingPlanes = dstPlanes;
			this.shadowSide = source.shadowSide;
			return this;
		},
		dispose: function () {
			this.dispatchEvent( { type: 'dispose' } );
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>
	 * }
	 */
	function MeshBasicMaterial( parameters ) {
		Material.call( this );
		this.type = 'MeshBasicMaterial';
		this.color = new Color( 0xffffff ); // emissive
		this.map = null;
		this.lightMap = null;
		this.lightMapIntensity = 1.0;
		this.aoMap = null;
		this.aoMapIntensity = 1.0;
		this.specularMap = null;
		this.alphaMap = null;
		this.envMap = null;
		this.combine = MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;
		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';
		this.skinning = false;
		this.morphTargets = false;
		this.lights = false;
		this.setValues( parameters );
	}
	MeshBasicMaterial.prototype = Object.create( Material.prototype );
	MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;
	MeshBasicMaterial.prototype.isMeshBasicMaterial = true;
	MeshBasicMaterial.prototype.copy = function ( source ) {
		Material.prototype.copy.call( this, source );
		this.color.copy( source.color );
		this.map = source.map;
		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;
		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;
		this.specularMap = source.specularMap;
		this.alphaMap = source.alphaMap;
		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;
		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;
		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		return this;
	};
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function BufferAttribute( array, itemSize, normalized ) {
		if ( Array.isArray( array ) ) {
			throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );
		}
		this.name = '';
		this.array = array;
		this.itemSize = itemSize;
		this.count = array !== undefined ? array.length / itemSize : 0;
		this.normalized = normalized === true;
		this.dynamic = false;
		this.updateRange = { offset: 0, count: - 1 };
		this.version = 0;
	}
	Object.defineProperty( BufferAttribute.prototype, 'needsUpdate', {
		set: function ( value ) {
			if ( value === true ) this.version ++;
		}
	} );
	Object.assign( BufferAttribute.prototype, {
		isBufferAttribute: true,
		onUploadCallback: function () {},
		setArray: function ( array ) {
			if ( Array.isArray( array ) ) {
				throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );
			}
			this.count = array !== undefined ? array.length / this.itemSize : 0;
			this.array = array;
			return this;
		},
		setDynamic: function ( value ) {
			this.dynamic = value;
			return this;
		},
		copy: function ( source ) {
			this.name = source.name;
			this.array = new source.array.constructor( source.array );
			this.itemSize = source.itemSize;
			this.count = source.count;
			this.normalized = source.normalized;
			this.dynamic = source.dynamic;
			return this;
		},
		copyAt: function ( index1, attribute, index2 ) {
			index1 *= this.itemSize;
			index2 *= attribute.itemSize;
			for ( var i = 0, l = this.itemSize; i < l; i ++ ) {
				this.array[ index1 + i ] = attribute.array[ index2 + i ];
			}
			return this;
		},
		copyArray: function ( array ) {
			this.array.set( array );
			return this;
		},
		copyColorsArray: function ( colors ) {
			var array = this.array, offset = 0;
			for ( var i = 0, l = colors.length; i < l; i ++ ) {
				var color = colors[ i ];
				if ( color === undefined ) {
					console.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );
					color = new Color();
				}
				array[ offset ++ ] = color.r;
				array[ offset ++ ] = color.g;
				array[ offset ++ ] = color.b;
			}
			return this;
		},
		copyVector2sArray: function ( vectors ) {
			var array = this.array, offset = 0;
			for ( var i = 0, l = vectors.length; i < l; i ++ ) {
				var vector = vectors[ i ];
				if ( vector === undefined ) {
					console.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );
					vector = new Vector2();
				}
				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;
			}
			return this;
		},
		copyVector3sArray: function ( vectors ) {
			var array = this.array, offset = 0;
			for ( var i = 0, l = vectors.length; i < l; i ++ ) {
				var vector = vectors[ i ];
				if ( vector === undefined ) {
					console.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );
					vector = new Vector3();
				}
				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;
				array[ offset ++ ] = vector.z;
			}
			return this;
		},
		copyVector4sArray: function ( vectors ) {
			var array = this.array, offset = 0;
			for ( var i = 0, l = vectors.length; i < l; i ++ ) {
				var vector = vectors[ i ];
				if ( vector === undefined ) {
					console.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );
					vector = new Vector4();
				}
				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;
				array[ offset ++ ] = vector.z;
				array[ offset ++ ] = vector.w;
			}
			return this;
		},
		set: function ( value, offset ) {
			if ( offset === undefined ) offset = 0;
			this.array.set( value, offset );
			return this;
		},
		getX: function ( index ) {
			return this.array[ index * this.itemSize ];
		},
		setX: function ( index, x ) {
			this.array[ index * this.itemSize ] = x;
			return this;
		},
		getY: function ( index ) {
			return this.array[ index * this.itemSize + 1 ];
		},
		setY: function ( index, y ) {
			this.array[ index * this.itemSize + 1 ] = y;
			return this;
		},
		getZ: function ( index ) {
			return this.array[ index * this.itemSize + 2 ];
		},
		setZ: function ( index, z ) {
			this.array[ index * this.itemSize + 2 ] = z;
			return this;
		},
		getW: function ( index ) {
			return this.array[ index * this.itemSize + 3 ];
		},
		setW: function ( index, w ) {
			this.array[ index * this.itemSize + 3 ] = w;
			return this;
		},
		setXY: function ( index, x, y ) {
			index *= this.itemSize;
			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;
			return this;
		},
		setXYZ: function ( index, x, y, z ) {
			index *= this.itemSize;
			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;
			this.array[ index + 2 ] = z;
			return this;
		},
		setXYZW: function ( index, x, y, z, w ) {
			index *= this.itemSize;
			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;
			this.array[ index + 2 ] = z;
			this.array[ index + 3 ] = w;
			return this;
		},
		onUpload: function ( callback ) {
			this.onUploadCallback = callback;
			return this;
		},
		clone: function () {
			return new this.constructor( this.array, this.itemSize ).copy( this );
		},
		toJSON: function () {
			return {
				itemSize: this.itemSize,
				type: this.array.constructor.name,
				array: Array.prototype.slice.call( this.array ),
				normalized: this.normalized
			};
		}
	} );
	function Int8BufferAttribute( array, itemSize, normalized ) {
		BufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );
	}
	Int8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Int8BufferAttribute.prototype.constructor = Int8BufferAttribute;
	function Uint8BufferAttribute( array, itemSize, normalized ) {
		BufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );
	}
	Uint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Uint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;
	function Uint8ClampedBufferAttribute( array, itemSize, normalized ) {
		BufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );
	}
	Uint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Uint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;
	function Int16BufferAttribute( array, itemSize, normalized ) {
		BufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );
	}
	Int16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Int16BufferAttribute.prototype.constructor = Int16BufferAttribute;
	function Uint16BufferAttribute( array, itemSize, normalized ) {
		BufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );
	}
	Uint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Uint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;
	function Int32BufferAttribute( array, itemSize, normalized ) {
		BufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );
	}
	Int32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Int32BufferAttribute.prototype.constructor = Int32BufferAttribute;
	function Uint32BufferAttribute( array, itemSize, normalized ) {
		BufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );
	}
	Uint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Uint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;
	function Float32BufferAttribute( array, itemSize, normalized ) {
		BufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );
	}
	Float32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Float32BufferAttribute.prototype.constructor = Float32BufferAttribute;
	function Float64BufferAttribute( array, itemSize, normalized ) {
		BufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );
	}
	Float64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Float64BufferAttribute.prototype.constructor = Float64BufferAttribute;
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function DirectGeometry() {
		this.vertices = [];
		this.normals = [];
		this.colors = [];
		this.uvs = [];
		this.uvs2 = [];
		this.groups = [];
		this.morphTargets = {};
		this.skinWeights = [];
		this.skinIndices = [];
		this.boundingBox = null;
		this.boundingSphere = null;
		this.verticesNeedUpdate = false;
		this.normalsNeedUpdate = false;
		this.colorsNeedUpdate = false;
		this.uvsNeedUpdate = false;
		this.groupsNeedUpdate = false;
	}
	Object.assign( DirectGeometry.prototype, {
		computeGroups: function ( geometry ) {
			var group;
			var groups = [];
			var materialIndex = undefined;
			var faces = geometry.faces;
			for ( var i = 0; i < faces.length; i ++ ) {
				var face = faces[ i ];
				if ( face.materialIndex !== materialIndex ) {
					materialIndex = face.materialIndex;
					if ( group !== undefined ) {
						group.count = ( i * 3 ) - group.start;
						groups.push( group );
					}
					group = {
						start: i * 3,
						materialIndex: materialIndex
					};
				}
			}
			if ( group !== undefined ) {
				group.count = ( i * 3 ) - group.start;
				groups.push( group );
			}
			this.groups = groups;
		},
		fromGeometry: function ( geometry ) {
			var faces = geometry.faces;
			var vertices = geometry.vertices;
			var faceVertexUvs = geometry.faceVertexUvs;
			var hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;
			var hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;
			var morphTargets = geometry.morphTargets;
			var morphTargetsLength = morphTargets.length;
			var morphTargetsPosition;
			if ( morphTargetsLength > 0 ) {
				morphTargetsPosition = [];
				for ( var i = 0; i < morphTargetsLength; i ++ ) {
					morphTargetsPosition[ i ] = {
						name: morphTargets[ i ].name,
					 	data: []
					};
				}
				this.morphTargets.position = morphTargetsPosition;
			}
			var morphNormals = geometry.morphNormals;
			var morphNormalsLength = morphNormals.length;
			var morphTargetsNormal;
			if ( morphNormalsLength > 0 ) {
				morphTargetsNormal = [];
				for ( var i = 0; i < morphNormalsLength; i ++ ) {
					morphTargetsNormal[ i ] = {
						name: morphNormals[ i ].name,
					 	data: []
					};
				}
				this.morphTargets.normal = morphTargetsNormal;
			}
			var skinIndices = geometry.skinIndices;
			var skinWeights = geometry.skinWeights;
			var hasSkinIndices = skinIndices.length === vertices.length;
			var hasSkinWeights = skinWeights.length === vertices.length;
			if ( vertices.length > 0 && faces.length === 0 ) {
				console.error( 'THREE.DirectGeometry: Faceless geometries are not supported.' );
			}
			for ( var i = 0; i < faces.length; i ++ ) {
				var face = faces[ i ];
				this.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );
				var vertexNormals = face.vertexNormals;
				if ( vertexNormals.length === 3 ) {
					this.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );
				} else {
					var normal = face.normal;
					this.normals.push( normal, normal, normal );
				}
				var vertexColors = face.vertexColors;
				if ( vertexColors.length === 3 ) {
					this.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );
				} else {
					var color = face.color;
					this.colors.push( color, color, color );
				}
				if ( hasFaceVertexUv === true ) {
					var vertexUvs = faceVertexUvs[ 0 ][ i ];
					if ( vertexUvs !== undefined ) {
						this.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );
					} else {
						console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );
						this.uvs.push( new Vector2(), new Vector2(), new Vector2() );
					}
				}
				if ( hasFaceVertexUv2 === true ) {
					var vertexUvs = faceVertexUvs[ 1 ][ i ];
					if ( vertexUvs !== undefined ) {
						this.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );
					} else {
						console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );
						this.uvs2.push( new Vector2(), new Vector2(), new Vector2() );
					}
				}
				for ( var j = 0; j < morphTargetsLength; j ++ ) {
					var morphTarget = morphTargets[ j ].vertices;
					morphTargetsPosition[ j ].data.push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );
				}
				for ( var j = 0; j < morphNormalsLength; j ++ ) {
					var morphNormal = morphNormals[ j ].vertexNormals[ i ];
					morphTargetsNormal[ j ].data.push( morphNormal.a, morphNormal.b, morphNormal.c );
				}
				if ( hasSkinIndices ) {
					this.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );
				}
				if ( hasSkinWeights ) {
					this.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );
				}
			}
			this.computeGroups( geometry );
			this.verticesNeedUpdate = geometry.verticesNeedUpdate;
			this.normalsNeedUpdate = geometry.normalsNeedUpdate;
			this.colorsNeedUpdate = geometry.colorsNeedUpdate;
			this.uvsNeedUpdate = geometry.uvsNeedUpdate;
			this.groupsNeedUpdate = geometry.groupsNeedUpdate;
			if ( geometry.boundingSphere !== null ) {
				this.boundingSphere = geometry.boundingSphere.clone();
			}
			if ( geometry.boundingBox !== null ) {
				this.boundingBox = geometry.boundingBox.clone();
			}
			return this;
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function arrayMax( array ) {
		if ( array.length === 0 ) return - Infinity;
		var max = array[ 0 ];
		for ( var i = 1, l = array.length; i < l; ++ i ) {
			if ( array[ i ] > max ) max = array[ i ];
		}
		return max;
	}
	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */
	var bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id
	function BufferGeometry() {
		Object.defineProperty( this, 'id', { value: bufferGeometryId += 2 } );
		this.uuid = _Math.generateUUID();
		this.name = '';
		this.type = 'BufferGeometry';
		this.index = null;
		this.attributes = {};
		this.morphAttributes = {};
		this.groups = [];
		this.boundingBox = null;
		this.boundingSphere = null;
		this.drawRange = { start: 0, count: Infinity };
		this.userData = {};
	}
	BufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {
		constructor: BufferGeometry,
		isBufferGeometry: true,
		getIndex: function () {
			return this.index;
		},
		setIndex: function ( index ) {
			if ( Array.isArray( index ) ) {
				this.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );
			} else {
				this.index = index;
			}
		},
		addAttribute: function ( name, attribute ) {
			if ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {
				console.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );
				return this.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );
			}
			if ( name === 'index' ) {
				console.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );
				this.setIndex( attribute );
				return this;
			}
			this.attributes[ name ] = attribute;
			return this;
		},
		getAttribute: function ( name ) {
			return this.attributes[ name ];
		},
		removeAttribute: function ( name ) {
			delete this.attributes[ name ];
			return this;
		},
		addGroup: function ( start, count, materialIndex ) {
			this.groups.push( {
				start: start,
				count: count,
				materialIndex: materialIndex !== undefined ? materialIndex : 0
			} );
		},
		clearGroups: function () {
			this.groups = [];
		},
		setDrawRange: function ( start, count ) {
			this.drawRange.start = start;
			this.drawRange.count = count;
		},
		applyMatrix: function ( matrix ) {
			var position = this.attributes.position;
			if ( position !== undefined ) {
				matrix.applyToBufferAttribute( position );
				position.needsUpdate = true;
			}
			var normal = this.attributes.normal;
			if ( normal !== undefined ) {
				var normalMatrix = new Matrix3().getNormalMatrix( matrix );
				normalMatrix.applyToBufferAttribute( normal );
				normal.needsUpdate = true;
			}
			var tangent = this.attributes.tangent;
			if ( tangent !== undefined ) {
				var normalMatrix = new Matrix3().getNormalMatrix( matrix );
				normalMatrix.applyToBufferAttribute( tangent );
				tangent.needsUpdate = true;
			}
			if ( this.boundingBox !== null ) {
				this.computeBoundingBox();
			}
			if ( this.boundingSphere !== null ) {
				this.computeBoundingSphere();
			}
			return this;
		},
		rotateX: function () {
			var m1 = new Matrix4();
			return function rotateX( angle ) {
				m1.makeRotationX( angle );
				this.applyMatrix( m1 );
				return this;
			};
		}(),
		rotateY: function () {
			var m1 = new Matrix4();
			return function rotateY( angle ) {
				m1.makeRotationY( angle );
				this.applyMatrix( m1 );
				return this;
			};
		}(),
		rotateZ: function () {
			var m1 = new Matrix4();
			return function rotateZ( angle ) {
				m1.makeRotationZ( angle );
				this.applyMatrix( m1 );
				return this;
			};
		}(),
		translate: function () {
			var m1 = new Matrix4();
			return function translate( x, y, z ) {
				m1.makeTranslation( x, y, z );
				this.applyMatrix( m1 );
				return this;
			};
		}(),
		scale: function () {
			var m1 = new Matrix4();
			return function scale( x, y, z ) {
				m1.makeScale( x, y, z );
				this.applyMatrix( m1 );
				return this;
			};
		}(),
		lookAt: function () {
			var obj = new Object3D();
			return function lookAt( vector ) {
				obj.lookAt( vector );
				obj.updateMatrix();
				this.applyMatrix( obj.matrix );
			};
		}(),
		center: function () {
			var offset = new Vector3();
			return function center() {
				this.computeBoundingBox();
				this.boundingBox.getCenter( offset ).negate();
				this.translate( offset.x, offset.y, offset.z );
				return this;
			};
		}(),
		setFromObject: function ( object ) {
			var geometry = object.geometry;
			if ( object.isPoints || object.isLine ) {
				var positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );
				var colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );
				this.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );
				this.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );
				if ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {
					var lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );
					this.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );
				}
				if ( geometry.boundingSphere !== null ) {
					this.boundingSphere = geometry.boundingSphere.clone();
				}
				if ( geometry.boundingBox !== null ) {
					this.boundingBox = geometry.boundingBox.clone();
				}
			} else if ( object.isMesh ) {
				if ( geometry && geometry.isGeometry ) {
					this.fromGeometry( geometry );
				}
			}
			return this;
		},
		setFromPoints: function ( points ) {
			var position = [];
			for ( var i = 0, l = points.length; i < l; i ++ ) {
				var point = points[ i ];
				position.push( point.x, point.y, point.z || 0 );
			}
			this.addAttribute( 'position', new Float32BufferAttribute( position, 3 ) );
			return this;
		},
		updateFromObject: function ( object ) {
			var geometry = object.geometry;
			if ( object.isMesh ) {
				var direct = geometry.__directGeometry;
				if ( geometry.elementsNeedUpdate === true ) {
					direct = undefined;
					geometry.elementsNeedUpdate = false;
				}
				if ( direct === undefined ) {
					return this.fromGeometry( geometry );
				}
				direct.verticesNeedUpdate = geometry.verticesNeedUpdate;
				direct.normalsNeedUpdate = geometry.normalsNeedUpdate;
				direct.colorsNeedUpdate = geometry.colorsNeedUpdate;
				direct.uvsNeedUpdate = geometry.uvsNeedUpdate;
				direct.groupsNeedUpdate = geometry.groupsNeedUpdate;
				geometry.verticesNeedUpdate = false;
				geometry.normalsNeedUpdate = false;
				geometry.colorsNeedUpdate = false;
				geometry.uvsNeedUpdate = false;
				geometry.groupsNeedUpdate = false;
				geometry = direct;
			}
			var attribute;
			if ( geometry.verticesNeedUpdate === true ) {
				attribute = this.attributes.position;
				if ( attribute !== undefined ) {
					attribute.copyVector3sArray( geometry.vertices );
					attribute.needsUpdate = true;
				}
				geometry.verticesNeedUpdate = false;
			}
			if ( geometry.normalsNeedUpdate === true ) {
				attribute = this.attributes.normal;
				if ( attribute !== undefined ) {
					attribute.copyVector3sArray( geometry.normals );
					attribute.needsUpdate = true;
				}
				geometry.normalsNeedUpdate = false;
			}
			if ( geometry.colorsNeedUpdate === true ) {
				attribute = this.attributes.color;
				if ( attribute !== undefined ) {
					attribute.copyColorsArray( geometry.colors );
					attribute.needsUpdate = true;
				}
				geometry.colorsNeedUpdate = false;
			}
			if ( geometry.uvsNeedUpdate ) {
				attribute = this.attributes.uv;
				if ( attribute !== undefined ) {
					attribute.copyVector2sArray( geometry.uvs );
					attribute.needsUpdate = true;
				}
				geometry.uvsNeedUpdate = false;
			}
			if ( geometry.lineDistancesNeedUpdate ) {
				attribute = this.attributes.lineDistance;
				if ( attribute !== undefined ) {
					attribute.copyArray( geometry.lineDistances );
					attribute.needsUpdate = true;
				}
				geometry.lineDistancesNeedUpdate = false;
			}
			if ( geometry.groupsNeedUpdate ) {
				geometry.computeGroups( object.geometry );
				this.groups = geometry.groups;
				geometry.groupsNeedUpdate = false;
			}
			return this;
		},
		fromGeometry: function ( geometry ) {
			geometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );
			return this.fromDirectGeometry( geometry.__directGeometry );
		},
		fromDirectGeometry: function ( geometry ) {
			var positions = new Float32Array( geometry.vertices.length * 3 );
			this.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );
			if ( geometry.normals.length > 0 ) {
				var normals = new Float32Array( geometry.normals.length * 3 );
				this.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );
			}
			if ( geometry.colors.length > 0 ) {
				var colors = new Float32Array( geometry.colors.length * 3 );
				this.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );
			}
			if ( geometry.uvs.length > 0 ) {
				var uvs = new Float32Array( geometry.uvs.length * 2 );
				this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );
			}
			if ( geometry.uvs2.length > 0 ) {
				var uvs2 = new Float32Array( geometry.uvs2.length * 2 );
				this.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );
			}
			this.groups = geometry.groups;
			for ( var name in geometry.morphTargets ) {
				var array = [];
				var morphTargets = geometry.morphTargets[ name ];
				for ( var i = 0, l = morphTargets.length; i < l; i ++ ) {
					var morphTarget = morphTargets[ i ];
					var attribute = new Float32BufferAttribute( morphTarget.data.length * 3, 3 );
					attribute.name = morphTarget.name;
					array.push( attribute.copyVector3sArray( morphTarget.data ) );
				}
				this.morphAttributes[ name ] = array;
			}
			if ( geometry.skinIndices.length > 0 ) {
				var skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );
				this.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );
			}
			if ( geometry.skinWeights.length > 0 ) {
				var skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );
				this.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );
			}
			if ( geometry.boundingSphere !== null ) {
				this.boundingSphere = geometry.boundingSphere.clone();
			}
			if ( geometry.boundingBox !== null ) {
				this.boundingBox = geometry.boundingBox.clone();
			}
			return this;
		},
		computeBoundingBox: function () {
			var box = new Box3();
			return function computeBoundingBox() {
				if ( this.boundingBox === null ) {
					this.boundingBox = new Box3();
				}
				var position = this.attributes.position;
				var morphAttributesPosition = this.morphAttributes.position;
				if ( position !== undefined ) {
					this.boundingBox.setFromBufferAttribute( position );
					if ( morphAttributesPosition ) {
						for ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {
							var morphAttribute = morphAttributesPosition[ i ];
							box.setFromBufferAttribute( morphAttribute );
							this.boundingBox.expandByPoint( box.min );
							this.boundingBox.expandByPoint( box.max );
						}
					}
				} else {
					this.boundingBox.makeEmpty();
				}
				if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {
					console.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );
				}
			};
		}(),
		computeBoundingSphere: function () {
			var box = new Box3();
			var boxMorphTargets = new Box3();
			var vector = new Vector3();
			return function computeBoundingSphere() {
				if ( this.boundingSphere === null ) {
					this.boundingSphere = new Sphere();
				}
				var position = this.attributes.position;
				var morphAttributesPosition = this.morphAttributes.position;
				if ( position ) {
					var center = this.boundingSphere.center;
					box.setFromBufferAttribute( position );
					if ( morphAttributesPosition ) {
						for ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {
							var morphAttribute = morphAttributesPosition[ i ];
							boxMorphTargets.setFromBufferAttribute( morphAttribute );
							box.expandByPoint( boxMorphTargets.min );
							box.expandByPoint( boxMorphTargets.max );
						}
					}
					box.getCenter( center );
					var maxRadiusSq = 0;
					for ( var i = 0, il = position.count; i < il; i ++ ) {
						vector.fromBufferAttribute( position, i );
						maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );
					}
					if ( morphAttributesPosition ) {
						for ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {
							var morphAttribute = morphAttributesPosition[ i ];
							for ( var j = 0, jl = morphAttribute.count; j < jl; j ++ ) {
								vector.fromBufferAttribute( morphAttribute, j );
								maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );
							}
						}
					}
					this.boundingSphere.radius = Math.sqrt( maxRadiusSq );
					if ( isNaN( this.boundingSphere.radius ) ) {
						console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );
					}
				}
			};
		}(),
		computeFaceNormals: function () {
		},
		computeVertexNormals: function () {
			var index = this.index;
			var attributes = this.attributes;
			if ( attributes.position ) {
				var positions = attributes.position.array;
				if ( attributes.normal === undefined ) {
					this.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );
				} else {
					var array = attributes.normal.array;
					for ( var i = 0, il = array.length; i < il; i ++ ) {
						array[ i ] = 0;
					}
				}
				var normals = attributes.normal.array;
				var vA, vB, vC;
				var pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
				var cb = new Vector3(), ab = new Vector3();
				if ( index ) {
					var indices = index.array;
					for ( var i = 0, il = index.count; i < il; i += 3 ) {
						vA = indices[ i + 0 ] * 3;
						vB = indices[ i + 1 ] * 3;
						vC = indices[ i + 2 ] * 3;
						pA.fromArray( positions, vA );
						pB.fromArray( positions, vB );
						pC.fromArray( positions, vC );
						cb.subVectors( pC, pB );
						ab.subVectors( pA, pB );
						cb.cross( ab );
						normals[ vA ] += cb.x;
						normals[ vA + 1 ] += cb.y;
						normals[ vA + 2 ] += cb.z;
						normals[ vB ] += cb.x;
						normals[ vB + 1 ] += cb.y;
						normals[ vB + 2 ] += cb.z;
						normals[ vC ] += cb.x;
						normals[ vC + 1 ] += cb.y;
						normals[ vC + 2 ] += cb.z;
					}
				} else {
					for ( var i = 0, il = positions.length; i < il; i += 9 ) {
						pA.fromArray( positions, i );
						pB.fromArray( positions, i + 3 );
						pC.fromArray( positions, i + 6 );
						cb.subVectors( pC, pB );
						ab.subVectors( pA, pB );
						cb.cross( ab );
						normals[ i ] = cb.x;
						normals[ i + 1 ] = cb.y;
						normals[ i + 2 ] = cb.z;
						normals[ i + 3 ] = cb.x;
						normals[ i + 4 ] = cb.y;
						normals[ i + 5 ] = cb.z;
						normals[ i + 6 ] = cb.x;
						normals[ i + 7 ] = cb.y;
						normals[ i + 8 ] = cb.z;
					}
				}
				this.normalizeNormals();
				attributes.normal.needsUpdate = true;
			}
		},
		merge: function ( geometry, offset ) {
			if ( ! ( geometry && geometry.isBufferGeometry ) ) {
				console.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );
				return;
			}
			if ( offset === undefined ) {
				offset = 0;
				console.warn(
					'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '
					+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'
				);
			}
			var attributes = this.attributes;
			for ( var key in attributes ) {
				if ( geometry.attributes[ key ] === undefined ) continue;
				var attribute1 = attributes[ key ];
				var attributeArray1 = attribute1.array;
				var attribute2 = geometry.attributes[ key ];
				var attributeArray2 = attribute2.array;
				var attributeOffset = attribute2.itemSize * offset;
				var length = Math.min( attributeArray2.length, attributeArray1.length - attributeOffset );
				for ( var i = 0, j = attributeOffset; i < length; i ++, j ++ ) {
					attributeArray1[ j ] = attributeArray2[ i ];
				}
			}
			return this;
		},
		normalizeNormals: function () {
			var vector = new Vector3();
			return function normalizeNormals() {
				var normals = this.attributes.normal;
				for ( var i = 0, il = normals.count; i < il; i ++ ) {
					vector.x = normals.getX( i );
					vector.y = normals.getY( i );
					vector.z = normals.getZ( i );
					vector.normalize();
					normals.setXYZ( i, vector.x, vector.y, vector.z );
				}
			};
		}(),
		toNonIndexed: function () {
			function convertBufferAttribute( attribute, indices ) {
				var array = attribute.array;
				var itemSize = attribute.itemSize;
				var array2 = new array.constructor( indices.length * itemSize );
				var index = 0, index2 = 0;
				for ( var i = 0, l = indices.length; i < l; i ++ ) {
					index = indices[ i ] * itemSize;
					for ( var j = 0; j < itemSize; j ++ ) {
						array2[ index2 ++ ] = array[ index ++ ];
					}
				}
				return new BufferAttribute( array2, itemSize );
			}
			if ( this.index === null ) {
				console.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );
				return this;
			}
			var geometry2 = new BufferGeometry();
			var indices = this.index.array;
			var attributes = this.attributes;
			for ( var name in attributes ) {
				var attribute = attributes[ name ];
				var newAttribute = convertBufferAttribute( attribute, indices );
				geometry2.addAttribute( name, newAttribute );
			}
			var morphAttributes = this.morphAttributes;
			for ( name in morphAttributes ) {
				var morphArray = [];
				var morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes
				for ( var i = 0, il = morphAttribute.length; i < il; i ++ ) {
					var attribute = morphAttribute[ i ];
					var newAttribute = convertBufferAttribute( attribute, indices );
					morphArray.push( newAttribute );
				}
				geometry2.morphAttributes[ name ] = morphArray;
			}
			var groups = this.groups;
			for ( var i = 0, l = groups.length; i < l; i ++ ) {
				var group = groups[ i ];
				geometry2.addGroup( group.start, group.count, group.materialIndex );
			}
			return geometry2;
		},
		toJSON: function () {
			var data = {
				metadata: {
					version: 4.5,
					type: 'BufferGeometry',
					generator: 'BufferGeometry.toJSON'
				}
			};
			data.uuid = this.uuid;
			data.type = this.type;
			if ( this.name !== '' ) data.name = this.name;
			if ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;
			if ( this.parameters !== undefined ) {
				var parameters = this.parameters;
				for ( var key in parameters ) {
					if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];
				}
				return data;
			}
			data.data = { attributes: {} };
			var index = this.index;
			if ( index !== null ) {
				data.data.index = {
					type: index.array.constructor.name,
					array: Array.prototype.slice.call( index.array )
				};
			}
			var attributes = this.attributes;
			for ( var key in attributes ) {
				var attribute = attributes[ key ];
				var attributeData = attribute.toJSON();
				if ( attribute.name !== '' ) attributeData.name = attribute.name;
				data.data.attributes[ key ] = attributeData;
			}
			var morphAttributes = {};
			var hasMorphAttributes = false;
			for ( var key in this.morphAttributes ) {
				var attributeArray = this.morphAttributes[ key ];
				var array = [];
				for ( var i = 0, il = attributeArray.length; i < il; i ++ ) {
					var attribute = attributeArray[ i ];
					var attributeData = attribute.toJSON();
					if ( attribute.name !== '' ) attributeData.name = attribute.name;
					array.push( attributeData );
				}
				if ( array.length > 0 ) {
					morphAttributes[ key ] = array;
					hasMorphAttributes = true;
				}
			}
			if ( hasMorphAttributes ) data.data.morphAttributes = morphAttributes;
			var groups = this.groups;
			if ( groups.length > 0 ) {
				data.data.groups = JSON.parse( JSON.stringify( groups ) );
			}
			var boundingSphere = this.boundingSphere;
			if ( boundingSphere !== null ) {
				data.data.boundingSphere = {
					center: boundingSphere.center.toArray(),
					radius: boundingSphere.radius
				};
			}
			return data;
		},
		clone: function () {
			/*
			 var parameters = this.parameters;
			 if ( parameters !== undefined ) {
			 var values = [];
			 for ( var key in parameters ) {
			 values.push( parameters[ key ] );
			 }
			 var geometry = Object.create( this.constructor.prototype );
			 this.constructor.apply( geometry, values );
			 return geometry;
			 }
			 return new this.constructor().copy( this );
			 */
			return new BufferGeometry().copy( this );
		},
		copy: function ( source ) {
			var name, i, l;
			this.index = null;
			this.attributes = {};
			this.morphAttributes = {};
			this.groups = [];
			this.boundingBox = null;
			this.boundingSphere = null;
			this.name = source.name;
			var index = source.index;
			if ( index !== null ) {
				this.setIndex( index.clone() );
			}
			var attributes = source.attributes;
			for ( name in attributes ) {
				var attribute = attributes[ name ];
				this.addAttribute( name, attribute.clone() );
			}
			var morphAttributes = source.morphAttributes;
			for ( name in morphAttributes ) {
				var array = [];
				var morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes
				for ( i = 0, l = morphAttribute.length; i < l; i ++ ) {
					array.push( morphAttribute[ i ].clone() );
				}
				this.morphAttributes[ name ] = array;
			}
			var groups = source.groups;
			for ( i = 0, l = groups.length; i < l; i ++ ) {
				var group = groups[ i ];
				this.addGroup( group.start, group.count, group.materialIndex );
			}
			var boundingBox = source.boundingBox;
			if ( boundingBox !== null ) {
				this.boundingBox = boundingBox.clone();
			}
			var boundingSphere = source.boundingSphere;
			if ( boundingSphere !== null ) {
				this.boundingSphere = boundingSphere.clone();
			}
			this.drawRange.start = source.drawRange.start;
			this.drawRange.count = source.drawRange.count;
			this.userData = source.userData;
			return this;
		},
		dispose: function () {
			this.dispatchEvent( { type: 'dispose' } );
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author jonobr1 / http://jonobr1.com/
	 */
	function Mesh( geometry, material ) {
		Object3D.call( this );
		this.type = 'Mesh';
		this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
		this.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );
		this.drawMode = TrianglesDrawMode;
		this.updateMorphTargets();
	}
	Mesh.prototype = Object.assign( Object.create( Object3D.prototype ), {
		constructor: Mesh,
		isMesh: true,
		setDrawMode: function ( value ) {
			this.drawMode = value;
		},
		copy: function ( source ) {
			Object3D.prototype.copy.call( this, source );
			this.drawMode = source.drawMode;
			if ( source.morphTargetInfluences !== undefined ) {
				this.morphTargetInfluences = source.morphTargetInfluences.slice();
			}
			if ( source.morphTargetDictionary !== undefined ) {
				this.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );
			}
			return this;
		},
		updateMorphTargets: function () {
			var geometry = this.geometry;
			var m, ml, name;
			if ( geometry.isBufferGeometry ) {
				var morphAttributes = geometry.morphAttributes;
				var keys = Object.keys( morphAttributes );
				if ( keys.length > 0 ) {
					var morphAttribute = morphAttributes[ keys[ 0 ] ];
					if ( morphAttribute !== undefined ) {
						this.morphTargetInfluences = [];
						this.morphTargetDictionary = {};
						for ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {
							name = morphAttribute[ m ].name || String( m );
							this.morphTargetInfluences.push( 0 );
							this.morphTargetDictionary[ name ] = m;
						}
					}
				}
			} else {
				var morphTargets = geometry.morphTargets;
				if ( morphTargets !== undefined && morphTargets.length > 0 ) {
					console.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );
				}
			}
		},
		raycast: ( function () {
			var inverseMatrix = new Matrix4();
			var ray = new Ray();
			var sphere = new Sphere();
			var vA = new Vector3();
			var vB = new Vector3();
			var vC = new Vector3();
			var tempA = new Vector3();
			var tempB = new Vector3();
			var tempC = new Vector3();
			var morphA = new Vector3();
			var morphB = new Vector3();
			var morphC = new Vector3();
			var uvA = new Vector2();
			var uvB = new Vector2();
			var uvC = new Vector2();
			var intersectionPoint = new Vector3();
			var intersectionPointWorld = new Vector3();
			function checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {
				var intersect;
				if ( material.side === BackSide ) {
					intersect = ray.intersectTriangle( pC, pB, pA, true, point );
				} else {
					intersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );
				}
				if ( intersect === null ) return null;
				intersectionPointWorld.copy( point );
				intersectionPointWorld.applyMatrix4( object.matrixWorld );
				var distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );
				if ( distance < raycaster.near || distance > raycaster.far ) return null;
				return {
					distance: distance,
					point: intersectionPointWorld.clone(),
					object: object
				};
			}
			function checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, uv, uv2, a, b, c ) {
				vA.fromBufferAttribute( position, a );
				vB.fromBufferAttribute( position, b );
				vC.fromBufferAttribute( position, c );
				var morphInfluences = object.morphTargetInfluences;
				if ( material.morphTargets && morphPosition && morphInfluences ) {
					morphA.set( 0, 0, 0 );
					morphB.set( 0, 0, 0 );
					morphC.set( 0, 0, 0 );
					for ( var i = 0, il = morphPosition.length; i < il; i ++ ) {
						var influence = morphInfluences[ i ];
						var morphAttribute = morphPosition[ i ];
						if ( influence === 0 ) continue;
						tempA.fromBufferAttribute( morphAttribute, a );
						tempB.fromBufferAttribute( morphAttribute, b );
						tempC.fromBufferAttribute( morphAttribute, c );
						morphA.addScaledVector( tempA.sub( vA ), influence );
						morphB.addScaledVector( tempB.sub( vB ), influence );
						morphC.addScaledVector( tempC.sub( vC ), influence );
					}
					vA.add( morphA );
					vB.add( morphB );
					vC.add( morphC );
				}
				var intersection = checkIntersection( object, material, raycaster, ray, vA, vB, vC, intersectionPoint );
				if ( intersection ) {
					if ( uv ) {
						uvA.fromBufferAttribute( uv, a );
						uvB.fromBufferAttribute( uv, b );
						uvC.fromBufferAttribute( uv, c );
						intersection.uv = Triangle.getUV( intersectionPoint, vA, vB, vC, uvA, uvB, uvC, new Vector2() );
					}
					if ( uv2 ) {
						uvA.fromBufferAttribute( uv2, a );
						uvB.fromBufferAttribute( uv2, b );
						uvC.fromBufferAttribute( uv2, c );
						intersection.uv2 = Triangle.getUV( intersectionPoint, vA, vB, vC, uvA, uvB, uvC, new Vector2() );
					}
					var face = new Face3( a, b, c );
					Triangle.getNormal( vA, vB, vC, face.normal );
					intersection.face = face;
				}
				return intersection;
			}
			return function raycast( raycaster, intersects ) {
				var geometry = this.geometry;
				var material = this.material;
				var matrixWorld = this.matrixWorld;
				if ( material === undefined ) return;
				if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
				sphere.copy( geometry.boundingSphere );
				sphere.applyMatrix4( matrixWorld );
				if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;
				inverseMatrix.getInverse( matrixWorld );
				ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );
				if ( geometry.boundingBox !== null ) {
					if ( ray.intersectsBox( geometry.boundingBox ) === false ) return;
				}
				var intersection;
				if ( geometry.isBufferGeometry ) {
					var a, b, c;
					var index = geometry.index;
					var position = geometry.attributes.position;
					var morphPosition = geometry.morphAttributes.position;
					var uv = geometry.attributes.uv;
					var uv2 = geometry.attributes.uv2;
					var groups = geometry.groups;
					var drawRange = geometry.drawRange;
					var i, j, il, jl;
					var group, groupMaterial;
					var start, end;
					if ( index !== null ) {
						if ( Array.isArray( material ) ) {
							for ( i = 0, il = groups.length; i < il; i ++ ) {
								group = groups[ i ];
								groupMaterial = material[ group.materialIndex ];
								start = Math.max( group.start, drawRange.start );
								end = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );
								for ( j = start, jl = end; j < jl; j += 3 ) {
									a = index.getX( j );
									b = index.getX( j + 1 );
									c = index.getX( j + 2 );
									intersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, ray, position, morphPosition, uv, uv2, a, b, c );
									if ( intersection ) {
										intersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics
										intersection.face.materialIndex = group.materialIndex;
										intersects.push( intersection );
									}
								}
							}
						} else {
							start = Math.max( 0, drawRange.start );
							end = Math.min( index.count, ( drawRange.start + drawRange.count ) );
							for ( i = start, il = end; i < il; i += 3 ) {
								a = index.getX( i );
								b = index.getX( i + 1 );
								c = index.getX( i + 2 );
								intersection = checkBufferGeometryIntersection( this, material, raycaster, ray, position, morphPosition, uv, uv2, a, b, c );
								if ( intersection ) {
									intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics
									intersects.push( intersection );
								}
							}
						}
					} else if ( position !== undefined ) {
						if ( Array.isArray( material ) ) {
							for ( i = 0, il = groups.length; i < il; i ++ ) {
								group = groups[ i ];
								groupMaterial = material[ group.materialIndex ];
								start = Math.max( group.start, drawRange.start );
								end = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );
								for ( j = start, jl = end; j < jl; j += 3 ) {
									a = j;
									b = j + 1;
									c = j + 2;
									intersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, ray, position, morphPosition, uv, uv2, a, b, c );
									if ( intersection ) {
										intersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics
										intersection.face.materialIndex = group.materialIndex;
										intersects.push( intersection );
									}
								}
							}
						} else {
							start = Math.max( 0, drawRange.start );
							end = Math.min( position.count, ( drawRange.start + drawRange.count ) );
							for ( i = start, il = end; i < il; i += 3 ) {
								a = i;
								b = i + 1;
								c = i + 2;
								intersection = checkBufferGeometryIntersection( this, material, raycaster, ray, position, morphPosition, uv, uv2, a, b, c );
								if ( intersection ) {
									intersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics
									intersects.push( intersection );
								}
							}
						}
					}
				} else if ( geometry.isGeometry ) {
					var fvA, fvB, fvC;
					var isMultiMaterial = Array.isArray( material );
					var vertices = geometry.vertices;
					var faces = geometry.faces;
					var uvs;
					var faceVertexUvs = geometry.faceVertexUvs[ 0 ];
					if ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;
					for ( var f = 0, fl = faces.length; f < fl; f ++ ) {
						var face = faces[ f ];
						var faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;
						if ( faceMaterial === undefined ) continue;
						fvA = vertices[ face.a ];
						fvB = vertices[ face.b ];
						fvC = vertices[ face.c ];
						intersection = checkIntersection( this, faceMaterial, raycaster, ray, fvA, fvB, fvC, intersectionPoint );
						if ( intersection ) {
							if ( uvs && uvs[ f ] ) {
								var uvs_f = uvs[ f ];
								uvA.copy( uvs_f[ 0 ] );
								uvB.copy( uvs_f[ 1 ] );
								uvC.copy( uvs_f[ 2 ] );
								intersection.uv = Triangle.getUV( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC, new Vector2() );
							}
							intersection.face = face;
							intersection.faceIndex = f;
							intersects.push( intersection );
						}
					}
				}
			};
		}() ),
		clone: function () {
			return new this.constructor( this.geometry, this.material ).copy( this );
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author kile / http://kile.stravaganza.org/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author bhouston / http://clara.io
	 */
	var geometryId = 0; // Geometry uses even numbers as Id
	function Geometry() {
		Object.defineProperty( this, 'id', { value: geometryId += 2 } );
		this.uuid = _Math.generateUUID();
		this.name = '';
		this.type = 'Geometry';
		this.vertices = [];
		this.colors = [];
		this.faces = [];
		this.faceVertexUvs = [[]];
		this.morphTargets = [];
		this.morphNormals = [];
		this.skinWeights = [];
		this.skinIndices = [];
		this.lineDistances = [];
		this.boundingBox = null;
		this.boundingSphere = null;
		this.elementsNeedUpdate = false;
		this.verticesNeedUpdate = false;
		this.uvsNeedUpdate = false;
		this.normalsNeedUpdate = false;
		this.colorsNeedUpdate = false;
		this.lineDistancesNeedUpdate = false;
		this.groupsNeedUpdate = false;
	}
	Geometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {
		constructor: Geometry,
		isGeometry: true,
		applyMatrix: function ( matrix ) {
			var normalMatrix = new Matrix3().getNormalMatrix( matrix );
			for ( var i = 0, il = this.vertices.length; i < il; i ++ ) {
				var vertex = this.vertices[ i ];
				vertex.applyMatrix4( matrix );
			}
			for ( var i = 0, il = this.faces.length; i < il; i ++ ) {
				var face = this.faces[ i ];
				face.normal.applyMatrix3( normalMatrix ).normalize();
				for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {
					face.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();
				}
			}
			if ( this.boundingBox !== null ) {
				this.computeBoundingBox();
			}
			if ( this.boundingSphere !== null ) {
				this.computeBoundingSphere();
			}
			this.verticesNeedUpdate = true;
			this.normalsNeedUpdate = true;
			return this;
		},
		rotateX: function () {
			var m1 = new Matrix4();
			return function rotateX( angle ) {
				m1.makeRotationX( angle );
				this.applyMatrix( m1 );
				return this;
			};
		}(),
		rotateY: function () {
			var m1 = new Matrix4();
			return function rotateY( angle ) {
				m1.makeRotationY( angle );
				this.applyMatrix( m1 );
				return this;
			};
		}(),
		rotateZ: function () {
			var m1 = new Matrix4();
			return function rotateZ( angle ) {
				m1.makeRotationZ( angle );
				this.applyMatrix( m1 );
				return this;
			};
		}(),
		translate: function () {
			var m1 = new Matrix4();
			return function translate( x, y, z ) {
				m1.makeTranslation( x, y, z );
				this.applyMatrix( m1 );
				return this;
			};
		}(),
		scale: function () {
			var m1 = new Matrix4();
			return function scale( x, y, z ) {
				m1.makeScale( x, y, z );
				this.applyMatrix( m1 );
				return this;
			};
		}(),
		lookAt: function () {
			var obj = new Object3D();
			return function lookAt( vector ) {
				obj.lookAt( vector );
				obj.updateMatrix();
				this.applyMatrix( obj.matrix );
			};
		}(),
		fromBufferGeometry: function ( geometry ) {
			var scope = this;
			var indices = geometry.index !== null ? geometry.index.array : undefined;
			var attributes = geometry.attributes;
			var positions = attributes.position.array;
			var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;
			var colors = attributes.color !== undefined ? attributes.color.array : undefined;
			var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;
			var uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;
			if ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];
			for ( var i = 0; i < positions.length; i += 3 ) {
				scope.vertices.push( new Vector3().fromArray( positions, i ) );
				if ( colors !== undefined ) {
					scope.colors.push( new Color().fromArray( colors, i ) );
				}
			}
			function addFace( a, b, c, materialIndex ) {
				var vertexColors = ( colors === undefined ) ? [] : [
					scope.colors[ a ].clone(),
					scope.colors[ b ].clone(),
					scope.colors[ c ].clone() ];
				var vertexNormals = ( normals === undefined ) ? [] : [
					new Vector3().fromArray( normals, a * 3 ),
					new Vector3().fromArray( normals, b * 3 ),
					new Vector3().fromArray( normals, c * 3 )
				];
				var face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );
				scope.faces.push( face );
				if ( uvs !== undefined ) {
					scope.faceVertexUvs[ 0 ].push( [
						new Vector2().fromArray( uvs, a * 2 ),
						new Vector2().fromArray( uvs, b * 2 ),
						new Vector2().fromArray( uvs, c * 2 )
					] );
				}
				if ( uvs2 !== undefined ) {
					scope.faceVertexUvs[ 1 ].push( [
						new Vector2().fromArray( uvs2, a * 2 ),
						new Vector2().fromArray( uvs2, b * 2 ),
						new Vector2().fromArray( uvs2, c * 2 )
					] );
				}
			}
			var groups = geometry.groups;
			if ( groups.length > 0 ) {
				for ( var i = 0; i < groups.length; i ++ ) {
					var group = groups[ i ];
					var start = group.start;
					var count = group.count;
					for ( var j = start, jl = start + count; j < jl; j += 3 ) {
						if ( indices !== undefined ) {
							addFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );
						} else {
							addFace( j, j + 1, j + 2, group.materialIndex );
						}
					}
				}
			} else {
				if ( indices !== undefined ) {
					for ( var i = 0; i < indices.length; i += 3 ) {
						addFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );
					}
				} else {
					for ( var i = 0; i < positions.length / 3; i += 3 ) {
						addFace( i, i + 1, i + 2 );
					}
				}
			}
			this.computeFaceNormals();
			if ( geometry.boundingBox !== null ) {
				this.boundingBox = geometry.boundingBox.clone();
			}
			if ( geometry.boundingSphere !== null ) {
				this.boundingSphere = geometry.boundingSphere.clone();
			}
			return this;
		},
		center: function () {
			var offset = new Vector3();
			return function center() {
				this.computeBoundingBox();
				this.boundingBox.getCenter( offset ).negate();
				this.translate( offset.x, offset.y, offset.z );
				return this;
			};
		}(),
		normalize: function () {
			this.computeBoundingSphere();
			var center = this.boundingSphere.center;
			var radius = this.boundingSphere.radius;
			var s = radius === 0 ? 1 : 1.0 / radius;
			var matrix = new Matrix4();
			matrix.set(
				s, 0, 0, - s * center.x,
				0, s, 0, - s * center.y,
				0, 0, s, - s * center.z,
				0, 0, 0, 1
			);
			this.applyMatrix( matrix );
			return this;
		},
		computeFaceNormals: function () {
			var cb = new Vector3(), ab = new Vector3();
			for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {
				var face = this.faces[ f ];
				var vA = this.vertices[ face.a ];
				var vB = this.vertices[ face.b ];
				var vC = this.vertices[ face.c ];
				cb.subVectors( vC, vB );
				ab.subVectors( vA, vB );
				cb.cross( ab );
				cb.normalize();
				face.normal.copy( cb );
			}
		},
		computeVertexNormals: function ( areaWeighted ) {
			if ( areaWeighted === undefined ) areaWeighted = true;
			var v, vl, f, fl, face, vertices;
			vertices = new Array( this.vertices.length );
			for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {
				vertices[ v ] = new Vector3();
			}
			if ( areaWeighted ) {
				var vA, vB, vC;
				var cb = new Vector3(), ab = new Vector3();
				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
					face = this.faces[ f ];
					vA = this.vertices[ face.a ];
					vB = this.vertices[ face.b ];
					vC = this.vertices[ face.c ];
					cb.subVectors( vC, vB );
					ab.subVectors( vA, vB );
					cb.cross( ab );
					vertices[ face.a ].add( cb );
					vertices[ face.b ].add( cb );
					vertices[ face.c ].add( cb );
				}
			} else {
				this.computeFaceNormals();
				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
					face = this.faces[ f ];
					vertices[ face.a ].add( face.normal );
					vertices[ face.b ].add( face.normal );
					vertices[ face.c ].add( face.normal );
				}
			}
			for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {
				vertices[ v ].normalize();
			}
			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
				face = this.faces[ f ];
				var vertexNormals = face.vertexNormals;
				if ( vertexNormals.length === 3 ) {
					vertexNormals[ 0 ].copy( vertices[ face.a ] );
					vertexNormals[ 1 ].copy( vertices[ face.b ] );
					vertexNormals[ 2 ].copy( vertices[ face.c ] );
				} else {
					vertexNormals[ 0 ] = vertices[ face.a ].clone();
					vertexNormals[ 1 ] = vertices[ face.b ].clone();
					vertexNormals[ 2 ] = vertices[ face.c ].clone();
				}
			}
			if ( this.faces.length > 0 ) {
				this.normalsNeedUpdate = true;
			}
		},
		computeFlatVertexNormals: function () {
			var f, fl, face;
			this.computeFaceNormals();
			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
				face = this.faces[ f ];
				var vertexNormals = face.vertexNormals;
				if ( vertexNormals.length === 3 ) {
					vertexNormals[ 0 ].copy( face.normal );
					vertexNormals[ 1 ].copy( face.normal );
					vertexNormals[ 2 ].copy( face.normal );
				} else {
					vertexNormals[ 0 ] = face.normal.clone();
					vertexNormals[ 1 ] = face.normal.clone();
					vertexNormals[ 2 ] = face.normal.clone();
				}
			}
			if ( this.faces.length > 0 ) {
				this.normalsNeedUpdate = true;
			}
		},
		computeMorphNormals: function () {
			var i, il, f, fl, face;
			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
				face = this.faces[ f ];
				if ( ! face.__originalFaceNormal ) {
					face.__originalFaceNormal = face.normal.clone();
				} else {
					face.__originalFaceNormal.copy( face.normal );
				}
				if ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];
				for ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {
					if ( ! face.__originalVertexNormals[ i ] ) {
						face.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();
					} else {
						face.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );
					}
				}
			}
			var tmpGeo = new Geometry();
			tmpGeo.faces = this.faces;
			for ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {
				if ( ! this.morphNormals[ i ] ) {
					this.morphNormals[ i ] = {};
					this.morphNormals[ i ].faceNormals = [];
					this.morphNormals[ i ].vertexNormals = [];
					var dstNormalsFace = this.morphNormals[ i ].faceNormals;
					var dstNormalsVertex = this.morphNormals[ i ].vertexNormals;
					var faceNormal, vertexNormals;
					for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
						faceNormal = new Vector3();
						vertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };
						dstNormalsFace.push( faceNormal );
						dstNormalsVertex.push( vertexNormals );
					}
				}
				var morphNormals = this.morphNormals[ i ];
				tmpGeo.vertices = this.morphTargets[ i ].vertices;
				tmpGeo.computeFaceNormals();
				tmpGeo.computeVertexNormals();
				var faceNormal, vertexNormals;
				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
					face = this.faces[ f ];
					faceNormal = morphNormals.faceNormals[ f ];
					vertexNormals = morphNormals.vertexNormals[ f ];
					faceNormal.copy( face.normal );
					vertexNormals.a.copy( face.vertexNormals[ 0 ] );
					vertexNormals.b.copy( face.vertexNormals[ 1 ] );
					vertexNormals.c.copy( face.vertexNormals[ 2 ] );
				}
			}
			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
				face = this.faces[ f ];
				face.normal = face.__originalFaceNormal;
				face.vertexNormals = face.__originalVertexNormals;
			}
		},
		computeBoundingBox: function () {
			if ( this.boundingBox === null ) {
				this.boundingBox = new Box3();
			}
			this.boundingBox.setFromPoints( this.vertices );
		},
		computeBoundingSphere: function () {
			if ( this.boundingSphere === null ) {
				this.boundingSphere = new Sphere();
			}
			this.boundingSphere.setFromPoints( this.vertices );
		},
		merge: function ( geometry, matrix, materialIndexOffset ) {
			if ( ! ( geometry && geometry.isGeometry ) ) {
				console.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );
				return;
			}
			var normalMatrix,
				vertexOffset = this.vertices.length,
				vertices1 = this.vertices,
				vertices2 = geometry.vertices,
				faces1 = this.faces,
				faces2 = geometry.faces,
				colors1 = this.colors,
				colors2 = geometry.colors;
			if ( materialIndexOffset === undefined ) materialIndexOffset = 0;
			if ( matrix !== undefined ) {
				normalMatrix = new Matrix3().getNormalMatrix( matrix );
			}
			for ( var i = 0, il = vertices2.length; i < il; i ++ ) {
				var vertex = vertices2[ i ];
				var vertexCopy = vertex.clone();
				if ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );
				vertices1.push( vertexCopy );
			}
			for ( var i = 0, il = colors2.length; i < il; i ++ ) {
				colors1.push( colors2[ i ].clone() );
			}
			for ( i = 0, il = faces2.length; i < il; i ++ ) {
				var face = faces2[ i ], faceCopy, normal, color,
					faceVertexNormals = face.vertexNormals,
					faceVertexColors = face.vertexColors;
				faceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );
				faceCopy.normal.copy( face.normal );
				if ( normalMatrix !== undefined ) {
					faceCopy.normal.applyMatrix3( normalMatrix ).normalize();
				}
				for ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {
					normal = faceVertexNormals[ j ].clone();
					if ( normalMatrix !== undefined ) {
						normal.applyMatrix3( normalMatrix ).normalize();
					}
					faceCopy.vertexNormals.push( normal );
				}
				faceCopy.color.copy( face.color );
				for ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {
					color = faceVertexColors[ j ];
					faceCopy.vertexColors.push( color.clone() );
				}
				faceCopy.materialIndex = face.materialIndex + materialIndexOffset;
				faces1.push( faceCopy );
			}
			for ( var i = 0, il = geometry.faceVertexUvs.length; i < il; i ++ ) {
				var faceVertexUvs2 = geometry.faceVertexUvs[ i ];
				if ( this.faceVertexUvs[ i ] === undefined ) this.faceVertexUvs[ i ] = [];
				for ( var j = 0, jl = faceVertexUvs2.length; j < jl; j ++ ) {
					var uvs2 = faceVertexUvs2[ j ], uvsCopy = [];
					for ( var k = 0, kl = uvs2.length; k < kl; k ++ ) {
						uvsCopy.push( uvs2[ k ].clone() );
					}
					this.faceVertexUvs[ i ].push( uvsCopy );
				}
			}
		},
		mergeMesh: function ( mesh ) {
			if ( ! ( mesh && mesh.isMesh ) ) {
				console.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );
				return;
			}
			if ( mesh.matrixAutoUpdate ) mesh.updateMatrix();
			this.merge( mesh.geometry, mesh.matrix );
		},
		/*
		 * Checks for duplicate vertices with hashmap.
		 * Duplicated vertices are removed
		 * and faces' vertices are updated.
		 */
		mergeVertices: function () {
			var verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)
			var unique = [], changes = [];
			var v, key;
			var precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001
			var precision = Math.pow( 10, precisionPoints );
			var i, il, face;
			var indices, j, jl;
			for ( i = 0, il = this.vertices.length; i < il; i ++ ) {
				v = this.vertices[ i ];
				key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );
				if ( verticesMap[ key ] === undefined ) {
					verticesMap[ key ] = i;
					unique.push( this.vertices[ i ] );
					changes[ i ] = unique.length - 1;
				} else {
					changes[ i ] = changes[ verticesMap[ key ] ];
				}
			}
			var faceIndicesToRemove = [];
			for ( i = 0, il = this.faces.length; i < il; i ++ ) {
				face = this.faces[ i ];
				face.a = changes[ face.a ];
				face.b = changes[ face.b ];
				face.c = changes[ face.c ];
				indices = [ face.a, face.b, face.c ];
				for ( var n = 0; n < 3; n ++ ) {
					if ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {
						faceIndicesToRemove.push( i );
						break;
					}
				}
			}
			for ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {
				var idx = faceIndicesToRemove[ i ];
				this.faces.splice( idx, 1 );
				for ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {
					this.faceVertexUvs[ j ].splice( idx, 1 );
				}
			}
			var diff = this.vertices.length - unique.length;
			this.vertices = unique;
			return diff;
		},
		setFromPoints: function ( points ) {
			this.vertices = [];
			for ( var i = 0, l = points.length; i < l; i ++ ) {
				var point = points[ i ];
				this.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );
			}
			return this;
		},
		sortFacesByMaterialIndex: function () {
			var faces = this.faces;
			var length = faces.length;
			for ( var i = 0; i < length; i ++ ) {
				faces[ i ]._id = i;
			}
			function materialIndexSort( a, b ) {
				return a.materialIndex - b.materialIndex;
			}
			faces.sort( materialIndexSort );
			var uvs1 = this.faceVertexUvs[ 0 ];
			var uvs2 = this.faceVertexUvs[ 1 ];
			var newUvs1, newUvs2;
			if ( uvs1 && uvs1.length === length ) newUvs1 = [];
			if ( uvs2 && uvs2.length === length ) newUvs2 = [];
			for ( var i = 0; i < length; i ++ ) {
				var id = faces[ i ]._id;
				if ( newUvs1 ) newUvs1.push( uvs1[ id ] );
				if ( newUvs2 ) newUvs2.push( uvs2[ id ] );
			}
			if ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;
			if ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;
		},
		toJSON: function () {
			var data = {
				metadata: {
					version: 4.5,
					type: 'Geometry',
					generator: 'Geometry.toJSON'
				}
			};
			data.uuid = this.uuid;
			data.type = this.type;
			if ( this.name !== '' ) data.name = this.name;
			if ( this.parameters !== undefined ) {
				var parameters = this.parameters;
				for ( var key in parameters ) {
					if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];
				}
				return data;
			}
			var vertices = [];
			for ( var i = 0; i < this.vertices.length; i ++ ) {
				var vertex = this.vertices[ i ];
				vertices.push( vertex.x, vertex.y, vertex.z );
			}
			var faces = [];
			var normals = [];
			var normalsHash = {};
			var colors = [];
			var colorsHash = {};
			var uvs = [];
			var uvsHash = {};
			for ( var i = 0; i < this.faces.length; i ++ ) {
				var face = this.faces[ i ];
				var hasMaterial = true;
				var hasFaceUv = false; // deprecated
				var hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;
				var hasFaceNormal = face.normal.length() > 0;
				var hasFaceVertexNormal = face.vertexNormals.length > 0;
				var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
				var hasFaceVertexColor = face.vertexColors.length > 0;
				var faceType = 0;
				faceType = setBit( faceType, 0, 0 ); // isQuad
				faceType = setBit( faceType, 1, hasMaterial );
				faceType = setBit( faceType, 2, hasFaceUv );
				faceType = setBit( faceType, 3, hasFaceVertexUv );
				faceType = setBit( faceType, 4, hasFaceNormal );
				faceType = setBit( faceType, 5, hasFaceVertexNormal );
				faceType = setBit( faceType, 6, hasFaceColor );
				faceType = setBit( faceType, 7, hasFaceVertexColor );
				faces.push( faceType );
				faces.push( face.a, face.b, face.c );
				faces.push( face.materialIndex );
				if ( hasFaceVertexUv ) {
					var faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];
					faces.push(
						getUvIndex( faceVertexUvs[ 0 ] ),
						getUvIndex( faceVertexUvs[ 1 ] ),
						getUvIndex( faceVertexUvs[ 2 ] )
					);
				}
				if ( hasFaceNormal ) {
					faces.push( getNormalIndex( face.normal ) );
				}
				if ( hasFaceVertexNormal ) {
					var vertexNormals = face.vertexNormals;
					faces.push(
						getNormalIndex( vertexNormals[ 0 ] ),
						getNormalIndex( vertexNormals[ 1 ] ),
						getNormalIndex( vertexNormals[ 2 ] )
					);
				}
				if ( hasFaceColor ) {
					faces.push( getColorIndex( face.color ) );
				}
				if ( hasFaceVertexColor ) {
					var vertexColors = face.vertexColors;
					faces.push(
						getColorIndex( vertexColors[ 0 ] ),
						getColorIndex( vertexColors[ 1 ] ),
						getColorIndex( vertexColors[ 2 ] )
					);
				}
			}
			function setBit( value, position, enabled ) {
				return enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );
			}
			function getNormalIndex( normal ) {
				var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();
				if ( normalsHash[ hash ] !== undefined ) {
					return normalsHash[ hash ];
				}
				normalsHash[ hash ] = normals.length / 3;
				normals.push( normal.x, normal.y, normal.z );
				return normalsHash[ hash ];
			}
			function getColorIndex( color ) {
				var hash = color.r.toString() + color.g.toString() + color.b.toString();
				if ( colorsHash[ hash ] !== undefined ) {
					return colorsHash[ hash ];
				}
				colorsHash[ hash ] = colors.length;
				colors.push( color.getHex() );
				return colorsHash[ hash ];
			}
			function getUvIndex( uv ) {
				var hash = uv.x.toString() + uv.y.toString();
				if ( uvsHash[ hash ] !== undefined ) {
					return uvsHash[ hash ];
				}
				uvsHash[ hash ] = uvs.length / 2;
				uvs.push( uv.x, uv.y );
				return uvsHash[ hash ];
			}
			data.data = {};
			data.data.vertices = vertices;
			data.data.normals = normals;
			if ( colors.length > 0 ) data.data.colors = colors;
			if ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility
			data.data.faces = faces;
			return data;
		},
		clone: function () {
			/*
			 var parameters = this.parameters;
			 if ( parameters !== undefined ) {
			 var values = [];
			 for ( var key in parameters ) {
			 values.push( parameters[ key ] );
			 }
			 var geometry = Object.create( this.constructor.prototype );
			 this.constructor.apply( geometry, values );
			 return geometry;
			 }
			 return new this.constructor().copy( this );
			 */
			return new Geometry().copy( this );
		},
		copy: function ( source ) {
			var i, il, j, jl, k, kl;
			this.vertices = [];
			this.colors = [];
			this.faces = [];
			this.faceVertexUvs = [[]];
			this.morphTargets = [];
			this.morphNormals = [];
			this.skinWeights = [];
			this.skinIndices = [];
			this.lineDistances = [];
			this.boundingBox = null;
			this.boundingSphere = null;
			this.name = source.name;
			var vertices = source.vertices;
			for ( i = 0, il = vertices.length; i < il; i ++ ) {
				this.vertices.push( vertices[ i ].clone() );
			}
			var colors = source.colors;
			for ( i = 0, il = colors.length; i < il; i ++ ) {
				this.colors.push( colors[ i ].clone() );
			}
			var faces = source.faces;
			for ( i = 0, il = faces.length; i < il; i ++ ) {
				this.faces.push( faces[ i ].clone() );
			}
			for ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {
				var faceVertexUvs = source.faceVertexUvs[ i ];
				if ( this.faceVertexUvs[ i ] === undefined ) {
					this.faceVertexUvs[ i ] = [];
				}
				for ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {
					var uvs = faceVertexUvs[ j ], uvsCopy = [];
					for ( k = 0, kl = uvs.length; k < kl; k ++ ) {
						var uv = uvs[ k ];
						uvsCopy.push( uv.clone() );
					}
					this.faceVertexUvs[ i ].push( uvsCopy );
				}
			}
			var morphTargets = source.morphTargets;
			for ( i = 0, il = morphTargets.length; i < il; i ++ ) {
				var morphTarget = {};
				morphTarget.name = morphTargets[ i ].name;
				if ( morphTargets[ i ].vertices !== undefined ) {
					morphTarget.vertices = [];
					for ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {
						morphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );
					}
				}
				if ( morphTargets[ i ].normals !== undefined ) {
					morphTarget.normals = [];
					for ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {
						morphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );
					}
				}
				this.morphTargets.push( morphTarget );
			}
			var morphNormals = source.morphNormals;
			for ( i = 0, il = morphNormals.length; i < il; i ++ ) {
				var morphNormal = {};
				if ( morphNormals[ i ].vertexNormals !== undefined ) {
					morphNormal.vertexNormals = [];
					for ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {
						var srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];
						var destVertexNormal = {};
						destVertexNormal.a = srcVertexNormal.a.clone();
						destVertexNormal.b = srcVertexNormal.b.clone();
						destVertexNormal.c = srcVertexNormal.c.clone();
						morphNormal.vertexNormals.push( destVertexNormal );
					}
				}
				if ( morphNormals[ i ].faceNormals !== undefined ) {
					morphNormal.faceNormals = [];
					for ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {
						morphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );
					}
				}
				this.morphNormals.push( morphNormal );
			}
			var skinWeights = source.skinWeights;
			for ( i = 0, il = skinWeights.length; i < il; i ++ ) {
				this.skinWeights.push( skinWeights[ i ].clone() );
			}
			var skinIndices = source.skinIndices;
			for ( i = 0, il = skinIndices.length; i < il; i ++ ) {
				this.skinIndices.push( skinIndices[ i ].clone() );
			}
			var lineDistances = source.lineDistances;
			for ( i = 0, il = lineDistances.length; i < il; i ++ ) {
				this.lineDistances.push( lineDistances[ i ] );
			}
			var boundingBox = source.boundingBox;
			if ( boundingBox !== null ) {
				this.boundingBox = boundingBox.clone();
			}
			var boundingSphere = source.boundingSphere;
			if ( boundingSphere !== null ) {
				this.boundingSphere = boundingSphere.clone();
			}
			this.elementsNeedUpdate = source.elementsNeedUpdate;
			this.verticesNeedUpdate = source.verticesNeedUpdate;
			this.uvsNeedUpdate = source.uvsNeedUpdate;
			this.normalsNeedUpdate = source.normalsNeedUpdate;
			this.colorsNeedUpdate = source.colorsNeedUpdate;
			this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;
			this.groupsNeedUpdate = source.groupsNeedUpdate;
			return this;
		},
		dispose: function () {
			this.dispatchEvent( { type: 'dispose' } );
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */
	function BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {
		Geometry.call( this );
		this.type = 'BoxGeometry';
		this.parameters = {
			width: width,
			height: height,
			depth: depth,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			depthSegments: depthSegments
		};
		this.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );
		this.mergeVertices();
	}
	BoxGeometry.prototype = Object.create( Geometry.prototype );
	BoxGeometry.prototype.constructor = BoxGeometry;
	function BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {
		BufferGeometry.call( this );
		this.type = 'BoxBufferGeometry';
		this.parameters = {
			width: width,
			height: height,
			depth: depth,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			depthSegments: depthSegments
		};
		var scope = this;
		width = width || 1;
		height = height || 1;
		depth = depth || 1;
		widthSegments = Math.floor( widthSegments ) || 1;
		heightSegments = Math.floor( heightSegments ) || 1;
		depthSegments = Math.floor( depthSegments ) || 1;
		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];
		var numberOfVertices = 0;
		var groupStart = 0;
		buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px
		buildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx
		buildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py
		buildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny
		buildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz
		buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz
		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
		function buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {
			var segmentWidth = width / gridX;
			var segmentHeight = height / gridY;
			var widthHalf = width / 2;
			var heightHalf = height / 2;
			var depthHalf = depth / 2;
			var gridX1 = gridX + 1;
			var gridY1 = gridY + 1;
			var vertexCounter = 0;
			var groupCount = 0;
			var ix, iy;
			var vector = new Vector3();
			for ( iy = 0; iy < gridY1; iy ++ ) {
				var y = iy * segmentHeight - heightHalf;
				for ( ix = 0; ix < gridX1; ix ++ ) {
					var x = ix * segmentWidth - widthHalf;
					vector[ u ] = x * udir;
					vector[ v ] = y * vdir;
					vector[ w ] = depthHalf;
					vertices.push( vector.x, vector.y, vector.z );
					vector[ u ] = 0;
					vector[ v ] = 0;
					vector[ w ] = depth > 0 ? 1 : - 1;
					normals.push( vector.x, vector.y, vector.z );
					uvs.push( ix / gridX );
					uvs.push( 1 - ( iy / gridY ) );
					vertexCounter += 1;
				}
			}
			for ( iy = 0; iy < gridY; iy ++ ) {
				for ( ix = 0; ix < gridX; ix ++ ) {
					var a = numberOfVertices + ix + gridX1 * iy;
					var b = numberOfVertices + ix + gridX1 * ( iy + 1 );
					var c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );
					var d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;
					indices.push( a, b, d );
					indices.push( b, c, d );
					groupCount += 6;
				}
			}
			scope.addGroup( groupStart, groupCount, materialIndex );
			groupStart += groupCount;
			numberOfVertices += vertexCounter;
		}
	}
	BoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	BoxBufferGeometry.prototype.constructor = BoxBufferGeometry;
	/**
	 * Uniform Utilities
	 */
	function cloneUniforms( src ) {
		var dst = {};
		for ( var u in src ) {
			dst[ u ] = {};
			for ( var p in src[ u ] ) {
				var property = src[ u ][ p ];
				if ( property && ( property.isColor ||
					property.isMatrix3 || property.isMatrix4 ||
					property.isVector2 || property.isVector3 || property.isVector4 ||
					property.isTexture ) ) {
					dst[ u ][ p ] = property.clone();
				} else if ( Array.isArray( property ) ) {
					dst[ u ][ p ] = property.slice();
				} else {
					dst[ u ][ p ] = property;
				}
			}
		}
		return dst;
	}
	function mergeUniforms( uniforms ) {
		var merged = {};
		for ( var u = 0; u < uniforms.length; u ++ ) {
			var tmp = cloneUniforms( uniforms[ u ] );
			for ( var p in tmp ) {
				merged[ p ] = tmp[ p ];
			}
		}
		return merged;
	}
	var UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };
	var default_vertex = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
	var default_fragment = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  defines: { "label" : "value" },
	 *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
	 *
	 *  fragmentShader: <string>,
	 *  vertexShader: <string>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  lights: <bool>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */
	function ShaderMaterial( parameters ) {
		Material.call( this );
		this.type = 'ShaderMaterial';
		this.defines = {};
		this.uniforms = {};
		this.vertexShader = default_vertex;
		this.fragmentShader = default_fragment;
		this.linewidth = 1;
		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.fog = false; // set to use scene fog
		this.lights = false; // set to use scene lights
		this.clipping = false; // set to use user-defined clipping planes
		this.skinning = false; // set to use skinning attribute streams
		this.morphTargets = false; // set to use morph targets
		this.morphNormals = false; // set to use morph normals
		this.extensions = {
			derivatives: false, // set to use derivatives
			fragDepth: false, // set to use fragment depth values
			drawBuffers: false, // set to use draw buffers
			shaderTextureLOD: false // set to use shader texture LOD
		};
		this.defaultAttributeValues = {
			'color': [ 1, 1, 1 ],
			'uv': [ 0, 0 ],
			'uv2': [ 0, 0 ]
		};
		this.index0AttributeName = undefined;
		this.uniformsNeedUpdate = false;
		if ( parameters !== undefined ) {
			if ( parameters.attributes !== undefined ) {
				console.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );
			}
			this.setValues( parameters );
		}
	}
	ShaderMaterial.prototype = Object.create( Material.prototype );
	ShaderMaterial.prototype.constructor = ShaderMaterial;
	ShaderMaterial.prototype.isShaderMaterial = true;
	ShaderMaterial.prototype.copy = function ( source ) {
		Material.prototype.copy.call( this, source );
		this.fragmentShader = source.fragmentShader;
		this.vertexShader = source.vertexShader;
		this.uniforms = cloneUniforms( source.uniforms );
		this.defines = Object.assign( {}, source.defines );
		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.lights = source.lights;
		this.clipping = source.clipping;
		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;
		this.extensions = source.extensions;
		return this;
	};
	ShaderMaterial.prototype.toJSON = function ( meta ) {
		var data = Material.prototype.toJSON.call( this, meta );
		data.uniforms = {};
		for ( var name in this.uniforms ) {
			var uniform = this.uniforms[ name ];
			var value = uniform.value;
			if ( value && value.isTexture ) {
				data.uniforms[ name ] = {
					type: 't',
					value: value.toJSON( meta ).uuid
				};
			} else if ( value && value.isColor ) {
				data.uniforms[ name ] = {
					type: 'c',
					value: value.getHex()
				};
			} else if ( value && value.isVector2 ) {
				data.uniforms[ name ] = {
					type: 'v2',
					value: value.toArray()
				};
			} else if ( value && value.isVector3 ) {
				data.uniforms[ name ] = {
					type: 'v3',
					value: value.toArray()
				};
			} else if ( value && value.isVector4 ) {
				data.uniforms[ name ] = {
					type: 'v4',
					value: value.toArray()
				};
			} else if ( value && value.isMatrix3 ) {
				data.uniforms[ name ] = {
					type: 'm3',
					value: value.toArray()
				};
			} else if ( value && value.isMatrix4 ) {
				data.uniforms[ name ] = {
					type: 'm4',
					value: value.toArray()
				};
			} else {
				data.uniforms[ name ] = {
					value: value
				};
			}
		}
		if ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;
		data.vertexShader = this.vertexShader;
		data.fragmentShader = this.fragmentShader;
		var extensions = {};
		for ( var key in this.extensions ) {
			if ( this.extensions[ key ] === true ) extensions[ key ] = true;
		}
		if ( Object.keys( extensions ).length > 0 ) data.extensions = extensions;
		return data;
	};
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author WestLangley / http://github.com/WestLangley
	*/
	function Camera() {
		Object3D.call( this );
		this.type = 'Camera';
		this.matrixWorldInverse = new Matrix4();
		this.projectionMatrix = new Matrix4();
		this.projectionMatrixInverse = new Matrix4();
	}
	Camera.prototype = Object.assign( Object.create( Object3D.prototype ), {
		constructor: Camera,
		isCamera: true,
		copy: function ( source, recursive ) {
			Object3D.prototype.copy.call( this, source, recursive );
			this.matrixWorldInverse.copy( source.matrixWorldInverse );
			this.projectionMatrix.copy( source.projectionMatrix );
			this.projectionMatrixInverse.copy( source.projectionMatrixInverse );
			return this;
		},
		getWorldDirection: function ( target ) {
			if ( target === undefined ) {
				console.warn( 'THREE.Camera: .getWorldDirection() target is now required' );
				target = new Vector3();
			}
			this.updateMatrixWorld( true );
			var e = this.matrixWorld.elements;
			return target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();
		},
		updateMatrixWorld: function ( force ) {
			Object3D.prototype.updateMatrixWorld.call( this, force );
			this.matrixWorldInverse.getInverse( this.matrixWorld );
		},
		clone: function () {
			return new this.constructor().copy( this );
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author greggman / http://games.greggman.com/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author tschw
	 */
	function PerspectiveCamera( fov, aspect, near, far ) {
		Camera.call( this );
		this.type = 'PerspectiveCamera';
		this.fov = fov !== undefined ? fov : 50;
		this.zoom = 1;
		this.near = near !== undefined ? near : 0.1;
		this.far = far !== undefined ? far : 2000;
		this.focus = 10;
		this.aspect = aspect !== undefined ? aspect : 1;
		this.view = null;
		this.filmGauge = 35;	// width of the film (default in millimeters)
		this.filmOffset = 0;	// horizontal film offset (same unit as gauge)
		this.updateProjectionMatrix();
	}
	PerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {
		constructor: PerspectiveCamera,
		isPerspectiveCamera: true,
		copy: function ( source, recursive ) {
			Camera.prototype.copy.call( this, source, recursive );
			this.fov = source.fov;
			this.zoom = source.zoom;
			this.near = source.near;
			this.far = source.far;
			this.focus = source.focus;
			this.aspect = source.aspect;
			this.view = source.view === null ? null : Object.assign( {}, source.view );
			this.filmGauge = source.filmGauge;
			this.filmOffset = source.filmOffset;
			return this;
		},
		/**
		 * Sets the FOV by focal length in respect to the current .filmGauge.
		 *
		 * The default film gauge is 35, so that the focal length can be specified for
		 * a 35mm (full frame) camera.
		 *
		 * Values for focal length and film gauge must have the same unit.
		 */
		setFocalLength: function ( focalLength ) {
			var vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
			this.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );
			this.updateProjectionMatrix();
		},
		/**
		 * Calculates the focal length from the current .fov and .filmGauge.
		 */
		getFocalLength: function () {
			var vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );
			return 0.5 * this.getFilmHeight() / vExtentSlope;
		},
		getEffectiveFOV: function () {
			return _Math.RAD2DEG * 2 * Math.atan(
				Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );
		},
		getFilmWidth: function () {
			return this.filmGauge * Math.min( this.aspect, 1 );
		},
		getFilmHeight: function () {
			return this.filmGauge / Math.max( this.aspect, 1 );
		},
		/**
		 * Sets an offset in a larger frustum. This is useful for multi-window or
		 * multi-monitor/multi-machine setups.
		 *
		 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
		 * the monitors are in grid like this
		 *
		 *   +---+---+---+
		 *   | A | B | C |
		 *   +---+---+---+
		 *   | D | E | F |
		 *   +---+---+---+
		 *
		 * then for each monitor you would call it like this
		 *
		 *   var w = 1920;
		 *   var h = 1080;
		 *   var fullWidth = w * 3;
		 *   var fullHeight = h * 2;
		 *
		 *   --A--
		 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
		 *   --B--
		 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
		 *   --C--
		 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
		 *   --D--
		 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
		 *   --E--
		 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
		 *   --F--
		 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
		 *
		 *   Note there is no reason monitors have to be the same size or in a grid.
		 */
		setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {
			this.aspect = fullWidth / fullHeight;
			if ( this.view === null ) {
				this.view = {
					enabled: true,
					fullWidth: 1,
					fullHeight: 1,
					offsetX: 0,
					offsetY: 0,
					width: 1,
					height: 1
				};
			}
			this.view.enabled = true;
			this.view.fullWidth = fullWidth;
			this.view.fullHeight = fullHeight;
			this.view.offsetX = x;
			this.view.offsetY = y;
			this.view.width = width;
			this.view.height = height;
			this.updateProjectionMatrix();
		},
		clearViewOffset: function () {
			if ( this.view !== null ) {
				this.view.enabled = false;
			}
			this.updateProjectionMatrix();
		},
		updateProjectionMatrix: function () {
			var near = this.near,
				top = near * Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,
				height = 2 * top,
				width = this.aspect * height,
				left = - 0.5 * width,
				view = this.view;
			if ( this.view !== null && this.view.enabled ) {
				var fullWidth = view.fullWidth,
					fullHeight = view.fullHeight;
				left += view.offsetX * width / fullWidth;
				top -= view.offsetY * height / fullHeight;
				width *= view.width / fullWidth;
				height *= view.height / fullHeight;
			}
			var skew = this.filmOffset;
			if ( skew !== 0 ) left += near * skew / this.getFilmWidth();
			this.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );
			this.projectionMatrixInverse.getInverse( this.projectionMatrix );
		},
		toJSON: function ( meta ) {
			var data = Object3D.prototype.toJSON.call( this, meta );
			data.object.fov = this.fov;
			data.object.zoom = this.zoom;
			data.object.near = this.near;
			data.object.far = this.far;
			data.object.focus = this.focus;
			data.object.aspect = this.aspect;
			if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );
			data.object.filmGauge = this.filmGauge;
			data.object.filmOffset = this.filmOffset;
			return data;
		}
	} );
	/**
	 * Camera for rendering cube maps
	 *	- renders scene into axis-aligned cube
	 *
	 * @author alteredq / http://alteredqualia.com/
	 */
	var fov = 90, aspect = 1;
	function CubeCamera( near, far, cubeResolution, options ) {
		Object3D.call( this );
		this.type = 'CubeCamera';
		var cameraPX = new PerspectiveCamera( fov, aspect, near, far );
		cameraPX.up.set( 0, - 1, 0 );
		cameraPX.lookAt( new Vector3( 1, 0, 0 ) );
		this.add( cameraPX );
		var cameraNX = new PerspectiveCamera( fov, aspect, near, far );
		cameraNX.up.set( 0, - 1, 0 );
		cameraNX.lookAt( new Vector3( - 1, 0, 0 ) );
		this.add( cameraNX );
		var cameraPY = new PerspectiveCamera( fov, aspect, near, far );
		cameraPY.up.set( 0, 0, 1 );
		cameraPY.lookAt( new Vector3( 0, 1, 0 ) );
		this.add( cameraPY );
		var cameraNY = new PerspectiveCamera( fov, aspect, near, far );
		cameraNY.up.set( 0, 0, - 1 );
		cameraNY.lookAt( new Vector3( 0, - 1, 0 ) );
		this.add( cameraNY );
		var cameraPZ = new PerspectiveCamera( fov, aspect, near, far );
		cameraPZ.up.set( 0, - 1, 0 );
		cameraPZ.lookAt( new Vector3( 0, 0, 1 ) );
		this.add( cameraPZ );
		var cameraNZ = new PerspectiveCamera( fov, aspect, near, far );
		cameraNZ.up.set( 0, - 1, 0 );
		cameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );
		this.add( cameraNZ );
		options = options || { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };
		this.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );
		this.renderTarget.texture.name = "CubeCamera";
		this.update = function ( renderer, scene ) {
			if ( this.parent === null ) this.updateMatrixWorld();
			var currentRenderTarget = renderer.getRenderTarget();
			var renderTarget = this.renderTarget;
			var generateMipmaps = renderTarget.texture.generateMipmaps;
			renderTarget.texture.generateMipmaps = false;
			renderer.setRenderTarget( renderTarget, 0 );
			renderer.render( scene, cameraPX );
			renderer.setRenderTarget( renderTarget, 1 );
			renderer.render( scene, cameraNX );
			renderer.setRenderTarget( renderTarget, 2 );
			renderer.render( scene, cameraPY );
			renderer.setRenderTarget( renderTarget, 3 );
			renderer.render( scene, cameraNY );
			renderer.setRenderTarget( renderTarget, 4 );
			renderer.render( scene, cameraPZ );
			renderTarget.texture.generateMipmaps = generateMipmaps;
			renderer.setRenderTarget( renderTarget, 5 );
			renderer.render( scene, cameraNZ );
			renderer.setRenderTarget( currentRenderTarget );
		};
		this.clear = function ( renderer, color, depth, stencil ) {
			var currentRenderTarget = renderer.getRenderTarget();
			var renderTarget = this.renderTarget;
			for ( var i = 0; i < 6; i ++ ) {
				renderer.setRenderTarget( renderTarget, i );
				renderer.clear( color, depth, stencil );
			}
			renderer.setRenderTarget( currentRenderTarget );
		};
	}
	CubeCamera.prototype = Object.create( Object3D.prototype );
	CubeCamera.prototype.constructor = CubeCamera;
	/**
	 * @author alteredq / http://alteredqualia.com
	 * @author WestLangley / http://github.com/WestLangley
	 */
	function WebGLRenderTargetCube( width, height, options ) {
		WebGLRenderTarget.call( this, width, height, options );
	}
	WebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );
	WebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;
	WebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;
	WebGLRenderTargetCube.prototype.fromEquirectangularTexture = function ( renderer, texture ) {
		this.texture.type = texture.type;
		this.texture.format = texture.format;
		this.texture.encoding = texture.encoding;
		var scene = new Scene();
		var shader = {
			uniforms: {
				tEquirect: { value: null },
			},
			vertexShader: [
				"varying vec3 vWorldDirection;",
				"vec3 transformDirection( in vec3 dir, in mat4 matrix ) {",
				"	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );",
				"}",
				"void main() {",
				"	vWorldDirection = transformDirection( position, modelMatrix );",
				"	#include <begin_vertex>",
				"	#include <project_vertex>",
				"}"
			].join( '\n' ),
			fragmentShader: [
				"uniform sampler2D tEquirect;",
				"varying vec3 vWorldDirection;",
				"#define RECIPROCAL_PI 0.31830988618",
				"#define RECIPROCAL_PI2 0.15915494",
				"void main() {",
				"	vec3 direction = normalize( vWorldDirection );",
				"	vec2 sampleUV;",
				"	sampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;",
				"	sampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;",
				"	gl_FragColor = texture2D( tEquirect, sampleUV );",
				"}"
			].join( '\n' ),
		};
		var material = new ShaderMaterial( {
			type: 'CubemapFromEquirect',
			uniforms: cloneUniforms( shader.uniforms ),
			vertexShader: shader.vertexShader,
			fragmentShader: shader.fragmentShader,
			side: BackSide,
			blending: NoBlending
		} );
		material.uniforms.tEquirect.value = texture;
		var mesh = new Mesh( new BoxBufferGeometry( 5, 5, 5 ), material );
		scene.add( mesh );
		var camera = new CubeCamera( 1, 10, 1 );
		camera.renderTarget = this;
		camera.renderTarget.texture.name = 'CubeCameraTexture';
		camera.update( renderer, scene );
		mesh.geometry.dispose();
		mesh.material.dispose();
		return this;
	};
	/**
	 * @author alteredq / http://alteredqualia.com/
	 */
	function DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {
		Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );
		this.image = { data: data, width: width, height: height };
		this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
		this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;
		this.generateMipmaps = false;
		this.flipY = false;
		this.unpackAlignment = 1;
	}
	DataTexture.prototype = Object.create( Texture.prototype );
	DataTexture.prototype.constructor = DataTexture;
	DataTexture.prototype.isDataTexture = true;
	/**
	 * @author bhouston / http://clara.io
	 */
	function Plane( normal, constant ) {
		this.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );
		this.constant = ( constant !== undefined ) ? constant : 0;
	}
	Object.assign( Plane.prototype, {
		isPlane: true,
		set: function ( normal, constant ) {
			this.normal.copy( normal );
			this.constant = constant;
			return this;
		},
		setComponents: function ( x, y, z, w ) {
			this.normal.set( x, y, z );
			this.constant = w;
			return this;
		},
		setFromNormalAndCoplanarPoint: function ( normal, point ) {
			this.normal.copy( normal );
			this.constant = - point.dot( this.normal );
			return this;
		},
		setFromCoplanarPoints: function () {
			var v1 = new Vector3();
			var v2 = new Vector3();
			return function setFromCoplanarPoints( a, b, c ) {
				var normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();
				this.setFromNormalAndCoplanarPoint( normal, a );
				return this;
			};
		}(),
		clone: function () {
			return new this.constructor().copy( this );
		},
		copy: function ( plane ) {
			this.normal.copy( plane.normal );
			this.constant = plane.constant;
			return this;
		},
		normalize: function () {
			var inverseNormalLength = 1.0 / this.normal.length();
			this.normal.multiplyScalar( inverseNormalLength );
			this.constant *= inverseNormalLength;
			return this;
		},
		negate: function () {
			this.constant *= - 1;
			this.normal.negate();
			return this;
		},
		distanceToPoint: function ( point ) {
			return this.normal.dot( point ) + this.constant;
		},
		distanceToSphere: function ( sphere ) {
			return this.distanceToPoint( sphere.center ) - sphere.radius;
		},
		projectPoint: function ( point, target ) {
			if ( target === undefined ) {
				console.warn( 'THREE.Plane: .projectPoint() target is now required' );
				target = new Vector3();
			}
			return target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );
		},
		intersectLine: function () {
			var v1 = new Vector3();
			return function intersectLine( line, target ) {
				if ( target === undefined ) {
					console.warn( 'THREE.Plane: .intersectLine() target is now required' );
					target = new Vector3();
				}
				var direction = line.delta( v1 );
				var denominator = this.normal.dot( direction );
				if ( denominator === 0 ) {
					if ( this.distanceToPoint( line.start ) === 0 ) {
						return target.copy( line.start );
					}
					return undefined;
				}
				var t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;
				if ( t < 0 || t > 1 ) {
					return undefined;
				}
				return target.copy( direction ).multiplyScalar( t ).add( line.start );
			};
		}(),
		intersectsLine: function ( line ) {
			var startSign = this.distanceToPoint( line.start );
			var endSign = this.distanceToPoint( line.end );
			return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );
		},
		intersectsBox: function ( box ) {
			return box.intersectsPlane( this );
		},
		intersectsSphere: function ( sphere ) {
			return sphere.intersectsPlane( this );
		},
		coplanarPoint: function ( target ) {
			if ( target === undefined ) {
				console.warn( 'THREE.Plane: .coplanarPoint() target is now required' );
				target = new Vector3();
			}
			return target.copy( this.normal ).multiplyScalar( - this.constant );
		},
		applyMatrix4: function () {
			var v1 = new Vector3();
			var m1 = new Matrix3();
			return function applyMatrix4( matrix, optionalNormalMatrix ) {
				var normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );
				var referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );
				var normal = this.normal.applyMatrix3( normalMatrix ).normalize();
				this.constant = - referencePoint.dot( normal );
				return this;
			};
		}(),
		translate: function ( offset ) {
			this.constant -= offset.dot( this.normal );
			return this;
		},
		equals: function ( plane ) {
			return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author bhouston / http://clara.io
	 */
	function Frustum( p0, p1, p2, p3, p4, p5 ) {
		this.planes = [
			( p0 !== undefined ) ? p0 : new Plane(),
			( p1 !== undefined ) ? p1 : new Plane(),
			( p2 !== undefined ) ? p2 : new Plane(),
			( p3 !== undefined ) ? p3 : new Plane(),
			( p4 !== undefined ) ? p4 : new Plane(),
			( p5 !== undefined ) ? p5 : new Plane()
		];
	}
	Object.assign( Frustum.prototype, {
		set: function ( p0, p1, p2, p3, p4, p5 ) {
			var planes = this.planes;
			planes[ 0 ].copy( p0 );
			planes[ 1 ].copy( p1 );
			planes[ 2 ].copy( p2 );
			planes[ 3 ].copy( p3 );
			planes[ 4 ].copy( p4 );
			planes[ 5 ].copy( p5 );
			return this;
		},
		clone: function () {
			return new this.constructor().copy( this );
		},
		copy: function ( frustum ) {
			var planes = this.planes;
			for ( var i = 0; i < 6; i ++ ) {
				planes[ i ].copy( frustum.planes[ i ] );
			}
			return this;
		},
		setFromMatrix: function ( m ) {
			var planes = this.planes;
			var me = m.elements;
			var me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
			var me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
			var me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
			var me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];
			planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
			planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
			planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
			planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
			planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
			planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();
			return this;
		},
		intersectsObject: function () {
			var sphere = new Sphere();
			return function intersectsObject( object ) {
				var geometry = object.geometry;
				if ( geometry.boundingSphere === null )
					geometry.computeBoundingSphere();
				sphere.copy( geometry.boundingSphere )
					.applyMatrix4( object.matrixWorld );
				return this.intersectsSphere( sphere );
			};
		}(),
		intersectsSprite: function () {
			var sphere = new Sphere();
			return function intersectsSprite( sprite ) {
				sphere.center.set( 0, 0, 0 );
				sphere.radius = 0.7071067811865476;
				sphere.applyMatrix4( sprite.matrixWorld );
				return this.intersectsSphere( sphere );
			};
		}(),
		intersectsSphere: function ( sphere ) {
			var planes = this.planes;
			var center = sphere.center;
			var negRadius = - sphere.radius;
			for ( var i = 0; i < 6; i ++ ) {
				var distance = planes[ i ].distanceToPoint( center );
				if ( distance < negRadius ) {
					return false;
				}
			}
			return true;
		},
		intersectsBox: function () {
			var p = new Vector3();
			return function intersectsBox( box ) {
				var planes = this.planes;
				for ( var i = 0; i < 6; i ++ ) {
					var plane = planes[ i ];
					p.x = plane.normal.x > 0 ? box.max.x : box.min.x;
					p.y = plane.normal.y > 0 ? box.max.y : box.min.y;
					p.z = plane.normal.z > 0 ? box.max.z : box.min.z;
					if ( plane.distanceToPoint( p ) < 0 ) {
						return false;
					}
				}
				return true;
			};
		}(),
		containsPoint: function ( point ) {
			var planes = this.planes;
			for ( var i = 0; i < 6; i ++ ) {
				if ( planes[ i ].distanceToPoint( point ) < 0 ) {
					return false;
				}
			}
			return true;
		}
	} );
	var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";
	var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";
	var alphatest_fragment = "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif";
	var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif";
	var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";
	var begin_vertex = "vec3 transformed = vec3( position );";
	var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";
	var bsdfs = "vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\treturn Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}";
	var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";
	var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t#endif\n#endif";
	var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";
	var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvarying vec3 vViewPosition;\n#endif";
	var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif";
	var color_fragment = "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif";
	var color_pars_fragment = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";
	var color_pars_vertex = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";
	var color_vertex = "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif";
	var common = "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}";
	var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif";
	var defaultnormal_vertex = "vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = normalMatrix * objectTangent;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";
	var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";
	var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif";
	var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";
	var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";
	var encodings_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";
	var encodings_pars_fragment = "\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}";
	var envmap_fragment = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";
	var envmap_pars_fragment = "#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";
	var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";
	var envmap_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";
	var fog_vertex = "#ifdef USE_FOG\n\tfogDepth = -mvPosition.z;\n#endif";
	var fog_pars_vertex = "#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif";
	var fog_fragment = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";
	var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";
	var gradientmap_pars_fragment = "#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif";
	var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif";
	var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";
	var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif";
	var lights_pars_begin = "uniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif";
	var envmap_physical_pars_fragment = "#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent ));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif";
	var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";
	var lights_phong_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)";
	var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif";
	var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef ENVMAP_TYPE_CUBE_UV\n\t\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#endif\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\tfloat clearCoatInv = 1.0 - clearCoatDHR;\n\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec3 singleScattering = vec3( 0.0 );\n\t\tvec3 multiScattering = vec3( 0.0 );\n\t\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\t\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\t\treflectedLight.indirectSpecular += clearCoatInv * radiance * singleScattering;\n\t\treflectedLight.indirectDiffuse += multiScattering * cosineWeightedIrradiance;\n\t\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n\t#else\n\t\treflectedLight.indirectSpecular += clearCoatInv * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#endif\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";
	var lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearCoatRadiance = vec3( 0.0 );\n#endif";
	var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), maxMipLevel );\n\t#ifndef STANDARD\n\t\tclearCoatRadiance += getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), maxMipLevel );\n\t#endif\n#endif";
	var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, irradiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif";
	var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";
	var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n#endif";
	var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif";
	var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\tgl_Position.z *= gl_Position.w;\n\t#endif\n#endif";
	var map_fragment = "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif";
	var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";
	var map_particle_fragment = "#ifdef USE_MAP\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif";
	var map_particle_pars_fragment = "#ifdef USE_MAP\n\tuniform mat3 uvTransform;\n\tuniform sampler2D map;\n#endif";
	var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";
	var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";
	var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif";
	var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif";
	var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif";
	var normal_fragment_begin = "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t#endif\n#endif";
	var normal_fragment_maps = "#ifdef USE_NORMALMAP\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t#ifdef FLIP_SIDED\n\t\t\tnormal = - normal;\n\t\t#endif\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\tnormal = normalize( normalMatrix * normal );\n\t#else\n\t\t#ifdef USE_TANGENT\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t\tmapN.xy = normalScale * mapN.xy;\n\t\t\tnormal = normalize( vTBN * mapN );\n\t\t#else\n\t\t\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n\t\t#endif\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif";
	var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tuniform mat3 normalMatrix;\n\t#else\n\t\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\t\tvec2 st0 = dFdx( vUv.st );\n\t\t\tvec2 st1 = dFdy( vUv.st );\n\t\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\t\tvec3 N = normalize( surf_norm );\n\t\t\tmat3 tsn = mat3( S, T, N );\n\t\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t\tmapN.xy *= normalScale;\n\t\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\treturn normalize( tsn * mapN );\n\t\t}\n\t#endif\n#endif";
	var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}";
	var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";
	var project_vertex = "vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;";
	var dithering_fragment = "#if defined( DITHERING )\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";
	var dithering_pars_fragment = "#if defined( DITHERING )\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";
	var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";
	var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";
	var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif";
	var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif";
	var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif";
	var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}";
	var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";
	var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif";
	var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";
	var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";
	var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";
	var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";
	var tonemapping_fragment = "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";
	var tonemapping_pars_fragment = "#ifndef saturate\n\t#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\n}";
	var uv_pars_fragment = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif";
	var uv_pars_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif";
	var uv_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";
	var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";
	var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif";
	var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif";
	var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif";
	var background_frag = "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";
	var background_vert = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";
	var cube_frag = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";
	var cube_vert = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";
	var depth_frag = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}";
	var depth_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}";
	var distanceRGBA_frag = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";
	var distanceRGBA_vert = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";
	var equirect_frag = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";
	var equirect_vert = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";
	var linedashed_frag = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";
	var linedashed_vert = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";
	var meshbasic_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";
	var meshbasic_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";
	var meshlambert_frag = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
	var meshlambert_vert = "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
	var meshmatcap_frag = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";
	var meshmatcap_vert = "#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";
	var meshphong_frag = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
	var meshphong_vert = "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
	var meshphysical_frag = "#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
	var meshphysical_vert = "#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
	var normal_frag = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}";
	var normal_vert = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";
	var points_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";
	var points_vert = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";
	var shadow_frag = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}";
	var shadow_vert = "#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
	var sprite_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";
	var sprite_vert = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";
	var ShaderChunk = {
		alphamap_fragment: alphamap_fragment,
		alphamap_pars_fragment: alphamap_pars_fragment,
		alphatest_fragment: alphatest_fragment,
		aomap_fragment: aomap_fragment,
		aomap_pars_fragment: aomap_pars_fragment,
		begin_vertex: begin_vertex,
		beginnormal_vertex: beginnormal_vertex,
		bsdfs: bsdfs,
		bumpmap_pars_fragment: bumpmap_pars_fragment,
		clipping_planes_fragment: clipping_planes_fragment,
		clipping_planes_pars_fragment: clipping_planes_pars_fragment,
		clipping_planes_pars_vertex: clipping_planes_pars_vertex,
		clipping_planes_vertex: clipping_planes_vertex,
		color_fragment: color_fragment,
		color_pars_fragment: color_pars_fragment,
		color_pars_vertex: color_pars_vertex,
		color_vertex: color_vertex,
		common: common,
		cube_uv_reflection_fragment: cube_uv_reflection_fragment,
		defaultnormal_vertex: defaultnormal_vertex,
		displacementmap_pars_vertex: displacementmap_pars_vertex,
		displacementmap_vertex: displacementmap_vertex,
		emissivemap_fragment: emissivemap_fragment,
		emissivemap_pars_fragment: emissivemap_pars_fragment,
		encodings_fragment: encodings_fragment,
		encodings_pars_fragment: encodings_pars_fragment,
		envmap_fragment: envmap_fragment,
		envmap_pars_fragment: envmap_pars_fragment,
		envmap_pars_vertex: envmap_pars_vertex,
		envmap_physical_pars_fragment: envmap_physical_pars_fragment,
		envmap_vertex: envmap_vertex,
		fog_vertex: fog_vertex,
		fog_pars_vertex: fog_pars_vertex,
		fog_fragment: fog_fragment,
		fog_pars_fragment: fog_pars_fragment,
		gradientmap_pars_fragment: gradientmap_pars_fragment,
		lightmap_fragment: lightmap_fragment,
		lightmap_pars_fragment: lightmap_pars_fragment,
		lights_lambert_vertex: lights_lambert_vertex,
		lights_pars_begin: lights_pars_begin,
		lights_phong_fragment: lights_phong_fragment,
		lights_phong_pars_fragment: lights_phong_pars_fragment,
		lights_physical_fragment: lights_physical_fragment,
		lights_physical_pars_fragment: lights_physical_pars_fragment,
		lights_fragment_begin: lights_fragment_begin,
		lights_fragment_maps: lights_fragment_maps,
		lights_fragment_end: lights_fragment_end,
		logdepthbuf_fragment: logdepthbuf_fragment,
		logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
		logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
		logdepthbuf_vertex: logdepthbuf_vertex,
		map_fragment: map_fragment,
		map_pars_fragment: map_pars_fragment,
		map_particle_fragment: map_particle_fragment,
		map_particle_pars_fragment: map_particle_pars_fragment,
		metalnessmap_fragment: metalnessmap_fragment,
		metalnessmap_pars_fragment: metalnessmap_pars_fragment,
		morphnormal_vertex: morphnormal_vertex,
		morphtarget_pars_vertex: morphtarget_pars_vertex,
		morphtarget_vertex: morphtarget_vertex,
		normal_fragment_begin: normal_fragment_begin,
		normal_fragment_maps: normal_fragment_maps,
		normalmap_pars_fragment: normalmap_pars_fragment,
		packing: packing,
		premultiplied_alpha_fragment: premultiplied_alpha_fragment,
		project_vertex: project_vertex,
		dithering_fragment: dithering_fragment,
		dithering_pars_fragment: dithering_pars_fragment,
		roughnessmap_fragment: roughnessmap_fragment,
		roughnessmap_pars_fragment: roughnessmap_pars_fragment,
		shadowmap_pars_fragment: shadowmap_pars_fragment,
		shadowmap_pars_vertex: shadowmap_pars_vertex,
		shadowmap_vertex: shadowmap_vertex,
		shadowmask_pars_fragment: shadowmask_pars_fragment,
		skinbase_vertex: skinbase_vertex,
		skinning_pars_vertex: skinning_pars_vertex,
		skinning_vertex: skinning_vertex,
		skinnormal_vertex: skinnormal_vertex,
		specularmap_fragment: specularmap_fragment,
		specularmap_pars_fragment: specularmap_pars_fragment,
		tonemapping_fragment: tonemapping_fragment,
		tonemapping_pars_fragment: tonemapping_pars_fragment,
		uv_pars_fragment: uv_pars_fragment,
		uv_pars_vertex: uv_pars_vertex,
		uv_vertex: uv_vertex,
		uv2_pars_fragment: uv2_pars_fragment,
		uv2_pars_vertex: uv2_pars_vertex,
		uv2_vertex: uv2_vertex,
		worldpos_vertex: worldpos_vertex,
		background_frag: background_frag,
		background_vert: background_vert,
		cube_frag: cube_frag,
		cube_vert: cube_vert,
		depth_frag: depth_frag,
		depth_vert: depth_vert,
		distanceRGBA_frag: distanceRGBA_frag,
		distanceRGBA_vert: distanceRGBA_vert,
		equirect_frag: equirect_frag,
		equirect_vert: equirect_vert,
		linedashed_frag: linedashed_frag,
		linedashed_vert: linedashed_vert,
		meshbasic_frag: meshbasic_frag,
		meshbasic_vert: meshbasic_vert,
		meshlambert_frag: meshlambert_frag,
		meshlambert_vert: meshlambert_vert,
		meshmatcap_frag: meshmatcap_frag,
		meshmatcap_vert: meshmatcap_vert,
		meshphong_frag: meshphong_frag,
		meshphong_vert: meshphong_vert,
		meshphysical_frag: meshphysical_frag,
		meshphysical_vert: meshphysical_vert,
		normal_frag: normal_frag,
		normal_vert: normal_vert,
		points_frag: points_frag,
		points_vert: points_vert,
		shadow_frag: shadow_frag,
		shadow_vert: shadow_vert,
		sprite_frag: sprite_frag,
		sprite_vert: sprite_vert
	};
	/**
	 * Uniforms library for shared webgl shaders
	 */
	var UniformsLib = {
		common: {
			diffuse: { value: new Color( 0xeeeeee ) },
			opacity: { value: 1.0 },
			map: { value: null },
			uvTransform: { value: new Matrix3() },
			alphaMap: { value: null },
		},
		specularmap: {
			specularMap: { value: null },
		},
		envmap: {
			envMap: { value: null },
			flipEnvMap: { value: - 1 },
			reflectivity: { value: 1.0 },
			refractionRatio: { value: 0.98 },
			maxMipLevel: { value: 0 }
		},
		aomap: {
			aoMap: { value: null },
			aoMapIntensity: { value: 1 }
		},
		lightmap: {
			lightMap: { value: null },
			lightMapIntensity: { value: 1 }
		},
		emissivemap: {
			emissiveMap: { value: null }
		},
		bumpmap: {
			bumpMap: { value: null },
			bumpScale: { value: 1 }
		},
		normalmap: {
			normalMap: { value: null },
			normalScale: { value: new Vector2( 1, 1 ) }
		},
		displacementmap: {
			displacementMap: { value: null },
			displacementScale: { value: 1 },
			displacementBias: { value: 0 }
		},
		roughnessmap: {
			roughnessMap: { value: null }
		},
		metalnessmap: {
			metalnessMap: { value: null }
		},
		gradientmap: {
			gradientMap: { value: null }
		},
		fog: {
			fogDensity: { value: 0.00025 },
			fogNear: { value: 1 },
			fogFar: { value: 2000 },
			fogColor: { value: new Color( 0xffffff ) }
		},
		lights: {
			ambientLightColor: { value: [] },
			lightProbe: { value: [] },
			directionalLights: { value: [], properties: {
				direction: {},
				color: {},
				shadow: {},
				shadowBias: {},
				shadowRadius: {},
				shadowMapSize: {}
			} },
			directionalShadowMap: { value: [] },
			directionalShadowMatrix: { value: [] },
			spotLights: { value: [], properties: {
				color: {},
				position: {},
				direction: {},
				distance: {},
				coneCos: {},
				penumbraCos: {},
				decay: {},
				shadow: {},
				shadowBias: {},
				shadowRadius: {},
				shadowMapSize: {}
			} },
			spotShadowMap: { value: [] },
			spotShadowMatrix: { value: [] },
			pointLights: { value: [], properties: {
				color: {},
				position: {},
				decay: {},
				distance: {},
				shadow: {},
				shadowBias: {},
				shadowRadius: {},
				shadowMapSize: {},
				shadowCameraNear: {},
				shadowCameraFar: {}
			} },
			pointShadowMap: { value: [] },
			pointShadowMatrix: { value: [] },
			hemisphereLights: { value: [], properties: {
				direction: {},
				skyColor: {},
				groundColor: {}
			} },
			rectAreaLights: { value: [], properties: {
				color: {},
				position: {},
				width: {},
				height: {}
			} }
		},
		points: {
			diffuse: { value: new Color( 0xeeeeee ) },
			opacity: { value: 1.0 },
			size: { value: 1.0 },
			scale: { value: 1.0 },
			map: { value: null },
			uvTransform: { value: new Matrix3() }
		},
		sprite: {
			diffuse: { value: new Color( 0xeeeeee ) },
			opacity: { value: 1.0 },
			center: { value: new Vector2( 0.5, 0.5 ) },
			rotation: { value: 0.0 },
			map: { value: null },
			uvTransform: { value: new Matrix3() }
		}
	};
	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 */
	var ShaderLib = {
		basic: {
			uniforms: mergeUniforms( [
				UniformsLib.common,
				UniformsLib.specularmap,
				UniformsLib.envmap,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.fog
			] ),
			vertexShader: ShaderChunk.meshbasic_vert,
			fragmentShader: ShaderChunk.meshbasic_frag
		},
		lambert: {
			uniforms: mergeUniforms( [
				UniformsLib.common,
				UniformsLib.specularmap,
				UniformsLib.envmap,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.emissivemap,
				UniformsLib.fog,
				UniformsLib.lights,
				{
					emissive: { value: new Color( 0x000000 ) }
				}
			] ),
			vertexShader: ShaderChunk.meshlambert_vert,
			fragmentShader: ShaderChunk.meshlambert_frag
		},
		phong: {
			uniforms: mergeUniforms( [
				UniformsLib.common,
				UniformsLib.specularmap,
				UniformsLib.envmap,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.emissivemap,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				UniformsLib.gradientmap,
				UniformsLib.fog,
				UniformsLib.lights,
				{
					emissive: { value: new Color( 0x000000 ) },
					specular: { value: new Color( 0x111111 ) },
					shininess: { value: 30 }
				}
			] ),
			vertexShader: ShaderChunk.meshphong_vert,
			fragmentShader: ShaderChunk.meshphong_frag
		},
		standard: {
			uniforms: mergeUniforms( [
				UniformsLib.common,
				UniformsLib.envmap,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.emissivemap,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				UniformsLib.roughnessmap,
				UniformsLib.metalnessmap,
				UniformsLib.fog,
				UniformsLib.lights,
				{
					emissive: { value: new Color( 0x000000 ) },
					roughness: { value: 0.5 },
					metalness: { value: 0.5 },
					envMapIntensity: { value: 1 } // temporary
				}
			] ),
			vertexShader: ShaderChunk.meshphysical_vert,
			fragmentShader: ShaderChunk.meshphysical_frag
		},
		matcap: {
			uniforms: mergeUniforms( [
				UniformsLib.common,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				UniformsLib.fog,
				{
					matcap: { value: null }
				}
			] ),
			vertexShader: ShaderChunk.meshmatcap_vert,
			fragmentShader: ShaderChunk.meshmatcap_frag
		},
		points: {
			uniforms: mergeUniforms( [
				UniformsLib.points,
				UniformsLib.fog
			] ),
			vertexShader: ShaderChunk.points_vert,
			fragmentShader: ShaderChunk.points_frag
		},
		dashed: {
			uniforms: mergeUniforms( [
				UniformsLib.common,
				UniformsLib.fog,
				{
					scale: { value: 1 },
					dashSize: { value: 1 },
					totalSize: { value: 2 }
				}
			] ),
			vertexShader: ShaderChunk.linedashed_vert,
			fragmentShader: ShaderChunk.linedashed_frag
		},
		depth: {
			uniforms: mergeUniforms( [
				UniformsLib.common,
				UniformsLib.displacementmap
			] ),
			vertexShader: ShaderChunk.depth_vert,
			fragmentShader: ShaderChunk.depth_frag
		},
		normal: {
			uniforms: mergeUniforms( [
				UniformsLib.common,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				{
					opacity: { value: 1.0 }
				}
			] ),
			vertexShader: ShaderChunk.normal_vert,
			fragmentShader: ShaderChunk.normal_frag
		},
		sprite: {
			uniforms: mergeUniforms( [
				UniformsLib.sprite,
				UniformsLib.fog
			] ),
			vertexShader: ShaderChunk.sprite_vert,
			fragmentShader: ShaderChunk.sprite_frag
		},
		background: {
			uniforms: {
				uvTransform: { value: new Matrix3() },
				t2D: { value: null },
			},
			vertexShader: ShaderChunk.background_vert,
			fragmentShader: ShaderChunk.background_frag
		},
		/* -------------------------------------------------------------------------
		 ------------------------------------------------------------------------- */
		cube: {
			uniforms: {
				tCube: { value: null },
				tFlip: { value: - 1 },
				opacity: { value: 1.0 }
			},
			vertexShader: ShaderChunk.cube_vert,
			fragmentShader: ShaderChunk.cube_frag
		},
		equirect: {
			uniforms: {
				tEquirect: { value: null },
			},
			vertexShader: ShaderChunk.equirect_vert,
			fragmentShader: ShaderChunk.equirect_frag
		},
		distanceRGBA: {
			uniforms: mergeUniforms( [
				UniformsLib.common,
				UniformsLib.displacementmap,
				{
					referencePosition: { value: new Vector3() },
					nearDistance: { value: 1 },
					farDistance: { value: 1000 }
				}
			] ),
			vertexShader: ShaderChunk.distanceRGBA_vert,
			fragmentShader: ShaderChunk.distanceRGBA_frag
		},
		shadow: {
			uniforms: mergeUniforms( [
				UniformsLib.lights,
				UniformsLib.fog,
				{
					color: { value: new Color( 0x00000 ) },
					opacity: { value: 1.0 }
				},
			] ),
			vertexShader: ShaderChunk.shadow_vert,
			fragmentShader: ShaderChunk.shadow_frag
		}
	};
	ShaderLib.physical = {
		uniforms: mergeUniforms( [
			ShaderLib.standard.uniforms,
			{
				clearCoat: { value: 0 },
				clearCoatRoughness: { value: 0 }
			}
		] ),
		vertexShader: ShaderChunk.meshphysical_vert,
		fragmentShader: ShaderChunk.meshphysical_frag
	};
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function WebGLAnimation() {
		var context = null;
		var isAnimating = false;
		var animationLoop = null;
		function onAnimationFrame( time, frame ) {
			if ( isAnimating === false ) return;
			animationLoop( time, frame );
			context.requestAnimationFrame( onAnimationFrame );
		}
		return {
			start: function () {
				if ( isAnimating === true ) return;
				if ( animationLoop === null ) return;
				context.requestAnimationFrame( onAnimationFrame );
				isAnimating = true;
			},
			stop: function () {
				isAnimating = false;
			},
			setAnimationLoop: function ( callback ) {
				animationLoop = callback;
			},
			setContext: function ( value ) {
				context = value;
			}
		};
	}
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function WebGLAttributes( gl ) {
		var buffers = new WeakMap();
		function createBuffer( attribute, bufferType ) {
			var array = attribute.array;
			var usage = attribute.dynamic ? 35048 : 35044;
			var buffer = gl.createBuffer();
			gl.bindBuffer( bufferType, buffer );
			gl.bufferData( bufferType, array, usage );
			attribute.onUploadCallback();
			var type = 5126;
			if ( array instanceof Float32Array ) {
				type = 5126;
			} else if ( array instanceof Float64Array ) {
				console.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );
			} else if ( array instanceof Uint16Array ) {
				type = 5123;
			} else if ( array instanceof Int16Array ) {
				type = 5122;
			} else if ( array instanceof Uint32Array ) {
				type = 5125;
			} else if ( array instanceof Int32Array ) {
				type = 5124;
			} else if ( array instanceof Int8Array ) {
				type = 5120;
			} else if ( array instanceof Uint8Array ) {
				type = 5121;
			}
			return {
				buffer: buffer,
				type: type,
				bytesPerElement: array.BYTES_PER_ELEMENT,
				version: attribute.version
			};
		}
		function updateBuffer( buffer, attribute, bufferType ) {
			var array = attribute.array;
			var updateRange = attribute.updateRange;
			gl.bindBuffer( bufferType, buffer );
			if ( attribute.dynamic === false ) {
				gl.bufferData( bufferType, array, 35044 );
			} else if ( updateRange.count === - 1 ) {
				gl.bufferSubData( bufferType, 0, array );
			} else if ( updateRange.count === 0 ) {
				console.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );
			} else {
				gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
					array.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );
				updateRange.count = - 1; // reset range
			}
		}
		function get( attribute ) {
			if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;
			return buffers.get( attribute );
		}
		function remove( attribute ) {
			if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;
			var data = buffers.get( attribute );
			if ( data ) {
				gl.deleteBuffer( data.buffer );
				buffers.delete( attribute );
			}
		}
		function update( attribute, bufferType ) {
			if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;
			var data = buffers.get( attribute );
			if ( data === undefined ) {
				buffers.set( attribute, createBuffer( attribute, bufferType ) );
			} else if ( data.version < attribute.version ) {
				updateBuffer( data.buffer, attribute, bufferType );
				data.version = attribute.version;
			}
		}
		return {
			get: get,
			remove: remove,
			update: update
		};
	}
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */
	function PlaneGeometry( width, height, widthSegments, heightSegments ) {
		Geometry.call( this );
		this.type = 'PlaneGeometry';
		this.parameters = {
			width: width,
			height: height,
			widthSegments: widthSegments,
			heightSegments: heightSegments
		};
		this.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );
		this.mergeVertices();
	}
	PlaneGeometry.prototype = Object.create( Geometry.prototype );
	PlaneGeometry.prototype.constructor = PlaneGeometry;
	function PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {
		BufferGeometry.call( this );
		this.type = 'PlaneBufferGeometry';
		this.parameters = {
			width: width,
			height: height,
			widthSegments: widthSegments,
			heightSegments: heightSegments
		};
		width = width || 1;
		height = height || 1;
		var width_half = width / 2;
		var height_half = height / 2;
		var gridX = Math.floor( widthSegments ) || 1;
		var gridY = Math.floor( heightSegments ) || 1;
		var gridX1 = gridX + 1;
		var gridY1 = gridY + 1;
		var segment_width = width / gridX;
		var segment_height = height / gridY;
		var ix, iy;
		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];
		for ( iy = 0; iy < gridY1; iy ++ ) {
			var y = iy * segment_height - height_half;
			for ( ix = 0; ix < gridX1; ix ++ ) {
				var x = ix * segment_width - width_half;
				vertices.push( x, - y, 0 );
				normals.push( 0, 0, 1 );
				uvs.push( ix / gridX );
				uvs.push( 1 - ( iy / gridY ) );
			}
		}
		for ( iy = 0; iy < gridY; iy ++ ) {
			for ( ix = 0; ix < gridX; ix ++ ) {
				var a = ix + gridX1 * iy;
				var b = ix + gridX1 * ( iy + 1 );
				var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
				var d = ( ix + 1 ) + gridX1 * iy;
				indices.push( a, b, d );
				indices.push( b, c, d );
			}
		}
		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
	}
	PlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function WebGLBackground( renderer, state, objects, premultipliedAlpha ) {
		var clearColor = new Color( 0x000000 );
		var clearAlpha = 0;
		var planeMesh;
		var boxMesh;
		var currentBackground = null;
		var currentBackgroundVersion = 0;
		function render( renderList, scene, camera, forceClear ) {
			var background = scene.background;
			var vr = renderer.vr;
			var session = vr.getSession && vr.getSession();
			if ( session && session.environmentBlendMode === 'additive' ) {
				background = null;
			}
			if ( background === null ) {
				setClear( clearColor, clearAlpha );
				currentBackground = null;
				currentBackgroundVersion = 0;
			} else if ( background && background.isColor ) {
				setClear( background, 1 );
				forceClear = true;
				currentBackground = null;
				currentBackgroundVersion = 0;
			}
			if ( renderer.autoClear || forceClear ) {
				renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );
			}
			if ( background && ( background.isCubeTexture || background.isWebGLRenderTargetCube ) ) {
				if ( boxMesh === undefined ) {
					boxMesh = new Mesh(
						new BoxBufferGeometry( 1, 1, 1 ),
						new ShaderMaterial( {
							type: 'BackgroundCubeMaterial',
							uniforms: cloneUniforms( ShaderLib.cube.uniforms ),
							vertexShader: ShaderLib.cube.vertexShader,
							fragmentShader: ShaderLib.cube.fragmentShader,
							side: BackSide,
							depthTest: false,
							depthWrite: false,
							fog: false
						} )
					);
					boxMesh.geometry.removeAttribute( 'normal' );
					boxMesh.geometry.removeAttribute( 'uv' );
					boxMesh.onBeforeRender = function ( renderer, scene, camera ) {
						this.matrixWorld.copyPosition( camera.matrixWorld );
					};
					Object.defineProperty( boxMesh.material, 'map', {
						get: function () {
							return this.uniforms.tCube.value;
						}
					} );
					objects.update( boxMesh );
				}
				var texture = background.isWebGLRenderTargetCube ? background.texture : background;
				boxMesh.material.uniforms.tCube.value = texture;
				boxMesh.material.uniforms.tFlip.value = ( background.isWebGLRenderTargetCube ) ? 1 : - 1;
				if ( currentBackground !== background ||
				     currentBackgroundVersion !== texture.version ) {
					boxMesh.material.needsUpdate = true;
					currentBackground = background;
					currentBackgroundVersion = texture.version;
				}
				renderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );
			} else if ( background && background.isTexture ) {
				if ( planeMesh === undefined ) {
					planeMesh = new Mesh(
						new PlaneBufferGeometry( 2, 2 ),
						new ShaderMaterial( {
							type: 'BackgroundMaterial',
							uniforms: cloneUniforms( ShaderLib.background.uniforms ),
							vertexShader: ShaderLib.background.vertexShader,
							fragmentShader: ShaderLib.background.fragmentShader,
							side: FrontSide,
							depthTest: false,
							depthWrite: false,
							fog: false
						} )
					);
					planeMesh.geometry.removeAttribute( 'normal' );
					Object.defineProperty( planeMesh.material, 'map', {
						get: function () {
							return this.uniforms.t2D.value;
						}
					} );
					objects.update( planeMesh );
				}
				planeMesh.material.uniforms.t2D.value = background;
				if ( background.matrixAutoUpdate === true ) {
					background.updateMatrix();
				}
				planeMesh.material.uniforms.uvTransform.value.copy( background.matrix );
				if ( currentBackground !== background ||
					   currentBackgroundVersion !== background.version ) {
					planeMesh.material.needsUpdate = true;
					currentBackground = background;
					currentBackgroundVersion = background.version;
				}
				renderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );
			}
		}
		function setClear( color, alpha ) {
			state.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );
		}
		return {
			getClearColor: function () {
				return clearColor;
			},
			setClearColor: function ( color, alpha ) {
				clearColor.set( color );
				clearAlpha = alpha !== undefined ? alpha : 1;
				setClear( clearColor, clearAlpha );
			},
			getClearAlpha: function () {
				return clearAlpha;
			},
			setClearAlpha: function ( alpha ) {
				clearAlpha = alpha;
				setClear( clearColor, clearAlpha );
			},
			render: render
		};
	}
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function WebGLBufferRenderer( gl, extensions, info, capabilities ) {
		var mode;
		function setMode( value ) {
			mode = value;
		}
		function render( start, count ) {
			gl.drawArrays( mode, start, count );
			info.update( count, mode );
		}
		function renderInstances( geometry, start, count ) {
			var extension;
			if ( capabilities.isWebGL2 ) {
				extension = gl;
			} else {
				extension = extensions.get( 'ANGLE_instanced_arrays' );
				if ( extension === null ) {
					console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
					return;
				}
			}
			extension[ capabilities.isWebGL2 ? 'drawArraysInstanced' : 'drawArraysInstancedANGLE' ]( mode, start, count, geometry.maxInstancedCount );
			info.update( count, mode, geometry.maxInstancedCount );
		}
		this.setMode = setMode;
		this.render = render;
		this.renderInstances = renderInstances;
	}
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function WebGLCapabilities( gl, extensions, parameters ) {
		var maxAnisotropy;
		function getMaxAnisotropy() {
			if ( maxAnisotropy !== undefined ) return maxAnisotropy;
			var extension = extensions.get( 'EXT_texture_filter_anisotropic' );
			if ( extension !== null ) {
				maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );
			} else {
				maxAnisotropy = 0;
			}
			return maxAnisotropy;
		}
		function getMaxPrecision( precision ) {
			if ( precision === 'highp' ) {
				if ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&
				     gl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {
					return 'highp';
				}
				precision = 'mediump';
			}
			if ( precision === 'mediump' ) {
				if ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&
				     gl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {
					return 'mediump';
				}
			}
			return 'lowp';
		}
		var isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext;
		var precision = parameters.precision !== undefined ? parameters.precision : 'highp';
		var maxPrecision = getMaxPrecision( precision );
		if ( maxPrecision !== precision ) {
			console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );
			precision = maxPrecision;
		}
		var logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;
		var maxTextures = gl.getParameter( 34930 );
		var maxVertexTextures = gl.getParameter( 35660 );
		var maxTextureSize = gl.getParameter( 3379 );
		var maxCubemapSize = gl.getParameter( 34076 );
		var maxAttributes = gl.getParameter( 34921 );
		var maxVertexUniforms = gl.getParameter( 36347 );
		var maxVaryings = gl.getParameter( 36348 );
		var maxFragmentUniforms = gl.getParameter( 36349 );
		var vertexTextures = maxVertexTextures > 0;
		var floatFragmentTextures = isWebGL2 || !! extensions.get( 'OES_texture_float' );
		var floatVertexTextures = vertexTextures && floatFragmentTextures;
		var maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;
		return {
			isWebGL2: isWebGL2,
			getMaxAnisotropy: getMaxAnisotropy,
			getMaxPrecision: getMaxPrecision,
			precision: precision,
			logarithmicDepthBuffer: logarithmicDepthBuffer,
			maxTextures: maxTextures,
			maxVertexTextures: maxVertexTextures,
			maxTextureSize: maxTextureSize,
			maxCubemapSize: maxCubemapSize,
			maxAttributes: maxAttributes,
			maxVertexUniforms: maxVertexUniforms,
			maxVaryings: maxVaryings,
			maxFragmentUniforms: maxFragmentUniforms,
			vertexTextures: vertexTextures,
			floatFragmentTextures: floatFragmentTextures,
			floatVertexTextures: floatVertexTextures,
			maxSamples: maxSamples
		};
	}
	/**
	 * @author tschw
	 */
	function WebGLClipping() {
		var scope = this,
			globalState = null,
			numGlobalPlanes = 0,
			localClippingEnabled = false,
			renderingShadows = false,
			plane = new Plane(),
			viewNormalMatrix = new Matrix3(),
			uniform = { value: null, needsUpdate: false };
		this.uniform = uniform;
		this.numPlanes = 0;
		this.numIntersection = 0;
		this.init = function ( planes, enableLocalClipping, camera ) {
			var enabled =
				planes.length !== 0 ||
				enableLocalClipping ||
				numGlobalPlanes !== 0 ||
				localClippingEnabled;
			localClippingEnabled = enableLocalClipping;
			globalState = projectPlanes( planes, camera, 0 );
			numGlobalPlanes = planes.length;
			return enabled;
		};
		this.beginShadows = function () {
			renderingShadows = true;
			projectPlanes( null );
		};
		this.endShadows = function () {
			renderingShadows = false;
			resetGlobalState();
		};
		this.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {
			if ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {
				if ( renderingShadows ) {
					projectPlanes( null );
				} else {
					resetGlobalState();
				}
			} else {
				var nGlobal = renderingShadows ? 0 : numGlobalPlanes,
					lGlobal = nGlobal * 4,
					dstArray = cache.clippingState || null;
				uniform.value = dstArray; // ensure unique state
				dstArray = projectPlanes( planes, camera, lGlobal, fromCache );
				for ( var i = 0; i !== lGlobal; ++ i ) {
					dstArray[ i ] = globalState[ i ];
				}
				cache.clippingState = dstArray;
				this.numIntersection = clipIntersection ? this.numPlanes : 0;
				this.numPlanes += nGlobal;
			}
		};
		function resetGlobalState() {
			if ( uniform.value !== globalState ) {
				uniform.value = globalState;
				uniform.needsUpdate = numGlobalPlanes > 0;
			}
			scope.numPlanes = numGlobalPlanes;
			scope.numIntersection = 0;
		}
		function projectPlanes( planes, camera, dstOffset, skipTransform ) {
			var nPlanes = planes !== null ? planes.length : 0,
				dstArray = null;
			if ( nPlanes !== 0 ) {
				dstArray = uniform.value;
				if ( skipTransform !== true || dstArray === null ) {
					var flatSize = dstOffset + nPlanes * 4,
						viewMatrix = camera.matrixWorldInverse;
					viewNormalMatrix.getNormalMatrix( viewMatrix );
					if ( dstArray === null || dstArray.length < flatSize ) {
						dstArray = new Float32Array( flatSize );
					}
					for ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {
						plane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );
						plane.normal.toArray( dstArray, i4 );
						dstArray[ i4 + 3 ] = plane.constant;
					}
				}
				uniform.value = dstArray;
				uniform.needsUpdate = true;
			}
			scope.numPlanes = nPlanes;
			return dstArray;
		}
	}
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function WebGLExtensions( gl ) {
		var extensions = {};
		return {
			get: function ( name ) {
				if ( extensions[ name ] !== undefined ) {
					return extensions[ name ];
				}
				var extension;
				switch ( name ) {
					case 'WEBGL_depth_texture':
						extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );
						break;
					case 'EXT_texture_filter_anisotropic':
						extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
						break;
					case 'WEBGL_compressed_texture_s3tc':
						extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
						break;
					case 'WEBGL_compressed_texture_pvrtc':
						extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
						break;
					default:
						extension = gl.getExtension( name );
				}
				if ( extension === null ) {
					console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );
				}
				extensions[ name ] = extension;
				return extension;
			}
		};
	}
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function WebGLGeometries( gl, attributes, info ) {
		var geometries = {};
		var wireframeAttributes = {};
		function onGeometryDispose( event ) {
			var geometry = event.target;
			var buffergeometry = geometries[ geometry.id ];
			if ( buffergeometry.index !== null ) {
				attributes.remove( buffergeometry.index );
			}
			for ( var name in buffergeometry.attributes ) {
				attributes.remove( buffergeometry.attributes[ name ] );
			}
			geometry.removeEventListener( 'dispose', onGeometryDispose );
			delete geometries[ geometry.id ];
			var attribute = wireframeAttributes[ buffergeometry.id ];
			if ( attribute ) {
				attributes.remove( attribute );
				delete wireframeAttributes[ buffergeometry.id ];
			}
			info.memory.geometries --;
		}
		function get( object, geometry ) {
			var buffergeometry = geometries[ geometry.id ];
			if ( buffergeometry ) return buffergeometry;
			geometry.addEventListener( 'dispose', onGeometryDispose );
			if ( geometry.isBufferGeometry ) {
				buffergeometry = geometry;
			} else if ( geometry.isGeometry ) {
				if ( geometry._bufferGeometry === undefined ) {
					geometry._bufferGeometry = new BufferGeometry().setFromObject( object );
				}
				buffergeometry = geometry._bufferGeometry;
			}
			geometries[ geometry.id ] = buffergeometry;
			info.memory.geometries ++;
			return buffergeometry;
		}
		function update( geometry ) {
			var index = geometry.index;
			var geometryAttributes = geometry.attributes;
			if ( index !== null ) {
				attributes.update( index, 34963 );
			}
			for ( var name in geometryAttributes ) {
				attributes.update( geometryAttributes[ name ], 34962 );
			}
			var morphAttributes = geometry.morphAttributes;
			for ( var name in morphAttributes ) {
				var array = morphAttributes[ name ];
				for ( var i = 0, l = array.length; i < l; i ++ ) {
					attributes.update( array[ i ], 34962 );
				}
			}
		}
		function updateWireframeAttribute( geometry ) {
			var indices = [];
			var geometryIndex = geometry.index;
			var geometryPosition = geometry.attributes.position;
			var version = 0;
			if ( geometryIndex !== null ) {
				var array = geometryIndex.array;
				version = geometryIndex.version;
				for ( var i = 0, l = array.length; i < l; i += 3 ) {
					var a = array[ i + 0 ];
					var b = array[ i + 1 ];
					var c = array[ i + 2 ];
					indices.push( a, b, b, c, c, a );
				}
			} else {
				var array = geometryPosition.array;
				version = geometryPosition.version;
				for ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {
					var a = i + 0;
					var b = i + 1;
					var c = i + 2;
					indices.push( a, b, b, c, c, a );
				}
			}
			var attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );
			attribute.version = version;
			attributes.update( attribute, 34963 );
			var previousAttribute = wireframeAttributes[ geometry.id ];
			if ( previousAttribute ) attributes.remove( previousAttribute );
			wireframeAttributes[ geometry.id ] = attribute;
		}
		function getWireframeAttribute( geometry ) {
			var currentAttribute = wireframeAttributes[ geometry.id ];
			if ( currentAttribute ) {
				var geometryIndex = geometry.index;
				if ( geometryIndex !== null ) {
					if ( currentAttribute.version < geometryIndex.version ) {
						updateWireframeAttribute( geometry );
					}
				}
			} else {
				updateWireframeAttribute( geometry );
			}
			return wireframeAttributes[ geometry.id ];
		}
		return {
			get: get,
			update: update,
			getWireframeAttribute: getWireframeAttribute
		};
	}
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {
		var mode;
		function setMode( value ) {
			mode = value;
		}
		var type, bytesPerElement;
		function setIndex( value ) {
			type = value.type;
			bytesPerElement = value.bytesPerElement;
		}
		function render( start, count ) {
			gl.drawElements( mode, count, type, start * bytesPerElement );
			info.update( count, mode );
		}
		function renderInstances( geometry, start, count ) {
			var extension;
			if ( capabilities.isWebGL2 ) {
				extension = gl;
			} else {
				var extension = extensions.get( 'ANGLE_instanced_arrays' );
				if ( extension === null ) {
					console.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
					return;
				}
			}
			extension[ capabilities.isWebGL2 ? 'drawElementsInstanced' : 'drawElementsInstancedANGLE' ]( mode, count, type, start * bytesPerElement, geometry.maxInstancedCount );
			info.update( count, mode, geometry.maxInstancedCount );
		}
		this.setMode = setMode;
		this.setIndex = setIndex;
		this.render = render;
		this.renderInstances = renderInstances;
	}
	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */
	function WebGLInfo( gl ) {
		var memory = {
			geometries: 0,
			textures: 0
		};
		var render = {
			frame: 0,
			calls: 0,
			triangles: 0,
			points: 0,
			lines: 0
		};
		function update( count, mode, instanceCount ) {
			instanceCount = instanceCount || 1;
			render.calls ++;
			switch ( mode ) {
				case 4:
					render.triangles += instanceCount * ( count / 3 );
					break;
				case 5:
				case 6:
					render.triangles += instanceCount * ( count - 2 );
					break;
				case 1:
					render.lines += instanceCount * ( count / 2 );
					break;
				case 3:
					render.lines += instanceCount * ( count - 1 );
					break;
				case 2:
					render.lines += instanceCount * count;
					break;
				case 0:
					render.points += instanceCount * count;
					break;
				default:
					console.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );
					break;
			}
		}
		function reset() {
			render.frame ++;
			render.calls = 0;
			render.triangles = 0;
			render.points = 0;
			render.lines = 0;
		}
		return {
			memory: memory,
			render: render,
			programs: null,
			autoReset: true,
			reset: reset,
			update: update
		};
	}
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function absNumericalSort( a, b ) {
		return Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );
	}
	function WebGLMorphtargets( gl ) {
		var influencesList = {};
		var morphInfluences = new Float32Array( 8 );
		function update( object, geometry, material, program ) {
			var objectInfluences = object.morphTargetInfluences;
			var length = objectInfluences.length;
			var influences = influencesList[ geometry.id ];
			if ( influences === undefined ) {
				influences = [];
				for ( var i = 0; i < length; i ++ ) {
					influences[ i ] = [ i, 0 ];
				}
				influencesList[ geometry.id ] = influences;
			}
			var morphTargets = material.morphTargets && geometry.morphAttributes.position;
			var morphNormals = material.morphNormals && geometry.morphAttributes.normal;
			for ( var i = 0; i < length; i ++ ) {
				var influence = influences[ i ];
				if ( influence[ 1 ] !== 0 ) {
					if ( morphTargets ) geometry.removeAttribute( 'morphTarget' + i );
					if ( morphNormals ) geometry.removeAttribute( 'morphNormal' + i );
				}
			}
			for ( var i = 0; i < length; i ++ ) {
				var influence = influences[ i ];
				influence[ 0 ] = i;
				influence[ 1 ] = objectInfluences[ i ];
			}
			influences.sort( absNumericalSort );
			for ( var i = 0; i < 8; i ++ ) {
				var influence = influences[ i ];
				if ( influence ) {
					var index = influence[ 0 ];
					var value = influence[ 1 ];
					if ( value ) {
						if ( morphTargets ) geometry.addAttribute( 'morphTarget' + i, morphTargets[ index ] );
						if ( morphNormals ) geometry.addAttribute( 'morphNormal' + i, morphNormals[ index ] );
						morphInfluences[ i ] = value;
						continue;
					}
				}
				morphInfluences[ i ] = 0;
			}
			program.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );
		}
		return {
			update: update
		};
	}
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function WebGLObjects( geometries, info ) {
		var updateList = {};
		function update( object ) {
			var frame = info.render.frame;
			var geometry = object.geometry;
			var buffergeometry = geometries.get( object, geometry );
			if ( updateList[ buffergeometry.id ] !== frame ) {
				if ( geometry.isGeometry ) {
					buffergeometry.updateFromObject( object );
				}
				geometries.update( buffergeometry );
				updateList[ buffergeometry.id ] = frame;
			}
			return buffergeometry;
		}
		function dispose() {
			updateList = {};
		}
		return {
			update: update,
			dispose: dispose
		};
	}
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {
		images = images !== undefined ? images : [];
		mapping = mapping !== undefined ? mapping : CubeReflectionMapping;
		format = format !== undefined ? format : RGBFormat;
		Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );
		this.flipY = false;
	}
	CubeTexture.prototype = Object.create( Texture.prototype );
	CubeTexture.prototype.constructor = CubeTexture;
	CubeTexture.prototype.isCubeTexture = true;
	Object.defineProperty( CubeTexture.prototype, 'images', {
		get: function () {
			return this.image;
		},
		set: function ( value ) {
			this.image = value;
		}
	} );
	/**
	 * @author Takahiro https://github.com/takahirox
	 */
	function DataTexture2DArray( data, width, height, depth ) {
		Texture.call( this, null );
		this.image = { data: data, width: width, height: height, depth: depth };
		this.magFilter = NearestFilter;
		this.minFilter = NearestFilter;
		this.wrapR = ClampToEdgeWrapping;
		this.generateMipmaps = false;
		this.flipY = false;
	}
	DataTexture2DArray.prototype = Object.create( Texture.prototype );
	DataTexture2DArray.prototype.constructor = DataTexture2DArray;
	DataTexture2DArray.prototype.isDataTexture2DArray = true;
	/**
	 * @author Artur Trzesiok
	 */
	function DataTexture3D( data, width, height, depth ) {
		Texture.call( this, null );
		this.image = { data: data, width: width, height: height, depth: depth };
		this.magFilter = NearestFilter;
		this.minFilter = NearestFilter;
		this.wrapR = ClampToEdgeWrapping;
		this.generateMipmaps = false;
		this.flipY = false;
	}
	DataTexture3D.prototype = Object.create( Texture.prototype );
	DataTexture3D.prototype.constructor = DataTexture3D;
	DataTexture3D.prototype.isDataTexture3D = true;
	/**
	 * @author tschw
	 * @author Mugen87 / https://github.com/Mugen87
	 * @author mrdoob / http://mrdoob.com/
	 *
	 * Uniforms of a program.
	 * Those form a tree structure with a special top-level container for the root,
	 * which you get by calling 'new WebGLUniforms( gl, program )'.
	 *
	 *
	 * Properties of inner nodes including the top-level container:
	 *
	 * .seq - array of nested uniforms
	 * .map - nested uniforms by name
	 *
	 *
	 * Methods of all nodes except the top-level container:
	 *
	 * .setValue( gl, value, [textures] )
	 *
	 * 		uploads a uniform value(s)
	 *  	the 'textures' parameter is needed for sampler uniforms
	 *
	 *
	 * Static methods of the top-level container (textures factorizations):
	 *
	 * .upload( gl, seq, values, textures )
	 *
	 * 		sets uniforms in 'seq' to 'values[id].value'
	 *
	 * .seqWithValue( seq, values ) : filteredSeq
	 *
	 * 		filters 'seq' entries with corresponding entry in values
	 *
	 *
	 * Methods of the top-level container (textures factorizations):
	 *
	 * .setValue( gl, name, value, textures )
	 *
	 * 		sets uniform with  name 'name' to 'value'
	 *
	 * .setOptional( gl, obj, prop )
	 *
	 * 		like .set for an optional property of the object
	 *
	 */
	var emptyTexture = new Texture();
	var emptyTexture2dArray = new DataTexture2DArray();
	var emptyTexture3d = new DataTexture3D();
	var emptyCubeTexture = new CubeTexture();
	var arrayCacheF32 = [];
	var arrayCacheI32 = [];
	var mat4array = new Float32Array( 16 );
	var mat3array = new Float32Array( 9 );
	var mat2array = new Float32Array( 4 );
	function flatten( array, nBlocks, blockSize ) {
		var firstElem = array[ 0 ];
		if ( firstElem <= 0 || firstElem > 0 ) return array;
		var n = nBlocks * blockSize,
			r = arrayCacheF32[ n ];
		if ( r === undefined ) {
			r = new Float32Array( n );
			arrayCacheF32[ n ] = r;
		}
		if ( nBlocks !== 0 ) {
			firstElem.toArray( r, 0 );
			for ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {
				offset += blockSize;
				array[ i ].toArray( r, offset );
			}
		}
		return r;
	}
	function arraysEqual( a, b ) {
		if ( a.length !== b.length ) return false;
		for ( var i = 0, l = a.length; i < l; i ++ ) {
			if ( a[ i ] !== b[ i ] ) return false;
		}
		return true;
	}
	function copyArray( a, b ) {
		for ( var i = 0, l = b.length; i < l; i ++ ) {
			a[ i ] = b[ i ];
		}
	}
	function allocTexUnits( textures, n ) {
		var r = arrayCacheI32[ n ];
		if ( r === undefined ) {
			r = new Int32Array( n );
			arrayCacheI32[ n ] = r;
		}
		for ( var i = 0; i !== n; ++ i )
			r[ i ] = textures.allocateTextureUnit();
		return r;
	}
	function setValueV1f( gl, v ) {
		var cache = this.cache;
		if ( cache[ 0 ] === v ) return;
		gl.uniform1f( this.addr, v );
		cache[ 0 ] = v;
	}
	function setValueV2f( gl, v ) {
		var cache = this.cache;
		if ( v.x !== undefined ) {
			if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {
				gl.uniform2f( this.addr, v.x, v.y );
				cache[ 0 ] = v.x;
				cache[ 1 ] = v.y;
			}
		} else {
			if ( arraysEqual( cache, v ) ) return;
			gl.uniform2fv( this.addr, v );
			copyArray( cache, v );
		}
	}
	function setValueV3f( gl, v ) {
		var cache = this.cache;
		if ( v.x !== undefined ) {
			if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {
				gl.uniform3f( this.addr, v.x, v.y, v.z );
				cache[ 0 ] = v.x;
				cache[ 1 ] = v.y;
				cache[ 2 ] = v.z;
			}
		} else if ( v.r !== undefined ) {
			if ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {
				gl.uniform3f( this.addr, v.r, v.g, v.b );
				cache[ 0 ] = v.r;
				cache[ 1 ] = v.g;
				cache[ 2 ] = v.b;
			}
		} else {
			if ( arraysEqual( cache, v ) ) return;
			gl.uniform3fv( this.addr, v );
			copyArray( cache, v );
		}
	}
	function setValueV4f( gl, v ) {
		var cache = this.cache;
		if ( v.x !== undefined ) {
			if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {
				gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );
				cache[ 0 ] = v.x;
				cache[ 1 ] = v.y;
				cache[ 2 ] = v.z;
				cache[ 3 ] = v.w;
			}
		} else {
			if ( arraysEqual( cache, v ) ) return;
			gl.uniform4fv( this.addr, v );
			copyArray( cache, v );
		}
	}
	function setValueM2( gl, v ) {
		var cache = this.cache;
		var elements = v.elements;
		if ( elements === undefined ) {
			if ( arraysEqual( cache, v ) ) return;
			gl.uniformMatrix2fv( this.addr, false, v );
			copyArray( cache, v );
		} else {
			if ( arraysEqual( cache, elements ) ) return;
			mat2array.set( elements );
			gl.uniformMatrix2fv( this.addr, false, mat2array );
			copyArray( cache, elements );
		}
	}
	function setValueM3( gl, v ) {
		var cache = this.cache;
		var elements = v.elements;
		if ( elements === undefined ) {
			if ( arraysEqual( cache, v ) ) return;
			gl.uniformMatrix3fv( this.addr, false, v );
			copyArray( cache, v );
		} else {
			if ( arraysEqual( cache, elements ) ) return;
			mat3array.set( elements );
			gl.uniformMatrix3fv( this.addr, false, mat3array );
			copyArray( cache, elements );
		}
	}
	function setValueM4( gl, v ) {
		var cache = this.cache;
		var elements = v.elements;
		if ( elements === undefined ) {
			if ( arraysEqual( cache, v ) ) return;
			gl.uniformMatrix4fv( this.addr, false, v );
			copyArray( cache, v );
		} else {
			if ( arraysEqual( cache, elements ) ) return;
			mat4array.set( elements );
			gl.uniformMatrix4fv( this.addr, false, mat4array );
			copyArray( cache, elements );
		}
	}
	function setValueT1( gl, v, textures ) {
		var cache = this.cache;
		var unit = textures.allocateTextureUnit();
		if ( cache[ 0 ] !== unit ) {
			gl.uniform1i( this.addr, unit );
			cache[ 0 ] = unit;
		}
		textures.safeSetTexture2D( v || emptyTexture, unit );
	}
	function setValueT2DArray1( gl, v, textures ) {
		var cache = this.cache;
		var unit = textures.allocateTextureUnit();
		if ( cache[ 0 ] !== unit ) {
			gl.uniform1i( this.addr, unit );
			cache[ 0 ] = unit;
		}
		textures.setTexture2DArray( v || emptyTexture2dArray, unit );
	}
	function setValueT3D1( gl, v, textures ) {
		var cache = this.cache;
		var unit = textures.allocateTextureUnit();
		if ( cache[ 0 ] !== unit ) {
			gl.uniform1i( this.addr, unit );
			cache[ 0 ] = unit;
		}
		textures.setTexture3D( v || emptyTexture3d, unit );
	}
	function setValueT6( gl, v, textures ) {
		var cache = this.cache;
		var unit = textures.allocateTextureUnit();
		if ( cache[ 0 ] !== unit ) {
			gl.uniform1i( this.addr, unit );
			cache[ 0 ] = unit;
		}
		textures.safeSetTextureCube( v || emptyCubeTexture, unit );
	}
	function setValueV1i( gl, v ) {
		var cache = this.cache;
		if ( cache[ 0 ] === v ) return;
		gl.uniform1i( this.addr, v );
		cache[ 0 ] = v;
	}
	function setValueV2i( gl, v ) {
		var cache = this.cache;
		if ( arraysEqual( cache, v ) ) return;
		gl.uniform2iv( this.addr, v );
		copyArray( cache, v );
	}
	function setValueV3i( gl, v ) {
		var cache = this.cache;
		if ( arraysEqual( cache, v ) ) return;
		gl.uniform3iv( this.addr, v );
		copyArray( cache, v );
	}
	function setValueV4i( gl, v ) {
		var cache = this.cache;
		if ( arraysEqual( cache, v ) ) return;
		gl.uniform4iv( this.addr, v );
		copyArray( cache, v );
	}
	function getSingularSetter( type ) {
		switch ( type ) {
			case 0x1406: return setValueV1f; // FLOAT
			case 0x8b50: return setValueV2f; // _VEC2
			case 0x8b51: return setValueV3f; // _VEC3
			case 0x8b52: return setValueV4f; // _VEC4
			case 0x8b5a: return setValueM2; // _MAT2
			case 0x8b5b: return setValueM3; // _MAT3
			case 0x8b5c: return setValueM4; // _MAT4
			case 0x8b5e: case 0x8d66: return setValueT1; // SAMPLER_2D, SAMPLER_EXTERNAL_OES
			case 0x8b5f: return setValueT3D1; // SAMPLER_3D
			case 0x8b60: return setValueT6; // SAMPLER_CUBE
			case 0x8DC1: return setValueT2DArray1; // SAMPLER_2D_ARRAY
			case 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL
			case 0x8b53: case 0x8b57: return setValueV2i; // _VEC2
			case 0x8b54: case 0x8b58: return setValueV3i; // _VEC3
			case 0x8b55: case 0x8b59: return setValueV4i; // _VEC4
		}
	}
	function setValueV1fArray( gl, v ) {
		gl.uniform1fv( this.addr, v );
	}
	function setValueV1iArray( gl, v ) {
		gl.uniform1iv( this.addr, v );
	}
	function setValueV2iArray( gl, v ) {
		gl.uniform2iv( this.addr, v );
	}
	function setValueV3iArray( gl, v ) {
		gl.uniform3iv( this.addr, v );
	}
	function setValueV4iArray( gl, v ) {
		gl.uniform4iv( this.addr, v );
	}
	function setValueV2fArray( gl, v ) {
		var data = flatten( v, this.size, 2 );
		gl.uniform2fv( this.addr, data );
	}
	function setValueV3fArray( gl, v ) {
		var data = flatten( v, this.size, 3 );
		gl.uniform3fv( this.addr, data );
	}
	function setValueV4fArray( gl, v ) {
		var data = flatten( v, this.size, 4 );
		gl.uniform4fv( this.addr, data );
	}
	function setValueM2Array( gl, v ) {
		var data = flatten( v, this.size, 4 );
		gl.uniformMatrix2fv( this.addr, false, data );
	}
	function setValueM3Array( gl, v ) {
		var data = flatten( v, this.size, 9 );
		gl.uniformMatrix3fv( this.addr, false, data );
	}
	function setValueM4Array( gl, v ) {
		var data = flatten( v, this.size, 16 );
		gl.uniformMatrix4fv( this.addr, false, data );
	}
	function setValueT1Array( gl, v, textures ) {
		var n = v.length;
		var units = allocTexUnits( textures, n );
		gl.uniform1iv( this.addr, units );
		for ( var i = 0; i !== n; ++ i ) {
			textures.safeSetTexture2D( v[ i ] || emptyTexture, units[ i ] );
		}
	}
	function setValueT6Array( gl, v, textures ) {
		var n = v.length;
		var units = allocTexUnits( textures, n );
		gl.uniform1iv( this.addr, units );
		for ( var i = 0; i !== n; ++ i ) {
			textures.safeSetTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );
		}
	}
	function getPureArraySetter( type ) {
		switch ( type ) {
			case 0x1406: return setValueV1fArray; // FLOAT
			case 0x8b50: return setValueV2fArray; // _VEC2
			case 0x8b51: return setValueV3fArray; // _VEC3
			case 0x8b52: return setValueV4fArray; // _VEC4
			case 0x8b5a: return setValueM2Array; // _MAT2
			case 0x8b5b: return setValueM3Array; // _MAT3
			case 0x8b5c: return setValueM4Array; // _MAT4
			case 0x8b5e: return setValueT1Array; // SAMPLER_2D
			case 0x8b60: return setValueT6Array; // SAMPLER_CUBE
			case 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL
			case 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2
			case 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3
			case 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4
		}
	}
	function SingleUniform( id, activeInfo, addr ) {
		this.id = id;
		this.addr = addr;
		this.cache = [];
		this.setValue = getSingularSetter( activeInfo.type );
	}
	function PureArrayUniform( id, activeInfo, addr ) {
		this.id = id;
		this.addr = addr;
		this.cache = [];
		this.size = activeInfo.size;
		this.setValue = getPureArraySetter( activeInfo.type );
	}
	PureArrayUniform.prototype.updateCache = function ( data ) {
		var cache = this.cache;
		if ( data instanceof Float32Array && cache.length !== data.length ) {
			this.cache = new Float32Array( data.length );
		}
		copyArray( cache, data );
	};
	function StructuredUniform( id ) {
		this.id = id;
		this.seq = [];
		this.map = {};
	}
	StructuredUniform.prototype.setValue = function ( gl, value, textures ) {
		var seq = this.seq;
		for ( var i = 0, n = seq.length; i !== n; ++ i ) {
			var u = seq[ i ];
			u.setValue( gl, value[ u.id ], textures );
		}
	};
	var RePathPart = /([\w\d_]+)(\])?(\[|\.)?/g;
	function addUniform( container, uniformObject ) {
		container.seq.push( uniformObject );
		container.map[ uniformObject.id ] = uniformObject;
	}
	function parseUniform( activeInfo, addr, container ) {
		var path = activeInfo.name,
			pathLength = path.length;
		RePathPart.lastIndex = 0;
		while ( true ) {
			var match = RePathPart.exec( path ),
				matchEnd = RePathPart.lastIndex,
				id = match[ 1 ],
				idIsIndex = match[ 2 ] === ']',
				subscript = match[ 3 ];
			if ( idIsIndex ) id = id | 0; // convert to integer
			if ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {
				addUniform( container, subscript === undefined ?
					new SingleUniform( id, activeInfo, addr ) :
					new PureArrayUniform( id, activeInfo, addr ) );
				break;
			} else {
				var map = container.map, next = map[ id ];
				if ( next === undefined ) {
					next = new StructuredUniform( id );
					addUniform( container, next );
				}
				container = next;
			}
		}
	}
	function WebGLUniforms( gl, program ) {
		this.seq = [];
		this.map = {};
		var n = gl.getProgramParameter( program, 35718 );
		for ( var i = 0; i < n; ++ i ) {
			var info = gl.getActiveUniform( program, i ),
				addr = gl.getUniformLocation( program, info.name );
			parseUniform( info, addr, this );
		}
	}
	WebGLUniforms.prototype.setValue = function ( gl, name, value, textures ) {
		var u = this.map[ name ];
		if ( u !== undefined ) u.setValue( gl, value, textures );
	};
	WebGLUniforms.prototype.setOptional = function ( gl, object, name ) {
		var v = object[ name ];
		if ( v !== undefined ) this.setValue( gl, name, v );
	};
	WebGLUniforms.upload = function ( gl, seq, values, textures ) {
		for ( var i = 0, n = seq.length; i !== n; ++ i ) {
			var u = seq[ i ],
				v = values[ u.id ];
			if ( v.needsUpdate !== false ) {
				u.setValue( gl, v.value, textures );
			}
		}
	};
	WebGLUniforms.seqWithValue = function ( seq, values ) {
		var r = [];
		for ( var i = 0, n = seq.length; i !== n; ++ i ) {
			var u = seq[ i ];
			if ( u.id in values ) r.push( u );
		}
		return r;
	};
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function WebGLShader( gl, type, string ) {
		var shader = gl.createShader( type );
		gl.shaderSource( shader, string );
		gl.compileShader( shader );
		return shader;
	}
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	var programIdCount = 0;
	function addLineNumbers( string ) {
		var lines = string.split( '\n' );
		for ( var i = 0; i < lines.length; i ++ ) {
			lines[ i ] = ( i + 1 ) + ': ' + lines[ i ];
		}
		return lines.join( '\n' );
	}
	function getEncodingComponents( encoding ) {
		switch ( encoding ) {
			case LinearEncoding:
				return [ 'Linear', '( value )' ];
			case sRGBEncoding:
				return [ 'sRGB', '( value )' ];
			case RGBEEncoding:
				return [ 'RGBE', '( value )' ];
			case RGBM7Encoding:
				return [ 'RGBM', '( value, 7.0 )' ];
			case RGBM16Encoding:
				return [ 'RGBM', '( value, 16.0 )' ];
			case RGBDEncoding:
				return [ 'RGBD', '( value, 256.0 )' ];
			case GammaEncoding:
				return [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];
			default:
				throw new Error( 'unsupported encoding: ' + encoding );
		}
	}
	function getShaderErrors( gl, shader, type ) {
		var status = gl.getShaderParameter( shader, 35713 );
		var log = gl.getShaderInfoLog( shader ).trim();
		if ( status && log === '' ) return '';
		var source = gl.getShaderSource( shader );
		return 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\n' + log + addLineNumbers( source );
	}
	function getTexelDecodingFunction( functionName, encoding ) {
		var components = getEncodingComponents( encoding );
		return 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';
	}
	function getTexelEncodingFunction( functionName, encoding ) {
		var components = getEncodingComponents( encoding );
		return 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';
	}
	function getToneMappingFunction( functionName, toneMapping ) {
		var toneMappingName;
		switch ( toneMapping ) {
			case LinearToneMapping:
				toneMappingName = 'Linear';
				break;
			case ReinhardToneMapping:
				toneMappingName = 'Reinhard';
				break;
			case Uncharted2ToneMapping:
				toneMappingName = 'Uncharted2';
				break;
			case CineonToneMapping:
				toneMappingName = 'OptimizedCineon';
				break;
			case ACESFilmicToneMapping:
				toneMappingName = 'ACESFilmic';
				break;
			default:
				throw new Error( 'unsupported toneMapping: ' + toneMapping );
		}
		return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';
	}
	function generateExtensions( extensions, parameters, rendererExtensions ) {
		extensions = extensions || {};
		var chunks = [
			( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || ( parameters.normalMap && ! parameters.objectSpaceNormalMap ) || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',
			( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',
			( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',
			( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : ''
		];
		return chunks.filter( filterEmptyLine ).join( '\n' );
	}
	function generateDefines( defines ) {
		var chunks = [];
		for ( var name in defines ) {
			var value = defines[ name ];
			if ( value === false ) continue;
			chunks.push( '#define ' + name + ' ' + value );
		}
		return chunks.join( '\n' );
	}
	function fetchAttributeLocations( gl, program ) {
		var attributes = {};
		var n = gl.getProgramParameter( program, 35721 );
		for ( var i = 0; i < n; i ++ ) {
			var info = gl.getActiveAttrib( program, i );
			var name = info.name;
			attributes[ name ] = gl.getAttribLocation( program, name );
		}
		return attributes;
	}
	function filterEmptyLine( string ) {
		return string !== '';
	}
	function replaceLightNums( string, parameters ) {
		return string
			.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
			.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
			.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )
			.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
			.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );
	}
	function replaceClippingPlaneNums( string, parameters ) {
		return string
			.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )
			.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );
	}
	function parseIncludes( string ) {
		var pattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
		function replace( match, include ) {
			var replace = ShaderChunk[ include ];
			if ( replace === undefined ) {
				throw new Error( 'Can not resolve #include <' + include + '>' );
			}
			return parseIncludes( replace );
		}
		return string.replace( pattern, replace );
	}
	function unrollLoops( string ) {
		var pattern = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;
		function replace( match, start, end, snippet ) {
			var unroll = '';
			for ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {
				unroll += snippet.replace( /\[ i \]/g, '[ ' + i + ' ]' );
			}
			return unroll;
		}
		return string.replace( pattern, replace );
	}
	function WebGLProgram( renderer, extensions, code, material, shader, parameters, capabilities ) {
		var gl = renderer.getContext();
		var defines = material.defines;
		var vertexShader = shader.vertexShader;
		var fragmentShader = shader.fragmentShader;
		var shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';
		if ( parameters.shadowMapType === PCFShadowMap ) {
			shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';
		} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {
			shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';
		}
		var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
		var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';
		var envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
		if ( parameters.envMap ) {
			switch ( material.envMap.mapping ) {
				case CubeReflectionMapping:
				case CubeRefractionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
					break;
				case CubeUVReflectionMapping:
				case CubeUVRefractionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
					break;
				case EquirectangularReflectionMapping:
				case EquirectangularRefractionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';
					break;
				case SphericalReflectionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_SPHERE';
					break;
			}
			switch ( material.envMap.mapping ) {
				case CubeRefractionMapping:
				case EquirectangularRefractionMapping:
					envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
					break;
			}
			switch ( material.combine ) {
				case MultiplyOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
					break;
				case MixOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
					break;
				case AddOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
					break;
			}
		}
		var gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;
		var customExtensions = capabilities.isWebGL2 ? '' : generateExtensions( material.extensions, parameters, extensions );
		var customDefines = generateDefines( defines );
		var program = gl.createProgram();
		var prefixVertex, prefixFragment;
		if ( material.isRawShaderMaterial ) {
			prefixVertex = [
				customDefines
			].filter( filterEmptyLine ).join( '\n' );
			if ( prefixVertex.length > 0 ) {
				prefixVertex += '\n';
			}
			prefixFragment = [
				customExtensions,
				customDefines
			].filter( filterEmptyLine ).join( '\n' );
			if ( prefixFragment.length > 0 ) {
				prefixFragment += '\n';
			}
		} else {
			prefixVertex = [
				'precision ' + parameters.precision + ' float;',
				'precision ' + parameters.precision + ' int;',
				'#define SHADER_NAME ' + shader.name,
				customDefines,
				parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',
				'#define GAMMA_FACTOR ' + gammaFactorDefine,
				'#define MAX_BONES ' + parameters.maxBones,
				( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
				( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',
				parameters.map ? '#define USE_MAP' : '',
				parameters.envMap ? '#define USE_ENVMAP' : '',
				parameters.envMap ? '#define ' + envMapModeDefine : '',
				parameters.lightMap ? '#define USE_LIGHTMAP' : '',
				parameters.aoMap ? '#define USE_AOMAP' : '',
				parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
				parameters.bumpMap ? '#define USE_BUMPMAP' : '',
				parameters.normalMap ? '#define USE_NORMALMAP' : '',
				( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',
				parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
				parameters.specularMap ? '#define USE_SPECULARMAP' : '',
				parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
				parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
				parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
				parameters.vertexTangents ? '#define USE_TANGENT' : '',
				parameters.vertexColors ? '#define USE_COLOR' : '',
				parameters.flatShading ? '#define FLAT_SHADED' : '',
				parameters.skinning ? '#define USE_SKINNING' : '',
				parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',
				parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
				parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
				parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
				parameters.flipSided ? '#define FLIP_SIDED' : '',
				parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
				parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',
				parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',
				parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
				parameters.logarithmicDepthBuffer && ( capabilities.isWebGL2 || extensions.get( 'EXT_frag_depth' ) ) ? '#define USE_LOGDEPTHBUF_EXT' : '',
				'uniform mat4 modelMatrix;',
				'uniform mat4 modelViewMatrix;',
				'uniform mat4 projectionMatrix;',
				'uniform mat4 viewMatrix;',
				'uniform mat3 normalMatrix;',
				'uniform vec3 cameraPosition;',
				'attribute vec3 position;',
				'attribute vec3 normal;',
				'attribute vec2 uv;',
				'#ifdef USE_TANGENT',
				'	attribute vec4 tangent;',
				'#endif',
				'#ifdef USE_COLOR',
				'	attribute vec3 color;',
				'#endif',
				'#ifdef USE_MORPHTARGETS',
				'	attribute vec3 morphTarget0;',
				'	attribute vec3 morphTarget1;',
				'	attribute vec3 morphTarget2;',
				'	attribute vec3 morphTarget3;',
				'	#ifdef USE_MORPHNORMALS',
				'		attribute vec3 morphNormal0;',
				'		attribute vec3 morphNormal1;',
				'		attribute vec3 morphNormal2;',
				'		attribute vec3 morphNormal3;',
				'	#else',
				'		attribute vec3 morphTarget4;',
				'		attribute vec3 morphTarget5;',
				'		attribute vec3 morphTarget6;',
				'		attribute vec3 morphTarget7;',
				'	#endif',
				'#endif',
				'#ifdef USE_SKINNING',
				'	attribute vec4 skinIndex;',
				'	attribute vec4 skinWeight;',
				'#endif',
				'\n'
			].filter( filterEmptyLine ).join( '\n' );
			prefixFragment = [
				customExtensions,
				'precision ' + parameters.precision + ' float;',
				'precision ' + parameters.precision + ' int;',
				'#define SHADER_NAME ' + shader.name,
				customDefines,
				parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + ( parameters.alphaTest % 1 ? '' : '.0' ) : '', // add '.0' if integer
				'#define GAMMA_FACTOR ' + gammaFactorDefine,
				( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
				( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',
				parameters.map ? '#define USE_MAP' : '',
				parameters.matcap ? '#define USE_MATCAP' : '',
				parameters.envMap ? '#define USE_ENVMAP' : '',
				parameters.envMap ? '#define ' + envMapTypeDefine : '',
				parameters.envMap ? '#define ' + envMapModeDefine : '',
				parameters.envMap ? '#define ' + envMapBlendingDefine : '',
				parameters.lightMap ? '#define USE_LIGHTMAP' : '',
				parameters.aoMap ? '#define USE_AOMAP' : '',
				parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
				parameters.bumpMap ? '#define USE_BUMPMAP' : '',
				parameters.normalMap ? '#define USE_NORMALMAP' : '',
				( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',
				parameters.specularMap ? '#define USE_SPECULARMAP' : '',
				parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
				parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
				parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
				parameters.vertexTangents ? '#define USE_TANGENT' : '',
				parameters.vertexColors ? '#define USE_COLOR' : '',
				parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',
				parameters.flatShading ? '#define FLAT_SHADED' : '',
				parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
				parameters.flipSided ? '#define FLIP_SIDED' : '',
				parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
				parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',
				parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',
				parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',
				parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
				parameters.logarithmicDepthBuffer && ( capabilities.isWebGL2 || extensions.get( 'EXT_frag_depth' ) ) ? '#define USE_LOGDEPTHBUF_EXT' : '',
				parameters.envMap && ( capabilities.isWebGL2 || extensions.get( 'EXT_shader_texture_lod' ) ) ? '#define TEXTURE_LOD_EXT' : '',
				'uniform mat4 viewMatrix;',
				'uniform vec3 cameraPosition;',
				( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',
				( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below
				( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',
				parameters.dithering ? '#define DITHERING' : '',
				( parameters.outputEncoding || parameters.mapEncoding || parameters.matcapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ?
					ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below
				parameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',
				parameters.matcapEncoding ? getTexelDecodingFunction( 'matcapTexelToLinear', parameters.matcapEncoding ) : '',
				parameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',
				parameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',
				parameters.outputEncoding ? getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ) : '',
				parameters.depthPacking ? '#define DEPTH_PACKING ' + material.depthPacking : '',
				'\n'
			].filter( filterEmptyLine ).join( '\n' );
		}
		vertexShader = parseIncludes( vertexShader );
		vertexShader = replaceLightNums( vertexShader, parameters );
		vertexShader = replaceClippingPlaneNums( vertexShader, parameters );
		fragmentShader = parseIncludes( fragmentShader );
		fragmentShader = replaceLightNums( fragmentShader, parameters );
		fragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );
		vertexShader = unrollLoops( vertexShader );
		fragmentShader = unrollLoops( fragmentShader );
		if ( capabilities.isWebGL2 && ! material.isRawShaderMaterial ) {
			var isGLSL3ShaderMaterial = false;
			var versionRegex = /^\s*#version\s+300\s+es\s*\n/;
			if ( material.isShaderMaterial &&
				vertexShader.match( versionRegex ) !== null &&
				fragmentShader.match( versionRegex ) !== null ) {
				isGLSL3ShaderMaterial = true;
				vertexShader = vertexShader.replace( versionRegex, '' );
				fragmentShader = fragmentShader.replace( versionRegex, '' );
			}
			prefixVertex = [
				'#version 300 es\n',
				'#define attribute in',
				'#define varying out',
				'#define texture2D texture'
			].join( '\n' ) + '\n' + prefixVertex;
			prefixFragment = [
				'#version 300 es\n',
				'#define varying in',
				isGLSL3ShaderMaterial ? '' : 'out highp vec4 pc_fragColor;',
				isGLSL3ShaderMaterial ? '' : '#define gl_FragColor pc_fragColor',
				'#define gl_FragDepthEXT gl_FragDepth',
				'#define texture2D texture',
				'#define textureCube texture',
				'#define texture2DProj textureProj',
				'#define texture2DLodEXT textureLod',
				'#define texture2DProjLodEXT textureProjLod',
				'#define textureCubeLodEXT textureLod',
				'#define texture2DGradEXT textureGrad',
				'#define texture2DProjGradEXT textureProjGrad',
				'#define textureCubeGradEXT textureGrad'
			].join( '\n' ) + '\n' + prefixFragment;
		}
		var vertexGlsl = prefixVertex + vertexShader;
		var fragmentGlsl = prefixFragment + fragmentShader;
		var glVertexShader = WebGLShader( gl, 35633, vertexGlsl );
		var glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl );
		gl.attachShader( program, glVertexShader );
		gl.attachShader( program, glFragmentShader );
		if ( material.index0AttributeName !== undefined ) {
			gl.bindAttribLocation( program, 0, material.index0AttributeName );
		} else if ( parameters.morphTargets === true ) {
			gl.bindAttribLocation( program, 0, 'position' );
		}
		gl.linkProgram( program );
		if ( renderer.debug.checkShaderErrors ) {
			var programLog = gl.getProgramInfoLog( program ).trim();
			var vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();
			var fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();
			var runnable = true;
			var haveDiagnostics = true;
			if ( gl.getProgramParameter( program, 35714 ) === false ) {
				runnable = false;
				var vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );
				var fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );
				console.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), '35715', gl.getProgramParameter( program, 35715 ), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors );
			} else if ( programLog !== '' ) {
				console.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );
			} else if ( vertexLog === '' || fragmentLog === '' ) {
				haveDiagnostics = false;
			}
			if ( haveDiagnostics ) {
				this.diagnostics = {
					runnable: runnable,
					material: material,
					programLog: programLog,
					vertexShader: {
						log: vertexLog,
						prefix: prefixVertex
					},
					fragmentShader: {
						log: fragmentLog,
						prefix: prefixFragment
					}
				};
			}
		}
		gl.deleteShader( glVertexShader );
		gl.deleteShader( glFragmentShader );
		var cachedUniforms;
		this.getUniforms = function () {
			if ( cachedUniforms === undefined ) {
				cachedUniforms = new WebGLUniforms( gl, program );
			}
			return cachedUniforms;
		};
		var cachedAttributes;
		this.getAttributes = function () {
			if ( cachedAttributes === undefined ) {
				cachedAttributes = fetchAttributeLocations( gl, program );
			}
			return cachedAttributes;
		};
		this.destroy = function () {
			gl.deleteProgram( program );
			this.program = undefined;
		};
		this.name = shader.name;
		this.id = programIdCount ++;
		this.code = code;
		this.usedTimes = 1;
		this.program = program;
		this.vertexShader = glVertexShader;
		this.fragmentShader = glFragmentShader;
		return this;
	}
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function WebGLPrograms( renderer, extensions, capabilities ) {
		var programs = [];
		var shaderIDs = {
			MeshDepthMaterial: 'depth',
			MeshDistanceMaterial: 'distanceRGBA',
			MeshNormalMaterial: 'normal',
			MeshBasicMaterial: 'basic',
			MeshLambertMaterial: 'lambert',
			MeshPhongMaterial: 'phong',
			MeshToonMaterial: 'phong',
			MeshStandardMaterial: 'physical',
			MeshPhysicalMaterial: 'physical',
			MeshMatcapMaterial: 'matcap',
			LineBasicMaterial: 'basic',
			LineDashedMaterial: 'dashed',
			PointsMaterial: 'points',
			ShadowMaterial: 'shadow',
			SpriteMaterial: 'sprite'
		};
		var parameterNames = [
			"precision", "supportsVertexTextures", "map", "mapEncoding", "matcap", "matcapEncoding", "envMap", "envMapMode", "envMapEncoding",
			"lightMap", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "objectSpaceNormalMap", "displacementMap", "specularMap",
			"roughnessMap", "metalnessMap", "gradientMap",
			"alphaMap", "combine", "vertexColors", "vertexTangents", "fog", "useFog", "fogExp",
			"flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning",
			"maxBones", "useVertexTexture", "morphTargets", "morphNormals",
			"maxMorphTargets", "maxMorphNormals", "premultipliedAlpha",
			"numDirLights", "numPointLights", "numSpotLights", "numHemiLights", "numRectAreaLights",
			"shadowMapEnabled", "shadowMapType", "toneMapping", 'physicallyCorrectLights',
			"alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking", "dithering"
		];
		function allocateBones( object ) {
			var skeleton = object.skeleton;
			var bones = skeleton.bones;
			if ( capabilities.floatVertexTextures ) {
				return 1024;
			} else {
				var nVertexUniforms = capabilities.maxVertexUniforms;
				var nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );
				var maxBones = Math.min( nVertexMatrices, bones.length );
				if ( maxBones < bones.length ) {
					console.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );
					return 0;
				}
				return maxBones;
			}
		}
		function getTextureEncodingFromMap( map, gammaOverrideLinear ) {
			var encoding;
			if ( ! map ) {
				encoding = LinearEncoding;
			} else if ( map.isTexture ) {
				encoding = map.encoding;
			} else if ( map.isWebGLRenderTarget ) {
				console.warn( "THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead." );
				encoding = map.texture.encoding;
			}
			if ( encoding === LinearEncoding && gammaOverrideLinear ) {
				encoding = GammaEncoding;
			}
			return encoding;
		}
		this.getParameters = function ( material, lights, shadows, fog, nClipPlanes, nClipIntersection, object ) {
			var shaderID = shaderIDs[ material.type ];
			var maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;
			var precision = capabilities.precision;
			if ( material.precision !== null ) {
				precision = capabilities.getMaxPrecision( material.precision );
				if ( precision !== material.precision ) {
					console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );
				}
			}
			var currentRenderTarget = renderer.getRenderTarget();
			var parameters = {
				shaderID: shaderID,
				precision: precision,
				supportsVertexTextures: capabilities.vertexTextures,
				outputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),
				map: !! material.map,
				mapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),
				matcap: !! material.matcap,
				matcapEncoding: getTextureEncodingFromMap( material.matcap, renderer.gammaInput ),
				envMap: !! material.envMap,
				envMapMode: material.envMap && material.envMap.mapping,
				envMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),
				envMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),
				lightMap: !! material.lightMap,
				aoMap: !! material.aoMap,
				emissiveMap: !! material.emissiveMap,
				emissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),
				bumpMap: !! material.bumpMap,
				normalMap: !! material.normalMap,
				objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,
				displacementMap: !! material.displacementMap,
				roughnessMap: !! material.roughnessMap,
				metalnessMap: !! material.metalnessMap,
				specularMap: !! material.specularMap,
				alphaMap: !! material.alphaMap,
				gradientMap: !! material.gradientMap,
				combine: material.combine,
				vertexTangents: ( material.normalMap && material.vertexTangents ),
				vertexColors: material.vertexColors,
				fog: !! fog,
				useFog: material.fog,
				fogExp: ( fog && fog.isFogExp2 ),
				flatShading: material.flatShading,
				sizeAttenuation: material.sizeAttenuation,
				logarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,
				skinning: material.skinning && maxBones > 0,
				maxBones: maxBones,
				useVertexTexture: capabilities.floatVertexTextures,
				morphTargets: material.morphTargets,
				morphNormals: material.morphNormals,
				maxMorphTargets: renderer.maxMorphTargets,
				maxMorphNormals: renderer.maxMorphNormals,
				numDirLights: lights.directional.length,
				numPointLights: lights.point.length,
				numSpotLights: lights.spot.length,
				numRectAreaLights: lights.rectArea.length,
				numHemiLights: lights.hemi.length,
				numClippingPlanes: nClipPlanes,
				numClipIntersection: nClipIntersection,
				dithering: material.dithering,
				shadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && shadows.length > 0,
				shadowMapType: renderer.shadowMap.type,
				toneMapping: renderer.toneMapping,
				physicallyCorrectLights: renderer.physicallyCorrectLights,
				premultipliedAlpha: material.premultipliedAlpha,
				alphaTest: material.alphaTest,
				doubleSided: material.side === DoubleSide,
				flipSided: material.side === BackSide,
				depthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false
			};
			return parameters;
		};
		this.getProgramCode = function ( material, parameters ) {
			var array = [];
			if ( parameters.shaderID ) {
				array.push( parameters.shaderID );
			} else {
				array.push( material.fragmentShader );
				array.push( material.vertexShader );
			}
			if ( material.defines !== undefined ) {
				for ( var name in material.defines ) {
					array.push( name );
					array.push( material.defines[ name ] );
				}
			}
			for ( var i = 0; i < parameterNames.length; i ++ ) {
				array.push( parameters[ parameterNames[ i ] ] );
			}
			array.push( material.onBeforeCompile.toString() );
			array.push( renderer.gammaOutput );
			array.push( renderer.gammaFactor );
			return array.join();
		};
		this.acquireProgram = function ( material, shader, parameters, code ) {
			var program;
			for ( var p = 0, pl = programs.length; p < pl; p ++ ) {
				var programInfo = programs[ p ];
				if ( programInfo.code === code ) {
					program = programInfo;
					++ program.usedTimes;
					break;
				}
			}
			if ( program === undefined ) {
				program = new WebGLProgram( renderer, extensions, code, material, shader, parameters, capabilities );
				programs.push( program );
			}
			return program;
		};
		this.releaseProgram = function ( program ) {
			if ( -- program.usedTimes === 0 ) {
				var i = programs.indexOf( program );
				programs[ i ] = programs[ programs.length - 1 ];
				programs.pop();
				program.destroy();
			}
		};
		this.programs = programs;
	}
	/**
	 * @author fordacious / fordacious.github.io
	 */
	function WebGLProperties() {
		var properties = new WeakMap();
		function get( object ) {
			var map = properties.get( object );
			if ( map === undefined ) {
				map = {};
				properties.set( object, map );
			}
			return map;
		}
		function remove( object ) {
			properties.delete( object );
		}
		function update( object, key, value ) {
			properties.get( object )[ key ] = value;
		}
		function dispose() {
			properties = new WeakMap();
		}
		return {
			get: get,
			remove: remove,
			update: update,
			dispose: dispose
		};
	}
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function painterSortStable( a, b ) {
		if ( a.groupOrder !== b.groupOrder ) {
			return a.groupOrder - b.groupOrder;
		} else if ( a.renderOrder !== b.renderOrder ) {
			return a.renderOrder - b.renderOrder;
		} else if ( a.program !== b.program ) {
			return a.program.id - b.program.id;
		} else if ( a.material.id !== b.material.id ) {
			return a.material.id - b.material.id;
		} else if ( a.z !== b.z ) {
			return a.z - b.z;
		} else {
			return a.id - b.id;
		}
	}
	function reversePainterSortStable( a, b ) {
		if ( a.groupOrder !== b.groupOrder ) {
			return a.groupOrder - b.groupOrder;
		} else if ( a.renderOrder !== b.renderOrder ) {
			return a.renderOrder - b.renderOrder;
		} else if ( a.z !== b.z ) {
			return b.z - a.z;
		} else {
			return a.id - b.id;
		}
	}
	function WebGLRenderList() {
		var renderItems = [];
		var renderItemsIndex = 0;
		var opaque = [];
		var transparent = [];
		var defaultProgram = { id: - 1 };
		function init() {
			renderItemsIndex = 0;
			opaque.length = 0;
			transparent.length = 0;
		}
		function getNextRenderItem( object, geometry, material, groupOrder, z, group ) {
			var renderItem = renderItems[ renderItemsIndex ];
			if ( renderItem === undefined ) {
				renderItem = {
					id: object.id,
					object: object,
					geometry: geometry,
					material: material,
					program: material.program || defaultProgram,
					groupOrder: groupOrder,
					renderOrder: object.renderOrder,
					z: z,
					group: group
				};
				renderItems[ renderItemsIndex ] = renderItem;
			} else {
				renderItem.id = object.id;
				renderItem.object = object;
				renderItem.geometry = geometry;
				renderItem.material = material;
				renderItem.program = material.program || defaultProgram;
				renderItem.groupOrder = groupOrder;
				renderItem.renderOrder = object.renderOrder;
				renderItem.z = z;
				renderItem.group = group;
			}
			renderItemsIndex ++;
			return renderItem;
		}
		function push( object, geometry, material, groupOrder, z, group ) {
			var renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );
			( material.transparent === true ? transparent : opaque ).push( renderItem );
		}
		function unshift( object, geometry, material, groupOrder, z, group ) {
			var renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );
			( material.transparent === true ? transparent : opaque ).unshift( renderItem );
		}
		function sort() {
			if ( opaque.length > 1 ) opaque.sort( painterSortStable );
			if ( transparent.length > 1 ) transparent.sort( reversePainterSortStable );
		}
		return {
			opaque: opaque,
			transparent: transparent,
			init: init,
			push: push,
			unshift: unshift,
			sort: sort
		};
	}
	function WebGLRenderLists() {
		var lists = {};
		function onSceneDispose( event ) {
			var scene = event.target;
			scene.removeEventListener( 'dispose', onSceneDispose );
			delete lists[ scene.id ];
		}
		function get( scene, camera ) {
			var cameras = lists[ scene.id ];
			var list;
			if ( cameras === undefined ) {
				list = new WebGLRenderList();
				lists[ scene.id ] = {};
				lists[ scene.id ][ camera.id ] = list;
				scene.addEventListener( 'dispose', onSceneDispose );
			} else {
				list = cameras[ camera.id ];
				if ( list === undefined ) {
					list = new WebGLRenderList();
					cameras[ camera.id ] = list;
				}
			}
			return list;
		}
		function dispose() {
			lists = {};
		}
		return {
			get: get,
			dispose: dispose
		};
	}
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function UniformsCache() {
		var lights = {};
		return {
			get: function ( light ) {
				if ( lights[ light.id ] !== undefined ) {
					return lights[ light.id ];
				}
				var uniforms;
				switch ( light.type ) {
					case 'DirectionalLight':
						uniforms = {
							direction: new Vector3(),
							color: new Color(),
							shadow: false,
							shadowBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2()
						};
						break;
					case 'SpotLight':
						uniforms = {
							position: new Vector3(),
							direction: new Vector3(),
							color: new Color(),
							distance: 0,
							coneCos: 0,
							penumbraCos: 0,
							decay: 0,
							shadow: false,
							shadowBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2()
						};
						break;
					case 'PointLight':
						uniforms = {
							position: new Vector3(),
							color: new Color(),
							distance: 0,
							decay: 0,
							shadow: false,
							shadowBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2(),
							shadowCameraNear: 1,
							shadowCameraFar: 1000
						};
						break;
					case 'HemisphereLight':
						uniforms = {
							direction: new Vector3(),
							skyColor: new Color(),
							groundColor: new Color()
						};
						break;
					case 'RectAreaLight':
						uniforms = {
							color: new Color(),
							position: new Vector3(),
							halfWidth: new Vector3(),
							halfHeight: new Vector3()
						};
						break;
				}
				lights[ light.id ] = uniforms;
				return uniforms;
			}
		};
	}
	var nextVersion = 0;
	function WebGLLights() {
		var cache = new UniformsCache();
		var state = {
			version: 0,
			hash: {
				directionalLength: - 1,
				pointLength: - 1,
				spotLength: - 1,
				rectAreaLength: - 1,
				hemiLength: - 1,
				shadowsLength: - 1,
			},
			ambient: [ 0, 0, 0 ],
			probe: [],
			directional: [],
			directionalShadowMap: [],
			directionalShadowMatrix: [],
			spot: [],
			spotShadowMap: [],
			spotShadowMatrix: [],
			rectArea: [],
			point: [],
			pointShadowMap: [],
			pointShadowMatrix: [],
			hemi: []
		};
		for ( var i = 0; i < 9; i ++ ) state.probe.push( new Vector3() );
		var vector3 = new Vector3();
		var matrix4 = new Matrix4();
		var matrix42 = new Matrix4();
		function setup( lights, shadows, camera ) {
			var r = 0, g = 0, b = 0;
			for ( var i = 0; i < 9; i ++ ) state.probe[ i ].set( 0, 0, 0 );
			var directionalLength = 0;
			var pointLength = 0;
			var spotLength = 0;
			var rectAreaLength = 0;
			var hemiLength = 0;
			var viewMatrix = camera.matrixWorldInverse;
			for ( var i = 0, l = lights.length; i < l; i ++ ) {
				var light = lights[ i ];
				var color = light.color;
				var intensity = light.intensity;
				var distance = light.distance;
				var shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;
				if ( light.isAmbientLight ) {
					r += color.r * intensity;
					g += color.g * intensity;
					b += color.b * intensity;
				} else if ( light.isLightProbe ) {
					for ( var j = 0; j < 9; j ++ ) {
						state.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );
					}
				} else if ( light.isDirectionalLight ) {
					var uniforms = cache.get( light );
					uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					vector3.setFromMatrixPosition( light.target.matrixWorld );
					uniforms.direction.sub( vector3 );
					uniforms.direction.transformDirection( viewMatrix );
					uniforms.shadow = light.castShadow;
					if ( light.castShadow ) {
						var shadow = light.shadow;
						uniforms.shadowBias = shadow.bias;
						uniforms.shadowRadius = shadow.radius;
						uniforms.shadowMapSize = shadow.mapSize;
					}
					state.directionalShadowMap[ directionalLength ] = shadowMap;
					state.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;
					state.directional[ directionalLength ] = uniforms;
					directionalLength ++;
				} else if ( light.isSpotLight ) {
					var uniforms = cache.get( light );
					uniforms.position.setFromMatrixPosition( light.matrixWorld );
					uniforms.position.applyMatrix4( viewMatrix );
					uniforms.color.copy( color ).multiplyScalar( intensity );
					uniforms.distance = distance;
					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					vector3.setFromMatrixPosition( light.target.matrixWorld );
					uniforms.direction.sub( vector3 );
					uniforms.direction.transformDirection( viewMatrix );
					uniforms.coneCos = Math.cos( light.angle );
					uniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );
					uniforms.decay = light.decay;
					uniforms.shadow = light.castShadow;
					if ( light.castShadow ) {
						var shadow = light.shadow;
						uniforms.shadowBias = shadow.bias;
						uniforms.shadowRadius = shadow.radius;
						uniforms.shadowMapSize = shadow.mapSize;
					}
					state.spotShadowMap[ spotLength ] = shadowMap;
					state.spotShadowMatrix[ spotLength ] = light.shadow.matrix;
					state.spot[ spotLength ] = uniforms;
					spotLength ++;
				} else if ( light.isRectAreaLight ) {
					var uniforms = cache.get( light );
					uniforms.color.copy( color ).multiplyScalar( intensity );
					uniforms.position.setFromMatrixPosition( light.matrixWorld );
					uniforms.position.applyMatrix4( viewMatrix );
					matrix42.identity();
					matrix4.copy( light.matrixWorld );
					matrix4.premultiply( viewMatrix );
					matrix42.extractRotation( matrix4 );
					uniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );
					uniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );
					uniforms.halfWidth.applyMatrix4( matrix42 );
					uniforms.halfHeight.applyMatrix4( matrix42 );
					state.rectArea[ rectAreaLength ] = uniforms;
					rectAreaLength ++;
				} else if ( light.isPointLight ) {
					var uniforms = cache.get( light );
					uniforms.position.setFromMatrixPosition( light.matrixWorld );
					uniforms.position.applyMatrix4( viewMatrix );
					uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
					uniforms.distance = light.distance;
					uniforms.decay = light.decay;
					uniforms.shadow = light.castShadow;
					if ( light.castShadow ) {
						var shadow = light.shadow;
						uniforms.shadowBias = shadow.bias;
						uniforms.shadowRadius = shadow.radius;
						uniforms.shadowMapSize = shadow.mapSize;
						uniforms.shadowCameraNear = shadow.camera.near;
						uniforms.shadowCameraFar = shadow.camera.far;
					}
					state.pointShadowMap[ pointLength ] = shadowMap;
					state.pointShadowMatrix[ pointLength ] = light.shadow.matrix;
					state.point[ pointLength ] = uniforms;
					pointLength ++;
				} else if ( light.isHemisphereLight ) {
					var uniforms = cache.get( light );
					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					uniforms.direction.transformDirection( viewMatrix );
					uniforms.direction.normalize();
					uniforms.skyColor.copy( light.color ).multiplyScalar( intensity );
					uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );
					state.hemi[ hemiLength ] = uniforms;
					hemiLength ++;
				}
			}
			state.ambient[ 0 ] = r;
			state.ambient[ 1 ] = g;
			state.ambient[ 2 ] = b;
			var hash = state.hash;
			if ( hash.directionalLength !== directionalLength ||
				hash.pointLength !== pointLength ||
				hash.spotLength !== spotLength ||
				hash.rectAreaLength !== rectAreaLength ||
				hash.hemiLength !== hemiLength ||
				hash.shadowsLength !== shadows.length ) {
				state.directional.length = directionalLength;
				state.spot.length = spotLength;
				state.rectArea.length = rectAreaLength;
				state.point.length = pointLength;
				state.hemi.length = hemiLength;
				hash.directionalLength = directionalLength;
				hash.pointLength = pointLength;
				hash.spotLength = spotLength;
				hash.rectAreaLength = rectAreaLength;
				hash.hemiLength = hemiLength;
				hash.shadowsLength = shadows.length;
				state.version = nextVersion ++;
			}
		}
		return {
			setup: setup,
			state: state
		};
	}
	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */
	function WebGLRenderState() {
		var lights = new WebGLLights();
		var lightsArray = [];
		var shadowsArray = [];
		function init() {
			lightsArray.length = 0;
			shadowsArray.length = 0;
		}
		function pushLight( light ) {
			lightsArray.push( light );
		}
		function pushShadow( shadowLight ) {
			shadowsArray.push( shadowLight );
		}
		function setupLights( camera ) {
			lights.setup( lightsArray, shadowsArray, camera );
		}
		var state = {
			lightsArray: lightsArray,
			shadowsArray: shadowsArray,
			lights: lights
		};
		return {
			init: init,
			state: state,
			setupLights: setupLights,
			pushLight: pushLight,
			pushShadow: pushShadow
		};
	}
	function WebGLRenderStates() {
		var renderStates = {};
		function onSceneDispose( event ) {
			var scene = event.target;
			scene.removeEventListener( 'dispose', onSceneDispose );
			delete renderStates[ scene.id ];
		}
		function get( scene, camera ) {
			var renderState;
			if ( renderStates[ scene.id ] === undefined ) {
				renderState = new WebGLRenderState();
				renderStates[ scene.id ] = {};
				renderStates[ scene.id ][ camera.id ] = renderState;
				scene.addEventListener( 'dispose', onSceneDispose );
			} else {
				if ( renderStates[ scene.id ][ camera.id ] === undefined ) {
					renderState = new WebGLRenderState();
					renderStates[ scene.id ][ camera.id ] = renderState;
				} else {
					renderState = renderStates[ scene.id ][ camera.id ];
				}
			}
			return renderState;
		}
		function dispose() {
			renderStates = {};
		}
		return {
			get: get,
			dispose: dispose
		};
	}
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author bhouston / https://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>
	 * }
	 */
	function MeshDepthMaterial( parameters ) {
		Material.call( this );
		this.type = 'MeshDepthMaterial';
		this.depthPacking = BasicDepthPacking;
		this.skinning = false;
		this.morphTargets = false;
		this.map = null;
		this.alphaMap = null;
		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;
		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.fog = false;
		this.lights = false;
		this.setValues( parameters );
	}
	MeshDepthMaterial.prototype = Object.create( Material.prototype );
	MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;
	MeshDepthMaterial.prototype.isMeshDepthMaterial = true;
	MeshDepthMaterial.prototype.copy = function ( source ) {
		Material.prototype.copy.call( this, source );
		this.depthPacking = source.depthPacking;
		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.map = source.map;
		this.alphaMap = source.alphaMap;
		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;
		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		return this;
	};
	/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *
	 *  referencePosition: <float>,
	 *  nearDistance: <float>,
	 *  farDistance: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>
	 *
	 * }
	 */
	function MeshDistanceMaterial( parameters ) {
		Material.call( this );
		this.type = 'MeshDistanceMaterial';
		this.referencePosition = new Vector3();
		this.nearDistance = 1;
		this.farDistance = 1000;
		this.skinning = false;
		this.morphTargets = false;
		this.map = null;
		this.alphaMap = null;
		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;
		this.fog = false;
		this.lights = false;
		this.setValues( parameters );
	}
	MeshDistanceMaterial.prototype = Object.create( Material.prototype );
	MeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;
	MeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;
	MeshDistanceMaterial.prototype.copy = function ( source ) {
		Material.prototype.copy.call( this, source );
		this.referencePosition.copy( source.referencePosition );
		this.nearDistance = source.nearDistance;
		this.farDistance = source.farDistance;
		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.map = source.map;
		this.alphaMap = source.alphaMap;
		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;
		return this;
	};
	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */
	function WebGLShadowMap( _renderer, _objects, maxTextureSize ) {
		var _frustum = new Frustum(),
			_projScreenMatrix = new Matrix4(),
			_shadowMapSize = new Vector2(),
			_maxShadowMapSize = new Vector2( maxTextureSize, maxTextureSize ),
			_lookTarget = new Vector3(),
			_lightPositionWorld = new Vector3(),
			_MorphingFlag = 1,
			_SkinningFlag = 2,
			_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,
			_depthMaterials = new Array( _NumberOfMaterialVariants ),
			_distanceMaterials = new Array( _NumberOfMaterialVariants ),
			_materialCache = {};
		var shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };
		var cubeDirections = [
			new Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),
			new Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )
		];
		var cubeUps = [
			new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),
			new Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),	new Vector3( 0, 0, - 1 )
		];
		var cube2DViewPorts = [
			new Vector4(), new Vector4(), new Vector4(),
			new Vector4(), new Vector4(), new Vector4()
		];
		for ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {
			var useMorphing = ( i & _MorphingFlag ) !== 0;
			var useSkinning = ( i & _SkinningFlag ) !== 0;
			var depthMaterial = new MeshDepthMaterial( {
				depthPacking: RGBADepthPacking,
				morphTargets: useMorphing,
				skinning: useSkinning
			} );
			_depthMaterials[ i ] = depthMaterial;
			var distanceMaterial = new MeshDistanceMaterial( {
				morphTargets: useMorphing,
				skinning: useSkinning
			} );
			_distanceMaterials[ i ] = distanceMaterial;
		}
		var scope = this;
		this.enabled = false;
		this.autoUpdate = true;
		this.needsUpdate = false;
		this.type = PCFShadowMap;
		this.render = function ( lights, scene, camera ) {
			if ( scope.enabled === false ) return;
			if ( scope.autoUpdate === false && scope.needsUpdate === false ) return;
			if ( lights.length === 0 ) return;
			var currentRenderTarget = _renderer.getRenderTarget();
			var activeCubeFace = _renderer.getActiveCubeFace();
			var activeMipmapLevel = _renderer.getActiveMipmapLevel();
			var _state = _renderer.state;
			_state.setBlending( NoBlending );
			_state.buffers.color.setClear( 1, 1, 1, 1 );
			_state.buffers.depth.setTest( true );
			_state.setScissorTest( false );
			var faceCount;
			for ( var i = 0, il = lights.length; i < il; i ++ ) {
				var light = lights[ i ];
				var shadow = light.shadow;
				var isPointLight = light && light.isPointLight;
				if ( shadow === undefined ) {
					console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );
					continue;
				}
				var shadowCamera = shadow.camera;
				_shadowMapSize.copy( shadow.mapSize );
				_shadowMapSize.min( _maxShadowMapSize );
				if ( isPointLight ) {
					var vpWidth = _shadowMapSize.x;
					var vpHeight = _shadowMapSize.y;
					cube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );
					cube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );
					cube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );
					cube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );
					cube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );
					cube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );
					_shadowMapSize.x *= 4.0;
					_shadowMapSize.y *= 2.0;
				}
				if ( shadow.map === null ) {
					var pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };
					shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
					shadow.map.texture.name = light.name + ".shadowMap";
					shadowCamera.updateProjectionMatrix();
				}
				if ( shadow.isSpotLightShadow ) {
					shadow.update( light );
				}
				var shadowMap = shadow.map;
				var shadowMatrix = shadow.matrix;
				_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
				shadowCamera.position.copy( _lightPositionWorld );
				if ( isPointLight ) {
					faceCount = 6;
					shadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );
				} else {
					faceCount = 1;
					_lookTarget.setFromMatrixPosition( light.target.matrixWorld );
					shadowCamera.lookAt( _lookTarget );
					shadowCamera.updateMatrixWorld();
					shadowMatrix.set(
						0.5, 0.0, 0.0, 0.5,
						0.0, 0.5, 0.0, 0.5,
						0.0, 0.0, 0.5, 0.5,
						0.0, 0.0, 0.0, 1.0
					);
					shadowMatrix.multiply( shadowCamera.projectionMatrix );
					shadowMatrix.multiply( shadowCamera.matrixWorldInverse );
				}
				_renderer.setRenderTarget( shadowMap );
				_renderer.clear();
				for ( var face = 0; face < faceCount; face ++ ) {
					if ( isPointLight ) {
						_lookTarget.copy( shadowCamera.position );
						_lookTarget.add( cubeDirections[ face ] );
						shadowCamera.up.copy( cubeUps[ face ] );
						shadowCamera.lookAt( _lookTarget );
						shadowCamera.updateMatrixWorld();
						var vpDimensions = cube2DViewPorts[ face ];
						_state.viewport( vpDimensions );
					}
					_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
					_frustum.setFromMatrix( _projScreenMatrix );
					renderObject( scene, camera, shadowCamera, isPointLight );
				}
			}
			scope.needsUpdate = false;
			_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );
		};
		function getDepthMaterial( object, material, isPointLight, lightPositionWorld, shadowCameraNear, shadowCameraFar ) {
			var geometry = object.geometry;
			var result = null;
			var materialVariants = _depthMaterials;
			var customMaterial = object.customDepthMaterial;
			if ( isPointLight ) {
				materialVariants = _distanceMaterials;
				customMaterial = object.customDistanceMaterial;
			}
			if ( ! customMaterial ) {
				var useMorphing = false;
				if ( material.morphTargets ) {
					if ( geometry && geometry.isBufferGeometry ) {
						useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;
					} else if ( geometry && geometry.isGeometry ) {
						useMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;
					}
				}
				if ( object.isSkinnedMesh && material.skinning === false ) {
					console.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );
				}
				var useSkinning = object.isSkinnedMesh && material.skinning;
				var variantIndex = 0;
				if ( useMorphing ) variantIndex |= _MorphingFlag;
				if ( useSkinning ) variantIndex |= _SkinningFlag;
				result = materialVariants[ variantIndex ];
			} else {
				result = customMaterial;
			}
			if ( _renderer.localClippingEnabled &&
					material.clipShadows === true &&
					material.clippingPlanes.length !== 0 ) {
				var keyA = result.uuid, keyB = material.uuid;
				var materialsForVariant = _materialCache[ keyA ];
				if ( materialsForVariant === undefined ) {
					materialsForVariant = {};
					_materialCache[ keyA ] = materialsForVariant;
				}
				var cachedMaterial = materialsForVariant[ keyB ];
				if ( cachedMaterial === undefined ) {
					cachedMaterial = result.clone();
					materialsForVariant[ keyB ] = cachedMaterial;
				}
				result = cachedMaterial;
			}
			result.visible = material.visible;
			result.wireframe = material.wireframe;
			result.side = ( material.shadowSide != null ) ? material.shadowSide : shadowSide[ material.side ];
			result.clipShadows = material.clipShadows;
			result.clippingPlanes = material.clippingPlanes;
			result.clipIntersection = material.clipIntersection;
			result.wireframeLinewidth = material.wireframeLinewidth;
			result.linewidth = material.linewidth;
			if ( isPointLight && result.isMeshDistanceMaterial ) {
				result.referencePosition.copy( lightPositionWorld );
				result.nearDistance = shadowCameraNear;
				result.farDistance = shadowCameraFar;
			}
			return result;
		}
		function renderObject( object, camera, shadowCamera, isPointLight ) {
			if ( object.visible === false ) return;
			var visible = object.layers.test( camera.layers );
			if ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {
				if ( object.castShadow && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {
					object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );
					var geometry = _objects.update( object );
					var material = object.material;
					if ( Array.isArray( material ) ) {
						var groups = geometry.groups;
						for ( var k = 0, kl = groups.length; k < kl; k ++ ) {
							var group = groups[ k ];
							var groupMaterial = material[ group.materialIndex ];
							if ( groupMaterial && groupMaterial.visible ) {
								var depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );
								_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );
							}
						}
					} else if ( material.visible ) {
						var depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );
						_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );
					}
				}
			}
			var children = object.children;
			for ( var i = 0, l = children.length; i < l; i ++ ) {
				renderObject( children[ i ], camera, shadowCamera, isPointLight );
			}
		}
	}
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function WebGLState( gl, extensions, utils, capabilities ) {
		function ColorBuffer() {
			var locked = false;
			var color = new Vector4();
			var currentColorMask = null;
			var currentColorClear = new Vector4( 0, 0, 0, 0 );
			return {
				setMask: function ( colorMask ) {
					if ( currentColorMask !== colorMask && ! locked ) {
						gl.colorMask( colorMask, colorMask, colorMask, colorMask );
						currentColorMask = colorMask;
					}
				},
				setLocked: function ( lock ) {
					locked = lock;
				},
				setClear: function ( r, g, b, a, premultipliedAlpha ) {
					if ( premultipliedAlpha === true ) {
						r *= a; g *= a; b *= a;
					}
					color.set( r, g, b, a );
					if ( currentColorClear.equals( color ) === false ) {
						gl.clearColor( r, g, b, a );
						currentColorClear.copy( color );
					}
				},
				reset: function () {
					locked = false;
					currentColorMask = null;
					currentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state
				}
			};
		}
		function DepthBuffer() {
			var locked = false;
			var currentDepthMask = null;
			var currentDepthFunc = null;
			var currentDepthClear = null;
			return {
				setTest: function ( depthTest ) {
					if ( depthTest ) {
						enable( 2929 );
					} else {
						disable( 2929 );
					}
				},
				setMask: function ( depthMask ) {
					if ( currentDepthMask !== depthMask && ! locked ) {
						gl.depthMask( depthMask );
						currentDepthMask = depthMask;
					}
				},
				setFunc: function ( depthFunc ) {
					if ( currentDepthFunc !== depthFunc ) {
						if ( depthFunc ) {
							switch ( depthFunc ) {
								case NeverDepth:
									gl.depthFunc( 512 );
									break;
								case AlwaysDepth:
									gl.depthFunc( 519 );
									break;
								case LessDepth:
									gl.depthFunc( 513 );
									break;
								case LessEqualDepth:
									gl.depthFunc( 515 );
									break;
								case EqualDepth:
									gl.depthFunc( 514 );
									break;
								case GreaterEqualDepth:
									gl.depthFunc( 518 );
									break;
								case GreaterDepth:
									gl.depthFunc( 516 );
									break;
								case NotEqualDepth:
									gl.depthFunc( 517 );
									break;
								default:
									gl.depthFunc( 515 );
							}
						} else {
							gl.depthFunc( 515 );
						}
						currentDepthFunc = depthFunc;
					}
				},
				setLocked: function ( lock ) {
					locked = lock;
				},
				setClear: function ( depth ) {
					if ( currentDepthClear !== depth ) {
						gl.clearDepth( depth );
						currentDepthClear = depth;
					}
				},
				reset: function () {
					locked = false;
					currentDepthMask = null;
					currentDepthFunc = null;
					currentDepthClear = null;
				}
			};
		}
		function StencilBuffer() {
			var locked = false;
			var currentStencilMask = null;
			var currentStencilFunc = null;
			var currentStencilRef = null;
			var currentStencilFuncMask = null;
			var currentStencilFail = null;
			var currentStencilZFail = null;
			var currentStencilZPass = null;
			var currentStencilClear = null;
			return {
				setTest: function ( stencilTest ) {
					if ( stencilTest ) {
						enable( 2960 );
					} else {
						disable( 2960 );
					}
				},
				setMask: function ( stencilMask ) {
					if ( currentStencilMask !== stencilMask && ! locked ) {
						gl.stencilMask( stencilMask );
						currentStencilMask = stencilMask;
					}
				},
				setFunc: function ( stencilFunc, stencilRef, stencilMask ) {
					if ( currentStencilFunc !== stencilFunc ||
					     currentStencilRef 	!== stencilRef 	||
					     currentStencilFuncMask !== stencilMask ) {
						gl.stencilFunc( stencilFunc, stencilRef, stencilMask );
						currentStencilFunc = stencilFunc;
						currentStencilRef = stencilRef;
						currentStencilFuncMask = stencilMask;
					}
				},
				setOp: function ( stencilFail, stencilZFail, stencilZPass ) {
					if ( currentStencilFail	 !== stencilFail 	||
					     currentStencilZFail !== stencilZFail ||
					     currentStencilZPass !== stencilZPass ) {
						gl.stencilOp( stencilFail, stencilZFail, stencilZPass );
						currentStencilFail = stencilFail;
						currentStencilZFail = stencilZFail;
						currentStencilZPass = stencilZPass;
					}
				},
				setLocked: function ( lock ) {
					locked = lock;
				},
				setClear: function ( stencil ) {
					if ( currentStencilClear !== stencil ) {
						gl.clearStencil( stencil );
						currentStencilClear = stencil;
					}
				},
				reset: function () {
					locked = false;
					currentStencilMask = null;
					currentStencilFunc = null;
					currentStencilRef = null;
					currentStencilFuncMask = null;
					currentStencilFail = null;
					currentStencilZFail = null;
					currentStencilZPass = null;
					currentStencilClear = null;
				}
			};
		}
		var colorBuffer = new ColorBuffer();
		var depthBuffer = new DepthBuffer();
		var stencilBuffer = new StencilBuffer();
		var maxVertexAttributes = gl.getParameter( 34921 );
		var newAttributes = new Uint8Array( maxVertexAttributes );
		var enabledAttributes = new Uint8Array( maxVertexAttributes );
		var attributeDivisors = new Uint8Array( maxVertexAttributes );
		var enabledCapabilities = {};
		var compressedTextureFormats = null;
		var currentProgram = null;
		var currentBlendingEnabled = null;
		var currentBlending = null;
		var currentBlendEquation = null;
		var currentBlendSrc = null;
		var currentBlendDst = null;
		var currentBlendEquationAlpha = null;
		var currentBlendSrcAlpha = null;
		var currentBlendDstAlpha = null;
		var currentPremultipledAlpha = false;
		var currentFlipSided = null;
		var currentCullFace = null;
		var currentLineWidth = null;
		var currentPolygonOffsetFactor = null;
		var currentPolygonOffsetUnits = null;
		var maxTextures = gl.getParameter( 35661 );
		var lineWidthAvailable = false;
		var version = 0;
		var glVersion = gl.getParameter( 7938 );
		if ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {
			version = parseFloat( /^WebGL\ ([0-9])/.exec( glVersion )[ 1 ] );
			lineWidthAvailable = ( version >= 1.0 );
		} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {
			version = parseFloat( /^OpenGL\ ES\ ([0-9])/.exec( glVersion )[ 1 ] );
			lineWidthAvailable = ( version >= 2.0 );
		}
		var currentTextureSlot = null;
		var currentBoundTextures = {};
		var currentScissor = new Vector4();
		var currentViewport = new Vector4();
		function createTexture( type, target, count ) {
			var data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.
			var texture = gl.createTexture();
			gl.bindTexture( type, texture );
			gl.texParameteri( type, 10241, 9728 );
			gl.texParameteri( type, 10240, 9728 );
			for ( var i = 0; i < count; i ++ ) {
				gl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );
			}
			return texture;
		}
		var emptyTextures = {};
		emptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );
		emptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );
		colorBuffer.setClear( 0, 0, 0, 1 );
		depthBuffer.setClear( 1 );
		stencilBuffer.setClear( 0 );
		enable( 2929 );
		depthBuffer.setFunc( LessEqualDepth );
		setFlipSided( false );
		setCullFace( CullFaceBack );
		enable( 2884 );
		setBlending( NoBlending );
		function initAttributes() {
			for ( var i = 0, l = newAttributes.length; i < l; i ++ ) {
				newAttributes[ i ] = 0;
			}
		}
		function enableAttribute( attribute ) {
			enableAttributeAndDivisor( attribute, 0 );
		}
		function enableAttributeAndDivisor( attribute, meshPerAttribute ) {
			newAttributes[ attribute ] = 1;
			if ( enabledAttributes[ attribute ] === 0 ) {
				gl.enableVertexAttribArray( attribute );
				enabledAttributes[ attribute ] = 1;
			}
			if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {
				var extension = capabilities.isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );
				extension[ capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );
				attributeDivisors[ attribute ] = meshPerAttribute;
			}
		}
		function disableUnusedAttributes() {
			for ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {
				if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {
					gl.disableVertexAttribArray( i );
					enabledAttributes[ i ] = 0;
				}
			}
		}
		function enable( id ) {
			if ( enabledCapabilities[ id ] !== true ) {
				gl.enable( id );
				enabledCapabilities[ id ] = true;
			}
		}
		function disable( id ) {
			if ( enabledCapabilities[ id ] !== false ) {
				gl.disable( id );
				enabledCapabilities[ id ] = false;
			}
		}
		function getCompressedTextureFormats() {
			if ( compressedTextureFormats === null ) {
				compressedTextureFormats = [];
				if ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||
				     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||
				     extensions.get( 'WEBGL_compressed_texture_etc1' ) ||
				     extensions.get( 'WEBGL_compressed_texture_astc' ) ) {
					var formats = gl.getParameter( 34467 );
					for ( var i = 0; i < formats.length; i ++ ) {
						compressedTextureFormats.push( formats[ i ] );
					}
				}
			}
			return compressedTextureFormats;
		}
		function useProgram( program ) {
			if ( currentProgram !== program ) {
				gl.useProgram( program );
				currentProgram = program;
				return true;
			}
			return false;
		}
		function setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {
			if ( blending === NoBlending ) {
				if ( currentBlendingEnabled ) {
					disable( 3042 );
					currentBlendingEnabled = false;
				}
				return;
			}
			if ( ! currentBlendingEnabled ) {
				enable( 3042 );
				currentBlendingEnabled = true;
			}
			if ( blending !== CustomBlending ) {
				if ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {
					if ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {
						gl.blendEquation( 32774 );
						currentBlendEquation = AddEquation;
						currentBlendEquationAlpha = AddEquation;
					}
					if ( premultipliedAlpha ) {
						switch ( blending ) {
							case NormalBlending:
								gl.blendFuncSeparate( 1, 771, 1, 771 );
								break;
							case AdditiveBlending:
								gl.blendFunc( 1, 1 );
								break;
							case SubtractiveBlending:
								gl.blendFuncSeparate( 0, 0, 769, 771 );
								break;
							case MultiplyBlending:
								gl.blendFuncSeparate( 0, 768, 0, 770 );
								break;
							default:
								console.error( 'THREE.WebGLState: Invalid blending: ', blending );
								break;
						}
					} else {
						switch ( blending ) {
							case NormalBlending:
								gl.blendFuncSeparate( 770, 771, 1, 771 );
								break;
							case AdditiveBlending:
								gl.blendFunc( 770, 1 );
								break;
							case SubtractiveBlending:
								gl.blendFunc( 0, 769 );
								break;
							case MultiplyBlending:
								gl.blendFunc( 0, 768 );
								break;
							default:
								console.error( 'THREE.WebGLState: Invalid blending: ', blending );
								break;
						}
					}
					currentBlendSrc = null;
					currentBlendDst = null;
					currentBlendSrcAlpha = null;
					currentBlendDstAlpha = null;
					currentBlending = blending;
					currentPremultipledAlpha = premultipliedAlpha;
				}
				return;
			}
			blendEquationAlpha = blendEquationAlpha || blendEquation;
			blendSrcAlpha = blendSrcAlpha || blendSrc;
			blendDstAlpha = blendDstAlpha || blendDst;
			if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {
				gl.blendEquationSeparate( utils.convert( blendEquation ), utils.convert( blendEquationAlpha ) );
				currentBlendEquation = blendEquation;
				currentBlendEquationAlpha = blendEquationAlpha;
			}
			if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {
				gl.blendFuncSeparate( utils.convert( blendSrc ), utils.convert( blendDst ), utils.convert( blendSrcAlpha ), utils.convert( blendDstAlpha ) );
				currentBlendSrc = blendSrc;
				currentBlendDst = blendDst;
				currentBlendSrcAlpha = blendSrcAlpha;
				currentBlendDstAlpha = blendDstAlpha;
			}
			currentBlending = blending;
			currentPremultipledAlpha = null;
		}
		function setMaterial( material, frontFaceCW ) {
			material.side === DoubleSide
				? disable( 2884 )
				: enable( 2884 );
			var flipSided = ( material.side === BackSide );
			if ( frontFaceCW ) flipSided = ! flipSided;
			setFlipSided( flipSided );
			( material.blending === NormalBlending && material.transparent === false )
				? setBlending( NoBlending )
				: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );
			depthBuffer.setFunc( material.depthFunc );
			depthBuffer.setTest( material.depthTest );
			depthBuffer.setMask( material.depthWrite );
			colorBuffer.setMask( material.colorWrite );
			var stencilWrite = material.stencilWrite;
			stencilBuffer.setTest( stencilWrite );
			if ( stencilWrite ) {
				stencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilMask );
				stencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );
			}
			setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );
		}
		function setFlipSided( flipSided ) {
			if ( currentFlipSided !== flipSided ) {
				if ( flipSided ) {
					gl.frontFace( 2304 );
				} else {
					gl.frontFace( 2305 );
				}
				currentFlipSided = flipSided;
			}
		}
		function setCullFace( cullFace ) {
			if ( cullFace !== CullFaceNone ) {
				enable( 2884 );
				if ( cullFace !== currentCullFace ) {
					if ( cullFace === CullFaceBack ) {
						gl.cullFace( 1029 );
					} else if ( cullFace === CullFaceFront ) {
						gl.cullFace( 1028 );
					} else {
						gl.cullFace( 1032 );
					}
				}
			} else {
				disable( 2884 );
			}
			currentCullFace = cullFace;
		}
		function setLineWidth( width ) {
			if ( width !== currentLineWidth ) {
				if ( lineWidthAvailable ) gl.lineWidth( width );
				currentLineWidth = width;
			}
		}
		function setPolygonOffset( polygonOffset, factor, units ) {
			if ( polygonOffset ) {
				enable( 32823 );
				if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {
					gl.polygonOffset( factor, units );
					currentPolygonOffsetFactor = factor;
					currentPolygonOffsetUnits = units;
				}
			} else {
				disable( 32823 );
			}
		}
		function setScissorTest( scissorTest ) {
			if ( scissorTest ) {
				enable( 3089 );
			} else {
				disable( 3089 );
			}
		}
		function activeTexture( webglSlot ) {
			if ( webglSlot === undefined ) webglSlot = 33984 + maxTextures - 1;
			if ( currentTextureSlot !== webglSlot ) {
				gl.activeTexture( webglSlot );
				currentTextureSlot = webglSlot;
			}
		}
		function bindTexture( webglType, webglTexture ) {
			if ( currentTextureSlot === null ) {
				activeTexture();
			}
			var boundTexture = currentBoundTextures[ currentTextureSlot ];
			if ( boundTexture === undefined ) {
				boundTexture = { type: undefined, texture: undefined };
				currentBoundTextures[ currentTextureSlot ] = boundTexture;
			}
			if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {
				gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );
				boundTexture.type = webglType;
				boundTexture.texture = webglTexture;
			}
		}
		function compressedTexImage2D() {
			try {
				gl.compressedTexImage2D.apply( gl, arguments );
			} catch ( error ) {
				console.error( 'THREE.WebGLState:', error );
			}
		}
		function texImage2D() {
			try {
				gl.texImage2D.apply( gl, arguments );
			} catch ( error ) {
				console.error( 'THREE.WebGLState:', error );
			}
		}
		function texImage3D() {
			try {
				gl.texImage3D.apply( gl, arguments );
			} catch ( error ) {
				console.error( 'THREE.WebGLState:', error );
			}
		}
		function scissor( scissor ) {
			if ( currentScissor.equals( scissor ) === false ) {
				gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
				currentScissor.copy( scissor );
			}
		}
		function viewport( viewport ) {
			if ( currentViewport.equals( viewport ) === false ) {
				gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
				currentViewport.copy( viewport );
			}
		}
		function reset() {
			for ( var i = 0; i < enabledAttributes.length; i ++ ) {
				if ( enabledAttributes[ i ] === 1 ) {
					gl.disableVertexAttribArray( i );
					enabledAttributes[ i ] = 0;
				}
			}
			enabledCapabilities = {};
			compressedTextureFormats = null;
			currentTextureSlot = null;
			currentBoundTextures = {};
			currentProgram = null;
			currentBlending = null;
			currentFlipSided = null;
			currentCullFace = null;
			colorBuffer.reset();
			depthBuffer.reset();
			stencilBuffer.reset();
		}
		return {
			buffers: {
				color: colorBuffer,
				depth: depthBuffer,
				stencil: stencilBuffer
			},
			initAttributes: initAttributes,
			enableAttribute: enableAttribute,
			enableAttributeAndDivisor: enableAttributeAndDivisor,
			disableUnusedAttributes: disableUnusedAttributes,
			enable: enable,
			disable: disable,
			getCompressedTextureFormats: getCompressedTextureFormats,
			useProgram: useProgram,
			setBlending: setBlending,
			setMaterial: setMaterial,
			setFlipSided: setFlipSided,
			setCullFace: setCullFace,
			setLineWidth: setLineWidth,
			setPolygonOffset: setPolygonOffset,
			setScissorTest: setScissorTest,
			activeTexture: activeTexture,
			bindTexture: bindTexture,
			compressedTexImage2D: compressedTexImage2D,
			texImage2D: texImage2D,
			texImage3D: texImage3D,
			scissor: scissor,
			viewport: viewport,
			reset: reset
		};
	}
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {
		var _videoTextures = {};
		var _canvas;
		var useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined';
		function createCanvas( width, height ) {
			return useOffscreenCanvas ?
				new OffscreenCanvas( width, height ) :
				document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
		}
		function resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {
			var scale = 1;
			if ( image.width > maxSize || image.height > maxSize ) {
				scale = maxSize / Math.max( image.width, image.height );
			}
			if ( scale < 1 || needsPowerOfTwo === true ) {
				if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
					( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
					( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {
					var floor = needsPowerOfTwo ? _Math.floorPowerOfTwo : Math.floor;
					var width = floor( scale * image.width );
					var height = floor( scale * image.height );
					if ( _canvas === undefined ) _canvas = createCanvas( width, height );
					var canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;
					canvas.width = width;
					canvas.height = height;
					var context = canvas.getContext( '2d' );
					context.drawImage( image, 0, 0, width, height );
					console.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );
					return canvas;
				} else {
					if ( 'data' in image ) {
						console.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );
					}
					return image;
				}
			}
			return image;
		}
		function isPowerOfTwo( image ) {
			return _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );
		}
		function textureNeedsPowerOfTwo( texture ) {
			if ( capabilities.isWebGL2 ) return false;
			return ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||
				( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );
		}
		function textureNeedsGenerateMipmaps( texture, supportsMips ) {
			return texture.generateMipmaps && supportsMips &&
				texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
		}
		function generateMipmap( target, texture, width, height ) {
			_gl.generateMipmap( target );
			var textureProperties = properties.get( texture );
			textureProperties.__maxMipLevel = Math.log( Math.max( width, height ) ) * Math.LOG2E;
		}
		function getInternalFormat( glFormat, glType ) {
			if ( ! capabilities.isWebGL2 ) return glFormat;
			var internalFormat = glFormat;
			if ( glFormat === 6403 ) {
				if ( glType === 5126 ) internalFormat = 33326;
				if ( glType === 5131 ) internalFormat = 33325;
				if ( glType === 5121 ) internalFormat = 33321;
			}
			if ( glFormat === 6407 ) {
				if ( glType === 5126 ) internalFormat = 34837;
				if ( glType === 5131 ) internalFormat = 34843;
				if ( glType === 5121 ) internalFormat = 32849;
			}
			if ( glFormat === 6408 ) {
				if ( glType === 5126 ) internalFormat = 34836;
				if ( glType === 5131 ) internalFormat = 34842;
				if ( glType === 5121 ) internalFormat = 32856;
			}
			if ( internalFormat === 33325 || internalFormat === 33326 ||
				internalFormat === 34842 || internalFormat === 34836 ) {
				extensions.get( 'EXT_color_buffer_float' );
			} else if ( internalFormat === 34843 || internalFormat === 34837 ) {
				console.warn( 'THREE.WebGLRenderer: Floating point textures with RGB format not supported. Please use RGBA instead.' );
			}
			return internalFormat;
		}
		function filterFallback( f ) {
			if ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {
				return 9728;
			}
			return 9729;
		}
		function onTextureDispose( event ) {
			var texture = event.target;
			texture.removeEventListener( 'dispose', onTextureDispose );
			deallocateTexture( texture );
			if ( texture.isVideoTexture ) {
				delete _videoTextures[ texture.id ];
			}
			info.memory.textures --;
		}
		function onRenderTargetDispose( event ) {
			var renderTarget = event.target;
			renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );
			deallocateRenderTarget( renderTarget );
			info.memory.textures --;
		}
		function deallocateTexture( texture ) {
			var textureProperties = properties.get( texture );
			if ( textureProperties.__webglInit === undefined ) return;
			_gl.deleteTexture( textureProperties.__webglTexture );
			properties.remove( texture );
		}
		function deallocateRenderTarget( renderTarget ) {
			var renderTargetProperties = properties.get( renderTarget );
			var textureProperties = properties.get( renderTarget.texture );
			if ( ! renderTarget ) return;
			if ( textureProperties.__webglTexture !== undefined ) {
				_gl.deleteTexture( textureProperties.__webglTexture );
			}
			if ( renderTarget.depthTexture ) {
				renderTarget.depthTexture.dispose();
			}
			if ( renderTarget.isWebGLRenderTargetCube ) {
				for ( var i = 0; i < 6; i ++ ) {
					_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );
					if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );
				}
			} else {
				_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );
				if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );
			}
			properties.remove( renderTarget.texture );
			properties.remove( renderTarget );
		}
		var textureUnits = 0;
		function resetTextureUnits() {
			textureUnits = 0;
		}
		function allocateTextureUnit() {
			var textureUnit = textureUnits;
			if ( textureUnit >= capabilities.maxTextures ) {
				console.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );
			}
			textureUnits += 1;
			return textureUnit;
		}
		function setTexture2D( texture, slot ) {
			var textureProperties = properties.get( texture );
			if ( texture.isVideoTexture ) updateVideoTexture( texture );
			if ( texture.version > 0 && textureProperties.__version !== texture.version ) {
				var image = texture.image;
				if ( image === undefined ) {
					console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );
				} else if ( image.complete === false ) {
					console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );
				} else {
					uploadTexture( textureProperties, texture, slot );
					return;
				}
			}
			state.activeTexture( 33984 + slot );
			state.bindTexture( 3553, textureProperties.__webglTexture );
		}
		function setTexture2DArray( texture, slot ) {
			var textureProperties = properties.get( texture );
			if ( texture.version > 0 && textureProperties.__version !== texture.version ) {
				uploadTexture( textureProperties, texture, slot );
				return;
			}
			state.activeTexture( 33984 + slot );
			state.bindTexture( 35866, textureProperties.__webglTexture );
		}
		function setTexture3D( texture, slot ) {
			var textureProperties = properties.get( texture );
			if ( texture.version > 0 && textureProperties.__version !== texture.version ) {
				uploadTexture( textureProperties, texture, slot );
				return;
			}
			state.activeTexture( 33984 + slot );
			state.bindTexture( 32879, textureProperties.__webglTexture );
		}
		function setTextureCube( texture, slot ) {
			var textureProperties = properties.get( texture );
			if ( texture.image.length === 6 ) {
				if ( texture.version > 0 && textureProperties.__version !== texture.version ) {
					initTexture( textureProperties, texture );
					state.activeTexture( 33984 + slot );
					state.bindTexture( 34067, textureProperties.__webglTexture );
					_gl.pixelStorei( 37440, texture.flipY );
					var isCompressed = ( texture && texture.isCompressedTexture );
					var isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );
					var cubeImage = [];
					for ( var i = 0; i < 6; i ++ ) {
						if ( ! isCompressed && ! isDataTexture ) {
							cubeImage[ i ] = resizeImage( texture.image[ i ], false, true, capabilities.maxCubemapSize );
						} else {
							cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];
						}
					}
					var image = cubeImage[ 0 ],
						supportsMips = isPowerOfTwo( image ) || capabilities.isWebGL2,
						glFormat = utils.convert( texture.format ),
						glType = utils.convert( texture.type ),
						glInternalFormat = getInternalFormat( glFormat, glType );
					setTextureParameters( 34067, texture, supportsMips );
					for ( var i = 0; i < 6; i ++ ) {
						if ( ! isCompressed ) {
							if ( isDataTexture ) {
								state.texImage2D( 34069 + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );
							} else {
								state.texImage2D( 34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );
							}
						} else {
							var mipmap, mipmaps = cubeImage[ i ].mipmaps;
							for ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {
								mipmap = mipmaps[ j ];
								if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {
									if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {
										state.compressedTexImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );
									} else {
										console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );
									}
								} else {
									state.texImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );
								}
							}
						}
					}
					if ( ! isCompressed ) {
						textureProperties.__maxMipLevel = 0;
					} else {
						textureProperties.__maxMipLevel = mipmaps.length - 1;
					}
					if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {
						generateMipmap( 34067, texture, image.width, image.height );
					}
					textureProperties.__version = texture.version;
					if ( texture.onUpdate ) texture.onUpdate( texture );
				} else {
					state.activeTexture( 33984 + slot );
					state.bindTexture( 34067, textureProperties.__webglTexture );
				}
			}
		}
		function setTextureCubeDynamic( texture, slot ) {
			state.activeTexture( 33984 + slot );
			state.bindTexture( 34067, properties.get( texture ).__webglTexture );
		}
		function setTextureParameters( textureType, texture, supportsMips ) {
			var extension;
			if ( supportsMips ) {
				_gl.texParameteri( textureType, 10242, utils.convert( texture.wrapS ) );
				_gl.texParameteri( textureType, 10243, utils.convert( texture.wrapT ) );
				if ( textureType === 32879 || textureType === 35866 ) {
					_gl.texParameteri( textureType, 32882, utils.convert( texture.wrapR ) );
				}
				_gl.texParameteri( textureType, 10240, utils.convert( texture.magFilter ) );
				_gl.texParameteri( textureType, 10241, utils.convert( texture.minFilter ) );
			} else {
				_gl.texParameteri( textureType, 10242, 33071 );
				_gl.texParameteri( textureType, 10243, 33071 );
				if ( textureType === 32879 || textureType === 35866 ) {
					_gl.texParameteri( textureType, 32882, 33071 );
				}
				if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {
					console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );
				}
				_gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );
				_gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );
				if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {
					console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );
				}
			}
			extension = extensions.get( 'EXT_texture_filter_anisotropic' );
			if ( extension ) {
				if ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;
				if ( texture.type === HalfFloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_half_float_linear' ) ) === null ) return;
				if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {
					_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );
					properties.get( texture ).__currentAnisotropy = texture.anisotropy;
				}
			}
		}
		function initTexture( textureProperties, texture ) {
			if ( textureProperties.__webglInit === undefined ) {
				textureProperties.__webglInit = true;
				texture.addEventListener( 'dispose', onTextureDispose );
				textureProperties.__webglTexture = _gl.createTexture();
				info.memory.textures ++;
			}
		}
		function uploadTexture( textureProperties, texture, slot ) {
			var textureType = 3553;
			if ( texture.isDataTexture2DArray ) textureType = 35866;
			if ( texture.isDataTexture3D ) textureType = 32879;
			initTexture( textureProperties, texture );
			state.activeTexture( 33984 + slot );
			state.bindTexture( textureType, textureProperties.__webglTexture );
			_gl.pixelStorei( 37440, texture.flipY );
			_gl.pixelStorei( 37441, texture.premultiplyAlpha );
			_gl.pixelStorei( 3317, texture.unpackAlignment );
			var needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( texture.image ) === false;
			var image = resizeImage( texture.image, needsPowerOfTwo, false, capabilities.maxTextureSize );
			var supportsMips = isPowerOfTwo( image ) || capabilities.isWebGL2,
				glFormat = utils.convert( texture.format ),
				glType = utils.convert( texture.type ),
				glInternalFormat = getInternalFormat( glFormat, glType );
			setTextureParameters( textureType, texture, supportsMips );
			var mipmap, mipmaps = texture.mipmaps;
			if ( texture.isDepthTexture ) {
				glInternalFormat = 6402;
				if ( texture.type === FloatType ) {
					if ( ! capabilities.isWebGL2 ) throw new Error( 'Float Depth Texture only supported in WebGL2.0' );
					glInternalFormat = 36012;
				} else if ( capabilities.isWebGL2 ) {
					glInternalFormat = 33189;
				}
				if ( texture.format === DepthFormat && glInternalFormat === 6402 ) {
					if ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {
						console.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );
						texture.type = UnsignedShortType;
						glType = utils.convert( texture.type );
					}
				}
				if ( texture.format === DepthStencilFormat ) {
					glInternalFormat = 34041;
					if ( texture.type !== UnsignedInt248Type ) {
						console.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );
						texture.type = UnsignedInt248Type;
						glType = utils.convert( texture.type );
					}
				}
				state.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );
			} else if ( texture.isDataTexture ) {
				if ( mipmaps.length > 0 && supportsMips ) {
					for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {
						mipmap = mipmaps[ i ];
						state.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );
					}
					texture.generateMipmaps = false;
					textureProperties.__maxMipLevel = mipmaps.length - 1;
				} else {
					state.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );
					textureProperties.__maxMipLevel = 0;
				}
			} else if ( texture.isCompressedTexture ) {
				for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {
					mipmap = mipmaps[ i ];
					if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {
						if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {
							state.compressedTexImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );
						} else {
							console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );
						}
					} else {
						state.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );
					}
				}
				textureProperties.__maxMipLevel = mipmaps.length - 1;
			} else if ( texture.isDataTexture2DArray ) {
				state.texImage3D( 35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );
				textureProperties.__maxMipLevel = 0;
			} else if ( texture.isDataTexture3D ) {
				state.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );
				textureProperties.__maxMipLevel = 0;
			} else {
				if ( mipmaps.length > 0 && supportsMips ) {
					for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {
						mipmap = mipmaps[ i ];
						state.texImage2D( 3553, i, glInternalFormat, glFormat, glType, mipmap );
					}
					texture.generateMipmaps = false;
					textureProperties.__maxMipLevel = mipmaps.length - 1;
				} else {
					state.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );
					textureProperties.__maxMipLevel = 0;
				}
			}
			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {
				generateMipmap( 3553, texture, image.width, image.height );
			}
			textureProperties.__version = texture.version;
			if ( texture.onUpdate ) texture.onUpdate( texture );
		}
		function setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {
			var glFormat = utils.convert( renderTarget.texture.format );
			var glType = utils.convert( renderTarget.texture.type );
			var glInternalFormat = getInternalFormat( glFormat, glType );
			state.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );
			_gl.bindFramebuffer( 36160, framebuffer );
			_gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );
			_gl.bindFramebuffer( 36160, null );
		}
		function setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {
			_gl.bindRenderbuffer( 36161, renderbuffer );
			if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {
				if ( isMultisample ) {
					var samples = getRenderTargetSamples( renderTarget );
					_gl.renderbufferStorageMultisample( 36161, samples, 33189, renderTarget.width, renderTarget.height );
				} else {
					_gl.renderbufferStorage( 36161, 33189, renderTarget.width, renderTarget.height );
				}
				_gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );
			} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {
				if ( isMultisample ) {
					var samples = getRenderTargetSamples( renderTarget );
					_gl.renderbufferStorageMultisample( 36161, samples, 35056, renderTarget.width, renderTarget.height );
				} else {
					_gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );
				}
				_gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );
			} else {
				var glFormat = utils.convert( renderTarget.texture.format );
				var glType = utils.convert( renderTarget.texture.type );
				var glInternalFormat = getInternalFormat( glFormat, glType );
				if ( isMultisample ) {
					var samples = getRenderTargetSamples( renderTarget );
					_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );
				} else {
					_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );
				}
			}
			_gl.bindRenderbuffer( 36161, null );
		}
		function setupDepthTexture( framebuffer, renderTarget ) {
			var isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );
			if ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );
			_gl.bindFramebuffer( 36160, framebuffer );
			if ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {
				throw new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );
			}
			if ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||
					renderTarget.depthTexture.image.width !== renderTarget.width ||
					renderTarget.depthTexture.image.height !== renderTarget.height ) {
				renderTarget.depthTexture.image.width = renderTarget.width;
				renderTarget.depthTexture.image.height = renderTarget.height;
				renderTarget.depthTexture.needsUpdate = true;
			}
			setTexture2D( renderTarget.depthTexture, 0 );
			var webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;
			if ( renderTarget.depthTexture.format === DepthFormat ) {
				_gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );
			} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {
				_gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );
			} else {
				throw new Error( 'Unknown depthTexture format' );
			}
		}
		function setupDepthRenderbuffer( renderTarget ) {
			var renderTargetProperties = properties.get( renderTarget );
			var isCube = ( renderTarget.isWebGLRenderTargetCube === true );
			if ( renderTarget.depthTexture ) {
				if ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );
				setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );
			} else {
				if ( isCube ) {
					renderTargetProperties.__webglDepthbuffer = [];
					for ( var i = 0; i < 6; i ++ ) {
						_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );
						renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
						setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );
					}
				} else {
					_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );
					renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
					setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );
				}
			}
			_gl.bindFramebuffer( 36160, null );
		}
		function setupRenderTarget( renderTarget ) {
			var renderTargetProperties = properties.get( renderTarget );
			var textureProperties = properties.get( renderTarget.texture );
			renderTarget.addEventListener( 'dispose', onRenderTargetDispose );
			textureProperties.__webglTexture = _gl.createTexture();
			info.memory.textures ++;
			var isCube = ( renderTarget.isWebGLRenderTargetCube === true );
			var isMultisample = ( renderTarget.isWebGLMultisampleRenderTarget === true );
			var supportsMips = isPowerOfTwo( renderTarget ) || capabilities.isWebGL2;
			if ( isCube ) {
				renderTargetProperties.__webglFramebuffer = [];
				for ( var i = 0; i < 6; i ++ ) {
					renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();
				}
			} else {
				renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();
				if ( isMultisample ) {
					if ( capabilities.isWebGL2 ) {
						renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
						renderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();
						_gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer );
						var glFormat = utils.convert( renderTarget.texture.format );
						var glType = utils.convert( renderTarget.texture.type );
						var glInternalFormat = getInternalFormat( glFormat, glType );
						var samples = getRenderTargetSamples( renderTarget );
						_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );
						_gl.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );
						_gl.framebufferRenderbuffer( 36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer );
						_gl.bindRenderbuffer( 36161, null );
						if ( renderTarget.depthBuffer ) {
							renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
							setupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );
						}
						_gl.bindFramebuffer( 36160, null );
					} else {
						console.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );
					}
				}
			}
			if ( isCube ) {
				state.bindTexture( 34067, textureProperties.__webglTexture );
				setTextureParameters( 34067, renderTarget.texture, supportsMips );
				for ( var i = 0; i < 6; i ++ ) {
					setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, 36064, 34069 + i );
				}
				if ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {
					generateMipmap( 34067, renderTarget.texture, renderTarget.width, renderTarget.height );
				}
				state.bindTexture( 34067, null );
			} else {
				state.bindTexture( 3553, textureProperties.__webglTexture );
				setTextureParameters( 3553, renderTarget.texture, supportsMips );
				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, 36064, 3553 );
				if ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {
					generateMipmap( 3553, renderTarget.texture, renderTarget.width, renderTarget.height );
				}
				state.bindTexture( 3553, null );
			}
			if ( renderTarget.depthBuffer ) {
				setupDepthRenderbuffer( renderTarget );
			}
		}
		function updateRenderTargetMipmap( renderTarget ) {
			var texture = renderTarget.texture;
			var supportsMips = isPowerOfTwo( renderTarget ) || capabilities.isWebGL2;
			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {
				var target = renderTarget.isWebGLRenderTargetCube ? 34067 : 3553;
				var webglTexture = properties.get( texture ).__webglTexture;
				state.bindTexture( target, webglTexture );
				generateMipmap( target, texture, renderTarget.width, renderTarget.height );
				state.bindTexture( target, null );
			}
		}
		function updateMultisampleRenderTarget( renderTarget ) {
			if ( renderTarget.isWebGLMultisampleRenderTarget ) {
				if ( capabilities.isWebGL2 ) {
					var renderTargetProperties = properties.get( renderTarget );
					_gl.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );
					_gl.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );
					var width = renderTarget.width;
					var height = renderTarget.height;
					var mask = 16384;
					if ( renderTarget.depthBuffer ) mask |= 256;
					if ( renderTarget.stencilBuffer ) mask |= 1024;
					_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );
				} else {
					console.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );
				}
			}
		}
		function getRenderTargetSamples( renderTarget ) {
			return ( capabilities.isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ) ?
				Math.min( capabilities.maxSamples, renderTarget.samples ) : 0;
		}
		function updateVideoTexture( texture ) {
			var id = texture.id;
			var frame = info.render.frame;
			if ( _videoTextures[ id ] !== frame ) {
				_videoTextures[ id ] = frame;
				texture.update();
			}
		}
		var warnedTexture2D = false;
		var warnedTextureCube = false;
		function safeSetTexture2D( texture, slot ) {
			if ( texture && texture.isWebGLRenderTarget ) {
				if ( warnedTexture2D === false ) {
					console.warn( "THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead." );
					warnedTexture2D = true;
				}
				texture = texture.texture;
			}
			setTexture2D( texture, slot );
		}
		function safeSetTextureCube( texture, slot ) {
			if ( texture && texture.isWebGLRenderTargetCube ) {
				if ( warnedTextureCube === false ) {
					console.warn( "THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead." );
					warnedTextureCube = true;
				}
				texture = texture.texture;
			}
			if ( ( texture && texture.isCubeTexture ) ||
				( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {
				setTextureCube( texture, slot );
			} else {
				setTextureCubeDynamic( texture, slot );
			}
		}
		this.allocateTextureUnit = allocateTextureUnit;
		this.resetTextureUnits = resetTextureUnits;
		this.setTexture2D = setTexture2D;
		this.setTexture2DArray = setTexture2DArray;
		this.setTexture3D = setTexture3D;
		this.setTextureCube = setTextureCube;
		this.setTextureCubeDynamic = setTextureCubeDynamic;
		this.setupRenderTarget = setupRenderTarget;
		this.updateRenderTargetMipmap = updateRenderTargetMipmap;
		this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
		this.safeSetTexture2D = safeSetTexture2D;
		this.safeSetTextureCube = safeSetTextureCube;
	}
	/**
	 * @author thespite / http://www.twitter.com/thespite
	 */
	function WebGLUtils( gl, extensions, capabilities ) {
		function convert( p ) {
			var extension;
			if ( p === RepeatWrapping ) return 10497;
			if ( p === ClampToEdgeWrapping ) return 33071;
			if ( p === MirroredRepeatWrapping ) return 33648;
			if ( p === NearestFilter ) return 9728;
			if ( p === NearestMipmapNearestFilter ) return 9984;
			if ( p === NearestMipmapLinearFilter ) return 9986;
			if ( p === LinearFilter ) return 9729;
			if ( p === LinearMipmapNearestFilter ) return 9985;
			if ( p === LinearMipmapLinearFilter ) return 9987;
			if ( p === UnsignedByteType ) return 5121;
			if ( p === UnsignedShort4444Type ) return 32819;
			if ( p === UnsignedShort5551Type ) return 32820;
			if ( p === UnsignedShort565Type ) return 33635;
			if ( p === ByteType ) return 5120;
			if ( p === ShortType ) return 5122;
			if ( p === UnsignedShortType ) return 5123;
			if ( p === IntType ) return 5124;
			if ( p === UnsignedIntType ) return 5125;
			if ( p === FloatType ) return 5126;
			if ( p === HalfFloatType ) {
				if ( capabilities.isWebGL2 ) return 5131;
				extension = extensions.get( 'OES_texture_half_float' );
				if ( extension !== null ) return extension.HALF_FLOAT_OES;
			}
			if ( p === AlphaFormat ) return 6406;
			if ( p === RGBFormat ) return 6407;
			if ( p === RGBAFormat ) return 6408;
			if ( p === LuminanceFormat ) return 6409;
			if ( p === LuminanceAlphaFormat ) return 6410;
			if ( p === DepthFormat ) return 6402;
			if ( p === DepthStencilFormat ) return 34041;
			if ( p === RedFormat ) return 6403;
			if ( p === AddEquation ) return 32774;
			if ( p === SubtractEquation ) return 32778;
			if ( p === ReverseSubtractEquation ) return 32779;
			if ( p === ZeroFactor ) return 0;
			if ( p === OneFactor ) return 1;
			if ( p === SrcColorFactor ) return 768;
			if ( p === OneMinusSrcColorFactor ) return 769;
			if ( p === SrcAlphaFactor ) return 770;
			if ( p === OneMinusSrcAlphaFactor ) return 771;
			if ( p === DstAlphaFactor ) return 772;
			if ( p === OneMinusDstAlphaFactor ) return 773;
			if ( p === DstColorFactor ) return 774;
			if ( p === OneMinusDstColorFactor ) return 775;
			if ( p === SrcAlphaSaturateFactor ) return 776;
			if ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||
				p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {
				extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );
				if ( extension !== null ) {
					if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
					if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
					if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
					if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
				}
			}
			if ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||
				p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {
				extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );
				if ( extension !== null ) {
					if ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
					if ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
					if ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
					if ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
				}
			}
			if ( p === RGB_ETC1_Format ) {
				extension = extensions.get( 'WEBGL_compressed_texture_etc1' );
				if ( extension !== null ) return extension.COMPRESSED_RGB_ETC1_WEBGL;
			}
			if ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||
				p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||
				p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||
				p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||
				p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {
				extension = extensions.get( 'WEBGL_compressed_texture_astc' );
				if ( extension !== null ) {
					return p;
				}
			}
			if ( p === MinEquation || p === MaxEquation ) {
				if ( capabilities.isWebGL2 ) {
					if ( p === MinEquation ) return 32775;
					if ( p === MaxEquation ) return 32776;
				}
				extension = extensions.get( 'EXT_blend_minmax' );
				if ( extension !== null ) {
					if ( p === MinEquation ) return extension.MIN_EXT;
					if ( p === MaxEquation ) return extension.MAX_EXT;
				}
			}
			if ( p === UnsignedInt248Type ) {
				if ( capabilities.isWebGL2 ) return 34042;
				extension = extensions.get( 'WEBGL_depth_texture' );
				if ( extension !== null ) return extension.UNSIGNED_INT_24_8_WEBGL;
			}
			return 0;
		}
		return { convert: convert };
	}
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function Group() {
		Object3D.call( this );
		this.type = 'Group';
	}
	Group.prototype = Object.assign( Object.create( Object3D.prototype ), {
		constructor: Group,
		isGroup: true
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function ArrayCamera( array ) {
		PerspectiveCamera.call( this );
		this.cameras = array || [];
	}
	ArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {
		constructor: ArrayCamera,
		isArrayCamera: true
	} );
	/**
	 * @author jsantell / https://www.jsantell.com/
	 * @author mrdoob / http://mrdoob.com/
	 */
	var cameraLPos = new Vector3();
	var cameraRPos = new Vector3();
	/**
	 * Assumes 2 cameras that are parallel and share an X-axis, and that
	 * the cameras' projection and world matrices have already been set.
	 * And that near and far planes are identical for both cameras.
	 * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
	 */
	function setProjectionFromUnion( camera, cameraL, cameraR ) {
		cameraLPos.setFromMatrixPosition( cameraL.matrixWorld );
		cameraRPos.setFromMatrixPosition( cameraR.matrixWorld );
		var ipd = cameraLPos.distanceTo( cameraRPos );
		var projL = cameraL.projectionMatrix.elements;
		var projR = cameraR.projectionMatrix.elements;
		var near = projL[ 14 ] / ( projL[ 10 ] - 1 );
		var far = projL[ 14 ] / ( projL[ 10 ] + 1 );
		var topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];
		var bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];
		var leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];
		var rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];
		var left = near * leftFov;
		var right = near * rightFov;
		var zOffset = ipd / ( - leftFov + rightFov );
		var xOffset = zOffset * - leftFov;
		cameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );
		camera.translateX( xOffset );
		camera.translateZ( zOffset );
		camera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );
		camera.matrixWorldInverse.getInverse( camera.matrixWorld );
		var near2 = near + zOffset;
		var far2 = far + zOffset;
		var left2 = left - xOffset;
		var right2 = right + ( ipd - xOffset );
		var top2 = topFov * far / far2 * near2;
		var bottom2 = bottomFov * far / far2 * near2;
		camera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );
	}
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function WebVRManager( renderer ) {
		var renderWidth, renderHeight;
		var scope = this;
		var device = null;
		var frameData = null;
		var poseTarget = null;
		var controllers = [];
		var standingMatrix = new Matrix4();
		var standingMatrixInverse = new Matrix4();
		var framebufferScaleFactor = 1.0;
		var referenceSpaceType = 'local-floor';
		if ( typeof window !== 'undefined' && 'VRFrameData' in window ) {
			frameData = new window.VRFrameData();
			window.addEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange, false );
		}
		var matrixWorldInverse = new Matrix4();
		var tempQuaternion = new Quaternion();
		var tempPosition = new Vector3();
		var cameraL = new PerspectiveCamera();
		cameraL.viewport = new Vector4();
		cameraL.layers.enable( 1 );
		var cameraR = new PerspectiveCamera();
		cameraR.viewport = new Vector4();
		cameraR.layers.enable( 2 );
		var cameraVR = new ArrayCamera( [ cameraL, cameraR ] );
		cameraVR.layers.enable( 1 );
		cameraVR.layers.enable( 2 );
		function isPresenting() {
			return device !== null && device.isPresenting === true;
		}
		var currentSize = new Vector2(), currentPixelRatio;
		function onVRDisplayPresentChange() {
			if ( isPresenting() ) {
				var eyeParameters = device.getEyeParameters( 'left' );
				renderWidth = 2 * eyeParameters.renderWidth * framebufferScaleFactor;
				renderHeight = eyeParameters.renderHeight * framebufferScaleFactor;
				currentPixelRatio = renderer.getPixelRatio();
				renderer.getSize( currentSize );
				renderer.setDrawingBufferSize( renderWidth, renderHeight, 1 );
				cameraL.viewport.set( 0, 0, renderWidth / 2, renderHeight );
				cameraR.viewport.set( renderWidth / 2, 0, renderWidth / 2, renderHeight );
				animation.start();
				scope.dispatchEvent( { type: 'sessionstart' } );
			} else {
				if ( scope.enabled ) {
					renderer.setDrawingBufferSize( currentSize.width, currentSize.height, currentPixelRatio );
				}
				animation.stop();
				scope.dispatchEvent( { type: 'sessionend' } );
			}
		}
		var triggers = [];
		function findGamepad( id ) {
			var gamepads = navigator.getGamepads && navigator.getGamepads();
			for ( var i = 0, j = 0, l = gamepads.length; i < l; i ++ ) {
				var gamepad = gamepads[ i ];
				if ( gamepad && ( gamepad.id === 'Daydream Controller' ||
					gamepad.id === 'Gear VR Controller' || gamepad.id === 'Oculus Go Controller' ||
					gamepad.id === 'OpenVR Gamepad' || gamepad.id.startsWith( 'Oculus Touch' ) ||
					gamepad.id.startsWith( 'HTC Vive Focus' ) ||
					gamepad.id.startsWith( 'Spatial Controller' ) ) ) {
					if ( j === id ) return gamepad;
					j ++;
				}
			}
		}
		function updateControllers() {
			for ( var i = 0; i < controllers.length; i ++ ) {
				var controller = controllers[ i ];
				var gamepad = findGamepad( i );
				if ( gamepad !== undefined && gamepad.pose !== undefined ) {
					if ( gamepad.pose === null ) return;
					var pose = gamepad.pose;
					if ( pose.hasPosition === false ) controller.position.set( 0.2, - 0.6, - 0.05 );
					if ( pose.position !== null ) controller.position.fromArray( pose.position );
					if ( pose.orientation !== null ) controller.quaternion.fromArray( pose.orientation );
					controller.matrix.compose( controller.position, controller.quaternion, controller.scale );
					controller.matrix.premultiply( standingMatrix );
					controller.matrix.decompose( controller.position, controller.quaternion, controller.scale );
					controller.matrixWorldNeedsUpdate = true;
					controller.visible = true;
					var buttonId = gamepad.id === 'Daydream Controller' ? 0 : 1;
					if ( triggers[ i ] === undefined ) triggers[ i ] = false;
					if ( triggers[ i ] !== gamepad.buttons[ buttonId ].pressed ) {
						triggers[ i ] = gamepad.buttons[ buttonId ].pressed;
						if ( triggers[ i ] === true ) {
							controller.dispatchEvent( { type: 'selectstart' } );
						} else {
							controller.dispatchEvent( { type: 'selectend' } );
							controller.dispatchEvent( { type: 'select' } );
						}
					}
				} else {
					controller.visible = false;
				}
			}
		}
		function updateViewportFromBounds( viewport, bounds ) {
			if ( bounds !== null && bounds.length === 4 ) {
				viewport.set( bounds[ 0 ] * renderWidth, bounds[ 1 ] * renderHeight, bounds[ 2 ] * renderWidth, bounds[ 3 ] * renderHeight );
			}
		}
		this.enabled = false;
		this.getController = function ( id ) {
			var controller = controllers[ id ];
			if ( controller === undefined ) {
				controller = new Group();
				controller.matrixAutoUpdate = false;
				controller.visible = false;
				controllers[ id ] = controller;
			}
			return controller;
		};
		this.getDevice = function () {
			return device;
		};
		this.setDevice = function ( value ) {
			if ( value !== undefined ) device = value;
			animation.setContext( value );
		};
		this.setFramebufferScaleFactor = function ( value ) {
			framebufferScaleFactor = value;
		};
		this.setReferenceSpaceType = function ( value ) {
			referenceSpaceType = value;
		};
		this.setPoseTarget = function ( object ) {
			if ( object !== undefined ) poseTarget = object;
		};
		this.getCamera = function ( camera ) {
			var userHeight = referenceSpaceType === 'local-floor' ? 1.6 : 0;
			if ( isPresenting() === false ) {
				camera.position.set( 0, userHeight, 0 );
				camera.rotation.set( 0, 0, 0 );
				return camera;
			}
			device.depthNear = camera.near;
			device.depthFar = camera.far;
			device.getFrameData( frameData );
			if ( referenceSpaceType === 'local-floor' ) {
				var stageParameters = device.stageParameters;
				if ( stageParameters ) {
					standingMatrix.fromArray( stageParameters.sittingToStandingTransform );
				} else {
					standingMatrix.makeTranslation( 0, userHeight, 0 );
				}
			}
			var pose = frameData.pose;
			var poseObject = poseTarget !== null ? poseTarget : camera;
			poseObject.matrix.copy( standingMatrix );
			poseObject.matrix.decompose( poseObject.position, poseObject.quaternion, poseObject.scale );
			if ( pose.orientation !== null ) {
				tempQuaternion.fromArray( pose.orientation );
				poseObject.quaternion.multiply( tempQuaternion );
			}
			if ( pose.position !== null ) {
				tempQuaternion.setFromRotationMatrix( standingMatrix );
				tempPosition.fromArray( pose.position );
				tempPosition.applyQuaternion( tempQuaternion );
				poseObject.position.add( tempPosition );
			}
			poseObject.updateMatrixWorld();
			cameraL.near = camera.near;
			cameraR.near = camera.near;
			cameraL.far = camera.far;
			cameraR.far = camera.far;
			cameraL.matrixWorldInverse.fromArray( frameData.leftViewMatrix );
			cameraR.matrixWorldInverse.fromArray( frameData.rightViewMatrix );
			standingMatrixInverse.getInverse( standingMatrix );
			if ( referenceSpaceType === 'local-floor' ) {
				cameraL.matrixWorldInverse.multiply( standingMatrixInverse );
				cameraR.matrixWorldInverse.multiply( standingMatrixInverse );
			}
			var parent = poseObject.parent;
			if ( parent !== null ) {
				matrixWorldInverse.getInverse( parent.matrixWorld );
				cameraL.matrixWorldInverse.multiply( matrixWorldInverse );
				cameraR.matrixWorldInverse.multiply( matrixWorldInverse );
			}
			cameraL.matrixWorld.getInverse( cameraL.matrixWorldInverse );
			cameraR.matrixWorld.getInverse( cameraR.matrixWorldInverse );
			cameraL.projectionMatrix.fromArray( frameData.leftProjectionMatrix );
			cameraR.projectionMatrix.fromArray( frameData.rightProjectionMatrix );
			setProjectionFromUnion( cameraVR, cameraL, cameraR );
			var layers = device.getLayers();
			if ( layers.length ) {
				var layer = layers[ 0 ];
				updateViewportFromBounds( cameraL.viewport, layer.leftBounds );
				updateViewportFromBounds( cameraR.viewport, layer.rightBounds );
			}
			updateControllers();
			return cameraVR;
		};
		this.getStandingMatrix = function () {
			return standingMatrix;
		};
		this.isPresenting = isPresenting;
		var animation = new WebGLAnimation();
		this.setAnimationLoop = function ( callback ) {
			animation.setAnimationLoop( callback );
			if ( isPresenting() ) animation.start();
		};
		this.submitFrame = function () {
			if ( isPresenting() ) device.submitFrame();
		};
		this.dispose = function () {
			if ( typeof window !== 'undefined' ) {
				window.removeEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange );
			}
		};
		this.setFrameOfReferenceType = function () {
			console.warn( 'THREE.WebVRManager: setFrameOfReferenceType() has been deprecated.' );
		};
	}
	Object.assign( WebVRManager.prototype, EventDispatcher.prototype );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function WebXRManager( renderer, gl ) {
		var scope = this;
		var session = null;
		var referenceSpace = null;
		var referenceSpaceType = 'local-floor';
		var pose = null;
		var controllers = [];
		var inputSources = [];
		function isPresenting() {
			return session !== null && referenceSpace !== null;
		}
		var cameraL = new PerspectiveCamera();
		cameraL.layers.enable( 1 );
		cameraL.viewport = new Vector4();
		var cameraR = new PerspectiveCamera();
		cameraR.layers.enable( 2 );
		cameraR.viewport = new Vector4();
		var cameraVR = new ArrayCamera( [ cameraL, cameraR ] );
		cameraVR.layers.enable( 1 );
		cameraVR.layers.enable( 2 );
		this.enabled = false;
		this.getController = function ( id ) {
			var controller = controllers[ id ];
			if ( controller === undefined ) {
				controller = new Group();
				controller.matrixAutoUpdate = false;
				controller.visible = false;
				controllers[ id ] = controller;
			}
			return controller;
		};
		function onSessionEvent( event ) {
			for ( var i = 0; i < controllers.length; i ++ ) {
				if ( inputSources[ i ] === event.inputSource ) {
					controllers[ i ].dispatchEvent( { type: event.type } );
				}
			}
		}
		function onSessionEnd() {
			renderer.setFramebuffer( null );
			renderer.setRenderTarget( renderer.getRenderTarget() ); // Hack #15830
			animation.stop();
			scope.dispatchEvent( { type: 'sessionend' } );
		}
		function onRequestReferenceSpace( value ) {
			referenceSpace = value;
			animation.setContext( session );
			animation.start();
			scope.dispatchEvent( { type: 'sessionstart' } );
		}
		this.setFramebufferScaleFactor = function ( value ) {
		};
		this.setReferenceSpaceType = function ( value ) {
			referenceSpaceType = value;
		};
		this.getSession = function () {
			return session;
		};
		this.setSession = function ( value ) {
			session = value;
			if ( session !== null ) {
				session.addEventListener( 'select', onSessionEvent );
				session.addEventListener( 'selectstart', onSessionEvent );
				session.addEventListener( 'selectend', onSessionEvent );
				session.addEventListener( 'end', onSessionEnd );
				session.updateRenderState( { baseLayer: new XRWebGLLayer( session, gl ) } );
				session.requestReferenceSpace( referenceSpaceType ).then( onRequestReferenceSpace );
				inputSources = session.inputSources;
				session.addEventListener( 'inputsourceschange', function () {
					inputSources = session.inputSources;
					console.log( inputSources );
					for ( var i = 0; i < controllers.length; i ++ ) {
						var controller = controllers[ i ];
						controller.userData.inputSource = inputSources[ i ];
					}
				} );
			}
		};
		function updateCamera( camera, parent ) {
			if ( parent === null ) {
				camera.matrixWorld.copy( camera.matrix );
			} else {
				camera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );
			}
			camera.matrixWorldInverse.getInverse( camera.matrixWorld );
		}
		this.getCamera = function ( camera ) {
			if ( isPresenting() ) {
				var parent = camera.parent;
				var cameras = cameraVR.cameras;
				updateCamera( cameraVR, parent );
				for ( var i = 0; i < cameras.length; i ++ ) {
					updateCamera( cameras[ i ], parent );
				}
				camera.matrixWorld.copy( cameraVR.matrixWorld );
				var children = camera.children;
				for ( var i = 0, l = children.length; i < l; i ++ ) {
					children[ i ].updateMatrixWorld( true );
				}
				setProjectionFromUnion( cameraVR, cameraL, cameraR );
				return cameraVR;
			}
			return camera;
		};
		this.isPresenting = isPresenting;
		var onAnimationFrameCallback = null;
		function onAnimationFrame( time, frame ) {
			pose = frame.getViewerPose( referenceSpace );
			if ( pose !== null ) {
				var views = pose.views;
				var baseLayer = session.renderState.baseLayer;
				renderer.setFramebuffer( baseLayer.framebuffer );
				for ( var i = 0; i < views.length; i ++ ) {
					var view = views[ i ];
					var viewport = baseLayer.getViewport( view );
					var viewMatrix = view.transform.inverse.matrix;
					var camera = cameraVR.cameras[ i ];
					camera.matrix.fromArray( viewMatrix ).getInverse( camera.matrix );
					camera.projectionMatrix.fromArray( view.projectionMatrix );
					camera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );
					if ( i === 0 ) {
						cameraVR.matrix.copy( camera.matrix );
					}
				}
			}
			for ( var i = 0; i < controllers.length; i ++ ) {
				var controller = controllers[ i ];
				var inputSource = inputSources[ i ];
				if ( inputSource ) {
					var inputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );
					if ( inputPose !== null ) {
						controller.matrix.fromArray( inputPose.transform.matrix );
						controller.matrix.decompose( controller.position, controller.rotation, controller.scale );
						controller.visible = true;
						continue;
					}
				}
				controller.visible = false;
			}
			if ( onAnimationFrameCallback ) onAnimationFrameCallback( time );
		}
		var animation = new WebGLAnimation();
		animation.setAnimationLoop( onAnimationFrame );
		this.setAnimationLoop = function ( callback ) {
			onAnimationFrameCallback = callback;
		};
		this.dispose = function () {};
		this.getStandingMatrix = function () {
			console.warn( 'THREE.WebXRManager: getStandingMatrix() is no longer needed.' );
			return new Matrix4();
		};
		this.getDevice = function () {
			console.warn( 'THREE.WebXRManager: getDevice() has been deprecated.' );
		};
		this.setDevice = function () {
			console.warn( 'THREE.WebXRManager: setDevice() has been deprecated.' );
		};
		this.setFrameOfReferenceType = function () {
			console.warn( 'THREE.WebXRManager: setFrameOfReferenceType() has been deprecated.' );
		};
		this.submitFrame = function () {};
	}
	Object.assign( WebXRManager.prototype, EventDispatcher.prototype );
	/**
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author szimek / https://github.com/szimek/
	 * @author tschw
	 */
	function WebGLRenderer( parameters ) {
		console.log( 'THREE.WebGLRenderer', REVISION );
		parameters = parameters || {};
		var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),
			_context = parameters.context !== undefined ? parameters.context : null,
			_alpha = parameters.alpha !== undefined ? parameters.alpha : false,
			_depth = parameters.depth !== undefined ? parameters.depth : true,
			_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
			_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
			_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
			_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,
			_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',
			_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;
		var currentRenderList = null;
		var currentRenderState = null;
		this.domElement = _canvas;
		this.debug = {
			/**
			 * Enables error checking and reporting when shader programs are being compiled
			 * @type {boolean}
			 */
			checkShaderErrors: true
		};
		this.autoClear = true;
		this.autoClearColor = true;
		this.autoClearDepth = true;
		this.autoClearStencil = true;
		this.sortObjects = true;
		this.clippingPlanes = [];
		this.localClippingEnabled = false;
		this.gammaFactor = 2.0;	// for backwards compatibility
		this.gammaInput = false;
		this.gammaOutput = false;
		this.physicallyCorrectLights = false;
		this.toneMapping = LinearToneMapping;
		this.toneMappingExposure = 1.0;
		this.toneMappingWhitePoint = 1.0;
		this.maxMorphTargets = 8;
		this.maxMorphNormals = 4;
		var _this = this,
			_isContextLost = false,
			_framebuffer = null,
			_currentActiveCubeFace = 0,
			_currentActiveMipmapLevel = 0,
			_currentRenderTarget = null,
			_currentFramebuffer = null,
			_currentMaterialId = - 1,
			_currentGeometryProgram = {
				geometry: null,
				program: null,
				wireframe: false
			},
			_currentCamera = null,
			_currentArrayCamera = null,
			_currentViewport = new Vector4(),
			_currentScissor = new Vector4(),
			_currentScissorTest = null,
			_width = _canvas.width,
			_height = _canvas.height,
			_pixelRatio = 1,
			_viewport = new Vector4( 0, 0, _width, _height ),
			_scissor = new Vector4( 0, 0, _width, _height ),
			_scissorTest = false,
			_frustum = new Frustum(),
			_clipping = new WebGLClipping(),
			_clippingEnabled = false,
			_localClippingEnabled = false,
			_projScreenMatrix = new Matrix4(),
			_vector3 = new Vector3();
		function getTargetPixelRatio() {
			return _currentRenderTarget === null ? _pixelRatio : 1;
		}
		var _gl;
		try {
			var contextAttributes = {
				alpha: _alpha,
				depth: _depth,
				stencil: _stencil,
				antialias: _antialias,
				premultipliedAlpha: _premultipliedAlpha,
				preserveDrawingBuffer: _preserveDrawingBuffer,
				powerPreference: _powerPreference,
				failIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat,
				xrCompatible: true
			};
			_canvas.addEventListener( 'webglcontextlost', onContextLost, false );
			_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );
			_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );
			if ( _gl === null ) {
				if ( _canvas.getContext( 'webgl' ) !== null ) {
					throw new Error( 'Error creating WebGL context with your selected attributes.' );
				} else {
					throw new Error( 'Error creating WebGL context.' );
				}
			}
			if ( _gl.getShaderPrecisionFormat === undefined ) {
				_gl.getShaderPrecisionFormat = function () {
					return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };
				};
			}
		} catch ( error ) {
			console.error( 'THREE.WebGLRenderer: ' + error.message );
			throw error;
		}
		var extensions, capabilities, state, info;
		var properties, textures, attributes, geometries, objects;
		var programCache, renderLists, renderStates;
		var background, morphtargets, bufferRenderer, indexedBufferRenderer;
		var utils;
		function initGLContext() {
			extensions = new WebGLExtensions( _gl );
			capabilities = new WebGLCapabilities( _gl, extensions, parameters );
			if ( ! capabilities.isWebGL2 ) {
				extensions.get( 'WEBGL_depth_texture' );
				extensions.get( 'OES_texture_float' );
				extensions.get( 'OES_texture_half_float' );
				extensions.get( 'OES_texture_half_float_linear' );
				extensions.get( 'OES_standard_derivatives' );
				extensions.get( 'OES_element_index_uint' );
				extensions.get( 'ANGLE_instanced_arrays' );
			}
			extensions.get( 'OES_texture_float_linear' );
			utils = new WebGLUtils( _gl, extensions, capabilities );
			state = new WebGLState( _gl, extensions, utils, capabilities );
			state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );
			state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );
			info = new WebGLInfo( _gl );
			properties = new WebGLProperties();
			textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );
			attributes = new WebGLAttributes( _gl );
			geometries = new WebGLGeometries( _gl, attributes, info );
			objects = new WebGLObjects( geometries, info );
			morphtargets = new WebGLMorphtargets( _gl );
			programCache = new WebGLPrograms( _this, extensions, capabilities );
			renderLists = new WebGLRenderLists();
			renderStates = new WebGLRenderStates();
			background = new WebGLBackground( _this, state, objects, _premultipliedAlpha );
			bufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );
			indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );
			info.programs = programCache.programs;
			_this.capabilities = capabilities;
			_this.extensions = extensions;
			_this.properties = properties;
			_this.renderLists = renderLists;
			_this.state = state;
			_this.info = info;
		}
		initGLContext();
		var vr = ( typeof navigator !== 'undefined' && 'xr' in navigator && 'supportsSession' in navigator.xr ) ? new WebXRManager( _this, _gl ) : new WebVRManager( _this );
		this.vr = vr;
		var shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );
		this.shadowMap = shadowMap;
		this.getContext = function () {
			return _gl;
		};
		this.getContextAttributes = function () {
			return _gl.getContextAttributes();
		};
		this.forceContextLoss = function () {
			var extension = extensions.get( 'WEBGL_lose_context' );
			if ( extension ) extension.loseContext();
		};
		this.forceContextRestore = function () {
			var extension = extensions.get( 'WEBGL_lose_context' );
			if ( extension ) extension.restoreContext();
		};
		this.getPixelRatio = function () {
			return _pixelRatio;
		};
		this.setPixelRatio = function ( value ) {
			if ( value === undefined ) return;
			_pixelRatio = value;
			this.setSize( _width, _height, false );
		};
		this.getSize = function ( target ) {
			if ( target === undefined ) {
				console.warn( 'WebGLRenderer: .getsize() now requires a Vector2 as an argument' );
				target = new Vector2();
			}
			return target.set( _width, _height );
		};
		this.setSize = function ( width, height, updateStyle ) {
			if ( vr.isPresenting() ) {
				console.warn( 'THREE.WebGLRenderer: Can\'t change size while VR device is presenting.' );
				return;
			}
			_width = width;
			_height = height;
			_canvas.width = Math.floor( width * _pixelRatio );
			_canvas.height = Math.floor( height * _pixelRatio );
			if ( updateStyle !== false ) {
				_canvas.style.width = width + 'px';
				_canvas.style.height = height + 'px';
			}
			this.setViewport( 0, 0, width, height );
		};
		this.getDrawingBufferSize = function ( target ) {
			if ( target === undefined ) {
				console.warn( 'WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument' );
				target = new Vector2();
			}
			return target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();
		};
		this.setDrawingBufferSize = function ( width, height, pixelRatio ) {
			_width = width;
			_height = height;
			_pixelRatio = pixelRatio;
			_canvas.width = Math.floor( width * pixelRatio );
			_canvas.height = Math.floor( height * pixelRatio );
			this.setViewport( 0, 0, width, height );
		};
		this.getCurrentViewport = function ( target ) {
			if ( target === undefined ) {
				console.warn( 'WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument' );
				target = new Vector4();
			}
			return target.copy( _currentViewport );
		};
		this.getViewport = function ( target ) {
			return target.copy( _viewport );
		};
		this.setViewport = function ( x, y, width, height ) {
			if ( x.isVector4 ) {
				_viewport.set( x.x, x.y, x.z, x.w );
			} else {
				_viewport.set( x, y, width, height );
			}
			state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );
		};
		this.getScissor = function ( target ) {
			return target.copy( _scissor );
		};
		this.setScissor = function ( x, y, width, height ) {
			if ( x.isVector4 ) {
				_scissor.set( x.x, x.y, x.z, x.w );
			} else {
				_scissor.set( x, y, width, height );
			}
			state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );
		};
		this.getScissorTest = function () {
			return _scissorTest;
		};
		this.setScissorTest = function ( boolean ) {
			state.setScissorTest( _scissorTest = boolean );
		};
		this.getClearColor = function () {
			return background.getClearColor();
		};
		this.setClearColor = function () {
			background.setClearColor.apply( background, arguments );
		};
		this.getClearAlpha = function () {
			return background.getClearAlpha();
		};
		this.setClearAlpha = function () {
			background.setClearAlpha.apply( background, arguments );
		};
		this.clear = function ( color, depth, stencil ) {
			var bits = 0;
			if ( color === undefined || color ) bits |= 16384;
			if ( depth === undefined || depth ) bits |= 256;
			if ( stencil === undefined || stencil ) bits |= 1024;
			_gl.clear( bits );
		};
		this.clearColor = function () {
			this.clear( true, false, false );
		};
		this.clearDepth = function () {
			this.clear( false, true, false );
		};
		this.clearStencil = function () {
			this.clear( false, false, true );
		};
		this.dispose = function () {
			_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );
			_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );
			renderLists.dispose();
			renderStates.dispose();
			properties.dispose();
			objects.dispose();
			vr.dispose();
			animation.stop();
		};
		function onContextLost( event ) {
			event.preventDefault();
			console.log( 'THREE.WebGLRenderer: Context Lost.' );
			_isContextLost = true;
		}
		function onContextRestore( /* event */ ) {
			console.log( 'THREE.WebGLRenderer: Context Restored.' );
			_isContextLost = false;
			initGLContext();
		}
		function onMaterialDispose( event ) {
			var material = event.target;
			material.removeEventListener( 'dispose', onMaterialDispose );
			deallocateMaterial( material );
		}
		function deallocateMaterial( material ) {
			releaseMaterialProgramReference( material );
			properties.remove( material );
		}
		function releaseMaterialProgramReference( material ) {
			var programInfo = properties.get( material ).program;
			material.program = undefined;
			if ( programInfo !== undefined ) {
				programCache.releaseProgram( programInfo );
			}
		}
		function renderObjectImmediate( object, program ) {
			object.render( function ( object ) {
				_this.renderBufferImmediate( object, program );
			} );
		}
		this.renderBufferImmediate = function ( object, program ) {
			state.initAttributes();
			var buffers = properties.get( object );
			if ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();
			if ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();
			if ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();
			if ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();
			var programAttributes = program.getAttributes();
			if ( object.hasPositions ) {
				_gl.bindBuffer( 34962, buffers.position );
				_gl.bufferData( 34962, object.positionArray, 35048 );
				state.enableAttribute( programAttributes.position );
				_gl.vertexAttribPointer( programAttributes.position, 3, 5126, false, 0, 0 );
			}
			if ( object.hasNormals ) {
				_gl.bindBuffer( 34962, buffers.normal );
				_gl.bufferData( 34962, object.normalArray, 35048 );
				state.enableAttribute( programAttributes.normal );
				_gl.vertexAttribPointer( programAttributes.normal, 3, 5126, false, 0, 0 );
			}
			if ( object.hasUvs ) {
				_gl.bindBuffer( 34962, buffers.uv );
				_gl.bufferData( 34962, object.uvArray, 35048 );
				state.enableAttribute( programAttributes.uv );
				_gl.vertexAttribPointer( programAttributes.uv, 2, 5126, false, 0, 0 );
			}
			if ( object.hasColors ) {
				_gl.bindBuffer( 34962, buffers.color );
				_gl.bufferData( 34962, object.colorArray, 35048 );
				state.enableAttribute( programAttributes.color );
				_gl.vertexAttribPointer( programAttributes.color, 3, 5126, false, 0, 0 );
			}
			state.disableUnusedAttributes();
			_gl.drawArrays( 4, 0, object.count );
			object.count = 0;
		};
		this.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {
			var frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );
			state.setMaterial( material, frontFaceCW );
			var program = setProgram( camera, fog, material, object );
			var updateBuffers = false;
			if ( _currentGeometryProgram.geometry !== geometry.id ||
				_currentGeometryProgram.program !== program.id ||
				_currentGeometryProgram.wireframe !== ( material.wireframe === true ) ) {
				_currentGeometryProgram.geometry = geometry.id;
				_currentGeometryProgram.program = program.id;
				_currentGeometryProgram.wireframe = material.wireframe === true;
				updateBuffers = true;
			}
			if ( object.morphTargetInfluences ) {
				morphtargets.update( object, geometry, material, program );
				updateBuffers = true;
			}
			var index = geometry.index;
			var position = geometry.attributes.position;
			var rangeFactor = 1;
			if ( material.wireframe === true ) {
				index = geometries.getWireframeAttribute( geometry );
				rangeFactor = 2;
			}
			var attribute;
			var renderer = bufferRenderer;
			if ( index !== null ) {
				attribute = attributes.get( index );
				renderer = indexedBufferRenderer;
				renderer.setIndex( attribute );
			}
			if ( updateBuffers ) {
				setupVertexAttributes( material, program, geometry );
				if ( index !== null ) {
					_gl.bindBuffer( 34963, attribute.buffer );
				}
			}
			var dataCount = Infinity;
			if ( index !== null ) {
				dataCount = index.count;
			} else if ( position !== undefined ) {
				dataCount = position.count;
			}
			var rangeStart = geometry.drawRange.start * rangeFactor;
			var rangeCount = geometry.drawRange.count * rangeFactor;
			var groupStart = group !== null ? group.start * rangeFactor : 0;
			var groupCount = group !== null ? group.count * rangeFactor : Infinity;
			var drawStart = Math.max( rangeStart, groupStart );
			var drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;
			var drawCount = Math.max( 0, drawEnd - drawStart + 1 );
			if ( drawCount === 0 ) return;
			if ( object.isMesh ) {
				if ( material.wireframe === true ) {
					state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
					renderer.setMode( 1 );
				} else {
					switch ( object.drawMode ) {
						case TrianglesDrawMode:
							renderer.setMode( 4 );
							break;
						case TriangleStripDrawMode:
							renderer.setMode( 5 );
							break;
						case TriangleFanDrawMode:
							renderer.setMode( 6 );
							break;
					}
				}
			} else if ( object.isLine ) {
				var lineWidth = material.linewidth;
				if ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material
				state.setLineWidth( lineWidth * getTargetPixelRatio() );
				if ( object.isLineSegments ) {
					renderer.setMode( 1 );
				} else if ( object.isLineLoop ) {
					renderer.setMode( 2 );
				} else {
					renderer.setMode( 3 );
				}
			} else if ( object.isPoints ) {
				renderer.setMode( 0 );
			} else if ( object.isSprite ) {
				renderer.setMode( 4 );
			}
			if ( geometry && geometry.isInstancedBufferGeometry ) {
				if ( geometry.maxInstancedCount > 0 ) {
					renderer.renderInstances( geometry, drawStart, drawCount );
				}
			} else {
				renderer.render( drawStart, drawCount );
			}
		};
		function setupVertexAttributes( material, program, geometry ) {
			if ( geometry && geometry.isInstancedBufferGeometry && ! capabilities.isWebGL2 ) {
				if ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) {
					console.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
					return;
				}
			}
			state.initAttributes();
			var geometryAttributes = geometry.attributes;
			var programAttributes = program.getAttributes();
			var materialDefaultAttributeValues = material.defaultAttributeValues;
			for ( var name in programAttributes ) {
				var programAttribute = programAttributes[ name ];
				if ( programAttribute >= 0 ) {
					var geometryAttribute = geometryAttributes[ name ];
					if ( geometryAttribute !== undefined ) {
						var normalized = geometryAttribute.normalized;
						var size = geometryAttribute.itemSize;
						var attribute = attributes.get( geometryAttribute );
						if ( attribute === undefined ) continue;
						var buffer = attribute.buffer;
						var type = attribute.type;
						var bytesPerElement = attribute.bytesPerElement;
						if ( geometryAttribute.isInterleavedBufferAttribute ) {
							var data = geometryAttribute.data;
							var stride = data.stride;
							var offset = geometryAttribute.offset;
							if ( data && data.isInstancedInterleavedBuffer ) {
								state.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );
								if ( geometry.maxInstancedCount === undefined ) {
									geometry.maxInstancedCount = data.meshPerAttribute * data.count;
								}
							} else {
								state.enableAttribute( programAttribute );
							}
							_gl.bindBuffer( 34962, buffer );
							_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement );
						} else {
							if ( geometryAttribute.isInstancedBufferAttribute ) {
								state.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );
								if ( geometry.maxInstancedCount === undefined ) {
									geometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;
								}
							} else {
								state.enableAttribute( programAttribute );
							}
							_gl.bindBuffer( 34962, buffer );
							_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, 0 );
						}
					} else if ( materialDefaultAttributeValues !== undefined ) {
						var value = materialDefaultAttributeValues[ name ];
						if ( value !== undefined ) {
							switch ( value.length ) {
								case 2:
									_gl.vertexAttrib2fv( programAttribute, value );
									break;
								case 3:
									_gl.vertexAttrib3fv( programAttribute, value );
									break;
								case 4:
									_gl.vertexAttrib4fv( programAttribute, value );
									break;
								default:
									_gl.vertexAttrib1fv( programAttribute, value );
							}
						}
					}
				}
			}
			state.disableUnusedAttributes();
		}
		this.compile = function ( scene, camera ) {
			currentRenderState = renderStates.get( scene, camera );
			currentRenderState.init();
			scene.traverse( function ( object ) {
				if ( object.isLight ) {
					currentRenderState.pushLight( object );
					if ( object.castShadow ) {
						currentRenderState.pushShadow( object );
					}
				}
			} );
			currentRenderState.setupLights( camera );
			scene.traverse( function ( object ) {
				if ( object.material ) {
					if ( Array.isArray( object.material ) ) {
						for ( var i = 0; i < object.material.length; i ++ ) {
							initMaterial( object.material[ i ], scene.fog, object );
						}
					} else {
						initMaterial( object.material, scene.fog, object );
					}
				}
			} );
		};
		var onAnimationFrameCallback = null;
		function onAnimationFrame( time ) {
			if ( vr.isPresenting() ) return;
			if ( onAnimationFrameCallback ) onAnimationFrameCallback( time );
		}
		var animation = new WebGLAnimation();
		animation.setAnimationLoop( onAnimationFrame );
		if ( typeof window !== 'undefined' ) animation.setContext( window );
		this.setAnimationLoop = function ( callback ) {
			onAnimationFrameCallback = callback;
			vr.setAnimationLoop( callback );
			animation.start();
		};
		this.render = function ( scene, camera ) {
			var renderTarget, forceClear;
			if ( arguments[ 2 ] !== undefined ) {
				console.warn( 'THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.' );
				renderTarget = arguments[ 2 ];
			}
			if ( arguments[ 3 ] !== undefined ) {
				console.warn( 'THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.' );
				forceClear = arguments[ 3 ];
			}
			if ( ! ( camera && camera.isCamera ) ) {
				console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
				return;
			}
			if ( _isContextLost ) return;
			_currentGeometryProgram.geometry = null;
			_currentGeometryProgram.program = null;
			_currentGeometryProgram.wireframe = false;
			_currentMaterialId = - 1;
			_currentCamera = null;
			if ( scene.autoUpdate === true ) scene.updateMatrixWorld();
			if ( camera.parent === null ) camera.updateMatrixWorld();
			if ( vr.enabled ) {
				camera = vr.getCamera( camera );
			}
			currentRenderState = renderStates.get( scene, camera );
			currentRenderState.init();
			scene.onBeforeRender( _this, scene, camera, renderTarget || _currentRenderTarget );
			_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
			_frustum.setFromMatrix( _projScreenMatrix );
			_localClippingEnabled = this.localClippingEnabled;
			_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );
			currentRenderList = renderLists.get( scene, camera );
			currentRenderList.init();
			projectObject( scene, camera, 0, _this.sortObjects );
			if ( _this.sortObjects === true ) {
				currentRenderList.sort();
			}
			if ( _clippingEnabled ) _clipping.beginShadows();
			var shadowsArray = currentRenderState.state.shadowsArray;
			shadowMap.render( shadowsArray, scene, camera );
			currentRenderState.setupLights( camera );
			if ( _clippingEnabled ) _clipping.endShadows();
			if ( this.info.autoReset ) this.info.reset();
			if ( renderTarget !== undefined ) {
				this.setRenderTarget( renderTarget );
			}
			background.render( currentRenderList, scene, camera, forceClear );
			var opaqueObjects = currentRenderList.opaque;
			var transparentObjects = currentRenderList.transparent;
			if ( scene.overrideMaterial ) {
				var overrideMaterial = scene.overrideMaterial;
				if ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera, overrideMaterial );
				if ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera, overrideMaterial );
			} else {
				if ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera );
				if ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera );
			}
			scene.onAfterRender( _this, scene, camera );
			if ( _currentRenderTarget !== null ) {
				textures.updateRenderTargetMipmap( _currentRenderTarget );
				textures.updateMultisampleRenderTarget( _currentRenderTarget );
			}
			state.buffers.depth.setTest( true );
			state.buffers.depth.setMask( true );
			state.buffers.color.setMask( true );
			state.setPolygonOffset( false );
			if ( vr.enabled ) {
				vr.submitFrame();
			}
			currentRenderList = null;
			currentRenderState = null;
		};
		function projectObject( object, camera, groupOrder, sortObjects ) {
			if ( object.visible === false ) return;
			var visible = object.layers.test( camera.layers );
			if ( visible ) {
				if ( object.isGroup ) {
					groupOrder = object.renderOrder;
				} else if ( object.isLOD ) {
					if ( object.autoUpdate === true ) object.update( camera );
				} else if ( object.isLight ) {
					currentRenderState.pushLight( object );
					if ( object.castShadow ) {
						currentRenderState.pushShadow( object );
					}
				} else if ( object.isSprite ) {
					if ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {
						if ( sortObjects ) {
							_vector3.setFromMatrixPosition( object.matrixWorld )
								.applyMatrix4( _projScreenMatrix );
						}
						var geometry = objects.update( object );
						var material = object.material;
						if ( material.visible ) {
							currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );
						}
					}
				} else if ( object.isImmediateRenderObject ) {
					if ( sortObjects ) {
						_vector3.setFromMatrixPosition( object.matrixWorld )
							.applyMatrix4( _projScreenMatrix );
					}
					currentRenderList.push( object, null, object.material, groupOrder, _vector3.z, null );
				} else if ( object.isMesh || object.isLine || object.isPoints ) {
					if ( object.isSkinnedMesh ) {
						object.skeleton.update();
					}
					if ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {
						if ( sortObjects ) {
							_vector3.setFromMatrixPosition( object.matrixWorld )
								.applyMatrix4( _projScreenMatrix );
						}
						var geometry = objects.update( object );
						var material = object.material;
						if ( Array.isArray( material ) ) {
							var groups = geometry.groups;
							for ( var i = 0, l = groups.length; i < l; i ++ ) {
								var group = groups[ i ];
								var groupMaterial = material[ group.materialIndex ];
								if ( groupMaterial && groupMaterial.visible ) {
									currentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );
								}
							}
						} else if ( material.visible ) {
							currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );
						}
					}
				}
			}
			var children = object.children;
			for ( var i = 0, l = children.length; i < l; i ++ ) {
				projectObject( children[ i ], camera, groupOrder, sortObjects );
			}
		}
		function renderObjects( renderList, scene, camera, overrideMaterial ) {
			for ( var i = 0, l = renderList.length; i < l; i ++ ) {
				var renderItem = renderList[ i ];
				var object = renderItem.object;
				var geometry = renderItem.geometry;
				var material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;
				var group = renderItem.group;
				if ( camera.isArrayCamera ) {
					_currentArrayCamera = camera;
					var cameras = camera.cameras;
					for ( var j = 0, jl = cameras.length; j < jl; j ++ ) {
						var camera2 = cameras[ j ];
						if ( object.layers.test( camera2.layers ) ) {
							state.viewport( _currentViewport.copy( camera2.viewport ) );
							currentRenderState.setupLights( camera2 );
							renderObject( object, scene, camera2, geometry, material, group );
						}
					}
				} else {
					_currentArrayCamera = null;
					renderObject( object, scene, camera, geometry, material, group );
				}
			}
		}
		function renderObject( object, scene, camera, geometry, material, group ) {
			object.onBeforeRender( _this, scene, camera, geometry, material, group );
			currentRenderState = renderStates.get( scene, _currentArrayCamera || camera );
			object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
			object.normalMatrix.getNormalMatrix( object.modelViewMatrix );
			if ( object.isImmediateRenderObject ) {
				state.setMaterial( material );
				var program = setProgram( camera, scene.fog, material, object );
				_currentGeometryProgram.geometry = null;
				_currentGeometryProgram.program = null;
				_currentGeometryProgram.wireframe = false;
				renderObjectImmediate( object, program );
			} else {
				_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );
			}
			object.onAfterRender( _this, scene, camera, geometry, material, group );
			currentRenderState = renderStates.get( scene, _currentArrayCamera || camera );
		}
		function initMaterial( material, fog, object ) {
			var materialProperties = properties.get( material );
			var lights = currentRenderState.state.lights;
			var shadowsArray = currentRenderState.state.shadowsArray;
			var lightsStateVersion = lights.state.version;
			var parameters = programCache.getParameters(
				material, lights.state, shadowsArray, fog, _clipping.numPlanes, _clipping.numIntersection, object );
			var code = programCache.getProgramCode( material, parameters );
			var program = materialProperties.program;
			var programChange = true;
			if ( program === undefined ) {
				material.addEventListener( 'dispose', onMaterialDispose );
			} else if ( program.code !== code ) {
				releaseMaterialProgramReference( material );
			} else if ( materialProperties.lightsStateVersion !== lightsStateVersion ) {
				materialProperties.lightsStateVersion = lightsStateVersion;
				programChange = false;
			} else if ( parameters.shaderID !== undefined ) {
				return;
			} else {
				programChange = false;
			}
			if ( programChange ) {
				if ( parameters.shaderID ) {
					var shader = ShaderLib[ parameters.shaderID ];
					materialProperties.shader = {
						name: material.type,
						uniforms: cloneUniforms( shader.uniforms ),
						vertexShader: shader.vertexShader,
						fragmentShader: shader.fragmentShader
					};
				} else {
					materialProperties.shader = {
						name: material.type,
						uniforms: material.uniforms,
						vertexShader: material.vertexShader,
						fragmentShader: material.fragmentShader
					};
				}
				material.onBeforeCompile( materialProperties.shader, _this );
				code = programCache.getProgramCode( material, parameters );
				program = programCache.acquireProgram( material, materialProperties.shader, parameters, code );
				materialProperties.program = program;
				material.program = program;
			}
			var programAttributes = program.getAttributes();
			if ( material.morphTargets ) {
				material.numSupportedMorphTargets = 0;
				for ( var i = 0; i < _this.maxMorphTargets; i ++ ) {
					if ( programAttributes[ 'morphTarget' + i ] >= 0 ) {
						material.numSupportedMorphTargets ++;
					}
				}
			}
			if ( material.morphNormals ) {
				material.numSupportedMorphNormals = 0;
				for ( var i = 0; i < _this.maxMorphNormals; i ++ ) {
					if ( programAttributes[ 'morphNormal' + i ] >= 0 ) {
						material.numSupportedMorphNormals ++;
					}
				}
			}
			var uniforms = materialProperties.shader.uniforms;
			if ( ! material.isShaderMaterial &&
				! material.isRawShaderMaterial ||
				material.clipping === true ) {
				materialProperties.numClippingPlanes = _clipping.numPlanes;
				materialProperties.numIntersection = _clipping.numIntersection;
				uniforms.clippingPlanes = _clipping.uniform;
			}
			materialProperties.fog = fog;
			materialProperties.lightsStateVersion = lightsStateVersion;
			if ( material.lights ) {
				uniforms.ambientLightColor.value = lights.state.ambient;
				uniforms.lightProbe.value = lights.state.probe;
				uniforms.directionalLights.value = lights.state.directional;
				uniforms.spotLights.value = lights.state.spot;
				uniforms.rectAreaLights.value = lights.state.rectArea;
				uniforms.pointLights.value = lights.state.point;
				uniforms.hemisphereLights.value = lights.state.hemi;
				uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
				uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
				uniforms.spotShadowMap.value = lights.state.spotShadowMap;
				uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;
				uniforms.pointShadowMap.value = lights.state.pointShadowMap;
				uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
			}
			var progUniforms = materialProperties.program.getUniforms(),
				uniformsList =
					WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );
			materialProperties.uniformsList = uniformsList;
		}
		function setProgram( camera, fog, material, object ) {
			textures.resetTextureUnits();
			var materialProperties = properties.get( material );
			var lights = currentRenderState.state.lights;
			if ( _clippingEnabled ) {
				if ( _localClippingEnabled || camera !== _currentCamera ) {
					var useCache =
						camera === _currentCamera &&
						material.id === _currentMaterialId;
					_clipping.setState(
						material.clippingPlanes, material.clipIntersection, material.clipShadows,
						camera, materialProperties, useCache );
				}
			}
			if ( material.needsUpdate === false ) {
				if ( materialProperties.program === undefined ) {
					material.needsUpdate = true;
				} else if ( material.fog && materialProperties.fog !== fog ) {
					material.needsUpdate = true;
				} else if ( material.lights && materialProperties.lightsStateVersion !== lights.state.version ) {
					material.needsUpdate = true;
				} else if ( materialProperties.numClippingPlanes !== undefined &&
					( materialProperties.numClippingPlanes !== _clipping.numPlanes ||
					materialProperties.numIntersection !== _clipping.numIntersection ) ) {
					material.needsUpdate = true;
				}
			}
			if ( material.needsUpdate ) {
				initMaterial( material, fog, object );
				material.needsUpdate = false;
			}
			var refreshProgram = false;
			var refreshMaterial = false;
			var refreshLights = false;
			var program = materialProperties.program,
				p_uniforms = program.getUniforms(),
				m_uniforms = materialProperties.shader.uniforms;
			if ( state.useProgram( program.program ) ) {
				refreshProgram = true;
				refreshMaterial = true;
				refreshLights = true;
			}
			if ( material.id !== _currentMaterialId ) {
				_currentMaterialId = material.id;
				refreshMaterial = true;
			}
			if ( refreshProgram || _currentCamera !== camera ) {
				p_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );
				if ( capabilities.logarithmicDepthBuffer ) {
					p_uniforms.setValue( _gl, 'logDepthBufFC',
						2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );
				}
				if ( _currentCamera !== camera ) {
					_currentCamera = camera;
					refreshMaterial = true;		// set to true on material change
					refreshLights = true;		// remains set until update done
				}
				if ( material.isShaderMaterial ||
					material.isMeshPhongMaterial ||
					material.isMeshStandardMaterial ||
					material.envMap ) {
					var uCamPos = p_uniforms.map.cameraPosition;
					if ( uCamPos !== undefined ) {
						uCamPos.setValue( _gl,
							_vector3.setFromMatrixPosition( camera.matrixWorld ) );
					}
				}
				if ( material.isMeshPhongMaterial ||
					material.isMeshLambertMaterial ||
					material.isMeshBasicMaterial ||
					material.isMeshStandardMaterial ||
					material.isShaderMaterial ||
					material.skinning ) {
					p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );
				}
			}
			if ( material.skinning ) {
				p_uniforms.setOptional( _gl, object, 'bindMatrix' );
				p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );
				var skeleton = object.skeleton;
				if ( skeleton ) {
					var bones = skeleton.bones;
					if ( capabilities.floatVertexTextures ) {
						if ( skeleton.boneTexture === undefined ) {
							var size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix
							size = _Math.ceilPowerOfTwo( size );
							size = Math.max( size, 4 );
							var boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel
							boneMatrices.set( skeleton.boneMatrices ); // copy current values
							var boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );
							boneTexture.needsUpdate = true;
							skeleton.boneMatrices = boneMatrices;
							skeleton.boneTexture = boneTexture;
							skeleton.boneTextureSize = size;
						}
						p_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );
						p_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );
					} else {
						p_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );
					}
				}
			}
			if ( refreshMaterial ) {
				p_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );
				p_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );
				if ( material.lights ) {
					markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );
				}
				if ( fog && material.fog ) {
					refreshUniformsFog( m_uniforms, fog );
				}
				if ( material.isMeshBasicMaterial ) {
					refreshUniformsCommon( m_uniforms, material );
				} else if ( material.isMeshLambertMaterial ) {
					refreshUniformsCommon( m_uniforms, material );
					refreshUniformsLambert( m_uniforms, material );
				} else if ( material.isMeshPhongMaterial ) {
					refreshUniformsCommon( m_uniforms, material );
					if ( material.isMeshToonMaterial ) {
						refreshUniformsToon( m_uniforms, material );
					} else {
						refreshUniformsPhong( m_uniforms, material );
					}
				} else if ( material.isMeshStandardMaterial ) {
					refreshUniformsCommon( m_uniforms, material );
					if ( material.isMeshPhysicalMaterial ) {
						refreshUniformsPhysical( m_uniforms, material );
					} else {
						refreshUniformsStandard( m_uniforms, material );
					}
				} else if ( material.isMeshMatcapMaterial ) {
					refreshUniformsCommon( m_uniforms, material );
					refreshUniformsMatcap( m_uniforms, material );
				} else if ( material.isMeshDepthMaterial ) {
					refreshUniformsCommon( m_uniforms, material );
					refreshUniformsDepth( m_uniforms, material );
				} else if ( material.isMeshDistanceMaterial ) {
					refreshUniformsCommon( m_uniforms, material );
					refreshUniformsDistance( m_uniforms, material );
				} else if ( material.isMeshNormalMaterial ) {
					refreshUniformsCommon( m_uniforms, material );
					refreshUniformsNormal( m_uniforms, material );
				} else if ( material.isLineBasicMaterial ) {
					refreshUniformsLine( m_uniforms, material );
					if ( material.isLineDashedMaterial ) {
						refreshUniformsDash( m_uniforms, material );
					}
				} else if ( material.isPointsMaterial ) {
					refreshUniformsPoints( m_uniforms, material );
				} else if ( material.isSpriteMaterial ) {
					refreshUniformsSprites( m_uniforms, material );
				} else if ( material.isShadowMaterial ) {
					m_uniforms.color.value.copy( material.color );
					m_uniforms.opacity.value = material.opacity;
				}
				if ( m_uniforms.ltc_1 !== undefined ) m_uniforms.ltc_1.value = UniformsLib.LTC_1;
				if ( m_uniforms.ltc_2 !== undefined ) m_uniforms.ltc_2.value = UniformsLib.LTC_2;
				WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );
			}
			if ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {
				WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );
				material.uniformsNeedUpdate = false;
			}
			if ( material.isSpriteMaterial ) {
				p_uniforms.setValue( _gl, 'center', object.center );
			}
			p_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );
			p_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );
			p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );
			return program;
		}
		function refreshUniformsCommon( uniforms, material ) {
			uniforms.opacity.value = material.opacity;
			if ( material.color ) {
				uniforms.diffuse.value.copy( material.color );
			}
			if ( material.emissive ) {
				uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );
			}
			if ( material.map ) {
				uniforms.map.value = material.map;
			}
			if ( material.alphaMap ) {
				uniforms.alphaMap.value = material.alphaMap;
			}
			if ( material.specularMap ) {
				uniforms.specularMap.value = material.specularMap;
			}
			if ( material.envMap ) {
				uniforms.envMap.value = material.envMap;
				uniforms.flipEnvMap.value = material.envMap.isCubeTexture ? - 1 : 1;
				uniforms.reflectivity.value = material.reflectivity;
				uniforms.refractionRatio.value = material.refractionRatio;
				uniforms.maxMipLevel.value = properties.get( material.envMap ).__maxMipLevel;
			}
			if ( material.lightMap ) {
				uniforms.lightMap.value = material.lightMap;
				uniforms.lightMapIntensity.value = material.lightMapIntensity;
			}
			if ( material.aoMap ) {
				uniforms.aoMap.value = material.aoMap;
				uniforms.aoMapIntensity.value = material.aoMapIntensity;
			}
			var uvScaleMap;
			if ( material.map ) {
				uvScaleMap = material.map;
			} else if ( material.specularMap ) {
				uvScaleMap = material.specularMap;
			} else if ( material.displacementMap ) {
				uvScaleMap = material.displacementMap;
			} else if ( material.normalMap ) {
				uvScaleMap = material.normalMap;
			} else if ( material.bumpMap ) {
				uvScaleMap = material.bumpMap;
			} else if ( material.roughnessMap ) {
				uvScaleMap = material.roughnessMap;
			} else if ( material.metalnessMap ) {
				uvScaleMap = material.metalnessMap;
			} else if ( material.alphaMap ) {
				uvScaleMap = material.alphaMap;
			} else if ( material.emissiveMap ) {
				uvScaleMap = material.emissiveMap;
			}
			if ( uvScaleMap !== undefined ) {
				if ( uvScaleMap.isWebGLRenderTarget ) {
					uvScaleMap = uvScaleMap.texture;
				}
				if ( uvScaleMap.matrixAutoUpdate === true ) {
					uvScaleMap.updateMatrix();
				}
				uniforms.uvTransform.value.copy( uvScaleMap.matrix );
			}
		}
		function refreshUniformsLine( uniforms, material ) {
			uniforms.diffuse.value.copy( material.color );
			uniforms.opacity.value = material.opacity;
		}
		function refreshUniformsDash( uniforms, material ) {
			uniforms.dashSize.value = material.dashSize;
			uniforms.totalSize.value = material.dashSize + material.gapSize;
			uniforms.scale.value = material.scale;
		}
		function refreshUniformsPoints( uniforms, material ) {
			uniforms.diffuse.value.copy( material.color );
			uniforms.opacity.value = material.opacity;
			uniforms.size.value = material.size * _pixelRatio;
			uniforms.scale.value = _height * 0.5;
			uniforms.map.value = material.map;
			if ( material.map !== null ) {
				if ( material.map.matrixAutoUpdate === true ) {
					material.map.updateMatrix();
				}
				uniforms.uvTransform.value.copy( material.map.matrix );
			}
		}
		function refreshUniformsSprites( uniforms, material ) {
			uniforms.diffuse.value.copy( material.color );
			uniforms.opacity.value = material.opacity;
			uniforms.rotation.value = material.rotation;
			uniforms.map.value = material.map;
			if ( material.map !== null ) {
				if ( material.map.matrixAutoUpdate === true ) {
					material.map.updateMatrix();
				}
				uniforms.uvTransform.value.copy( material.map.matrix );
			}
		}
		function refreshUniformsFog( uniforms, fog ) {
			uniforms.fogColor.value.copy( fog.color );
			if ( fog.isFog ) {
				uniforms.fogNear.value = fog.near;
				uniforms.fogFar.value = fog.far;
			} else if ( fog.isFogExp2 ) {
				uniforms.fogDensity.value = fog.density;
			}
		}
		function refreshUniformsLambert( uniforms, material ) {
			if ( material.emissiveMap ) {
				uniforms.emissiveMap.value = material.emissiveMap;
			}
		}
		function refreshUniformsPhong( uniforms, material ) {
			uniforms.specular.value.copy( material.specular );
			uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )
			if ( material.emissiveMap ) {
				uniforms.emissiveMap.value = material.emissiveMap;
			}
			if ( material.bumpMap ) {
				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;
				if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;
			}
			if ( material.normalMap ) {
				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy( material.normalScale );
				if ( material.side === BackSide ) uniforms.normalScale.value.negate();
			}
			if ( material.displacementMap ) {
				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;
			}
		}
		function refreshUniformsToon( uniforms, material ) {
			refreshUniformsPhong( uniforms, material );
			if ( material.gradientMap ) {
				uniforms.gradientMap.value = material.gradientMap;
			}
		}
		function refreshUniformsStandard( uniforms, material ) {
			uniforms.roughness.value = material.roughness;
			uniforms.metalness.value = material.metalness;
			if ( material.roughnessMap ) {
				uniforms.roughnessMap.value = material.roughnessMap;
			}
			if ( material.metalnessMap ) {
				uniforms.metalnessMap.value = material.metalnessMap;
			}
			if ( material.emissiveMap ) {
				uniforms.emissiveMap.value = material.emissiveMap;
			}
			if ( material.bumpMap ) {
				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;
				if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;
			}
			if ( material.normalMap ) {
				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy( material.normalScale );
				if ( material.side === BackSide ) uniforms.normalScale.value.negate();
			}
			if ( material.displacementMap ) {
				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;
			}
			if ( material.envMap ) {
				uniforms.envMapIntensity.value = material.envMapIntensity;
			}
		}
		function refreshUniformsPhysical( uniforms, material ) {
			refreshUniformsStandard( uniforms, material );
			uniforms.reflectivity.value = material.reflectivity; // also part of uniforms common
			uniforms.clearCoat.value = material.clearCoat;
			uniforms.clearCoatRoughness.value = material.clearCoatRoughness;
		}
		function refreshUniformsMatcap( uniforms, material ) {
			if ( material.matcap ) {
				uniforms.matcap.value = material.matcap;
			}
			if ( material.bumpMap ) {
				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;
				if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;
			}
			if ( material.normalMap ) {
				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy( material.normalScale );
				if ( material.side === BackSide ) uniforms.normalScale.value.negate();
			}
			if ( material.displacementMap ) {
				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;
			}
		}
		function refreshUniformsDepth( uniforms, material ) {
			if ( material.displacementMap ) {
				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;
			}
		}
		function refreshUniformsDistance( uniforms, material ) {
			if ( material.displacementMap ) {
				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;
			}
			uniforms.referencePosition.value.copy( material.referencePosition );
			uniforms.nearDistance.value = material.nearDistance;
			uniforms.farDistance.value = material.farDistance;
		}
		function refreshUniformsNormal( uniforms, material ) {
			if ( material.bumpMap ) {
				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;
				if ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;
			}
			if ( material.normalMap ) {
				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy( material.normalScale );
				if ( material.side === BackSide ) uniforms.normalScale.value.negate();
			}
			if ( material.displacementMap ) {
				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;
			}
		}
		function markUniformsLightsNeedsUpdate( uniforms, value ) {
			uniforms.ambientLightColor.needsUpdate = value;
			uniforms.lightProbe.needsUpdate = value;
			uniforms.directionalLights.needsUpdate = value;
			uniforms.pointLights.needsUpdate = value;
			uniforms.spotLights.needsUpdate = value;
			uniforms.rectAreaLights.needsUpdate = value;
			uniforms.hemisphereLights.needsUpdate = value;
		}
		this.setFramebuffer = function ( value ) {
			if ( _framebuffer !== value ) _gl.bindFramebuffer( 36160, value );
			_framebuffer = value;
		};
		this.getActiveCubeFace = function () {
			return _currentActiveCubeFace;
		};
		this.getActiveMipmapLevel = function () {
			return _currentActiveMipmapLevel;
		};
		this.getRenderTarget = function () {
			return _currentRenderTarget;
		};
		this.setRenderTarget = function ( renderTarget, activeCubeFace, activeMipmapLevel ) {
			_currentRenderTarget = renderTarget;
			_currentActiveCubeFace = activeCubeFace;
			_currentActiveMipmapLevel = activeMipmapLevel;
			if ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {
				textures.setupRenderTarget( renderTarget );
			}
			var framebuffer = _framebuffer;
			var isCube = false;
			if ( renderTarget ) {
				var __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;
				if ( renderTarget.isWebGLRenderTargetCube ) {
					framebuffer = __webglFramebuffer[ activeCubeFace || 0 ];
					isCube = true;
				} else if ( renderTarget.isWebGLMultisampleRenderTarget ) {
					framebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;
				} else {
					framebuffer = __webglFramebuffer;
				}
				_currentViewport.copy( renderTarget.viewport );
				_currentScissor.copy( renderTarget.scissor );
				_currentScissorTest = renderTarget.scissorTest;
			} else {
				_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();
				_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();
				_currentScissorTest = _scissorTest;
			}
			if ( _currentFramebuffer !== framebuffer ) {
				_gl.bindFramebuffer( 36160, framebuffer );
				_currentFramebuffer = framebuffer;
			}
			state.viewport( _currentViewport );
			state.scissor( _currentScissor );
			state.setScissorTest( _currentScissorTest );
			if ( isCube ) {
				var textureProperties = properties.get( renderTarget.texture );
				_gl.framebufferTexture2D( 36160, 36064, 34069 + ( activeCubeFace || 0 ), textureProperties.__webglTexture, activeMipmapLevel || 0 );
			}
		};
		this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {
			if ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {
				console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
				return;
			}
			var framebuffer = properties.get( renderTarget ).__webglFramebuffer;
			if ( renderTarget.isWebGLRenderTargetCube && activeCubeFaceIndex !== undefined ) {
				framebuffer = framebuffer[ activeCubeFaceIndex ];
			}
			if ( framebuffer ) {
				var restore = false;
				if ( framebuffer !== _currentFramebuffer ) {
					_gl.bindFramebuffer( 36160, framebuffer );
					restore = true;
				}
				try {
					var texture = renderTarget.texture;
					var textureFormat = texture.format;
					var textureType = texture.type;
					if ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {
						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
						return;
					}
					if ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) && // IE11, Edge and Chrome Mac < 52 (#9513)
						! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox
						! ( textureType === HalfFloatType && ( capabilities.isWebGL2 ? extensions.get( 'EXT_color_buffer_float' ) : extensions.get( 'EXT_color_buffer_half_float' ) ) ) ) {
						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
						return;
					}
					if ( _gl.checkFramebufferStatus( 36160 ) === 36053 ) {
						if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {
							_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );
						}
					} else {
						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );
					}
				} finally {
					if ( restore ) {
						_gl.bindFramebuffer( 36160, _currentFramebuffer );
					}
				}
			}
		};
		this.copyFramebufferToTexture = function ( position, texture, level ) {
			var width = texture.image.width;
			var height = texture.image.height;
			var glFormat = utils.convert( texture.format );
			textures.setTexture2D( texture, 0 );
			_gl.copyTexImage2D( 3553, level || 0, glFormat, position.x, position.y, width, height, 0 );
		};
		this.copyTextureToTexture = function ( position, srcTexture, dstTexture, level ) {
			var width = srcTexture.image.width;
			var height = srcTexture.image.height;
			var glFormat = utils.convert( dstTexture.format );
			var glType = utils.convert( dstTexture.type );
			textures.setTexture2D( dstTexture, 0 );
			if ( srcTexture.isDataTexture ) {
				_gl.texSubImage2D( 3553, level || 0, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );
			} else {
				_gl.texSubImage2D( 3553, level || 0, position.x, position.y, glFormat, glType, srcTexture.image );
			}
		};
		if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {
			__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef
		}
	}
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */
	function FogExp2( color, density ) {
		this.name = '';
		this.color = new Color( color );
		this.density = ( density !== undefined ) ? density : 0.00025;
	}
	Object.assign( FogExp2.prototype, {
		isFogExp2: true,
		clone: function () {
			return new FogExp2( this.color, this.density );
		},
		toJSON: function ( /* meta */ ) {
			return {
				type: 'FogExp2',
				color: this.color.getHex(),
				density: this.density
			};
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */
	function Fog( color, near, far ) {
		this.name = '';
		this.color = new Color( color );
		this.near = ( near !== undefined ) ? near : 1;
		this.far = ( far !== undefined ) ? far : 1000;
	}
	Object.assign( Fog.prototype, {
		isFog: true,
		clone: function () {
			return new Fog( this.color, this.near, this.far );
		},
		toJSON: function ( /* meta */ ) {
			return {
				type: 'Fog',
				color: this.color.getHex(),
				near: this.near,
				far: this.far
			};
		}
	} );
	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */
	function InterleavedBuffer( array, stride ) {
		this.array = array;
		this.stride = stride;
		this.count = array !== undefined ? array.length / stride : 0;
		this.dynamic = false;
		this.updateRange = { offset: 0, count: - 1 };
		this.version = 0;
	}
	Object.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {
		set: function ( value ) {
			if ( value === true ) this.version ++;
		}
	} );
	Object.assign( InterleavedBuffer.prototype, {
		isInterleavedBuffer: true,
		onUploadCallback: function () {},
		setArray: function ( array ) {
			if ( Array.isArray( array ) ) {
				throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );
			}
			this.count = array !== undefined ? array.length / this.stride : 0;
			this.array = array;
			return this;
		},
		setDynamic: function ( value ) {
			this.dynamic = value;
			return this;
		},
		copy: function ( source ) {
			this.array = new source.array.constructor( source.array );
			this.count = source.count;
			this.stride = source.stride;
			this.dynamic = source.dynamic;
			return this;
		},
		copyAt: function ( index1, attribute, index2 ) {
			index1 *= this.stride;
			index2 *= attribute.stride;
			for ( var i = 0, l = this.stride; i < l; i ++ ) {
				this.array[ index1 + i ] = attribute.array[ index2 + i ];
			}
			return this;
		},
		set: function ( value, offset ) {
			if ( offset === undefined ) offset = 0;
			this.array.set( value, offset );
			return this;
		},
		clone: function () {
			return new this.constructor().copy( this );
		},
		onUpload: function ( callback ) {
			this.onUploadCallback = callback;
			return this;
		}
	} );
	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */
	function InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {
		this.data = interleavedBuffer;
		this.itemSize = itemSize;
		this.offset = offset;
		this.normalized = normalized === true;
	}
	Object.defineProperties( InterleavedBufferAttribute.prototype, {
		count: {
			get: function () {
				return this.data.count;
			}
		},
		array: {
			get: function () {
				return this.data.array;
			}
		}
	} );
	Object.assign( InterleavedBufferAttribute.prototype, {
		isInterleavedBufferAttribute: true,
		setX: function ( index, x ) {
			this.data.array[ index * this.data.stride + this.offset ] = x;
			return this;
		},
		setY: function ( index, y ) {
			this.data.array[ index * this.data.stride + this.offset + 1 ] = y;
			return this;
		},
		setZ: function ( index, z ) {
			this.data.array[ index * this.data.stride + this.offset + 2 ] = z;
			return this;
		},
		setW: function ( index, w ) {
			this.data.array[ index * this.data.stride + this.offset + 3 ] = w;
			return this;
		},
		getX: function ( index ) {
			return this.data.array[ index * this.data.stride + this.offset ];
		},
		getY: function ( index ) {
			return this.data.array[ index * this.data.stride + this.offset + 1 ];
		},
		getZ: function ( index ) {
			return this.data.array[ index * this.data.stride + this.offset + 2 ];
		},
		getW: function ( index ) {
			return this.data.array[ index * this.data.stride + this.offset + 3 ];
		},
		setXY: function ( index, x, y ) {
			index = index * this.data.stride + this.offset;
			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;
			return this;
		},
		setXYZ: function ( index, x, y, z ) {
			index = index * this.data.stride + this.offset;
			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;
			this.data.array[ index + 2 ] = z;
			return this;
		},
		setXYZW: function ( index, x, y, z, w ) {
			index = index * this.data.stride + this.offset;
			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;
			this.data.array[ index + 2 ] = z;
			this.data.array[ index + 3 ] = w;
			return this;
		}
	} );
	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  map: new THREE.Texture( <Image> ),
	 *  rotation: <float>,
	 *  sizeAttenuation: <bool>
	 * }
	 */
	function SpriteMaterial( parameters ) {
		Material.call( this );
		this.type = 'SpriteMaterial';
		this.color = new Color( 0xffffff );
		this.map = null;
		this.rotation = 0;
		this.sizeAttenuation = true;
		this.lights = false;
		this.transparent = true;
		this.setValues( parameters );
	}
	SpriteMaterial.prototype = Object.create( Material.prototype );
	SpriteMaterial.prototype.constructor = SpriteMaterial;
	SpriteMaterial.prototype.isSpriteMaterial = true;
	SpriteMaterial.prototype.copy = function ( source ) {
		Material.prototype.copy.call( this, source );
		this.color.copy( source.color );
		this.map = source.map;
		this.rotation = source.rotation;
		this.sizeAttenuation = source.sizeAttenuation;
		return this;
	};
	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */
	var geometry;
	function Sprite( material ) {
		Object3D.call( this );
		this.type = 'Sprite';
		if ( geometry === undefined ) {
			geometry = new BufferGeometry();
			var float32Array = new Float32Array( [
				- 0.5, - 0.5, 0, 0, 0,
				0.5, - 0.5, 0, 1, 0,
				0.5, 0.5, 0, 1, 1,
				- 0.5, 0.5, 0, 0, 1
			] );
			var interleavedBuffer = new InterleavedBuffer( float32Array, 5 );
			geometry.setIndex( [ 0, 1, 2,	0, 2, 3 ] );
			geometry.addAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );
			geometry.addAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );
		}
		this.geometry = geometry;
		this.material = ( material !== undefined ) ? material : new SpriteMaterial();
		this.center = new Vector2( 0.5, 0.5 );
	}
	Sprite.prototype = Object.assign( Object.create( Object3D.prototype ), {
		constructor: Sprite,
		isSprite: true,
		raycast: ( function () {
			var intersectPoint = new Vector3();
			var worldScale = new Vector3();
			var mvPosition = new Vector3();
			var alignedPosition = new Vector2();
			var rotatedPosition = new Vector2();
			var viewWorldMatrix = new Matrix4();
			var vA = new Vector3();
			var vB = new Vector3();
			var vC = new Vector3();
			var uvA = new Vector2();
			var uvB = new Vector2();
			var uvC = new Vector2();
			function transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {
				alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );
				if ( sin !== undefined ) {
					rotatedPosition.x = ( cos * alignedPosition.x ) - ( sin * alignedPosition.y );
					rotatedPosition.y = ( sin * alignedPosition.x ) + ( cos * alignedPosition.y );
				} else {
					rotatedPosition.copy( alignedPosition );
				}
				vertexPosition.copy( mvPosition );
				vertexPosition.x += rotatedPosition.x;
				vertexPosition.y += rotatedPosition.y;
				vertexPosition.applyMatrix4( viewWorldMatrix );
			}
			return function raycast( raycaster, intersects ) {
				worldScale.setFromMatrixScale( this.matrixWorld );
				viewWorldMatrix.copy( raycaster._camera.matrixWorld );
				this.modelViewMatrix.multiplyMatrices( raycaster._camera.matrixWorldInverse, this.matrixWorld );
				mvPosition.setFromMatrixPosition( this.modelViewMatrix );
				if ( raycaster._camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {
					worldScale.multiplyScalar( - mvPosition.z );
				}
				var rotation = this.material.rotation;
				var sin, cos;
				if ( rotation !== 0 ) {
					cos = Math.cos( rotation );
					sin = Math.sin( rotation );
				}
				var center = this.center;
				transformVertex( vA.set( - 0.5, - 0.5, 0 ), mvPosition, center, worldScale, sin, cos );
				transformVertex( vB.set( 0.5, - 0.5, 0 ), mvPosition, center, worldScale, sin, cos );
				transformVertex( vC.set( 0.5, 0.5, 0 ), mvPosition, center, worldScale, sin, cos );
				uvA.set( 0, 0 );
				uvB.set( 1, 0 );
				uvC.set( 1, 1 );
				var intersect = raycaster.ray.intersectTriangle( vA, vB, vC, false, intersectPoint );
				if ( intersect === null ) {
					transformVertex( vB.set( - 0.5, 0.5, 0 ), mvPosition, center, worldScale, sin, cos );
					uvB.set( 0, 1 );
					intersect = raycaster.ray.intersectTriangle( vA, vC, vB, false, intersectPoint );
					if ( intersect === null ) {
						return;
					}
				}
				var distance = raycaster.ray.origin.distanceTo( intersectPoint );
				if ( distance < raycaster.near || distance > raycaster.far ) return;
				intersects.push( {
					distance: distance,
					point: intersectPoint.clone(),
					uv: Triangle.getUV( intersectPoint, vA, vB, vC, uvA, uvB, uvC, new Vector2() ),
					face: null,
					object: this
				} );
			};
		}() ),
		clone: function () {
			return new this.constructor( this.material ).copy( this );
		},
		copy: function ( source ) {
			Object3D.prototype.copy.call( this, source );
			if ( source.center !== undefined ) this.center.copy( source.center );
			return this;
		}
	} );
	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */
	function LOD() {
		Object3D.call( this );
		this.type = 'LOD';
		Object.defineProperties( this, {
			levels: {
				enumerable: true,
				value: []
			}
		} );
		this.autoUpdate = true;
	}
	LOD.prototype = Object.assign( Object.create( Object3D.prototype ), {
		constructor: LOD,
		isLOD: true,
		copy: function ( source ) {
			Object3D.prototype.copy.call( this, source, false );
			var levels = source.levels;
			for ( var i = 0, l = levels.length; i < l; i ++ ) {
				var level = levels[ i ];
				this.addLevel( level.object.clone(), level.distance );
			}
			return this;
		},
		addLevel: function ( object, distance ) {
			if ( distance === undefined ) distance = 0;
			distance = Math.abs( distance );
			var levels = this.levels;
			for ( var l = 0; l < levels.length; l ++ ) {
				if ( distance < levels[ l ].distance ) {
					break;
				}
			}
			levels.splice( l, 0, { distance: distance, object: object } );
			this.add( object );
			return this;
		},
		getObjectForDistance: function ( distance ) {
			var levels = this.levels;
			for ( var i = 1, l = levels.length; i < l; i ++ ) {
				if ( distance < levels[ i ].distance ) {
					break;
				}
			}
			return levels[ i - 1 ].object;
		},
		raycast: ( function () {
			var matrixPosition = new Vector3();
			return function raycast( raycaster, intersects ) {
				matrixPosition.setFromMatrixPosition( this.matrixWorld );
				var distance = raycaster.ray.origin.distanceTo( matrixPosition );
				this.getObjectForDistance( distance ).raycast( raycaster, intersects );
			};
		}() ),
		update: function () {
			var v1 = new Vector3();
			var v2 = new Vector3();
			return function update( camera ) {
				var levels = this.levels;
				if ( levels.length > 1 ) {
					v1.setFromMatrixPosition( camera.matrixWorld );
					v2.setFromMatrixPosition( this.matrixWorld );
					var distance = v1.distanceTo( v2 );
					levels[ 0 ].object.visible = true;
					for ( var i = 1, l = levels.length; i < l; i ++ ) {
						if ( distance >= levels[ i ].distance ) {
							levels[ i - 1 ].object.visible = false;
							levels[ i ].object.visible = true;
						} else {
							break;
						}
					}
					for ( ; i < l; i ++ ) {
						levels[ i ].object.visible = false;
					}
				}
			};
		}(),
		toJSON: function ( meta ) {
			var data = Object3D.prototype.toJSON.call( this, meta );
			data.object.levels = [];
			var levels = this.levels;
			for ( var i = 0, l = levels.length; i < l; i ++ ) {
				var level = levels[ i ];
				data.object.levels.push( {
					object: level.object.uuid,
					distance: level.distance
				} );
			}
			return data;
		}
	} );
	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author ikerr / http://verold.com
	 */
	function SkinnedMesh( geometry, material ) {
		if ( geometry && geometry.isGeometry ) {
			console.error( 'THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );
		}
		Mesh.call( this, geometry, material );
		this.type = 'SkinnedMesh';
		this.bindMode = 'attached';
		this.bindMatrix = new Matrix4();
		this.bindMatrixInverse = new Matrix4();
	}
	SkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {
		constructor: SkinnedMesh,
		isSkinnedMesh: true,
		bind: function ( skeleton, bindMatrix ) {
			this.skeleton = skeleton;
			if ( bindMatrix === undefined ) {
				this.updateMatrixWorld( true );
				this.skeleton.calculateInverses();
				bindMatrix = this.matrixWorld;
			}
			this.bindMatrix.copy( bindMatrix );
			this.bindMatrixInverse.getInverse( bindMatrix );
		},
		pose: function () {
			this.skeleton.pose();
		},
		normalizeSkinWeights: function () {
			var vector = new Vector4();
			var skinWeight = this.geometry.attributes.skinWeight;
			for ( var i = 0, l = skinWeight.count; i < l; i ++ ) {
				vector.x = skinWeight.getX( i );
				vector.y = skinWeight.getY( i );
				vector.z = skinWeight.getZ( i );
				vector.w = skinWeight.getW( i );
				var scale = 1.0 / vector.manhattanLength();
				if ( scale !== Infinity ) {
					vector.multiplyScalar( scale );
				} else {
					vector.set( 1, 0, 0, 0 ); // do something reasonable
				}
				skinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );
			}
		},
		updateMatrixWorld: function ( force ) {
			Mesh.prototype.updateMatrixWorld.call( this, force );
			if ( this.bindMode === 'attached' ) {
				this.bindMatrixInverse.getInverse( this.matrixWorld );
			} else if ( this.bindMode === 'detached' ) {
				this.bindMatrixInverse.getInverse( this.bindMatrix );
			} else {
				console.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );
			}
		},
		clone: function () {
			return new this.constructor( this.geometry, this.material ).copy( this );
		}
	} );
	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author michael guerrero / http://realitymeltdown.com
	 * @author ikerr / http://verold.com
	 */
	function Skeleton( bones, boneInverses ) {
		bones = bones || [];
		this.bones = bones.slice( 0 );
		this.boneMatrices = new Float32Array( this.bones.length * 16 );
		if ( boneInverses === undefined ) {
			this.calculateInverses();
		} else {
			if ( this.bones.length === boneInverses.length ) {
				this.boneInverses = boneInverses.slice( 0 );
			} else {
				console.warn( 'THREE.Skeleton boneInverses is the wrong length.' );
				this.boneInverses = [];
				for ( var i = 0, il = this.bones.length; i < il; i ++ ) {
					this.boneInverses.push( new Matrix4() );
				}
			}
		}
	}
	Object.assign( Skeleton.prototype, {
		calculateInverses: function () {
			this.boneInverses = [];
			for ( var i = 0, il = this.bones.length; i < il; i ++ ) {
				var inverse = new Matrix4();
				if ( this.bones[ i ] ) {
					inverse.getInverse( this.bones[ i ].matrixWorld );
				}
				this.boneInverses.push( inverse );
			}
		},
		pose: function () {
			var bone, i, il;
			for ( i = 0, il = this.bones.length; i < il; i ++ ) {
				bone = this.bones[ i ];
				if ( bone ) {
					bone.matrixWorld.getInverse( this.boneInverses[ i ] );
				}
			}
			for ( i = 0, il = this.bones.length; i < il; i ++ ) {
				bone = this.bones[ i ];
				if ( bone ) {
					if ( bone.parent && bone.parent.isBone ) {
						bone.matrix.getInverse( bone.parent.matrixWorld );
						bone.matrix.multiply( bone.matrixWorld );
					} else {
						bone.matrix.copy( bone.matrixWorld );
					}
					bone.matrix.decompose( bone.position, bone.quaternion, bone.scale );
				}
			}
		},
		update: ( function () {
			var offsetMatrix = new Matrix4();
			var identityMatrix = new Matrix4();
			return function update() {
				var bones = this.bones;
				var boneInverses = this.boneInverses;
				var boneMatrices = this.boneMatrices;
				var boneTexture = this.boneTexture;
				for ( var i = 0, il = bones.length; i < il; i ++ ) {
					var matrix = bones[ i ] ? bones[ i ].matrixWorld : identityMatrix;
					offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );
					offsetMatrix.toArray( boneMatrices, i * 16 );
				}
				if ( boneTexture !== undefined ) {
					boneTexture.needsUpdate = true;
				}
			};
		} )(),
		clone: function () {
			return new Skeleton( this.bones, this.boneInverses );
		},
		getBoneByName: function ( name ) {
			for ( var i = 0, il = this.bones.length; i < il; i ++ ) {
				var bone = this.bones[ i ];
				if ( bone.name === name ) {
					return bone;
				}
			}
			return undefined;
		}
	} );
	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author ikerr / http://verold.com
	 */
	function Bone() {
		Object3D.call( this );
		this.type = 'Bone';
	}
	Bone.prototype = Object.assign( Object.create( Object3D.prototype ), {
		constructor: Bone,
		isBone: true
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  linewidth: <float>,
	 *  linecap: "round",
	 *  linejoin: "round"
	 * }
	 */
	function LineBasicMaterial( parameters ) {
		Material.call( this );
		this.type = 'LineBasicMaterial';
		this.color = new Color( 0xffffff );
		this.linewidth = 1;
		this.linecap = 'round';
		this.linejoin = 'round';
		this.lights = false;
		this.setValues( parameters );
	}
	LineBasicMaterial.prototype = Object.create( Material.prototype );
	LineBasicMaterial.prototype.constructor = LineBasicMaterial;
	LineBasicMaterial.prototype.isLineBasicMaterial = true;
	LineBasicMaterial.prototype.copy = function ( source ) {
		Material.prototype.copy.call( this, source );
		this.color.copy( source.color );
		this.linewidth = source.linewidth;
		this.linecap = source.linecap;
		this.linejoin = source.linejoin;
		return this;
	};
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function Line( geometry, material, mode ) {
		if ( mode === 1 ) {
			console.error( 'THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.' );
		}
		Object3D.call( this );
		this.type = 'Line';
		this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
		this.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );
	}
	Line.prototype = Object.assign( Object.create( Object3D.prototype ), {
		constructor: Line,
		isLine: true,
		computeLineDistances: ( function () {
			var start = new Vector3();
			var end = new Vector3();
			return function computeLineDistances() {
				var geometry = this.geometry;
				if ( geometry.isBufferGeometry ) {
					if ( geometry.index === null ) {
						var positionAttribute = geometry.attributes.position;
						var lineDistances = [ 0 ];
						for ( var i = 1, l = positionAttribute.count; i < l; i ++ ) {
							start.fromBufferAttribute( positionAttribute, i - 1 );
							end.fromBufferAttribute( positionAttribute, i );
							lineDistances[ i ] = lineDistances[ i - 1 ];
							lineDistances[ i ] += start.distanceTo( end );
						}
						geometry.addAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );
					} else {
						console.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );
					}
				} else if ( geometry.isGeometry ) {
					var vertices = geometry.vertices;
					var lineDistances = geometry.lineDistances;
					lineDistances[ 0 ] = 0;
					for ( var i = 1, l = vertices.length; i < l; i ++ ) {
						lineDistances[ i ] = lineDistances[ i - 1 ];
						lineDistances[ i ] += vertices[ i - 1 ].distanceTo( vertices[ i ] );
					}
				}
				return this;
			};
		}() ),
		raycast: ( function () {
			var inverseMatrix = new Matrix4();
			var ray = new Ray();
			var sphere = new Sphere();
			return function raycast( raycaster, intersects ) {
				var precision = raycaster.linePrecision;
				var geometry = this.geometry;
				var matrixWorld = this.matrixWorld;
				if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
				sphere.copy( geometry.boundingSphere );
				sphere.applyMatrix4( matrixWorld );
				sphere.radius += precision;
				if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;
				inverseMatrix.getInverse( matrixWorld );
				ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );
				var localPrecision = precision / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
				var localPrecisionSq = localPrecision * localPrecision;
				var vStart = new Vector3();
				var vEnd = new Vector3();
				var interSegment = new Vector3();
				var interRay = new Vector3();
				var step = ( this && this.isLineSegments ) ? 2 : 1;
				if ( geometry.isBufferGeometry ) {
					var index = geometry.index;
					var attributes = geometry.attributes;
					var positions = attributes.position.array;
					if ( index !== null ) {
						var indices = index.array;
						for ( var i = 0, l = indices.length - 1; i < l; i += step ) {
							var a = indices[ i ];
							var b = indices[ i + 1 ];
							vStart.fromArray( positions, a * 3 );
							vEnd.fromArray( positions, b * 3 );
							var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );
							if ( distSq > localPrecisionSq ) continue;
							interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation
							var distance = raycaster.ray.origin.distanceTo( interRay );
							if ( distance < raycaster.near || distance > raycaster.far ) continue;
							intersects.push( {
								distance: distance,
								point: interSegment.clone().applyMatrix4( this.matrixWorld ),
								index: i,
								face: null,
								faceIndex: null,
								object: this
							} );
						}
					} else {
						for ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {
							vStart.fromArray( positions, 3 * i );
							vEnd.fromArray( positions, 3 * i + 3 );
							var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );
							if ( distSq > localPrecisionSq ) continue;
							interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation
							var distance = raycaster.ray.origin.distanceTo( interRay );
							if ( distance < raycaster.near || distance > raycaster.far ) continue;
							intersects.push( {
								distance: distance,
								point: interSegment.clone().applyMatrix4( this.matrixWorld ),
								index: i,
								face: null,
								faceIndex: null,
								object: this
							} );
						}
					}
				} else if ( geometry.isGeometry ) {
					var vertices = geometry.vertices;
					var nbVertices = vertices.length;
					for ( var i = 0; i < nbVertices - 1; i += step ) {
						var distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );
						if ( distSq > localPrecisionSq ) continue;
						interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation
						var distance = raycaster.ray.origin.distanceTo( interRay );
						if ( distance < raycaster.near || distance > raycaster.far ) continue;
						intersects.push( {
							distance: distance,
							point: interSegment.clone().applyMatrix4( this.matrixWorld ),
							index: i,
							face: null,
							faceIndex: null,
							object: this
						} );
					}
				}
			};
		}() ),
		clone: function () {
			return new this.constructor( this.geometry, this.material ).copy( this );
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function LineSegments( geometry, material ) {
		Line.call( this, geometry, material );
		this.type = 'LineSegments';
	}
	LineSegments.prototype = Object.assign( Object.create( Line.prototype ), {
		constructor: LineSegments,
		isLineSegments: true,
		computeLineDistances: ( function () {
			var start = new Vector3();
			var end = new Vector3();
			return function computeLineDistances() {
				var geometry = this.geometry;
				if ( geometry.isBufferGeometry ) {
					if ( geometry.index === null ) {
						var positionAttribute = geometry.attributes.position;
						var lineDistances = [];
						for ( var i = 0, l = positionAttribute.count; i < l; i += 2 ) {
							start.fromBufferAttribute( positionAttribute, i );
							end.fromBufferAttribute( positionAttribute, i + 1 );
							lineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];
							lineDistances[ i + 1 ] = lineDistances[ i ] + start.distanceTo( end );
						}
						geometry.addAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );
					} else {
						console.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );
					}
				} else if ( geometry.isGeometry ) {
					var vertices = geometry.vertices;
					var lineDistances = geometry.lineDistances;
					for ( var i = 0, l = vertices.length; i < l; i += 2 ) {
						start.copy( vertices[ i ] );
						end.copy( vertices[ i + 1 ] );
						lineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];
						lineDistances[ i + 1 ] = lineDistances[ i ] + start.distanceTo( end );
					}
				}
				return this;
			};
		}() )
	} );
	/**
	 * @author mgreter / http://github.com/mgreter
	 */
	function LineLoop( geometry, material ) {
		Line.call( this, geometry, material );
		this.type = 'LineLoop';
	}
	LineLoop.prototype = Object.assign( Object.create( Line.prototype ), {
		constructor: LineLoop,
		isLineLoop: true,
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  size: <float>,
	 *  sizeAttenuation: <bool>
	 *
	 *  morphTargets: <bool>
	 * }
	 */
	function PointsMaterial( parameters ) {
		Material.call( this );
		this.type = 'PointsMaterial';
		this.color = new Color( 0xffffff );
		this.map = null;
		this.size = 1;
		this.sizeAttenuation = true;
		this.morphTargets = false;
		this.lights = false;
		this.setValues( parameters );
	}
	PointsMaterial.prototype = Object.create( Material.prototype );
	PointsMaterial.prototype.constructor = PointsMaterial;
	PointsMaterial.prototype.isPointsMaterial = true;
	PointsMaterial.prototype.copy = function ( source ) {
		Material.prototype.copy.call( this, source );
		this.color.copy( source.color );
		this.map = source.map;
		this.size = source.size;
		this.sizeAttenuation = source.sizeAttenuation;
		this.morphTargets = source.morphTargets;
		return this;
	};
	/**
	 * @author alteredq / http://alteredqualia.com/
	 */
	function Points( geometry, material ) {
		Object3D.call( this );
		this.type = 'Points';
		this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
		this.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );
		this.updateMorphTargets();
	}
	Points.prototype = Object.assign( Object.create( Object3D.prototype ), {
		constructor: Points,
		isPoints: true,
		raycast: ( function () {
			var inverseMatrix = new Matrix4();
			var ray = new Ray();
			var sphere = new Sphere();
			return function raycast( raycaster, intersects ) {
				var object = this;
				var geometry = this.geometry;
				var matrixWorld = this.matrixWorld;
				var threshold = raycaster.params.Points.threshold;
				if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
				sphere.copy( geometry.boundingSphere );
				sphere.applyMatrix4( matrixWorld );
				sphere.radius += threshold;
				if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;
				inverseMatrix.getInverse( matrixWorld );
				ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );
				var localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
				var localThresholdSq = localThreshold * localThreshold;
				var position = new Vector3();
				var intersectPoint = new Vector3();
				function testPoint( point, index ) {
					var rayPointDistanceSq = ray.distanceSqToPoint( point );
					if ( rayPointDistanceSq < localThresholdSq ) {
						ray.closestPointToPoint( point, intersectPoint );
						intersectPoint.applyMatrix4( matrixWorld );
						var distance = raycaster.ray.origin.distanceTo( intersectPoint );
						if ( distance < raycaster.near || distance > raycaster.far ) return;
						intersects.push( {
							distance: distance,
							distanceToRay: Math.sqrt( rayPointDistanceSq ),
							point: intersectPoint.clone(),
							index: index,
							face: null,
							object: object
						} );
					}
				}
				if ( geometry.isBufferGeometry ) {
					var index = geometry.index;
					var attributes = geometry.attributes;
					var positions = attributes.position.array;
					if ( index !== null ) {
						var indices = index.array;
						for ( var i = 0, il = indices.length; i < il; i ++ ) {
							var a = indices[ i ];
							position.fromArray( positions, a * 3 );
							testPoint( position, a );
						}
					} else {
						for ( var i = 0, l = positions.length / 3; i < l; i ++ ) {
							position.fromArray( positions, i * 3 );
							testPoint( position, i );
						}
					}
				} else {
					var vertices = geometry.vertices;
					for ( var i = 0, l = vertices.length; i < l; i ++ ) {
						testPoint( vertices[ i ], i );
					}
				}
			};
		}() ),
		updateMorphTargets: function () {
			var geometry = this.geometry;
			var m, ml, name;
			if ( geometry.isBufferGeometry ) {
				var morphAttributes = geometry.morphAttributes;
				var keys = Object.keys( morphAttributes );
				if ( keys.length > 0 ) {
					var morphAttribute = morphAttributes[ keys[ 0 ] ];
					if ( morphAttribute !== undefined ) {
						this.morphTargetInfluences = [];
						this.morphTargetDictionary = {};
						for ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {
							name = morphAttribute[ m ].name || String( m );
							this.morphTargetInfluences.push( 0 );
							this.morphTargetDictionary[ name ] = m;
						}
					}
				}
			} else {
				var morphTargets = geometry.morphTargets;
				if ( morphTargets !== undefined && morphTargets.length > 0 ) {
					console.error( 'THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );
				}
			}
		},
		clone: function () {
			return new this.constructor( this.geometry, this.material ).copy( this );
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {
		Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );
		this.format = format !== undefined ? format : RGBFormat;
		this.minFilter = minFilter !== undefined ? minFilter : LinearFilter;
		this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
		this.generateMipmaps = false;
	}
	VideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {
		constructor: VideoTexture,
		isVideoTexture: true,
		update: function () {
			var video = this.image;
			if ( video.readyState >= video.HAVE_CURRENT_DATA ) {
				this.needsUpdate = true;
			}
		}
	} );
	/**
	 * @author alteredq / http://alteredqualia.com/
	 */
	function CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {
		Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );
		this.image = { width: width, height: height };
		this.mipmaps = mipmaps;
		this.flipY = false;
		this.generateMipmaps = false;
	}
	CompressedTexture.prototype = Object.create( Texture.prototype );
	CompressedTexture.prototype.constructor = CompressedTexture;
	CompressedTexture.prototype.isCompressedTexture = true;
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {
		Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );
		this.needsUpdate = true;
	}
	CanvasTexture.prototype = Object.create( Texture.prototype );
	CanvasTexture.prototype.constructor = CanvasTexture;
	CanvasTexture.prototype.isCanvasTexture = true;
	/**
	 * @author Matt DesLauriers / @mattdesl
	 * @author atix / arthursilber.de
	 */
	function DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {
		format = format !== undefined ? format : DepthFormat;
		if ( format !== DepthFormat && format !== DepthStencilFormat ) {
			throw new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );
		}
		if ( type === undefined && format === DepthFormat ) type = UnsignedShortType;
		if ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;
		Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );
		this.image = { width: width, height: height };
		this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
		this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;
		this.flipY = false;
		this.generateMipmaps	= false;
	}
	DepthTexture.prototype = Object.create( Texture.prototype );
	DepthTexture.prototype.constructor = DepthTexture;
	DepthTexture.prototype.isDepthTexture = true;
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */
	function WireframeGeometry( geometry ) {
		BufferGeometry.call( this );
		this.type = 'WireframeGeometry';
		var vertices = [];
		var i, j, l, o, ol;
		var edge = [ 0, 0 ], edges = {}, e, edge1, edge2;
		var key, keys = [ 'a', 'b', 'c' ];
		var vertex;
		if ( geometry && geometry.isGeometry ) {
			var faces = geometry.faces;
			for ( i = 0, l = faces.length; i < l; i ++ ) {
				var face = faces[ i ];
				for ( j = 0; j < 3; j ++ ) {
					edge1 = face[ keys[ j ] ];
					edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
					edge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates
					edge[ 1 ] = Math.max( edge1, edge2 );
					key = edge[ 0 ] + ',' + edge[ 1 ];
					if ( edges[ key ] === undefined ) {
						edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };
					}
				}
			}
			for ( key in edges ) {
				e = edges[ key ];
				vertex = geometry.vertices[ e.index1 ];
				vertices.push( vertex.x, vertex.y, vertex.z );
				vertex = geometry.vertices[ e.index2 ];
				vertices.push( vertex.x, vertex.y, vertex.z );
			}
		} else if ( geometry && geometry.isBufferGeometry ) {
			var position, indices, groups;
			var group, start, count;
			var index1, index2;
			vertex = new Vector3();
			if ( geometry.index !== null ) {
				position = geometry.attributes.position;
				indices = geometry.index;
				groups = geometry.groups;
				if ( groups.length === 0 ) {
					groups = [ { start: 0, count: indices.count, materialIndex: 0 } ];
				}
				for ( o = 0, ol = groups.length; o < ol; ++ o ) {
					group = groups[ o ];
					start = group.start;
					count = group.count;
					for ( i = start, l = ( start + count ); i < l; i += 3 ) {
						for ( j = 0; j < 3; j ++ ) {
							edge1 = indices.getX( i + j );
							edge2 = indices.getX( i + ( j + 1 ) % 3 );
							edge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates
							edge[ 1 ] = Math.max( edge1, edge2 );
							key = edge[ 0 ] + ',' + edge[ 1 ];
							if ( edges[ key ] === undefined ) {
								edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };
							}
						}
					}
				}
				for ( key in edges ) {
					e = edges[ key ];
					vertex.fromBufferAttribute( position, e.index1 );
					vertices.push( vertex.x, vertex.y, vertex.z );
					vertex.fromBufferAttribute( position, e.index2 );
					vertices.push( vertex.x, vertex.y, vertex.z );
				}
			} else {
				position = geometry.attributes.position;
				for ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {
					for ( j = 0; j < 3; j ++ ) {
						index1 = 3 * i + j;
						vertex.fromBufferAttribute( position, index1 );
						vertices.push( vertex.x, vertex.y, vertex.z );
						index2 = 3 * i + ( ( j + 1 ) % 3 );
						vertex.fromBufferAttribute( position, index2 );
						vertices.push( vertex.x, vertex.y, vertex.z );
					}
				}
			}
		}
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	}
	WireframeGeometry.prototype = Object.create( BufferGeometry.prototype );
	WireframeGeometry.prototype.constructor = WireframeGeometry;
	/**
	 * @author zz85 / https://github.com/zz85
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 * Parametric Surfaces Geometry
	 * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
	 */
	function ParametricGeometry( func, slices, stacks ) {
		Geometry.call( this );
		this.type = 'ParametricGeometry';
		this.parameters = {
			func: func,
			slices: slices,
			stacks: stacks
		};
		this.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );
		this.mergeVertices();
	}
	ParametricGeometry.prototype = Object.create( Geometry.prototype );
	ParametricGeometry.prototype.constructor = ParametricGeometry;
	function ParametricBufferGeometry( func, slices, stacks ) {
		BufferGeometry.call( this );
		this.type = 'ParametricBufferGeometry';
		this.parameters = {
			func: func,
			slices: slices,
			stacks: stacks
		};
		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];
		var EPS = 0.00001;
		var normal = new Vector3();
		var p0 = new Vector3(), p1 = new Vector3();
		var pu = new Vector3(), pv = new Vector3();
		var i, j;
		if ( func.length < 3 ) {
			console.error( 'THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.' );
		}
		var sliceCount = slices + 1;
		for ( i = 0; i <= stacks; i ++ ) {
			var v = i / stacks;
			for ( j = 0; j <= slices; j ++ ) {
				var u = j / slices;
				func( u, v, p0 );
				vertices.push( p0.x, p0.y, p0.z );
				if ( u - EPS >= 0 ) {
					func( u - EPS, v, p1 );
					pu.subVectors( p0, p1 );
				} else {
					func( u + EPS, v, p1 );
					pu.subVectors( p1, p0 );
				}
				if ( v - EPS >= 0 ) {
					func( u, v - EPS, p1 );
					pv.subVectors( p0, p1 );
				} else {
					func( u, v + EPS, p1 );
					pv.subVectors( p1, p0 );
				}
				normal.crossVectors( pu, pv ).normalize();
				normals.push( normal.x, normal.y, normal.z );
				uvs.push( u, v );
			}
		}
		for ( i = 0; i < stacks; i ++ ) {
			for ( j = 0; j < slices; j ++ ) {
				var a = i * sliceCount + j;
				var b = i * sliceCount + j + 1;
				var c = ( i + 1 ) * sliceCount + j + 1;
				var d = ( i + 1 ) * sliceCount + j;
				indices.push( a, b, d );
				indices.push( b, c, d );
			}
		}
		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
	}
	ParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	ParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;
	/**
	 * @author clockworkgeek / https://github.com/clockworkgeek
	 * @author timothypratley / https://github.com/timothypratley
	 * @author WestLangley / http://github.com/WestLangley
	 * @author Mugen87 / https://github.com/Mugen87
	 */
	function PolyhedronGeometry( vertices, indices, radius, detail ) {
		Geometry.call( this );
		this.type = 'PolyhedronGeometry';
		this.parameters = {
			vertices: vertices,
			indices: indices,
			radius: radius,
			detail: detail
		};
		this.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );
		this.mergeVertices();
	}
	PolyhedronGeometry.prototype = Object.create( Geometry.prototype );
	PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;
	function PolyhedronBufferGeometry( vertices, indices, radius, detail ) {
		BufferGeometry.call( this );
		this.type = 'PolyhedronBufferGeometry';
		this.parameters = {
			vertices: vertices,
			indices: indices,
			radius: radius,
			detail: detail
		};
		radius = radius || 1;
		detail = detail || 0;
		var vertexBuffer = [];
		var uvBuffer = [];
		subdivide( detail );
		applyRadius( radius );
		generateUVs();
		this.addAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );
		if ( detail === 0 ) {
			this.computeVertexNormals(); // flat normals
		} else {
			this.normalizeNormals(); // smooth normals
		}
		function subdivide( detail ) {
			var a = new Vector3();
			var b = new Vector3();
			var c = new Vector3();
			for ( var i = 0; i < indices.length; i += 3 ) {
				getVertexByIndex( indices[ i + 0 ], a );
				getVertexByIndex( indices[ i + 1 ], b );
				getVertexByIndex( indices[ i + 2 ], c );
				subdivideFace( a, b, c, detail );
			}
		}
		function subdivideFace( a, b, c, detail ) {
			var cols = Math.pow( 2, detail );
			var v = [];
			var i, j;
			for ( i = 0; i <= cols; i ++ ) {
				v[ i ] = [];
				var aj = a.clone().lerp( c, i / cols );
				var bj = b.clone().lerp( c, i / cols );
				var rows = cols - i;
				for ( j = 0; j <= rows; j ++ ) {
					if ( j === 0 && i === cols ) {
						v[ i ][ j ] = aj;
					} else {
						v[ i ][ j ] = aj.clone().lerp( bj, j / rows );
					}
				}
			}
			for ( i = 0; i < cols; i ++ ) {
				for ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {
					var k = Math.floor( j / 2 );
					if ( j % 2 === 0 ) {
						pushVertex( v[ i ][ k + 1 ] );
						pushVertex( v[ i + 1 ][ k ] );
						pushVertex( v[ i ][ k ] );
					} else {
						pushVertex( v[ i ][ k + 1 ] );
						pushVertex( v[ i + 1 ][ k + 1 ] );
						pushVertex( v[ i + 1 ][ k ] );
					}
				}
			}
		}
		function applyRadius( radius ) {
			var vertex = new Vector3();
			for ( var i = 0; i < vertexBuffer.length; i += 3 ) {
				vertex.x = vertexBuffer[ i + 0 ];
				vertex.y = vertexBuffer[ i + 1 ];
				vertex.z = vertexBuffer[ i + 2 ];
				vertex.normalize().multiplyScalar( radius );
				vertexBuffer[ i + 0 ] = vertex.x;
				vertexBuffer[ i + 1 ] = vertex.y;
				vertexBuffer[ i + 2 ] = vertex.z;
			}
		}
		function generateUVs() {
			var vertex = new Vector3();
			for ( var i = 0; i < vertexBuffer.length; i += 3 ) {
				vertex.x = vertexBuffer[ i + 0 ];
				vertex.y = vertexBuffer[ i + 1 ];
				vertex.z = vertexBuffer[ i + 2 ];
				var u = azimuth( vertex ) / 2 / Math.PI + 0.5;
				var v = inclination( vertex ) / Math.PI + 0.5;
				uvBuffer.push( u, 1 - v );
			}
			correctUVs();
			correctSeam();
		}
		function correctSeam() {
			for ( var i = 0; i < uvBuffer.length; i += 6 ) {
				var x0 = uvBuffer[ i + 0 ];
				var x1 = uvBuffer[ i + 2 ];
				var x2 = uvBuffer[ i + 4 ];
				var max = Math.max( x0, x1, x2 );
				var min = Math.min( x0, x1, x2 );
				if ( max > 0.9 && min < 0.1 ) {
					if ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;
					if ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;
					if ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;
				}
			}
		}
		function pushVertex( vertex ) {
			vertexBuffer.push( vertex.x, vertex.y, vertex.z );
		}
		function getVertexByIndex( index, vertex ) {
			var stride = index * 3;
			vertex.x = vertices[ stride + 0 ];
			vertex.y = vertices[ stride + 1 ];
			vertex.z = vertices[ stride + 2 ];
		}
		function correctUVs() {
			var a = new Vector3();
			var b = new Vector3();
			var c = new Vector3();
			var centroid = new Vector3();
			var uvA = new Vector2();
			var uvB = new Vector2();
			var uvC = new Vector2();
			for ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {
				a.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );
				b.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );
				c.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );
				uvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );
				uvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );
				uvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );
				centroid.copy( a ).add( b ).add( c ).divideScalar( 3 );
				var azi = azimuth( centroid );
				correctUV( uvA, j + 0, a, azi );
				correctUV( uvB, j + 2, b, azi );
				correctUV( uvC, j + 4, c, azi );
			}
		}
		function correctUV( uv, stride, vector, azimuth ) {
			if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {
				uvBuffer[ stride ] = uv.x - 1;
			}
			if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {
				uvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;
			}
		}
		function azimuth( vector ) {
			return Math.atan2( vector.z, - vector.x );
		}
		function inclination( vector ) {
			return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );
		}
	}
	PolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	PolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;
	/**
	 * @author timothypratley / https://github.com/timothypratley
	 * @author Mugen87 / https://github.com/Mugen87
	 */
	function TetrahedronGeometry( radius, detail ) {
		Geometry.call( this );
		this.type = 'TetrahedronGeometry';
		this.parameters = {
			radius: radius,
			detail: detail
		};
		this.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );
		this.mergeVertices();
	}
	TetrahedronGeometry.prototype = Object.create( Geometry.prototype );
	TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;
	function TetrahedronBufferGeometry( radius, detail ) {
		var vertices = [
			1, 1, 1, 	- 1, - 1, 1, 	- 1, 1, - 1, 	1, - 1, - 1
		];
		var indices = [
			2, 1, 0, 	0, 3, 2,	1, 3, 0,	2, 3, 1
		];
		PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );
		this.type = 'TetrahedronBufferGeometry';
		this.parameters = {
			radius: radius,
			detail: detail
		};
	}
	TetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
	TetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;
	/**
	 * @author timothypratley / https://github.com/timothypratley
	 * @author Mugen87 / https://github.com/Mugen87
	 */
	function OctahedronGeometry( radius, detail ) {
		Geometry.call( this );
		this.type = 'OctahedronGeometry';
		this.parameters = {
			radius: radius,
			detail: detail
		};
		this.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );
		this.mergeVertices();
	}
	OctahedronGeometry.prototype = Object.create( Geometry.prototype );
	OctahedronGeometry.prototype.constructor = OctahedronGeometry;
	function OctahedronBufferGeometry( radius, detail ) {
		var vertices = [
			1, 0, 0, 	- 1, 0, 0,	0, 1, 0,
			0, - 1, 0, 	0, 0, 1,	0, 0, - 1
		];
		var indices = [
			0, 2, 4,	0, 4, 3,	0, 3, 5,
			0, 5, 2,	1, 2, 5,	1, 5, 3,
			1, 3, 4,	1, 4, 2
		];
		PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );
		this.type = 'OctahedronBufferGeometry';
		this.parameters = {
			radius: radius,
			detail: detail
		};
	}
	OctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
	OctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;
	/**
	 * @author timothypratley / https://github.com/timothypratley
	 * @author Mugen87 / https://github.com/Mugen87
	 */
	function IcosahedronGeometry( radius, detail ) {
		Geometry.call( this );
		this.type = 'IcosahedronGeometry';
		this.parameters = {
			radius: radius,
			detail: detail
		};
		this.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );
		this.mergeVertices();
	}
	IcosahedronGeometry.prototype = Object.create( Geometry.prototype );
	IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;
	function IcosahedronBufferGeometry( radius, detail ) {
		var t = ( 1 + Math.sqrt( 5 ) ) / 2;
		var vertices = [
			- 1, t, 0, 	1, t, 0, 	- 1, - t, 0, 	1, - t, 0,
			 0, - 1, t, 	0, 1, t,	0, - 1, - t, 	0, 1, - t,
			 t, 0, - 1, 	t, 0, 1, 	- t, 0, - 1, 	- t, 0, 1
		];
		var indices = [
			 0, 11, 5, 	0, 5, 1, 	0, 1, 7, 	0, 7, 10, 	0, 10, 11,
			 1, 5, 9, 	5, 11, 4,	11, 10, 2,	10, 7, 6,	7, 1, 8,
			 3, 9, 4, 	3, 4, 2,	3, 2, 6,	3, 6, 8,	3, 8, 9,
			 4, 9, 5, 	2, 4, 11,	6, 2, 10,	8, 6, 7,	9, 8, 1
		];
		PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );
		this.type = 'IcosahedronBufferGeometry';
		this.parameters = {
			radius: radius,
			detail: detail
		};
	}
	IcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
	IcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;
	/**
	 * @author Abe Pazos / https://hamoid.com
	 * @author Mugen87 / https://github.com/Mugen87
	 */
	function DodecahedronGeometry( radius, detail ) {
		Geometry.call( this );
		this.type = 'DodecahedronGeometry';
		this.parameters = {
			radius: radius,
			detail: detail
		};
		this.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );
		this.mergeVertices();
	}
	DodecahedronGeometry.prototype = Object.create( Geometry.prototype );
	DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;
	function DodecahedronBufferGeometry( radius, detail ) {
		var t = ( 1 + Math.sqrt( 5 ) ) / 2;
		var r = 1 / t;
		var vertices = [
			- 1, - 1, - 1,	- 1, - 1, 1,
			- 1, 1, - 1, - 1, 1, 1,
			1, - 1, - 1, 1, - 1, 1,
			1, 1, - 1, 1, 1, 1,
			 0, - r, - t, 0, - r, t,
			 0, r, - t, 0, r, t,
			- r, - t, 0, - r, t, 0,
			 r, - t, 0, r, t, 0,
			- t, 0, - r, t, 0, - r,
			- t, 0, r, t, 0, r
		];
		var indices = [
			3, 11, 7, 	3, 7, 15, 	3, 15, 13,
			7, 19, 17, 	7, 17, 6, 	7, 6, 15,
			17, 4, 8, 	17, 8, 10, 	17, 10, 6,
			8, 0, 16, 	8, 16, 2, 	8, 2, 10,
			0, 12, 1, 	0, 1, 18, 	0, 18, 16,
			6, 10, 2, 	6, 2, 13, 	6, 13, 15,
			2, 16, 18, 	2, 18, 3, 	2, 3, 13,
			18, 1, 9, 	18, 9, 11, 	18, 11, 3,
			4, 14, 12, 	4, 12, 0, 	4, 0, 8,
			11, 9, 5, 	11, 5, 19, 	11, 19, 7,
			19, 5, 14, 	19, 14, 4, 	19, 4, 17,
			1, 12, 14, 	1, 14, 5, 	1, 5, 9
		];
		PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );
		this.type = 'DodecahedronBufferGeometry';
		this.parameters = {
			radius: radius,
			detail: detail
		};
	}
	DodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
	DodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;
	/**
	 * @author oosmoxiecode / https://github.com/oosmoxiecode
	 * @author WestLangley / https://github.com/WestLangley
	 * @author zz85 / https://github.com/zz85
	 * @author miningold / https://github.com/miningold
	 * @author jonobr1 / https://github.com/jonobr1
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 */
	function TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {
		Geometry.call( this );
		this.type = 'TubeGeometry';
		this.parameters = {
			path: path,
			tubularSegments: tubularSegments,
			radius: radius,
			radialSegments: radialSegments,
			closed: closed
		};
		if ( taper !== undefined ) console.warn( 'THREE.TubeGeometry: taper has been removed.' );
		var bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );
		this.tangents = bufferGeometry.tangents;
		this.normals = bufferGeometry.normals;
		this.binormals = bufferGeometry.binormals;
		this.fromBufferGeometry( bufferGeometry );
		this.mergeVertices();
	}
	TubeGeometry.prototype = Object.create( Geometry.prototype );
	TubeGeometry.prototype.constructor = TubeGeometry;
	function TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {
		BufferGeometry.call( this );
		this.type = 'TubeBufferGeometry';
		this.parameters = {
			path: path,
			tubularSegments: tubularSegments,
			radius: radius,
			radialSegments: radialSegments,
			closed: closed
		};
		tubularSegments = tubularSegments || 64;
		radius = radius || 1;
		radialSegments = radialSegments || 8;
		closed = closed || false;
		var frames = path.computeFrenetFrames( tubularSegments, closed );
		this.tangents = frames.tangents;
		this.normals = frames.normals;
		this.binormals = frames.binormals;
		var vertex = new Vector3();
		var normal = new Vector3();
		var uv = new Vector2();
		var P = new Vector3();
		var i, j;
		var vertices = [];
		var normals = [];
		var uvs = [];
		var indices = [];
		generateBufferData();
		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
		function generateBufferData() {
			for ( i = 0; i < tubularSegments; i ++ ) {
				generateSegment( i );
			}
			generateSegment( ( closed === false ) ? tubularSegments : 0 );
			generateUVs();
			generateIndices();
		}
		function generateSegment( i ) {
			P = path.getPointAt( i / tubularSegments, P );
			var N = frames.normals[ i ];
			var B = frames.binormals[ i ];
			for ( j = 0; j <= radialSegments; j ++ ) {
				var v = j / radialSegments * Math.PI * 2;
				var sin = Math.sin( v );
				var cos = - Math.cos( v );
				normal.x = ( cos * N.x + sin * B.x );
				normal.y = ( cos * N.y + sin * B.y );
				normal.z = ( cos * N.z + sin * B.z );
				normal.normalize();
				normals.push( normal.x, normal.y, normal.z );
				vertex.x = P.x + radius * normal.x;
				vertex.y = P.y + radius * normal.y;
				vertex.z = P.z + radius * normal.z;
				vertices.push( vertex.x, vertex.y, vertex.z );
			}
		}
		function generateIndices() {
			for ( j = 1; j <= tubularSegments; j ++ ) {
				for ( i = 1; i <= radialSegments; i ++ ) {
					var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
					var b = ( radialSegments + 1 ) * j + ( i - 1 );
					var c = ( radialSegments + 1 ) * j + i;
					var d = ( radialSegments + 1 ) * ( j - 1 ) + i;
					indices.push( a, b, d );
					indices.push( b, c, d );
				}
			}
		}
		function generateUVs() {
			for ( i = 0; i <= tubularSegments; i ++ ) {
				for ( j = 0; j <= radialSegments; j ++ ) {
					uv.x = i / tubularSegments;
					uv.y = j / radialSegments;
					uvs.push( uv.x, uv.y );
				}
			}
		}
	}
	TubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	TubeBufferGeometry.prototype.constructor = TubeBufferGeometry;
	TubeBufferGeometry.prototype.toJSON = function () {
		var data = BufferGeometry.prototype.toJSON.call( this );
		data.path = this.parameters.path.toJSON();
		return data;
	};
	/**
	 * @author oosmoxiecode
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 * based on http://www.blackpawn.com/texts/pqtorus/
	 */
	function TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {
		Geometry.call( this );
		this.type = 'TorusKnotGeometry';
		this.parameters = {
			radius: radius,
			tube: tube,
			tubularSegments: tubularSegments,
			radialSegments: radialSegments,
			p: p,
			q: q
		};
		if ( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );
		this.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );
		this.mergeVertices();
	}
	TorusKnotGeometry.prototype = Object.create( Geometry.prototype );
	TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;
	function TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {
		BufferGeometry.call( this );
		this.type = 'TorusKnotBufferGeometry';
		this.parameters = {
			radius: radius,
			tube: tube,
			tubularSegments: tubularSegments,
			radialSegments: radialSegments,
			p: p,
			q: q
		};
		radius = radius || 1;
		tube = tube || 0.4;
		tubularSegments = Math.floor( tubularSegments ) || 64;
		radialSegments = Math.floor( radialSegments ) || 8;
		p = p || 2;
		q = q || 3;
		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];
		var i, j;
		var vertex = new Vector3();
		var normal = new Vector3();
		var P1 = new Vector3();
		var P2 = new Vector3();
		var B = new Vector3();
		var T = new Vector3();
		var N = new Vector3();
		for ( i = 0; i <= tubularSegments; ++ i ) {
			var u = i / tubularSegments * p * Math.PI * 2;
			calculatePositionOnCurve( u, p, q, radius, P1 );
			calculatePositionOnCurve( u + 0.01, p, q, radius, P2 );
			T.subVectors( P2, P1 );
			N.addVectors( P2, P1 );
			B.crossVectors( T, N );
			N.crossVectors( B, T );
			B.normalize();
			N.normalize();
			for ( j = 0; j <= radialSegments; ++ j ) {
				var v = j / radialSegments * Math.PI * 2;
				var cx = - tube * Math.cos( v );
				var cy = tube * Math.sin( v );
				vertex.x = P1.x + ( cx * N.x + cy * B.x );
				vertex.y = P1.y + ( cx * N.y + cy * B.y );
				vertex.z = P1.z + ( cx * N.z + cy * B.z );
				vertices.push( vertex.x, vertex.y, vertex.z );
				normal.subVectors( vertex, P1 ).normalize();
				normals.push( normal.x, normal.y, normal.z );
				uvs.push( i / tubularSegments );
				uvs.push( j / radialSegments );
			}
		}
		for ( j = 1; j <= tubularSegments; j ++ ) {
			for ( i = 1; i <= radialSegments; i ++ ) {
				var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
				var b = ( radialSegments + 1 ) * j + ( i - 1 );
				var c = ( radialSegments + 1 ) * j + i;
				var d = ( radialSegments + 1 ) * ( j - 1 ) + i;
				indices.push( a, b, d );
				indices.push( b, c, d );
			}
		}
		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
		function calculatePositionOnCurve( u, p, q, radius, position ) {
			var cu = Math.cos( u );
			var su = Math.sin( u );
			var quOverP = q / p * u;
			var cs = Math.cos( quOverP );
			position.x = radius * ( 2 + cs ) * 0.5 * cu;
			position.y = radius * ( 2 + cs ) * su * 0.5;
			position.z = radius * Math.sin( quOverP ) * 0.5;
		}
	}
	TorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;
	/**
	 * @author oosmoxiecode
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */
	function TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {
		Geometry.call( this );
		this.type = 'TorusGeometry';
		this.parameters = {
			radius: radius,
			tube: tube,
			radialSegments: radialSegments,
			tubularSegments: tubularSegments,
			arc: arc
		};
		this.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );
		this.mergeVertices();
	}
	TorusGeometry.prototype = Object.create( Geometry.prototype );
	TorusGeometry.prototype.constructor = TorusGeometry;
	function TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {
		BufferGeometry.call( this );
		this.type = 'TorusBufferGeometry';
		this.parameters = {
			radius: radius,
			tube: tube,
			radialSegments: radialSegments,
			tubularSegments: tubularSegments,
			arc: arc
		};
		radius = radius || 1;
		tube = tube || 0.4;
		radialSegments = Math.floor( radialSegments ) || 8;
		tubularSegments = Math.floor( tubularSegments ) || 6;
		arc = arc || Math.PI * 2;
		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];
		var center = new Vector3();
		var vertex = new Vector3();
		var normal = new Vector3();
		var j, i;
		for ( j = 0; j <= radialSegments; j ++ ) {
			for ( i = 0; i <= tubularSegments; i ++ ) {
				var u = i / tubularSegments * arc;
				var v = j / radialSegments * Math.PI * 2;
				vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );
				vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );
				vertex.z = tube * Math.sin( v );
				vertices.push( vertex.x, vertex.y, vertex.z );
				center.x = radius * Math.cos( u );
				center.y = radius * Math.sin( u );
				normal.subVectors( vertex, center ).normalize();
				normals.push( normal.x, normal.y, normal.z );
				uvs.push( i / tubularSegments );
				uvs.push( j / radialSegments );
			}
		}
		for ( j = 1; j <= radialSegments; j ++ ) {
			for ( i = 1; i <= tubularSegments; i ++ ) {
				var a = ( tubularSegments + 1 ) * j + i - 1;
				var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;
				var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;
				var d = ( tubularSegments + 1 ) * j + i;
				indices.push( a, b, d );
				indices.push( b, c, d );
			}
		}
		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
	}
	TorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;
	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 * Port from https://github.com/mapbox/earcut (v2.1.5)
	 */
	var Earcut = {
		triangulate: function ( data, holeIndices, dim ) {
			dim = dim || 2;
			var hasHoles = holeIndices && holeIndices.length,
				outerLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,
				outerNode = linkedList( data, 0, outerLen, dim, true ),
				triangles = [];
			if ( ! outerNode || outerNode.next === outerNode.prev ) return triangles;
			var minX, minY, maxX, maxY, x, y, invSize;
			if ( hasHoles ) outerNode = eliminateHoles( data, holeIndices, outerNode, dim );
			if ( data.length > 80 * dim ) {
				minX = maxX = data[ 0 ];
				minY = maxY = data[ 1 ];
				for ( var i = dim; i < outerLen; i += dim ) {
					x = data[ i ];
					y = data[ i + 1 ];
					if ( x < minX ) minX = x;
					if ( y < minY ) minY = y;
					if ( x > maxX ) maxX = x;
					if ( y > maxY ) maxY = y;
				}
				invSize = Math.max( maxX - minX, maxY - minY );
				invSize = invSize !== 0 ? 1 / invSize : 0;
			}
			earcutLinked( outerNode, triangles, dim, minX, minY, invSize );
			return triangles;
		}
	};
	function linkedList( data, start, end, dim, clockwise ) {
		var i, last;
		if ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {
			for ( i = start; i < end; i += dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );
		} else {
			for ( i = end - dim; i >= start; i -= dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );
		}
		if ( last && equals( last, last.next ) ) {
			removeNode( last );
			last = last.next;
		}
		return last;
	}
	function filterPoints( start, end ) {
		if ( ! start ) return start;
		if ( ! end ) end = start;
		var p = start,
			again;
		do {
			again = false;
			if ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {
				removeNode( p );
				p = end = p.prev;
				if ( p === p.next ) break;
				again = true;
			} else {
				p = p.next;
			}
		} while ( again || p !== end );
		return end;
	}
	function earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {
		if ( ! ear ) return;
		if ( ! pass && invSize ) indexCurve( ear, minX, minY, invSize );
		var stop = ear,
			prev, next;
		while ( ear.prev !== ear.next ) {
			prev = ear.prev;
			next = ear.next;
			if ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {
				triangles.push( prev.i / dim );
				triangles.push( ear.i / dim );
				triangles.push( next.i / dim );
				removeNode( ear );
				ear = next.next;
				stop = next.next;
				continue;
			}
			ear = next;
			if ( ear === stop ) {
				if ( ! pass ) {
					earcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );
				} else if ( pass === 1 ) {
					ear = cureLocalIntersections( ear, triangles, dim );
					earcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );
				} else if ( pass === 2 ) {
					splitEarcut( ear, triangles, dim, minX, minY, invSize );
				}
				break;
			}
		}
	}
	function isEar( ear ) {
		var a = ear.prev,
			b = ear,
			c = ear.next;
		if ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear
		var p = ear.next.next;
		while ( p !== ear.prev ) {
			if ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
				area( p.prev, p, p.next ) >= 0 ) return false;
			p = p.next;
		}
		return true;
	}
	function isEarHashed( ear, minX, minY, invSize ) {
		var a = ear.prev,
			b = ear,
			c = ear.next;
		if ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear
		var minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),
			minTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),
			maxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),
			maxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );
		var minZ = zOrder( minTX, minTY, minX, minY, invSize ),
			maxZ = zOrder( maxTX, maxTY, minX, minY, invSize );
		var p = ear.prevZ,
			n = ear.nextZ;
		while ( p && p.z >= minZ && n && n.z <= maxZ ) {
			if ( p !== ear.prev && p !== ear.next &&
				pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
				area( p.prev, p, p.next ) >= 0 ) return false;
			p = p.prevZ;
			if ( n !== ear.prev && n !== ear.next &&
				pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&
				area( n.prev, n, n.next ) >= 0 ) return false;
			n = n.nextZ;
		}
		while ( p && p.z >= minZ ) {
			if ( p !== ear.prev && p !== ear.next &&
				pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
				area( p.prev, p, p.next ) >= 0 ) return false;
			p = p.prevZ;
		}
		while ( n && n.z <= maxZ ) {
			if ( n !== ear.prev && n !== ear.next &&
				pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&
				area( n.prev, n, n.next ) >= 0 ) return false;
			n = n.nextZ;
		}
		return true;
	}
	function cureLocalIntersections( start, triangles, dim ) {
		var p = start;
		do {
			var a = p.prev,
				b = p.next.next;
			if ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {
				triangles.push( a.i / dim );
				triangles.push( p.i / dim );
				triangles.push( b.i / dim );
				removeNode( p );
				removeNode( p.next );
				p = start = b;
			}
			p = p.next;
		} while ( p !== start );
		return p;
	}
	function splitEarcut( start, triangles, dim, minX, minY, invSize ) {
		var a = start;
		do {
			var b = a.next.next;
			while ( b !== a.prev ) {
				if ( a.i !== b.i && isValidDiagonal( a, b ) ) {
					var c = splitPolygon( a, b );
					a = filterPoints( a, a.next );
					c = filterPoints( c, c.next );
					earcutLinked( a, triangles, dim, minX, minY, invSize );
					earcutLinked( c, triangles, dim, minX, minY, invSize );
					return;
				}
				b = b.next;
			}
			a = a.next;
		} while ( a !== start );
	}
	function eliminateHoles( data, holeIndices, outerNode, dim ) {
		var queue = [],
			i, len, start, end, list;
		for ( i = 0, len = holeIndices.length; i < len; i ++ ) {
			start = holeIndices[ i ] * dim;
			end = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;
			list = linkedList( data, start, end, dim, false );
			if ( list === list.next ) list.steiner = true;
			queue.push( getLeftmost( list ) );
		}
		queue.sort( compareX );
		for ( i = 0; i < queue.length; i ++ ) {
			eliminateHole( queue[ i ], outerNode );
			outerNode = filterPoints( outerNode, outerNode.next );
		}
		return outerNode;
	}
	function compareX( a, b ) {
		return a.x - b.x;
	}
	function eliminateHole( hole, outerNode ) {
		outerNode = findHoleBridge( hole, outerNode );
		if ( outerNode ) {
			var b = splitPolygon( outerNode, hole );
			filterPoints( b, b.next );
		}
	}
	function findHoleBridge( hole, outerNode ) {
		var p = outerNode,
			hx = hole.x,
			hy = hole.y,
			qx = - Infinity,
			m;
		do {
			if ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {
				var x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );
				if ( x <= hx && x > qx ) {
					qx = x;
					if ( x === hx ) {
						if ( hy === p.y ) return p;
						if ( hy === p.next.y ) return p.next;
					}
					m = p.x < p.next.x ? p : p.next;
				}
			}
			p = p.next;
		} while ( p !== outerNode );
		if ( ! m ) return null;
		if ( hx === qx ) return m.prev; // hole touches outer segment; pick lower endpoint
		var stop = m,
			mx = m.x,
			my = m.y,
			tanMin = Infinity,
			tan;
		p = m.next;
		while ( p !== stop ) {
			if ( hx >= p.x && p.x >= mx && hx !== p.x &&
					pointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {
				tan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential
				if ( ( tan < tanMin || ( tan === tanMin && p.x > m.x ) ) && locallyInside( p, hole ) ) {
					m = p;
					tanMin = tan;
				}
			}
			p = p.next;
		}
		return m;
	}
	function indexCurve( start, minX, minY, invSize ) {
		var p = start;
		do {
			if ( p.z === null ) p.z = zOrder( p.x, p.y, minX, minY, invSize );
			p.prevZ = p.prev;
			p.nextZ = p.next;
			p = p.next;
		} while ( p !== start );
		p.prevZ.nextZ = null;
		p.prevZ = null;
		sortLinked( p );
	}
	function sortLinked( list ) {
		var i, p, q, e, tail, numMerges, pSize, qSize,
			inSize = 1;
		do {
			p = list;
			list = null;
			tail = null;
			numMerges = 0;
			while ( p ) {
				numMerges ++;
				q = p;
				pSize = 0;
				for ( i = 0; i < inSize; i ++ ) {
					pSize ++;
					q = q.nextZ;
					if ( ! q ) break;
				}
				qSize = inSize;
				while ( pSize > 0 || ( qSize > 0 && q ) ) {
					if ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {
						e = p;
						p = p.nextZ;
						pSize --;
					} else {
						e = q;
						q = q.nextZ;
						qSize --;
					}
					if ( tail ) tail.nextZ = e;
					else list = e;
					e.prevZ = tail;
					tail = e;
				}
				p = q;
			}
			tail.nextZ = null;
			inSize *= 2;
		} while ( numMerges > 1 );
		return list;
	}
	function zOrder( x, y, minX, minY, invSize ) {
		x = 32767 * ( x - minX ) * invSize;
		y = 32767 * ( y - minY ) * invSize;
		x = ( x | ( x << 8 ) ) & 0x00FF00FF;
		x = ( x | ( x << 4 ) ) & 0x0F0F0F0F;
		x = ( x | ( x << 2 ) ) & 0x33333333;
		x = ( x | ( x << 1 ) ) & 0x55555555;
		y = ( y | ( y << 8 ) ) & 0x00FF00FF;
		y = ( y | ( y << 4 ) ) & 0x0F0F0F0F;
		y = ( y | ( y << 2 ) ) & 0x33333333;
		y = ( y | ( y << 1 ) ) & 0x55555555;
		return x | ( y << 1 );
	}
	function getLeftmost( start ) {
		var p = start,
			leftmost = start;
		do {
			if ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) leftmost = p;
			p = p.next;
		} while ( p !== start );
		return leftmost;
	}
	function pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {
		return ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&
			   ( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&
			   ( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;
	}
	function isValidDiagonal( a, b ) {
		return a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) &&
			   locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b );
	}
	function area( p, q, r ) {
		return ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );
	}
	function equals( p1, p2 ) {
		return p1.x === p2.x && p1.y === p2.y;
	}
	function intersects( p1, q1, p2, q2 ) {
		if ( ( equals( p1, p2 ) && equals( q1, q2 ) ) ||
			( equals( p1, q2 ) && equals( p2, q1 ) ) ) return true;
		return area( p1, q1, p2 ) > 0 !== area( p1, q1, q2 ) > 0 &&
			   area( p2, q2, p1 ) > 0 !== area( p2, q2, q1 ) > 0;
	}
	function intersectsPolygon( a, b ) {
		var p = a;
		do {
			if ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
					intersects( p, p.next, a, b ) ) return true;
			p = p.next;
		} while ( p !== a );
		return false;
	}
	function locallyInside( a, b ) {
		return area( a.prev, a, a.next ) < 0 ?
			area( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :
			area( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;
	}
	function middleInside( a, b ) {
		var p = a,
			inside = false,
			px = ( a.x + b.x ) / 2,
			py = ( a.y + b.y ) / 2;
		do {
			if ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&
					( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )
				inside = ! inside;
			p = p.next;
		} while ( p !== a );
		return inside;
	}
	function splitPolygon( a, b ) {
		var a2 = new Node( a.i, a.x, a.y ),
			b2 = new Node( b.i, b.x, b.y ),
			an = a.next,
			bp = b.prev;
		a.next = b;
		b.prev = a;
		a2.next = an;
		an.prev = a2;
		b2.next = a2;
		a2.prev = b2;
		bp.next = b2;
		b2.prev = bp;
		return b2;
	}
	function insertNode( i, x, y, last ) {
		var p = new Node( i, x, y );
		if ( ! last ) {
			p.prev = p;
			p.next = p;
		} else {
			p.next = last.next;
			p.prev = last;
			last.next.prev = p;
			last.next = p;
		}
		return p;
	}
	function removeNode( p ) {
		p.next.prev = p.prev;
		p.prev.next = p.next;
		if ( p.prevZ ) p.prevZ.nextZ = p.nextZ;
		if ( p.nextZ ) p.nextZ.prevZ = p.prevZ;
	}
	function Node( i, x, y ) {
		this.i = i;
		this.x = x;
		this.y = y;
		this.prev = null;
		this.next = null;
		this.z = null;
		this.prevZ = null;
		this.nextZ = null;
		this.steiner = false;
	}
	function signedArea( data, start, end, dim ) {
		var sum = 0;
		for ( var i = start, j = end - dim; i < end; i += dim ) {
			sum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );
			j = i;
		}
		return sum;
	}
	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */
	var ShapeUtils = {
		area: function ( contour ) {
			var n = contour.length;
			var a = 0.0;
			for ( var p = n - 1, q = 0; q < n; p = q ++ ) {
				a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;
			}
			return a * 0.5;
		},
		isClockWise: function ( pts ) {
			return ShapeUtils.area( pts ) < 0;
		},
		triangulateShape: function ( contour, holes ) {
			var vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]
			var holeIndices = []; // array of hole indices
			var faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]
			removeDupEndPts( contour );
			addContour( vertices, contour );
			var holeIndex = contour.length;
			holes.forEach( removeDupEndPts );
			for ( var i = 0; i < holes.length; i ++ ) {
				holeIndices.push( holeIndex );
				holeIndex += holes[ i ].length;
				addContour( vertices, holes[ i ] );
			}
			var triangles = Earcut.triangulate( vertices, holeIndices );
			for ( var i = 0; i < triangles.length; i += 3 ) {
				faces.push( triangles.slice( i, i + 3 ) );
			}
			return faces;
		}
	};
	function removeDupEndPts( points ) {
		var l = points.length;
		if ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {
			points.pop();
		}
	}
	function addContour( vertices, contour ) {
		for ( var i = 0; i < contour.length; i ++ ) {
			vertices.push( contour[ i ].x );
			vertices.push( contour[ i ].y );
		}
	}
	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 * Creates extruded geometry from a path shape.
	 *
	 * parameters = {
	 *
	 *  curveSegments: <int>, // number of points on the curves
	 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
	 *  depth: <float>, // Depth to extrude the shape
	 *
	 *  bevelEnabled: <bool>, // turn on bevel
	 *  bevelThickness: <float>, // how deep into the original shape bevel goes
	 *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel
	 *  bevelOffset: <float>, // how far from shape outline does bevel start
	 *  bevelSegments: <int>, // number of bevel layers
	 *
	 *  extrudePath: <THREE.Curve> // curve to extrude shape along
	 *
	 *  UVGenerator: <Object> // object that provides UV generator functions
	 *
	 * }
	 */
	function ExtrudeGeometry( shapes, options ) {
		Geometry.call( this );
		this.type = 'ExtrudeGeometry';
		this.parameters = {
			shapes: shapes,
			options: options
		};
		this.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );
		this.mergeVertices();
	}
	ExtrudeGeometry.prototype = Object.create( Geometry.prototype );
	ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;
	ExtrudeGeometry.prototype.toJSON = function () {
		var data = Geometry.prototype.toJSON.call( this );
		var shapes = this.parameters.shapes;
		var options = this.parameters.options;
		return toJSON( shapes, options, data );
	};
	function ExtrudeBufferGeometry( shapes, options ) {
		BufferGeometry.call( this );
		this.type = 'ExtrudeBufferGeometry';
		this.parameters = {
			shapes: shapes,
			options: options
		};
		shapes = Array.isArray( shapes ) ? shapes : [ shapes ];
		var scope = this;
		var verticesArray = [];
		var uvArray = [];
		for ( var i = 0, l = shapes.length; i < l; i ++ ) {
			var shape = shapes[ i ];
			addShape( shape );
		}
		this.addAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );
		this.computeVertexNormals();
		function addShape( shape ) {
			var placeholder = [];
			var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
			var steps = options.steps !== undefined ? options.steps : 1;
			var depth = options.depth !== undefined ? options.depth : 100;
			var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;
			var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;
			var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;
			var bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;
			var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;
			var extrudePath = options.extrudePath;
			var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;
			if ( options.amount !== undefined ) {
				console.warn( 'THREE.ExtrudeBufferGeometry: amount has been renamed to depth.' );
				depth = options.amount;
			}
			var extrudePts, extrudeByPath = false;
			var splineTube, binormal, normal, position2;
			if ( extrudePath ) {
				extrudePts = extrudePath.getSpacedPoints( steps );
				extrudeByPath = true;
				bevelEnabled = false; // bevels not supported for path extrusion
				splineTube = extrudePath.computeFrenetFrames( steps, false );
				binormal = new Vector3();
				normal = new Vector3();
				position2 = new Vector3();
			}
			if ( ! bevelEnabled ) {
				bevelSegments = 0;
				bevelThickness = 0;
				bevelSize = 0;
				bevelOffset = 0;
			}
			var ahole, h, hl; // looping of holes
			var shapePoints = shape.extractPoints( curveSegments );
			var vertices = shapePoints.shape;
			var holes = shapePoints.holes;
			var reverse = ! ShapeUtils.isClockWise( vertices );
			if ( reverse ) {
				vertices = vertices.reverse();
				for ( h = 0, hl = holes.length; h < hl; h ++ ) {
					ahole = holes[ h ];
					if ( ShapeUtils.isClockWise( ahole ) ) {
						holes[ h ] = ahole.reverse();
					}
				}
			}
			var faces = ShapeUtils.triangulateShape( vertices, holes );
			/* Vertices */
			var contour = vertices; // vertices has all points but contour has only points of circumference
			for ( h = 0, hl = holes.length; h < hl; h ++ ) {
				ahole = holes[ h ];
				vertices = vertices.concat( ahole );
			}
			function scalePt2( pt, vec, size ) {
				if ( ! vec ) console.error( "THREE.ExtrudeGeometry: vec does not exist" );
				return vec.clone().multiplyScalar( size ).add( pt );
			}
			var b, bs, t, z,
				vert, vlen = vertices.length,
				face, flen = faces.length;
			function getBevelVec( inPt, inPrev, inNext ) {
				var v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt
				var v_prev_x = inPt.x - inPrev.x,
					v_prev_y = inPt.y - inPrev.y;
				var v_next_x = inNext.x - inPt.x,
					v_next_y = inNext.y - inPt.y;
				var v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );
				var collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );
				if ( Math.abs( collinear0 ) > Number.EPSILON ) {
					var v_prev_len = Math.sqrt( v_prev_lensq );
					var v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );
					var ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
					var ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );
					var ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
					var ptNextShift_y = ( inNext.y + v_next_x / v_next_len );
					var sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
							( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /
						( v_prev_x * v_next_y - v_prev_y * v_next_x );
					v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
					v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );
					var v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );
					if ( v_trans_lensq <= 2 ) {
						return new Vector2( v_trans_x, v_trans_y );
					} else {
						shrink_by = Math.sqrt( v_trans_lensq / 2 );
					}
				} else {
					var direction_eq = false; // assumes: opposite
					if ( v_prev_x > Number.EPSILON ) {
						if ( v_next_x > Number.EPSILON ) {
							direction_eq = true;
						}
					} else {
						if ( v_prev_x < - Number.EPSILON ) {
							if ( v_next_x < - Number.EPSILON ) {
								direction_eq = true;
							}
						} else {
							if ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {
								direction_eq = true;
							}
						}
					}
					if ( direction_eq ) {
						v_trans_x = - v_prev_y;
						v_trans_y = v_prev_x;
						shrink_by = Math.sqrt( v_prev_lensq );
					} else {
						v_trans_x = v_prev_x;
						v_trans_y = v_prev_y;
						shrink_by = Math.sqrt( v_prev_lensq / 2 );
					}
				}
				return new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );
			}
			var contourMovements = [];
			for ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {
				if ( j === il ) j = 0;
				if ( k === il ) k = 0;
				contourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );
			}
			var holesMovements = [],
				oneHoleMovements, verticesMovements = contourMovements.concat();
			for ( h = 0, hl = holes.length; h < hl; h ++ ) {
				ahole = holes[ h ];
				oneHoleMovements = [];
				for ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {
					if ( j === il ) j = 0;
					if ( k === il ) k = 0;
					oneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );
				}
				holesMovements.push( oneHoleMovements );
				verticesMovements = verticesMovements.concat( oneHoleMovements );
			}
			for ( b = 0; b < bevelSegments; b ++ ) {
				t = b / bevelSegments;
				z = bevelThickness * Math.cos( t * Math.PI / 2 );
				bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;
				for ( i = 0, il = contour.length; i < il; i ++ ) {
					vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
					v( vert.x, vert.y, - z );
				}
				for ( h = 0, hl = holes.length; h < hl; h ++ ) {
					ahole = holes[ h ];
					oneHoleMovements = holesMovements[ h ];
					for ( i = 0, il = ahole.length; i < il; i ++ ) {
						vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );
						v( vert.x, vert.y, - z );
					}
				}
			}
			bs = bevelSize + bevelOffset;
			for ( i = 0; i < vlen; i ++ ) {
				vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];
				if ( ! extrudeByPath ) {
					v( vert.x, vert.y, 0 );
				} else {
					normal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );
					binormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );
					position2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );
					v( position2.x, position2.y, position2.z );
				}
			}
			var s;
			for ( s = 1; s <= steps; s ++ ) {
				for ( i = 0; i < vlen; i ++ ) {
					vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];
					if ( ! extrudeByPath ) {
						v( vert.x, vert.y, depth / steps * s );
					} else {
						normal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );
						binormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );
						position2.copy( extrudePts[ s ] ).add( normal ).add( binormal );
						v( position2.x, position2.y, position2.z );
					}
				}
			}
			for ( b = bevelSegments - 1; b >= 0; b -- ) {
				t = b / bevelSegments;
				z = bevelThickness * Math.cos( t * Math.PI / 2 );
				bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;
				for ( i = 0, il = contour.length; i < il; i ++ ) {
					vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
					v( vert.x, vert.y, depth + z );
				}
				for ( h = 0, hl = holes.length; h < hl; h ++ ) {
					ahole = holes[ h ];
					oneHoleMovements = holesMovements[ h ];
					for ( i = 0, il = ahole.length; i < il; i ++ ) {
						vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );
						if ( ! extrudeByPath ) {
							v( vert.x, vert.y, depth + z );
						} else {
							v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );
						}
					}
				}
			}
			/* Faces */
			buildLidFaces();
			buildSideFaces();
			function buildLidFaces() {
				var start = verticesArray.length / 3;
				if ( bevelEnabled ) {
					var layer = 0; // steps + 1
					var offset = vlen * layer;
					for ( i = 0; i < flen; i ++ ) {
						face = faces[ i ];
						f3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );
					}
					layer = steps + bevelSegments * 2;
					offset = vlen * layer;
					for ( i = 0; i < flen; i ++ ) {
						face = faces[ i ];
						f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );
					}
				} else {
					for ( i = 0; i < flen; i ++ ) {
						face = faces[ i ];
						f3( face[ 2 ], face[ 1 ], face[ 0 ] );
					}
					for ( i = 0; i < flen; i ++ ) {
						face = faces[ i ];
						f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );
					}
				}
				scope.addGroup( start, verticesArray.length / 3 - start, 0 );
			}
			function buildSideFaces() {
				var start = verticesArray.length / 3;
				var layeroffset = 0;
				sidewalls( contour, layeroffset );
				layeroffset += contour.length;
				for ( h = 0, hl = holes.length; h < hl; h ++ ) {
					ahole = holes[ h ];
					sidewalls( ahole, layeroffset );
					layeroffset += ahole.length;
				}
				scope.addGroup( start, verticesArray.length / 3 - start, 1 );
			}
			function sidewalls( contour, layeroffset ) {
				var j, k;
				i = contour.length;
				while ( -- i >= 0 ) {
					j = i;
					k = i - 1;
					if ( k < 0 ) k = contour.length - 1;
					var s = 0,
						sl = steps + bevelSegments * 2;
					for ( s = 0; s < sl; s ++ ) {
						var slen1 = vlen * s;
						var slen2 = vlen * ( s + 1 );
						var a = layeroffset + j + slen1,
							b = layeroffset + k + slen1,
							c = layeroffset + k + slen2,
							d = layeroffset + j + slen2;
						f4( a, b, c, d );
					}
				}
			}
			function v( x, y, z ) {
				placeholder.push( x );
				placeholder.push( y );
				placeholder.push( z );
			}
			function f3( a, b, c ) {
				addVertex( a );
				addVertex( b );
				addVertex( c );
				var nextIndex = verticesArray.length / 3;
				var uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );
				addUV( uvs[ 0 ] );
				addUV( uvs[ 1 ] );
				addUV( uvs[ 2 ] );
			}
			function f4( a, b, c, d ) {
				addVertex( a );
				addVertex( b );
				addVertex( d );
				addVertex( b );
				addVertex( c );
				addVertex( d );
				var nextIndex = verticesArray.length / 3;
				var uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );
				addUV( uvs[ 0 ] );
				addUV( uvs[ 1 ] );
				addUV( uvs[ 3 ] );
				addUV( uvs[ 1 ] );
				addUV( uvs[ 2 ] );
				addUV( uvs[ 3 ] );
			}
			function addVertex( index ) {
				verticesArray.push( placeholder[ index * 3 + 0 ] );
				verticesArray.push( placeholder[ index * 3 + 1 ] );
				verticesArray.push( placeholder[ index * 3 + 2 ] );
			}
			function addUV( vector2 ) {
				uvArray.push( vector2.x );
				uvArray.push( vector2.y );
			}
		}
	}
	ExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	ExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;
	ExtrudeBufferGeometry.prototype.toJSON = function () {
		var data = BufferGeometry.prototype.toJSON.call( this );
		var shapes = this.parameters.shapes;
		var options = this.parameters.options;
		return toJSON( shapes, options, data );
	};
	var WorldUVGenerator = {
		generateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {
			var a_x = vertices[ indexA * 3 ];
			var a_y = vertices[ indexA * 3 + 1 ];
			var b_x = vertices[ indexB * 3 ];
			var b_y = vertices[ indexB * 3 + 1 ];
			var c_x = vertices[ indexC * 3 ];
			var c_y = vertices[ indexC * 3 + 1 ];
			return [
				new Vector2( a_x, a_y ),
				new Vector2( b_x, b_y ),
				new Vector2( c_x, c_y )
			];
		},
		generateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {
			var a_x = vertices[ indexA * 3 ];
			var a_y = vertices[ indexA * 3 + 1 ];
			var a_z = vertices[ indexA * 3 + 2 ];
			var b_x = vertices[ indexB * 3 ];
			var b_y = vertices[ indexB * 3 + 1 ];
			var b_z = vertices[ indexB * 3 + 2 ];
			var c_x = vertices[ indexC * 3 ];
			var c_y = vertices[ indexC * 3 + 1 ];
			var c_z = vertices[ indexC * 3 + 2 ];
			var d_x = vertices[ indexD * 3 ];
			var d_y = vertices[ indexD * 3 + 1 ];
			var d_z = vertices[ indexD * 3 + 2 ];
			if ( Math.abs( a_y - b_y ) < 0.01 ) {
				return [
					new Vector2( a_x, 1 - a_z ),
					new Vector2( b_x, 1 - b_z ),
					new Vector2( c_x, 1 - c_z ),
					new Vector2( d_x, 1 - d_z )
				];
			} else {
				return [
					new Vector2( a_y, 1 - a_z ),
					new Vector2( b_y, 1 - b_z ),
					new Vector2( c_y, 1 - c_z ),
					new Vector2( d_y, 1 - d_z )
				];
			}
		}
	};
	function toJSON( shapes, options, data ) {
		data.shapes = [];
		if ( Array.isArray( shapes ) ) {
			for ( var i = 0, l = shapes.length; i < l; i ++ ) {
				var shape = shapes[ i ];
				data.shapes.push( shape.uuid );
			}
		} else {
			data.shapes.push( shapes.uuid );
		}
		if ( options.extrudePath !== undefined ) data.options.extrudePath = options.extrudePath.toJSON();
		return data;
	}
	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Text = 3D Text
	 *
	 * parameters = {
	 *  font: <THREE.Font>, // font
	 *
	 *  size: <float>, // size of the text
	 *  height: <float>, // thickness to extrude text
	 *  curveSegments: <int>, // number of points on the curves
	 *
	 *  bevelEnabled: <bool>, // turn on bevel
	 *  bevelThickness: <float>, // how deep into text bevel goes
	 *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel
	 *  bevelOffset: <float> // how far from text outline does bevel start
	 * }
	 */
	function TextGeometry( text, parameters ) {
		Geometry.call( this );
		this.type = 'TextGeometry';
		this.parameters = {
			text: text,
			parameters: parameters
		};
		this.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );
		this.mergeVertices();
	}
	TextGeometry.prototype = Object.create( Geometry.prototype );
	TextGeometry.prototype.constructor = TextGeometry;
	function TextBufferGeometry( text, parameters ) {
		parameters = parameters || {};
		var font = parameters.font;
		if ( ! ( font && font.isFont ) ) {
			console.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );
			return new Geometry();
		}
		var shapes = font.generateShapes( text, parameters.size );
		parameters.depth = parameters.height !== undefined ? parameters.height : 50;
		if ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;
		if ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;
		if ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;
		ExtrudeBufferGeometry.call( this, shapes, parameters );
		this.type = 'TextBufferGeometry';
	}
	TextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );
	TextBufferGeometry.prototype.constructor = TextBufferGeometry;
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author benaadams / https://twitter.com/ben_a_adams
	 * @author Mugen87 / https://github.com/Mugen87
	 */
	function SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {
		Geometry.call( this );
		this.type = 'SphereGeometry';
		this.parameters = {
			radius: radius,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			phiStart: phiStart,
			phiLength: phiLength,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};
		this.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );
		this.mergeVertices();
	}
	SphereGeometry.prototype = Object.create( Geometry.prototype );
	SphereGeometry.prototype.constructor = SphereGeometry;
	function SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {
		BufferGeometry.call( this );
		this.type = 'SphereBufferGeometry';
		this.parameters = {
			radius: radius,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			phiStart: phiStart,
			phiLength: phiLength,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};
		radius = radius || 1;
		widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );
		heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );
		phiStart = phiStart !== undefined ? phiStart : 0;
		phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;
		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;
		var thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );
		var ix, iy;
		var index = 0;
		var grid = [];
		var vertex = new Vector3();
		var normal = new Vector3();
		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];
		for ( iy = 0; iy <= heightSegments; iy ++ ) {
			var verticesRow = [];
			var v = iy / heightSegments;
			var uOffset = 0;
			if ( iy == 0 && thetaStart == 0 ) {
				uOffset = 0.5 / widthSegments;
			} else if ( iy == heightSegments && thetaEnd == Math.PI ) {
				uOffset = - 0.5 / widthSegments;
			}
			for ( ix = 0; ix <= widthSegments; ix ++ ) {
				var u = ix / widthSegments;
				vertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
				vertex.y = radius * Math.cos( thetaStart + v * thetaLength );
				vertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
				vertices.push( vertex.x, vertex.y, vertex.z );
				normal.copy( vertex ).normalize();
				normals.push( normal.x, normal.y, normal.z );
				uvs.push( u + uOffset, 1 - v );
				verticesRow.push( index ++ );
			}
			grid.push( verticesRow );
		}
		for ( iy = 0; iy < heightSegments; iy ++ ) {
			for ( ix = 0; ix < widthSegments; ix ++ ) {
				var a = grid[ iy ][ ix + 1 ];
				var b = grid[ iy ][ ix ];
				var c = grid[ iy + 1 ][ ix ];
				var d = grid[ iy + 1 ][ ix + 1 ];
				if ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );
				if ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );
			}
		}
		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
	}
	SphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;
	/**
	 * @author Kaleb Murphy
	 * @author Mugen87 / https://github.com/Mugen87
	 */
	function RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {
		Geometry.call( this );
		this.type = 'RingGeometry';
		this.parameters = {
			innerRadius: innerRadius,
			outerRadius: outerRadius,
			thetaSegments: thetaSegments,
			phiSegments: phiSegments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};
		this.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );
		this.mergeVertices();
	}
	RingGeometry.prototype = Object.create( Geometry.prototype );
	RingGeometry.prototype.constructor = RingGeometry;
	function RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {
		BufferGeometry.call( this );
		this.type = 'RingBufferGeometry';
		this.parameters = {
			innerRadius: innerRadius,
			outerRadius: outerRadius,
			thetaSegments: thetaSegments,
			phiSegments: phiSegments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};
		innerRadius = innerRadius || 0.5;
		outerRadius = outerRadius || 1;
		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;
		thetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;
		phiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;
		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];
		var segment;
		var radius = innerRadius;
		var radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );
		var vertex = new Vector3();
		var uv = new Vector2();
		var j, i;
		for ( j = 0; j <= phiSegments; j ++ ) {
			for ( i = 0; i <= thetaSegments; i ++ ) {
				segment = thetaStart + i / thetaSegments * thetaLength;
				vertex.x = radius * Math.cos( segment );
				vertex.y = radius * Math.sin( segment );
				vertices.push( vertex.x, vertex.y, vertex.z );
				normals.push( 0, 0, 1 );
				uv.x = ( vertex.x / outerRadius + 1 ) / 2;
				uv.y = ( vertex.y / outerRadius + 1 ) / 2;
				uvs.push( uv.x, uv.y );
			}
			radius += radiusStep;
		}
		for ( j = 0; j < phiSegments; j ++ ) {
			var thetaSegmentLevel = j * ( thetaSegments + 1 );
			for ( i = 0; i < thetaSegments; i ++ ) {
				segment = i + thetaSegmentLevel;
				var a = segment;
				var b = segment + thetaSegments + 1;
				var c = segment + thetaSegments + 2;
				var d = segment + 1;
				indices.push( a, b, d );
				indices.push( b, c, d );
			}
		}
		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
	}
	RingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	RingBufferGeometry.prototype.constructor = RingBufferGeometry;
	/**
	 * @author zz85 / https://github.com/zz85
	 * @author bhouston / http://clara.io
	 * @author Mugen87 / https://github.com/Mugen87
	 */
	function LatheGeometry( points, segments, phiStart, phiLength ) {
		Geometry.call( this );
		this.type = 'LatheGeometry';
		this.parameters = {
			points: points,
			segments: segments,
			phiStart: phiStart,
			phiLength: phiLength
		};
		this.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );
		this.mergeVertices();
	}
	LatheGeometry.prototype = Object.create( Geometry.prototype );
	LatheGeometry.prototype.constructor = LatheGeometry;
	function LatheBufferGeometry( points, segments, phiStart, phiLength ) {
		BufferGeometry.call( this );
		this.type = 'LatheBufferGeometry';
		this.parameters = {
			points: points,
			segments: segments,
			phiStart: phiStart,
			phiLength: phiLength
		};
		segments = Math.floor( segments ) || 12;
		phiStart = phiStart || 0;
		phiLength = phiLength || Math.PI * 2;
		phiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );
		var indices = [];
		var vertices = [];
		var uvs = [];
		var base;
		var inverseSegments = 1.0 / segments;
		var vertex = new Vector3();
		var uv = new Vector2();
		var i, j;
		for ( i = 0; i <= segments; i ++ ) {
			var phi = phiStart + i * inverseSegments * phiLength;
			var sin = Math.sin( phi );
			var cos = Math.cos( phi );
			for ( j = 0; j <= ( points.length - 1 ); j ++ ) {
				vertex.x = points[ j ].x * sin;
				vertex.y = points[ j ].y;
				vertex.z = points[ j ].x * cos;
				vertices.push( vertex.x, vertex.y, vertex.z );
				uv.x = i / segments;
				uv.y = j / ( points.length - 1 );
				uvs.push( uv.x, uv.y );
			}
		}
		for ( i = 0; i < segments; i ++ ) {
			for ( j = 0; j < ( points.length - 1 ); j ++ ) {
				base = j + i * points.length;
				var a = base;
				var b = base + points.length;
				var c = base + points.length + 1;
				var d = base + 1;
				indices.push( a, b, d );
				indices.push( b, c, d );
			}
		}
		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
		this.computeVertexNormals();
		if ( phiLength === Math.PI * 2 ) {
			var normals = this.attributes.normal.array;
			var n1 = new Vector3();
			var n2 = new Vector3();
			var n = new Vector3();
			base = segments * points.length * 3;
			for ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {
				n1.x = normals[ j + 0 ];
				n1.y = normals[ j + 1 ];
				n1.z = normals[ j + 2 ];
				n2.x = normals[ base + j + 0 ];
				n2.y = normals[ base + j + 1 ];
				n2.z = normals[ base + j + 2 ];
				n.addVectors( n1, n2 ).normalize();
				normals[ j + 0 ] = normals[ base + j + 0 ] = n.x;
				normals[ j + 1 ] = normals[ base + j + 1 ] = n.y;
				normals[ j + 2 ] = normals[ base + j + 2 ] = n.z;
			}
		}
	}
	LatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;
	/**
	 * @author jonobr1 / http://jonobr1.com
	 * @author Mugen87 / https://github.com/Mugen87
	 */
	function ShapeGeometry( shapes, curveSegments ) {
		Geometry.call( this );
		this.type = 'ShapeGeometry';
		if ( typeof curveSegments === 'object' ) {
			console.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );
			curveSegments = curveSegments.curveSegments;
		}
		this.parameters = {
			shapes: shapes,
			curveSegments: curveSegments
		};
		this.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );
		this.mergeVertices();
	}
	ShapeGeometry.prototype = Object.create( Geometry.prototype );
	ShapeGeometry.prototype.constructor = ShapeGeometry;
	ShapeGeometry.prototype.toJSON = function () {
		var data = Geometry.prototype.toJSON.call( this );
		var shapes = this.parameters.shapes;
		return toJSON$1( shapes, data );
	};
	function ShapeBufferGeometry( shapes, curveSegments ) {
		BufferGeometry.call( this );
		this.type = 'ShapeBufferGeometry';
		this.parameters = {
			shapes: shapes,
			curveSegments: curveSegments
		};
		curveSegments = curveSegments || 12;
		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];
		var groupStart = 0;
		var groupCount = 0;
		if ( Array.isArray( shapes ) === false ) {
			addShape( shapes );
		} else {
			for ( var i = 0; i < shapes.length; i ++ ) {
				addShape( shapes[ i ] );
				this.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support
				groupStart += groupCount;
				groupCount = 0;
			}
		}
		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
		function addShape( shape ) {
			var i, l, shapeHole;
			var indexOffset = vertices.length / 3;
			var points = shape.extractPoints( curveSegments );
			var shapeVertices = points.shape;
			var shapeHoles = points.holes;
			if ( ShapeUtils.isClockWise( shapeVertices ) === false ) {
				shapeVertices = shapeVertices.reverse();
			}
			for ( i = 0, l = shapeHoles.length; i < l; i ++ ) {
				shapeHole = shapeHoles[ i ];
				if ( ShapeUtils.isClockWise( shapeHole ) === true ) {
					shapeHoles[ i ] = shapeHole.reverse();
				}
			}
			var faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );
			for ( i = 0, l = shapeHoles.length; i < l; i ++ ) {
				shapeHole = shapeHoles[ i ];
				shapeVertices = shapeVertices.concat( shapeHole );
			}
			for ( i = 0, l = shapeVertices.length; i < l; i ++ ) {
				var vertex = shapeVertices[ i ];
				vertices.push( vertex.x, vertex.y, 0 );
				normals.push( 0, 0, 1 );
				uvs.push( vertex.x, vertex.y ); // world uvs
			}
			for ( i = 0, l = faces.length; i < l; i ++ ) {
				var face = faces[ i ];
				var a = face[ 0 ] + indexOffset;
				var b = face[ 1 ] + indexOffset;
				var c = face[ 2 ] + indexOffset;
				indices.push( a, b, c );
				groupCount += 3;
			}
		}
	}
	ShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	ShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;
	ShapeBufferGeometry.prototype.toJSON = function () {
		var data = BufferGeometry.prototype.toJSON.call( this );
		var shapes = this.parameters.shapes;
		return toJSON$1( shapes, data );
	};
	function toJSON$1( shapes, data ) {
		data.shapes = [];
		if ( Array.isArray( shapes ) ) {
			for ( var i = 0, l = shapes.length; i < l; i ++ ) {
				var shape = shapes[ i ];
				data.shapes.push( shape.uuid );
			}
		} else {
			data.shapes.push( shapes.uuid );
		}
		return data;
	}
	/**
	 * @author WestLangley / http://github.com/WestLangley
	 * @author Mugen87 / https://github.com/Mugen87
	 */
	function EdgesGeometry( geometry, thresholdAngle ) {
		BufferGeometry.call( this );
		this.type = 'EdgesGeometry';
		this.parameters = {
			thresholdAngle: thresholdAngle
		};
		thresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;
		var vertices = [];
		var thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );
		var edge = [ 0, 0 ], edges = {}, edge1, edge2;
		var key, keys = [ 'a', 'b', 'c' ];
		var geometry2;
		if ( geometry.isBufferGeometry ) {
			geometry2 = new Geometry();
			geometry2.fromBufferGeometry( geometry );
		} else {
			geometry2 = geometry.clone();
		}
		geometry2.mergeVertices();
		geometry2.computeFaceNormals();
		var sourceVertices = geometry2.vertices;
		var faces = geometry2.faces;
		for ( var i = 0, l = faces.length; i < l; i ++ ) {
			var face = faces[ i ];
			for ( var j = 0; j < 3; j ++ ) {
				edge1 = face[ keys[ j ] ];
				edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
				edge[ 0 ] = Math.min( edge1, edge2 );
				edge[ 1 ] = Math.max( edge1, edge2 );
				key = edge[ 0 ] + ',' + edge[ 1 ];
				if ( edges[ key ] === undefined ) {
					edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };
				} else {
					edges[ key ].face2 = i;
				}
			}
		}
		for ( key in edges ) {
			var e = edges[ key ];
			if ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {
				var vertex = sourceVertices[ e.index1 ];
				vertices.push( vertex.x, vertex.y, vertex.z );
				vertex = sourceVertices[ e.index2 ];
				vertices.push( vertex.x, vertex.y, vertex.z );
			}
		}
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	}
	EdgesGeometry.prototype = Object.create( BufferGeometry.prototype );
	EdgesGeometry.prototype.constructor = EdgesGeometry;
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */
	function CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {
		Geometry.call( this );
		this.type = 'CylinderGeometry';
		this.parameters = {
			radiusTop: radiusTop,
			radiusBottom: radiusBottom,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};
		this.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );
		this.mergeVertices();
	}
	CylinderGeometry.prototype = Object.create( Geometry.prototype );
	CylinderGeometry.prototype.constructor = CylinderGeometry;
	function CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {
		BufferGeometry.call( this );
		this.type = 'CylinderBufferGeometry';
		this.parameters = {
			radiusTop: radiusTop,
			radiusBottom: radiusBottom,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};
		var scope = this;
		radiusTop = radiusTop !== undefined ? radiusTop : 1;
		radiusBottom = radiusBottom !== undefined ? radiusBottom : 1;
		height = height || 1;
		radialSegments = Math.floor( radialSegments ) || 8;
		heightSegments = Math.floor( heightSegments ) || 1;
		openEnded = openEnded !== undefined ? openEnded : false;
		thetaStart = thetaStart !== undefined ? thetaStart : 0.0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;
		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];
		var index = 0;
		var indexArray = [];
		var halfHeight = height / 2;
		var groupStart = 0;
		generateTorso();
		if ( openEnded === false ) {
			if ( radiusTop > 0 ) generateCap( true );
			if ( radiusBottom > 0 ) generateCap( false );
		}
		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
		function generateTorso() {
			var x, y;
			var normal = new Vector3();
			var vertex = new Vector3();
			var groupCount = 0;
			var slope = ( radiusBottom - radiusTop ) / height;
			for ( y = 0; y <= heightSegments; y ++ ) {
				var indexRow = [];
				var v = y / heightSegments;
				var radius = v * ( radiusBottom - radiusTop ) + radiusTop;
				for ( x = 0; x <= radialSegments; x ++ ) {
					var u = x / radialSegments;
					var theta = u * thetaLength + thetaStart;
					var sinTheta = Math.sin( theta );
					var cosTheta = Math.cos( theta );
					vertex.x = radius * sinTheta;
					vertex.y = - v * height + halfHeight;
					vertex.z = radius * cosTheta;
					vertices.push( vertex.x, vertex.y, vertex.z );
					normal.set( sinTheta, slope, cosTheta ).normalize();
					normals.push( normal.x, normal.y, normal.z );
					uvs.push( u, 1 - v );
					indexRow.push( index ++ );
				}
				indexArray.push( indexRow );
			}
			for ( x = 0; x < radialSegments; x ++ ) {
				for ( y = 0; y < heightSegments; y ++ ) {
					var a = indexArray[ y ][ x ];
					var b = indexArray[ y + 1 ][ x ];
					var c = indexArray[ y + 1 ][ x + 1 ];
					var d = indexArray[ y ][ x + 1 ];
					indices.push( a, b, d );
					indices.push( b, c, d );
					groupCount += 6;
				}
			}
			scope.addGroup( groupStart, groupCount, 0 );
			groupStart += groupCount;
		}
		function generateCap( top ) {
			var x, centerIndexStart, centerIndexEnd;
			var uv = new Vector2();
			var vertex = new Vector3();
			var groupCount = 0;
			var radius = ( top === true ) ? radiusTop : radiusBottom;
			var sign = ( top === true ) ? 1 : - 1;
			centerIndexStart = index;
			for ( x = 1; x <= radialSegments; x ++ ) {
				vertices.push( 0, halfHeight * sign, 0 );
				normals.push( 0, sign, 0 );
				uvs.push( 0.5, 0.5 );
				index ++;
			}
			centerIndexEnd = index;
			for ( x = 0; x <= radialSegments; x ++ ) {
				var u = x / radialSegments;
				var theta = u * thetaLength + thetaStart;
				var cosTheta = Math.cos( theta );
				var sinTheta = Math.sin( theta );
				vertex.x = radius * sinTheta;
				vertex.y = halfHeight * sign;
				vertex.z = radius * cosTheta;
				vertices.push( vertex.x, vertex.y, vertex.z );
				normals.push( 0, sign, 0 );
				uv.x = ( cosTheta * 0.5 ) + 0.5;
				uv.y = ( sinTheta * 0.5 * sign ) + 0.5;
				uvs.push( uv.x, uv.y );
				index ++;
			}
			for ( x = 0; x < radialSegments; x ++ ) {
				var c = centerIndexStart + x;
				var i = centerIndexEnd + x;
				if ( top === true ) {
					indices.push( i, i + 1, c );
				} else {
					indices.push( i + 1, i, c );
				}
				groupCount += 3;
			}
			scope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );
			groupStart += groupCount;
		}
	}
	CylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;
	/**
	 * @author abelnation / http://github.com/abelnation
	 */
	function ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {
		CylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );
		this.type = 'ConeGeometry';
		this.parameters = {
			radius: radius,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};
	}
	ConeGeometry.prototype = Object.create( CylinderGeometry.prototype );
	ConeGeometry.prototype.constructor = ConeGeometry;
	function ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {
		CylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );
		this.type = 'ConeBufferGeometry';
		this.parameters = {
			radius: radius,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};
	}
	ConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );
	ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;
	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 * @author Mugen87 / https://github.com/Mugen87
	 * @author hughes
	 */
	function CircleGeometry( radius, segments, thetaStart, thetaLength ) {
		Geometry.call( this );
		this.type = 'CircleGeometry';
		this.parameters = {
			radius: radius,
			segments: segments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};
		this.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );
		this.mergeVertices();
	}
	CircleGeometry.prototype = Object.create( Geometry.prototype );
	CircleGeometry.prototype.constructor = CircleGeometry;
	function CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {
		BufferGeometry.call( this );
		this.type = 'CircleBufferGeometry';
		this.parameters = {
			radius: radius,
			segments: segments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};
		radius = radius || 1;
		segments = segments !== undefined ? Math.max( 3, segments ) : 8;
		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;
		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];
		var i, s;
		var vertex = new Vector3();
		var uv = new Vector2();
		vertices.push( 0, 0, 0 );
		normals.push( 0, 0, 1 );
		uvs.push( 0.5, 0.5 );
		for ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {
			var segment = thetaStart + s / segments * thetaLength;
			vertex.x = radius * Math.cos( segment );
			vertex.y = radius * Math.sin( segment );
			vertices.push( vertex.x, vertex.y, vertex.z );
			normals.push( 0, 0, 1 );
			uv.x = ( vertices[ i ] / radius + 1 ) / 2;
			uv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;
			uvs.push( uv.x, uv.y );
		}
		for ( i = 1; i <= segments; i ++ ) {
			indices.push( i, i + 1, 0 );
		}
		this.setIndex( indices );
		this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
	}
	CircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;
	var Geometries = /*#__PURE__*/Object.freeze({
		WireframeGeometry: WireframeGeometry,
		ParametricGeometry: ParametricGeometry,
		ParametricBufferGeometry: ParametricBufferGeometry,
		TetrahedronGeometry: TetrahedronGeometry,
		TetrahedronBufferGeometry: TetrahedronBufferGeometry,
		OctahedronGeometry: OctahedronGeometry,
		OctahedronBufferGeometry: OctahedronBufferGeometry,
		IcosahedronGeometry: IcosahedronGeometry,
		IcosahedronBufferGeometry: IcosahedronBufferGeometry,
		DodecahedronGeometry: DodecahedronGeometry,
		DodecahedronBufferGeometry: DodecahedronBufferGeometry,
		PolyhedronGeometry: PolyhedronGeometry,
		PolyhedronBufferGeometry: PolyhedronBufferGeometry,
		TubeGeometry: TubeGeometry,
		TubeBufferGeometry: TubeBufferGeometry,
		TorusKnotGeometry: TorusKnotGeometry,
		TorusKnotBufferGeometry: TorusKnotBufferGeometry,
		TorusGeometry: TorusGeometry,
		TorusBufferGeometry: TorusBufferGeometry,
		TextGeometry: TextGeometry,
		TextBufferGeometry: TextBufferGeometry,
		SphereGeometry: SphereGeometry,
		SphereBufferGeometry: SphereBufferGeometry,
		RingGeometry: RingGeometry,
		RingBufferGeometry: RingBufferGeometry,
		PlaneGeometry: PlaneGeometry,
		PlaneBufferGeometry: PlaneBufferGeometry,
		LatheGeometry: LatheGeometry,
		LatheBufferGeometry: LatheBufferGeometry,
		ShapeGeometry: ShapeGeometry,
		ShapeBufferGeometry: ShapeBufferGeometry,
		ExtrudeGeometry: ExtrudeGeometry,
		ExtrudeBufferGeometry: ExtrudeBufferGeometry,
		EdgesGeometry: EdgesGeometry,
		ConeGeometry: ConeGeometry,
		ConeBufferGeometry: ConeBufferGeometry,
		CylinderGeometry: CylinderGeometry,
		CylinderBufferGeometry: CylinderBufferGeometry,
		CircleGeometry: CircleGeometry,
		CircleBufferGeometry: CircleBufferGeometry,
		BoxGeometry: BoxGeometry,
		BoxBufferGeometry: BoxBufferGeometry
	});
	/**
	 * @author mrdoob / http://mrdoob.com/
	 *
	 * parameters = {
	 *  color: <THREE.Color>
	 * }
	 */
	function ShadowMaterial( parameters ) {
		Material.call( this );
		this.type = 'ShadowMaterial';
		this.color = new Color( 0x000000 );
		this.transparent = true;
		this.setValues( parameters );
	}
	ShadowMaterial.prototype = Object.create( Material.prototype );
	ShadowMaterial.prototype.constructor = ShadowMaterial;
	ShadowMaterial.prototype.isShadowMaterial = true;
	ShadowMaterial.prototype.copy = function ( source ) {
		Material.prototype.copy.call( this, source );
		this.color.copy( source.color );
		return this;
	};
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function RawShaderMaterial( parameters ) {
		ShaderMaterial.call( this, parameters );
		this.type = 'RawShaderMaterial';
	}
	RawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );
	RawShaderMaterial.prototype.constructor = RawShaderMaterial;
	RawShaderMaterial.prototype.isRawShaderMaterial = true;
	/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  roughness: <float>,
	 *  metalness: <float>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissive: <hex>,
	 *  emissiveIntensity: <float>
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalMapType: THREE.TangentSpaceNormalMap,
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  roughnessMap: new THREE.Texture( <Image> ),
	 *
	 *  metalnessMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *  envMapIntensity: <float>
	 *
	 *  refractionRatio: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */
	function MeshStandardMaterial( parameters ) {
		Material.call( this );
		this.defines = { 'STANDARD': '' };
		this.type = 'MeshStandardMaterial';
		this.color = new Color( 0xffffff ); // diffuse
		this.roughness = 0.5;
		this.metalness = 0.5;
		this.map = null;
		this.lightMap = null;
		this.lightMapIntensity = 1.0;
		this.aoMap = null;
		this.aoMapIntensity = 1.0;
		this.emissive = new Color( 0x000000 );
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;
		this.bumpMap = null;
		this.bumpScale = 1;
		this.normalMap = null;
		this.normalMapType = TangentSpaceNormalMap;
		this.normalScale = new Vector2( 1, 1 );
		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;
		this.roughnessMap = null;
		this.metalnessMap = null;
		this.alphaMap = null;
		this.envMap = null;
		this.envMapIntensity = 1.0;
		this.refractionRatio = 0.98;
		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';
		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;
		this.setValues( parameters );
	}
	MeshStandardMaterial.prototype = Object.create( Material.prototype );
	MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;
	MeshStandardMaterial.prototype.isMeshStandardMaterial = true;
	MeshStandardMaterial.prototype.copy = function ( source ) {
		Material.prototype.copy.call( this, source );
		this.defines = { 'STANDARD': '' };
		this.color.copy( source.color );
		this.roughness = source.roughness;
		this.metalness = source.metalness;
		this.map = source.map;
		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;
		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;
		this.emissive.copy( source.emissive );
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;
		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;
		this.normalMap = source.normalMap;
		this.normalMapType = source.normalMapType;
		this.normalScale.copy( source.normalScale );
		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;
		this.roughnessMap = source.roughnessMap;
		this.metalnessMap = source.metalnessMap;
		this.alphaMap = source.alphaMap;
		this.envMap = source.envMap;
		this.envMapIntensity = source.envMapIntensity;
		this.refractionRatio = source.refractionRatio;
		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;
		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;
		return this;
	};
	/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *  reflectivity: <float>
	 *  clearCoat: <float>
	 *  clearCoatRoughness: <float>
	 * }
	 */
	function MeshPhysicalMaterial( parameters ) {
		MeshStandardMaterial.call( this );
		this.defines = { 'PHYSICAL': '' };
		this.type = 'MeshPhysicalMaterial';
		this.reflectivity = 0.5; // maps to F0 = 0.04
		this.clearCoat = 0.0;
		this.clearCoatRoughness = 0.0;
		this.setValues( parameters );
	}
	MeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );
	MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;
	MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;
	MeshPhysicalMaterial.prototype.copy = function ( source ) {
		MeshStandardMaterial.prototype.copy.call( this, source );
		this.defines = { 'PHYSICAL': '' };
		this.reflectivity = source.reflectivity;
		this.clearCoat = source.clearCoat;
		this.clearCoatRoughness = source.clearCoatRoughness;
		return this;
	};
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  specular: <hex>,
	 *  shininess: <float>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissive: <hex>,
	 *  emissiveIntensity: <float>
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalMapType: THREE.TangentSpaceNormalMap,
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */
	function MeshPhongMaterial( parameters ) {
		Material.call( this );
		this.type = 'MeshPhongMaterial';
		this.color = new Color( 0xffffff ); // diffuse
		this.specular = new Color( 0x111111 );
		this.shininess = 30;
		this.map = null;
		this.lightMap = null;
		this.lightMapIntensity = 1.0;
		this.aoMap = null;
		this.aoMapIntensity = 1.0;
		this.emissive = new Color( 0x000000 );
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;
		this.bumpMap = null;
		this.bumpScale = 1;
		this.normalMap = null;
		this.normalMapType = TangentSpaceNormalMap;
		this.normalScale = new Vector2( 1, 1 );
		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;
		this.specularMap = null;
		this.alphaMap = null;
		this.envMap = null;
		this.combine = MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;
		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';
		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;
		this.setValues( parameters );
	}
	MeshPhongMaterial.prototype = Object.create( Material.prototype );
	MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;
	MeshPhongMaterial.prototype.isMeshPhongMaterial = true;
	MeshPhongMaterial.prototype.copy = function ( source ) {
		Material.prototype.copy.call( this, source );
		this.color.copy( source.color );
		this.specular.copy( source.specular );
		this.shininess = source.shininess;
		this.map = source.map;
		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;
		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;
		this.emissive.copy( source.emissive );
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;
		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;
		this.normalMap = source.normalMap;
		this.normalMapType = source.normalMapType;
		this.normalScale.copy( source.normalScale );
		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;
		this.specularMap = source.specularMap;
		this.alphaMap = source.alphaMap;
		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;
		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;
		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;
		return this;
	};
	/**
	 * @author takahirox / http://github.com/takahirox
	 *
	 * parameters = {
	 *  gradientMap: new THREE.Texture( <Image> )
	 * }
	 */
	function MeshToonMaterial( parameters ) {
		MeshPhongMaterial.call( this );
		this.defines = { 'TOON': '' };
		this.type = 'MeshToonMaterial';
		this.gradientMap = null;
		this.setValues( parameters );
	}
	MeshToonMaterial.prototype = Object.create( MeshPhongMaterial.prototype );
	MeshToonMaterial.prototype.constructor = MeshToonMaterial;
	MeshToonMaterial.prototype.isMeshToonMaterial = true;
	MeshToonMaterial.prototype.copy = function ( source ) {
		MeshPhongMaterial.prototype.copy.call( this, source );
		this.gradientMap = source.gradientMap;
		return this;
	};
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *  opacity: <float>,
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalMapType: THREE.TangentSpaceNormalMap,
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */
	function MeshNormalMaterial( parameters ) {
		Material.call( this );
		this.type = 'MeshNormalMaterial';
		this.bumpMap = null;
		this.bumpScale = 1;
		this.normalMap = null;
		this.normalMapType = TangentSpaceNormalMap;
		this.normalScale = new Vector2( 1, 1 );
		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;
		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.fog = false;
		this.lights = false;
		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;
		this.setValues( parameters );
	}
	MeshNormalMaterial.prototype = Object.create( Material.prototype );
	MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;
	MeshNormalMaterial.prototype.isMeshNormalMaterial = true;
	MeshNormalMaterial.prototype.copy = function ( source ) {
		Material.prototype.copy.call( this, source );
		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;
		this.normalMap = source.normalMap;
		this.normalMapType = source.normalMapType;
		this.normalScale.copy( source.normalScale );
		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;
		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;
		return this;
	};
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissive: <hex>,
	 *  emissiveIntensity: <float>
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */
	function MeshLambertMaterial( parameters ) {
		Material.call( this );
		this.type = 'MeshLambertMaterial';
		this.color = new Color( 0xffffff ); // diffuse
		this.map = null;
		this.lightMap = null;
		this.lightMapIntensity = 1.0;
		this.aoMap = null;
		this.aoMapIntensity = 1.0;
		this.emissive = new Color( 0x000000 );
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;
		this.specularMap = null;
		this.alphaMap = null;
		this.envMap = null;
		this.combine = MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;
		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';
		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;
		this.setValues( parameters );
	}
	MeshLambertMaterial.prototype = Object.create( Material.prototype );
	MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;
	MeshLambertMaterial.prototype.isMeshLambertMaterial = true;
	MeshLambertMaterial.prototype.copy = function ( source ) {
		Material.prototype.copy.call( this, source );
		this.color.copy( source.color );
		this.map = source.map;
		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;
		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;
		this.emissive.copy( source.emissive );
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;
		this.specularMap = source.specularMap;
		this.alphaMap = source.alphaMap;
		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;
		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;
		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;
		return this;
	};
	/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  matcap: new THREE.Texture( <Image> ),
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalMapType: THREE.TangentSpaceNormalMap,
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */
	function MeshMatcapMaterial( parameters ) {
		Material.call( this );
		this.defines = { 'MATCAP': '' };
		this.type = 'MeshMatcapMaterial';
		this.color = new Color( 0xffffff ); // diffuse
		this.matcap = null;
		this.map = null;
		this.bumpMap = null;
		this.bumpScale = 1;
		this.normalMap = null;
		this.normalMapType = TangentSpaceNormalMap;
		this.normalScale = new Vector2( 1, 1 );
		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;
		this.alphaMap = null;
		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;
		this.lights = false;
		this.setValues( parameters );
	}
	MeshMatcapMaterial.prototype = Object.create( Material.prototype );
	MeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;
	MeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;
	MeshMatcapMaterial.prototype.copy = function ( source ) {
		Material.prototype.copy.call( this, source );
		this.defines = { 'MATCAP': '' };
		this.color.copy( source.color );
		this.matcap = source.matcap;
		this.map = source.map;
		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;
		this.normalMap = source.normalMap;
		this.normalMapType = source.normalMapType;
		this.normalScale.copy( source.normalScale );
		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;
		this.alphaMap = source.alphaMap;
		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;
		return this;
	};
	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  linewidth: <float>,
	 *
	 *  scale: <float>,
	 *  dashSize: <float>,
	 *  gapSize: <float>
	 * }
	 */
	function LineDashedMaterial( parameters ) {
		LineBasicMaterial.call( this );
		this.type = 'LineDashedMaterial';
		this.scale = 1;
		this.dashSize = 3;
		this.gapSize = 1;
		this.setValues( parameters );
	}
	LineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );
	LineDashedMaterial.prototype.constructor = LineDashedMaterial;
	LineDashedMaterial.prototype.isLineDashedMaterial = true;
	LineDashedMaterial.prototype.copy = function ( source ) {
		LineBasicMaterial.prototype.copy.call( this, source );
		this.scale = source.scale;
		this.dashSize = source.dashSize;
		this.gapSize = source.gapSize;
		return this;
	};
	var Materials = /*#__PURE__*/Object.freeze({
		ShadowMaterial: ShadowMaterial,
		SpriteMaterial: SpriteMaterial,
		RawShaderMaterial: RawShaderMaterial,
		ShaderMaterial: ShaderMaterial,
		PointsMaterial: PointsMaterial,
		MeshPhysicalMaterial: MeshPhysicalMaterial,
		MeshStandardMaterial: MeshStandardMaterial,
		MeshPhongMaterial: MeshPhongMaterial,
		MeshToonMaterial: MeshToonMaterial,
		MeshNormalMaterial: MeshNormalMaterial,
		MeshLambertMaterial: MeshLambertMaterial,
		MeshDepthMaterial: MeshDepthMaterial,
		MeshDistanceMaterial: MeshDistanceMaterial,
		MeshBasicMaterial: MeshBasicMaterial,
		MeshMatcapMaterial: MeshMatcapMaterial,
		LineDashedMaterial: LineDashedMaterial,
		LineBasicMaterial: LineBasicMaterial,
		Material: Material
	});
	/**
	 * @author tschw
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */
	var AnimationUtils = {
		arraySlice: function ( array, from, to ) {
			if ( AnimationUtils.isTypedArray( array ) ) {
				return new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );
			}
			return array.slice( from, to );
		},
		convertArray: function ( array, type, forceClone ) {
			if ( ! array || // let 'undefined' and 'null' pass
				! forceClone && array.constructor === type ) return array;
			if ( typeof type.BYTES_PER_ELEMENT === 'number' ) {
				return new type( array ); // create typed array
			}
			return Array.prototype.slice.call( array ); // create Array
		},
		isTypedArray: function ( object ) {
			return ArrayBuffer.isView( object ) &&
				! ( object instanceof DataView );
		},
		getKeyframeOrder: function ( times ) {
			function compareTime( i, j ) {
				return times[ i ] - times[ j ];
			}
			var n = times.length;
			var result = new Array( n );
			for ( var i = 0; i !== n; ++ i ) result[ i ] = i;
			result.sort( compareTime );
			return result;
		},
		sortedArray: function ( values, stride, order ) {
			var nValues = values.length;
			var result = new values.constructor( nValues );
			for ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {
				var srcOffset = order[ i ] * stride;
				for ( var j = 0; j !== stride; ++ j ) {
					result[ dstOffset ++ ] = values[ srcOffset + j ];
				}
			}
			return result;
		},
		flattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {
			var i = 1, key = jsonKeys[ 0 ];
			while ( key !== undefined && key[ valuePropertyName ] === undefined ) {
				key = jsonKeys[ i ++ ];
			}
			if ( key === undefined ) return; // no data
			var value = key[ valuePropertyName ];
			if ( value === undefined ) return; // no data
			if ( Array.isArray( value ) ) {
				do {
					value = key[ valuePropertyName ];
					if ( value !== undefined ) {
						times.push( key.time );
						values.push.apply( values, value ); // push all elements
					}
					key = jsonKeys[ i ++ ];
				} while ( key !== undefined );
			} else if ( value.toArray !== undefined ) {
				do {
					value = key[ valuePropertyName ];
					if ( value !== undefined ) {
						times.push( key.time );
						value.toArray( values, values.length );
					}
					key = jsonKeys[ i ++ ];
				} while ( key !== undefined );
			} else {
				do {
					value = key[ valuePropertyName ];
					if ( value !== undefined ) {
						times.push( key.time );
						values.push( value );
					}
					key = jsonKeys[ i ++ ];
				} while ( key !== undefined );
			}
		}
	};
	/**
	 * Abstract base class of interpolants over parametric samples.
	 *
	 * The parameter domain is one dimensional, typically the time or a path
	 * along a curve defined by the data.
	 *
	 * The sample values can have any dimensionality and derived classes may
	 * apply special interpretations to the data.
	 *
	 * This class provides the interval seek in a Template Method, deferring
	 * the actual interpolation to derived classes.
	 *
	 * Time complexity is O(1) for linear access crossing at most two points
	 * and O(log N) for random access, where N is the number of positions.
	 *
	 * References:
	 *
	 * 		http://www.oodesign.com/template-method-pattern.html
	 *
	 * @author tschw
	 */
	function Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
		this.parameterPositions = parameterPositions;
		this._cachedIndex = 0;
		this.resultBuffer = resultBuffer !== undefined ?
			resultBuffer : new sampleValues.constructor( sampleSize );
		this.sampleValues = sampleValues;
		this.valueSize = sampleSize;
	}
	Object.assign( Interpolant.prototype, {
		evaluate: function ( t ) {
			var pp = this.parameterPositions,
				i1 = this._cachedIndex,
				t1 = pp[ i1 ],
				t0 = pp[ i1 - 1 ];
			validate_interval: {
				seek: {
					var right;
					linear_scan: {
						forward_scan: if ( ! ( t < t1 ) ) {
							for ( var giveUpAt = i1 + 2; ; ) {
								if ( t1 === undefined ) {
									if ( t < t0 ) break forward_scan;
									i1 = pp.length;
									this._cachedIndex = i1;
									return this.afterEnd_( i1 - 1, t, t0 );
								}
								if ( i1 === giveUpAt ) break; // this loop
								t0 = t1;
								t1 = pp[ ++ i1 ];
								if ( t < t1 ) {
									break seek;
								}
							}
							right = pp.length;
							break linear_scan;
						}
						if ( ! ( t >= t0 ) ) {
							var t1global = pp[ 1 ];
							if ( t < t1global ) {
								i1 = 2; // + 1, using the scan for the details
								t0 = t1global;
							}
							for ( var giveUpAt = i1 - 2; ; ) {
								if ( t0 === undefined ) {
									this._cachedIndex = 0;
									return this.beforeStart_( 0, t, t1 );
								}
								if ( i1 === giveUpAt ) break; // this loop
								t1 = t0;
								t0 = pp[ -- i1 - 1 ];
								if ( t >= t0 ) {
									break seek;
								}
							}
							right = i1;
							i1 = 0;
							break linear_scan;
						}
						break validate_interval;
					} // linear scan
					while ( i1 < right ) {
						var mid = ( i1 + right ) >>> 1;
						if ( t < pp[ mid ] ) {
							right = mid;
						} else {
							i1 = mid + 1;
						}
					}
					t1 = pp[ i1 ];
					t0 = pp[ i1 - 1 ];
					if ( t0 === undefined ) {
						this._cachedIndex = 0;
						return this.beforeStart_( 0, t, t1 );
					}
					if ( t1 === undefined ) {
						i1 = pp.length;
						this._cachedIndex = i1;
						return this.afterEnd_( i1 - 1, t0, t );
					}
				} // seek
				this._cachedIndex = i1;
				this.intervalChanged_( i1, t0, t1 );
			} // validate_interval
			return this.interpolate_( i1, t0, t, t1 );
		},
		settings: null, // optional, subclass-specific settings structure
		DefaultSettings_: {},
		getSettings_: function () {
			return this.settings || this.DefaultSettings_;
		},
		copySampleValue_: function ( index ) {
			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,
				offset = index * stride;
			for ( var i = 0; i !== stride; ++ i ) {
				result[ i ] = values[ offset + i ];
			}
			return result;
		},
		interpolate_: function ( /* i1, t0, t, t1 */ ) {
			throw new Error( 'call to abstract method' );
		},
		intervalChanged_: function ( /* i1, t0, t1 */ ) {
		}
	} );
	Object.assign( Interpolant.prototype, {
		beforeStart_: Interpolant.prototype.copySampleValue_,
		afterEnd_: Interpolant.prototype.copySampleValue_,
	} );
	/**
	 * Fast and simple cubic spline interpolant.
	 *
	 * It was derived from a Hermitian construction setting the first derivative
	 * at each sample position to the linear slope between neighboring positions
	 * over their parameter interval.
	 *
	 * @author tschw
	 */
	function CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
		Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );
		this._weightPrev = - 0;
		this._offsetPrev = - 0;
		this._weightNext = - 0;
		this._offsetNext = - 0;
	}
	CubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {
		constructor: CubicInterpolant,
		DefaultSettings_: {
			endingStart: ZeroCurvatureEnding,
			endingEnd: ZeroCurvatureEnding
		},
		intervalChanged_: function ( i1, t0, t1 ) {
			var pp = this.parameterPositions,
				iPrev = i1 - 2,
				iNext = i1 + 1,
				tPrev = pp[ iPrev ],
				tNext = pp[ iNext ];
			if ( tPrev === undefined ) {
				switch ( this.getSettings_().endingStart ) {
					case ZeroSlopeEnding:
						iPrev = i1;
						tPrev = 2 * t0 - t1;
						break;
					case WrapAroundEnding:
						iPrev = pp.length - 2;
						tPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];
						break;
					default: // ZeroCurvatureEnding
						iPrev = i1;
						tPrev = t1;
				}
			}
			if ( tNext === undefined ) {
				switch ( this.getSettings_().endingEnd ) {
					case ZeroSlopeEnding:
						iNext = i1;
						tNext = 2 * t1 - t0;
						break;
					case WrapAroundEnding:
						iNext = 1;
						tNext = t1 + pp[ 1 ] - pp[ 0 ];
						break;
					default: // ZeroCurvatureEnding
						iNext = i1 - 1;
						tNext = t0;
				}
			}
			var halfDt = ( t1 - t0 ) * 0.5,
				stride = this.valueSize;
			this._weightPrev = halfDt / ( t0 - tPrev );
			this._weightNext = halfDt / ( tNext - t1 );
			this._offsetPrev = iPrev * stride;
			this._offsetNext = iNext * stride;
		},
		interpolate_: function ( i1, t0, t, t1 ) {
			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,
				o1 = i1 * stride,		o0 = o1 - stride,
				oP = this._offsetPrev, 	oN = this._offsetNext,
				wP = this._weightPrev,	wN = this._weightNext,
				p = ( t - t0 ) / ( t1 - t0 ),
				pp = p * p,
				ppp = pp * p;
			var sP = - wP * ppp + 2 * wP * pp - wP * p;
			var s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;
			var s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;
			var sN = wN * ppp - wN * pp;
			for ( var i = 0; i !== stride; ++ i ) {
				result[ i ] =
						sP * values[ oP + i ] +
						s0 * values[ o0 + i ] +
						s1 * values[ o1 + i ] +
						sN * values[ oN + i ];
			}
			return result;
		}
	} );
	/**
	 * @author tschw
	 */
	function LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
		Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );
	}
	LinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {
		constructor: LinearInterpolant,
		interpolate_: function ( i1, t0, t, t1 ) {
			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,
				offset1 = i1 * stride,
				offset0 = offset1 - stride,
				weight1 = ( t - t0 ) / ( t1 - t0 ),
				weight0 = 1 - weight1;
			for ( var i = 0; i !== stride; ++ i ) {
				result[ i ] =
						values[ offset0 + i ] * weight0 +
						values[ offset1 + i ] * weight1;
			}
			return result;
		}
	} );
	/**
	 *
	 * Interpolant that evaluates to the sample value at the position preceeding
	 * the parameter.
	 *
	 * @author tschw
	 */
	function DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
		Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );
	}
	DiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {
		constructor: DiscreteInterpolant,
		interpolate_: function ( i1 /*, t0, t, t1 */ ) {
			return this.copySampleValue_( i1 - 1 );
		}
	} );
	/**
	 *
	 * A timed sequence of keyframes for a specific property.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */
	function KeyframeTrack( name, times, values, interpolation ) {
		if ( name === undefined ) throw new Error( 'THREE.KeyframeTrack: track name is undefined' );
		if ( times === undefined || times.length === 0 ) throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name );
		this.name = name;
		this.times = AnimationUtils.convertArray( times, this.TimeBufferType );
		this.values = AnimationUtils.convertArray( values, this.ValueBufferType );
		this.setInterpolation( interpolation || this.DefaultInterpolation );
	}
	Object.assign( KeyframeTrack, {
		toJSON: function ( track ) {
			var trackType = track.constructor;
			var json;
			if ( trackType.toJSON !== undefined ) {
				json = trackType.toJSON( track );
			} else {
				json = {
					'name': track.name,
					'times': AnimationUtils.convertArray( track.times, Array ),
					'values': AnimationUtils.convertArray( track.values, Array )
				};
				var interpolation = track.getInterpolation();
				if ( interpolation !== track.DefaultInterpolation ) {
					json.interpolation = interpolation;
				}
			}
			json.type = track.ValueTypeName; // mandatory
			return json;
		}
	} );
	Object.assign( KeyframeTrack.prototype, {
		constructor: KeyframeTrack,
		TimeBufferType: Float32Array,
		ValueBufferType: Float32Array,
		DefaultInterpolation: InterpolateLinear,
		InterpolantFactoryMethodDiscrete: function ( result ) {
			return new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );
		},
		InterpolantFactoryMethodLinear: function ( result ) {
			return new LinearInterpolant( this.times, this.values, this.getValueSize(), result );
		},
		InterpolantFactoryMethodSmooth: function ( result ) {
			return new CubicInterpolant( this.times, this.values, this.getValueSize(), result );
		},
		setInterpolation: function ( interpolation ) {
			var factoryMethod;
			switch ( interpolation ) {
				case InterpolateDiscrete:
					factoryMethod = this.InterpolantFactoryMethodDiscrete;
					break;
				case InterpolateLinear:
					factoryMethod = this.InterpolantFactoryMethodLinear;
					break;
				case InterpolateSmooth:
					factoryMethod = this.InterpolantFactoryMethodSmooth;
					break;
			}
			if ( factoryMethod === undefined ) {
				var message = "unsupported interpolation for " +
					this.ValueTypeName + " keyframe track named " + this.name;
				if ( this.createInterpolant === undefined ) {
					if ( interpolation !== this.DefaultInterpolation ) {
						this.setInterpolation( this.DefaultInterpolation );
					} else {
						throw new Error( message ); // fatal, in this case
					}
				}
				console.warn( 'THREE.KeyframeTrack:', message );
				return this;
			}
			this.createInterpolant = factoryMethod;
			return this;
		},
		getInterpolation: function () {
			switch ( this.createInterpolant ) {
				case this.InterpolantFactoryMethodDiscrete:
					return InterpolateDiscrete;
				case this.InterpolantFactoryMethodLinear:
					return InterpolateLinear;
				case this.InterpolantFactoryMethodSmooth:
					return InterpolateSmooth;
			}
		},
		getValueSize: function () {
			return this.values.length / this.times.length;
		},
		shift: function ( timeOffset ) {
			if ( timeOffset !== 0.0 ) {
				var times = this.times;
				for ( var i = 0, n = times.length; i !== n; ++ i ) {
					times[ i ] += timeOffset;
				}
			}
			return this;
		},
		scale: function ( timeScale ) {
			if ( timeScale !== 1.0 ) {
				var times = this.times;
				for ( var i = 0, n = times.length; i !== n; ++ i ) {
					times[ i ] *= timeScale;
				}
			}
			return this;
		},
		trim: function ( startTime, endTime ) {
			var times = this.times,
				nKeys = times.length,
				from = 0,
				to = nKeys - 1;
			while ( from !== nKeys && times[ from ] < startTime ) {
				++ from;
			}
			while ( to !== - 1 && times[ to ] > endTime ) {
				-- to;
			}
			++ to; // inclusive -> exclusive bound
			if ( from !== 0 || to !== nKeys ) {
				if ( from >= to ) to = Math.max( to, 1 ), from = to - 1;
				var stride = this.getValueSize();
				this.times = AnimationUtils.arraySlice( times, from, to );
				this.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );
			}
			return this;
		},
		validate: function () {
			var valid = true;
			var valueSize = this.getValueSize();
			if ( valueSize - Math.floor( valueSize ) !== 0 ) {
				console.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );
				valid = false;
			}
			var times = this.times,
				values = this.values,
				nKeys = times.length;
			if ( nKeys === 0 ) {
				console.error( 'THREE.KeyframeTrack: Track is empty.', this );
				valid = false;
			}
			var prevTime = null;
			for ( var i = 0; i !== nKeys; i ++ ) {
				var currTime = times[ i ];
				if ( typeof currTime === 'number' && isNaN( currTime ) ) {
					console.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );
					valid = false;
					break;
				}
				if ( prevTime !== null && prevTime > currTime ) {
					console.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );
					valid = false;
					break;
				}
				prevTime = currTime;
			}
			if ( values !== undefined ) {
				if ( AnimationUtils.isTypedArray( values ) ) {
					for ( var i = 0, n = values.length; i !== n; ++ i ) {
						var value = values[ i ];
						if ( isNaN( value ) ) {
							console.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );
							valid = false;
							break;
						}
					}
				}
			}
			return valid;
		},
		optimize: function () {
			var times = this.times,
				values = this.values,
				stride = this.getValueSize(),
				smoothInterpolation = this.getInterpolation() === InterpolateSmooth,
				writeIndex = 1,
				lastIndex = times.length - 1;
			for ( var i = 1; i < lastIndex; ++ i ) {
				var keep = false;
				var time = times[ i ];
				var timeNext = times[ i + 1 ];
				if ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {
					if ( ! smoothInterpolation ) {
						var offset = i * stride,
							offsetP = offset - stride,
							offsetN = offset + stride;
						for ( var j = 0; j !== stride; ++ j ) {
							var value = values[ offset + j ];
							if ( value !== values[ offsetP + j ] ||
								value !== values[ offsetN + j ] ) {
								keep = true;
								break;
							}
						}
					} else {
						keep = true;
					}
				}
				if ( keep ) {
					if ( i !== writeIndex ) {
						times[ writeIndex ] = times[ i ];
						var readOffset = i * stride,
							writeOffset = writeIndex * stride;
						for ( var j = 0; j !== stride; ++ j ) {
							values[ writeOffset + j ] = values[ readOffset + j ];
						}
					}
					++ writeIndex;
				}
			}
			if ( lastIndex > 0 ) {
				times[ writeIndex ] = times[ lastIndex ];
				for ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {
					values[ writeOffset + j ] = values[ readOffset + j ];
				}
				++ writeIndex;
			}
			if ( writeIndex !== times.length ) {
				this.times = AnimationUtils.arraySlice( times, 0, writeIndex );
				this.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );
			}
			return this;
		},
		clone: function () {
			var times = AnimationUtils.arraySlice( this.times, 0 );
			var values = AnimationUtils.arraySlice( this.values, 0 );
			var TypedKeyframeTrack = this.constructor;
			var track = new TypedKeyframeTrack( this.name, times, values );
			track.createInterpolant = this.createInterpolant;
			return track;
		}
	} );
	/**
	 *
	 * A Track of Boolean keyframe values.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */
	function BooleanKeyframeTrack( name, times, values ) {
		KeyframeTrack.call( this, name, times, values );
	}
	BooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {
		constructor: BooleanKeyframeTrack,
		ValueTypeName: 'bool',
		ValueBufferType: Array,
		DefaultInterpolation: InterpolateDiscrete,
		InterpolantFactoryMethodLinear: undefined,
		InterpolantFactoryMethodSmooth: undefined
	} );
	/**
	 *
	 * A Track of keyframe values that represent color.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */
	function ColorKeyframeTrack( name, times, values, interpolation ) {
		KeyframeTrack.call( this, name, times, values, interpolation );
	}
	ColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {
		constructor: ColorKeyframeTrack,
		ValueTypeName: 'color'
	} );
	/**
	 *
	 * A Track of numeric keyframe values.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */
	function NumberKeyframeTrack( name, times, values, interpolation ) {
		KeyframeTrack.call( this, name, times, values, interpolation );
	}
	NumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {
		constructor: NumberKeyframeTrack,
		ValueTypeName: 'number'
	} );
	/**
	 * Spherical linear unit quaternion interpolant.
	 *
	 * @author tschw
	 */
	function QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
		Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );
	}
	QuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {
		constructor: QuaternionLinearInterpolant,
		interpolate_: function ( i1, t0, t, t1 ) {
			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,
				offset = i1 * stride,
				alpha = ( t - t0 ) / ( t1 - t0 );
			for ( var end = offset + stride; offset !== end; offset += 4 ) {
				Quaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );
			}
			return result;
		}
	} );
	/**
	 *
	 * A Track of quaternion keyframe values.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */
	function QuaternionKeyframeTrack( name, times, values, interpolation ) {
		KeyframeTrack.call( this, name, times, values, interpolation );
	}
	QuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {
		constructor: QuaternionKeyframeTrack,
		ValueTypeName: 'quaternion',
		DefaultInterpolation: InterpolateLinear,
		InterpolantFactoryMethodLinear: function ( result ) {
			return new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );
		},
		InterpolantFactoryMethodSmooth: undefined // not yet implemented
	} );
	/**
	 *
	 * A Track that interpolates Strings
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */
	function StringKeyframeTrack( name, times, values, interpolation ) {
		KeyframeTrack.call( this, name, times, values, interpolation );
	}
	StringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {
		constructor: StringKeyframeTrack,
		ValueTypeName: 'string',
		ValueBufferType: Array,
		DefaultInterpolation: InterpolateDiscrete,
		InterpolantFactoryMethodLinear: undefined,
		InterpolantFactoryMethodSmooth: undefined
	} );
	/**
	 *
	 * A Track of vectored keyframe values.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */
	function VectorKeyframeTrack( name, times, values, interpolation ) {
		KeyframeTrack.call( this, name, times, values, interpolation );
	}
	VectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {
		constructor: VectorKeyframeTrack,
		ValueTypeName: 'vector'
	} );
	/**
	 *
	 * Reusable set of Tracks that represent an animation.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */
	function AnimationClip( name, duration, tracks ) {
		this.name = name;
		this.tracks = tracks;
		this.duration = ( duration !== undefined ) ? duration : - 1;
		this.uuid = _Math.generateUUID();
		if ( this.duration < 0 ) {
			this.resetDuration();
		}
	}
	function getTrackTypeForValueTypeName( typeName ) {
		switch ( typeName.toLowerCase() ) {
			case 'scalar':
			case 'double':
			case 'float':
			case 'number':
			case 'integer':
				return NumberKeyframeTrack;
			case 'vector':
			case 'vector2':
			case 'vector3':
			case 'vector4':
				return VectorKeyframeTrack;
			case 'color':
				return ColorKeyframeTrack;
			case 'quaternion':
				return QuaternionKeyframeTrack;
			case 'bool':
			case 'boolean':
				return BooleanKeyframeTrack;
			case 'string':
				return StringKeyframeTrack;
		}
		throw new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );
	}
	function parseKeyframeTrack( json ) {
		if ( json.type === undefined ) {
			throw new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );
		}
		var trackType = getTrackTypeForValueTypeName( json.type );
		if ( json.times === undefined ) {
			var times = [], values = [];
			AnimationUtils.flattenJSON( json.keys, times, values, 'value' );
			json.times = times;
			json.values = values;
		}
		if ( trackType.parse !== undefined ) {
			return trackType.parse( json );
		} else {
			return new trackType( json.name, json.times, json.values, json.interpolation );
		}
	}
	Object.assign( AnimationClip, {
		parse: function ( json ) {
			var tracks = [],
				jsonTracks = json.tracks,
				frameTime = 1.0 / ( json.fps || 1.0 );
			for ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {
				tracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );
			}
			return new AnimationClip( json.name, json.duration, tracks );
		},
		toJSON: function ( clip ) {
			var tracks = [],
				clipTracks = clip.tracks;
			var json = {
				'name': clip.name,
				'duration': clip.duration,
				'tracks': tracks,
				'uuid': clip.uuid
			};
			for ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {
				tracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );
			}
			return json;
		},
		CreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {
			var numMorphTargets = morphTargetSequence.length;
			var tracks = [];
			for ( var i = 0; i < numMorphTargets; i ++ ) {
				var times = [];
				var values = [];
				times.push(
					( i + numMorphTargets - 1 ) % numMorphTargets,
					i,
					( i + 1 ) % numMorphTargets );
				values.push( 0, 1, 0 );
				var order = AnimationUtils.getKeyframeOrder( times );
				times = AnimationUtils.sortedArray( times, 1, order );
				values = AnimationUtils.sortedArray( values, 1, order );
				if ( ! noLoop && times[ 0 ] === 0 ) {
					times.push( numMorphTargets );
					values.push( values[ 0 ] );
				}
				tracks.push(
					new NumberKeyframeTrack(
						'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',
						times, values
					).scale( 1.0 / fps ) );
			}
			return new AnimationClip( name, - 1, tracks );
		},
		findByName: function ( objectOrClipArray, name ) {
			var clipArray = objectOrClipArray;
			if ( ! Array.isArray( objectOrClipArray ) ) {
				var o = objectOrClipArray;
				clipArray = o.geometry && o.geometry.animations || o.animations;
			}
			for ( var i = 0; i < clipArray.length; i ++ ) {
				if ( clipArray[ i ].name === name ) {
					return clipArray[ i ];
				}
			}
			return null;
		},
		CreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {
			var animationToMorphTargets = {};
			var pattern = /^([\w-]*?)([\d]+)$/;
			for ( var i = 0, il = morphTargets.length; i < il; i ++ ) {
				var morphTarget = morphTargets[ i ];
				var parts = morphTarget.name.match( pattern );
				if ( parts && parts.length > 1 ) {
					var name = parts[ 1 ];
					var animationMorphTargets = animationToMorphTargets[ name ];
					if ( ! animationMorphTargets ) {
						animationToMorphTargets[ name ] = animationMorphTargets = [];
					}
					animationMorphTargets.push( morphTarget );
				}
			}
			var clips = [];
			for ( var name in animationToMorphTargets ) {
				clips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );
			}
			return clips;
		},
		parseAnimation: function ( animation, bones ) {
			if ( ! animation ) {
				console.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );
				return null;
			}
			var addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {
				if ( animationKeys.length !== 0 ) {
					var times = [];
					var values = [];
					AnimationUtils.flattenJSON( animationKeys, times, values, propertyName );
					if ( times.length !== 0 ) {
						destTracks.push( new trackType( trackName, times, values ) );
					}
				}
			};
			var tracks = [];
			var clipName = animation.name || 'default';
			var duration = animation.length || - 1;
			var fps = animation.fps || 30;
			var hierarchyTracks = animation.hierarchy || [];
			for ( var h = 0; h < hierarchyTracks.length; h ++ ) {
				var animationKeys = hierarchyTracks[ h ].keys;
				if ( ! animationKeys || animationKeys.length === 0 ) continue;
				if ( animationKeys[ 0 ].morphTargets ) {
					var morphTargetNames = {};
					for ( var k = 0; k < animationKeys.length; k ++ ) {
						if ( animationKeys[ k ].morphTargets ) {
							for ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {
								morphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;
							}
						}
					}
					for ( var morphTargetName in morphTargetNames ) {
						var times = [];
						var values = [];
						for ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {
							var animationKey = animationKeys[ k ];
							times.push( animationKey.time );
							values.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );
						}
						tracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );
					}
					duration = morphTargetNames.length * ( fps || 1.0 );
				} else {
					var boneName = '.bones[' + bones[ h ].name + ']';
					addNonemptyTrack(
						VectorKeyframeTrack, boneName + '.position',
						animationKeys, 'pos', tracks );
					addNonemptyTrack(
						QuaternionKeyframeTrack, boneName + '.quaternion',
						animationKeys, 'rot', tracks );
					addNonemptyTrack(
						VectorKeyframeTrack, boneName + '.scale',
						animationKeys, 'scl', tracks );
				}
			}
			if ( tracks.length === 0 ) {
				return null;
			}
			var clip = new AnimationClip( clipName, duration, tracks );
			return clip;
		}
	} );
	Object.assign( AnimationClip.prototype, {
		resetDuration: function () {
			var tracks = this.tracks, duration = 0;
			for ( var i = 0, n = tracks.length; i !== n; ++ i ) {
				var track = this.tracks[ i ];
				duration = Math.max( duration, track.times[ track.times.length - 1 ] );
			}
			this.duration = duration;
			return this;
		},
		trim: function () {
			for ( var i = 0; i < this.tracks.length; i ++ ) {
				this.tracks[ i ].trim( 0, this.duration );
			}
			return this;
		},
		validate: function () {
			var valid = true;
			for ( var i = 0; i < this.tracks.length; i ++ ) {
				valid = valid && this.tracks[ i ].validate();
			}
			return valid;
		},
		optimize: function () {
			for ( var i = 0; i < this.tracks.length; i ++ ) {
				this.tracks[ i ].optimize();
			}
			return this;
		},
		clone: function () {
			var tracks = [];
			for ( var i = 0; i < this.tracks.length; i ++ ) {
				tracks.push( this.tracks[ i ].clone() );
			}
			return new AnimationClip( this.name, this.duration, tracks );
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	var Cache = {
		enabled: false,
		files: {},
		add: function ( key, file ) {
			if ( this.enabled === false ) return;
			this.files[ key ] = file;
		},
		get: function ( key ) {
			if ( this.enabled === false ) return;
			return this.files[ key ];
		},
		remove: function ( key ) {
			delete this.files[ key ];
		},
		clear: function () {
			this.files = {};
		}
	};
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function LoadingManager( onLoad, onProgress, onError ) {
		var scope = this;
		var isLoading = false;
		var itemsLoaded = 0;
		var itemsTotal = 0;
		var urlModifier = undefined;
		this.onStart = undefined;
		this.onLoad = onLoad;
		this.onProgress = onProgress;
		this.onError = onError;
		this.itemStart = function ( url ) {
			itemsTotal ++;
			if ( isLoading === false ) {
				if ( scope.onStart !== undefined ) {
					scope.onStart( url, itemsLoaded, itemsTotal );
				}
			}
			isLoading = true;
		};
		this.itemEnd = function ( url ) {
			itemsLoaded ++;
			if ( scope.onProgress !== undefined ) {
				scope.onProgress( url, itemsLoaded, itemsTotal );
			}
			if ( itemsLoaded === itemsTotal ) {
				isLoading = false;
				if ( scope.onLoad !== undefined ) {
					scope.onLoad();
				}
			}
		};
		this.itemError = function ( url ) {
			if ( scope.onError !== undefined ) {
				scope.onError( url );
			}
		};
		this.resolveURL = function ( url ) {
			if ( urlModifier ) {
				return urlModifier( url );
			}
			return url;
		};
		this.setURLModifier = function ( transform ) {
			urlModifier = transform;
			return this;
		};
	}
	var DefaultLoadingManager = new LoadingManager();
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	var loading = {};
	function FileLoader( manager ) {
		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	}
	Object.assign( FileLoader.prototype, {
		load: function ( url, onLoad, onProgress, onError ) {
			if ( url === undefined ) url = '';
			if ( this.path !== undefined ) url = this.path + url;
			url = this.manager.resolveURL( url );
			var scope = this;
			var cached = Cache.get( url );
			if ( cached !== undefined ) {
				scope.manager.itemStart( url );
				setTimeout( function () {
					if ( onLoad ) onLoad( cached );
					scope.manager.itemEnd( url );
				}, 0 );
				return cached;
			}
			if ( loading[ url ] !== undefined ) {
				loading[ url ].push( {
					onLoad: onLoad,
					onProgress: onProgress,
					onError: onError
				} );
				return;
			}
			var dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;
			var dataUriRegexResult = url.match( dataUriRegex );
			if ( dataUriRegexResult ) {
				var mimeType = dataUriRegexResult[ 1 ];
				var isBase64 = !! dataUriRegexResult[ 2 ];
				var data = dataUriRegexResult[ 3 ];
				data = decodeURIComponent( data );
				if ( isBase64 ) data = atob( data );
				try {
					var response;
					var responseType = ( this.responseType || '' ).toLowerCase();
					switch ( responseType ) {
						case 'arraybuffer':
						case 'blob':
							var view = new Uint8Array( data.length );
							for ( var i = 0; i < data.length; i ++ ) {
								view[ i ] = data.charCodeAt( i );
							}
							if ( responseType === 'blob' ) {
								response = new Blob( [ view.buffer ], { type: mimeType } );
							} else {
								response = view.buffer;
							}
							break;
						case 'document':
							var parser = new DOMParser();
							response = parser.parseFromString( data, mimeType );
							break;
						case 'json':
							response = JSON.parse( data );
							break;
						default: // 'text' or other
							response = data;
							break;
					}
					setTimeout( function () {
						if ( onLoad ) onLoad( response );
						scope.manager.itemEnd( url );
					}, 0 );
				} catch ( error ) {
					setTimeout( function () {
						if ( onError ) onError( error );
						scope.manager.itemError( url );
						scope.manager.itemEnd( url );
					}, 0 );
				}
			} else {
				loading[ url ] = [];
				loading[ url ].push( {
					onLoad: onLoad,
					onProgress: onProgress,
					onError: onError
				} );
				var request = new XMLHttpRequest();
				request.open( 'GET', url, true );
				request.addEventListener( 'load', function ( event ) {
					var response = this.response;
					Cache.add( url, response );
					var callbacks = loading[ url ];
					delete loading[ url ];
					if ( this.status === 200 || this.status === 0 ) {
						if ( this.status === 0 ) console.warn( 'THREE.FileLoader: HTTP Status 0 received.' );
						for ( var i = 0, il = callbacks.length; i < il; i ++ ) {
							var callback = callbacks[ i ];
							if ( callback.onLoad ) callback.onLoad( response );
						}
						scope.manager.itemEnd( url );
					} else {
						for ( var i = 0, il = callbacks.length; i < il; i ++ ) {
							var callback = callbacks[ i ];
							if ( callback.onError ) callback.onError( event );
						}
						scope.manager.itemError( url );
						scope.manager.itemEnd( url );
					}
				}, false );
				request.addEventListener( 'progress', function ( event ) {
					var callbacks = loading[ url ];
					for ( var i = 0, il = callbacks.length; i < il; i ++ ) {
						var callback = callbacks[ i ];
						if ( callback.onProgress ) callback.onProgress( event );
					}
				}, false );
				request.addEventListener( 'error', function ( event ) {
					var callbacks = loading[ url ];
					delete loading[ url ];
					for ( var i = 0, il = callbacks.length; i < il; i ++ ) {
						var callback = callbacks[ i ];
						if ( callback.onError ) callback.onError( event );
					}
					scope.manager.itemError( url );
					scope.manager.itemEnd( url );
				}, false );
				request.addEventListener( 'abort', function ( event ) {
					var callbacks = loading[ url ];
					delete loading[ url ];
					for ( var i = 0, il = callbacks.length; i < il; i ++ ) {
						var callback = callbacks[ i ];
						if ( callback.onError ) callback.onError( event );
					}
					scope.manager.itemError( url );
					scope.manager.itemEnd( url );
				}, false );
				if ( this.responseType !== undefined ) request.responseType = this.responseType;
				if ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;
				if ( request.overrideMimeType ) request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' );
				for ( var header in this.requestHeader ) {
					request.setRequestHeader( header, this.requestHeader[ header ] );
				}
				request.send( null );
			}
			scope.manager.itemStart( url );
			return request;
		},
		setPath: function ( value ) {
			this.path = value;
			return this;
		},
		setResponseType: function ( value ) {
			this.responseType = value;
			return this;
		},
		setWithCredentials: function ( value ) {
			this.withCredentials = value;
			return this;
		},
		setMimeType: function ( value ) {
			this.mimeType = value;
			return this;
		},
		setRequestHeader: function ( value ) {
			this.requestHeader = value;
			return this;
		}
	} );
	/**
	 * @author bhouston / http://clara.io/
	 */
	function AnimationLoader( manager ) {
		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	}
	Object.assign( AnimationLoader.prototype, {
		load: function ( url, onLoad, onProgress, onError ) {
			var scope = this;
			var loader = new FileLoader( scope.manager );
			loader.setPath( scope.path );
			loader.load( url, function ( text ) {
				onLoad( scope.parse( JSON.parse( text ) ) );
			}, onProgress, onError );
		},
		parse: function ( json ) {
			var animations = [];
			for ( var i = 0; i < json.length; i ++ ) {
				var clip = AnimationClip.parse( json[ i ] );
				animations.push( clip );
			}
			return animations;
		},
		setPath: function ( value ) {
			this.path = value;
			return this;
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 *
	 * Abstract Base class to block based textures loader (dds, pvr, ...)
	 */
	function CompressedTextureLoader( manager ) {
		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
		this._parser = null;
	}
	Object.assign( CompressedTextureLoader.prototype, {
		load: function ( url, onLoad, onProgress, onError ) {
			var scope = this;
			var images = [];
			var texture = new CompressedTexture();
			texture.image = images;
			var loader = new FileLoader( this.manager );
			loader.setPath( this.path );
			loader.setResponseType( 'arraybuffer' );
			function loadTexture( i ) {
				loader.load( url[ i ], function ( buffer ) {
					var texDatas = scope._parser( buffer, true );
					images[ i ] = {
						width: texDatas.width,
						height: texDatas.height,
						format: texDatas.format,
						mipmaps: texDatas.mipmaps
					};
					loaded += 1;
					if ( loaded === 6 ) {
						if ( texDatas.mipmapCount === 1 )
							texture.minFilter = LinearFilter;
						texture.format = texDatas.format;
						texture.needsUpdate = true;
						if ( onLoad ) onLoad( texture );
					}
				}, onProgress, onError );
			}
			if ( Array.isArray( url ) ) {
				var loaded = 0;
				for ( var i = 0, il = url.length; i < il; ++ i ) {
					loadTexture( i );
				}
			} else {
				loader.load( url, function ( buffer ) {
					var texDatas = scope._parser( buffer, true );
					if ( texDatas.isCubemap ) {
						var faces = texDatas.mipmaps.length / texDatas.mipmapCount;
						for ( var f = 0; f < faces; f ++ ) {
							images[ f ] = { mipmaps: [] };
							for ( var i = 0; i < texDatas.mipmapCount; i ++ ) {
								images[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );
								images[ f ].format = texDatas.format;
								images[ f ].width = texDatas.width;
								images[ f ].height = texDatas.height;
							}
						}
					} else {
						texture.image.width = texDatas.width;
						texture.image.height = texDatas.height;
						texture.mipmaps = texDatas.mipmaps;
					}
					if ( texDatas.mipmapCount === 1 ) {
						texture.minFilter = LinearFilter;
					}
					texture.format = texDatas.format;
					texture.needsUpdate = true;
					if ( onLoad ) onLoad( texture );
				}, onProgress, onError );
			}
			return texture;
		},
		setPath: function ( value ) {
			this.path = value;
			return this;
		}
	} );
	/**
	 * @author Nikos M. / https://github.com/foo123/
	 *
	 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
	 */
	function DataTextureLoader( manager ) {
		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
		this._parser = null;
	}
	Object.assign( DataTextureLoader.prototype, {
		load: function ( url, onLoad, onProgress, onError ) {
			var scope = this;
			var texture = new DataTexture();
			var loader = new FileLoader( this.manager );
			loader.setResponseType( 'arraybuffer' );
			loader.setPath( this.path );
			loader.load( url, function ( buffer ) {
				var texData = scope._parser( buffer );
				if ( ! texData ) return;
				if ( texData.image !== undefined ) {
					texture.image = texData.image;
				} else if ( texData.data !== undefined ) {
					texture.image.width = texData.width;
					texture.image.height = texData.height;
					texture.image.data = texData.data;
				}
				texture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;
				texture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;
				texture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;
				texture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearMipmapLinearFilter;
				texture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;
				if ( texData.format !== undefined ) {
					texture.format = texData.format;
				}
				if ( texData.type !== undefined ) {
					texture.type = texData.type;
				}
				if ( texData.mipmaps !== undefined ) {
					texture.mipmaps = texData.mipmaps;
				}
				if ( texData.mipmapCount === 1 ) {
					texture.minFilter = LinearFilter;
				}
				texture.needsUpdate = true;
				if ( onLoad ) onLoad( texture, texData );
			}, onProgress, onError );
			return texture;
		},
		setPath: function ( value ) {
			this.path = value;
			return this;
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function ImageLoader( manager ) {
		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	}
	Object.assign( ImageLoader.prototype, {
		crossOrigin: 'anonymous',
		load: function ( url, onLoad, onProgress, onError ) {
			if ( url === undefined ) url = '';
			if ( this.path !== undefined ) url = this.path + url;
			url = this.manager.resolveURL( url );
			var scope = this;
			var cached = Cache.get( url );
			if ( cached !== undefined ) {
				scope.manager.itemStart( url );
				setTimeout( function () {
					if ( onLoad ) onLoad( cached );
					scope.manager.itemEnd( url );
				}, 0 );
				return cached;
			}
			var image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );
			function onImageLoad() {
				image.removeEventListener( 'load', onImageLoad, false );
				image.removeEventListener( 'error', onImageError, false );
				Cache.add( url, this );
				if ( onLoad ) onLoad( this );
				scope.manager.itemEnd( url );
			}
			function onImageError( event ) {
				image.removeEventListener( 'load', onImageLoad, false );
				image.removeEventListener( 'error', onImageError, false );
				if ( onError ) onError( event );
				scope.manager.itemError( url );
				scope.manager.itemEnd( url );
			}
			image.addEventListener( 'load', onImageLoad, false );
			image.addEventListener( 'error', onImageError, false );
			if ( url.substr( 0, 5 ) !== 'data:' ) {
				if ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;
			}
			scope.manager.itemStart( url );
			image.src = url;
			return image;
		},
		setCrossOrigin: function ( value ) {
			this.crossOrigin = value;
			return this;
		},
		setPath: function ( value ) {
			this.path = value;
			return this;
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function CubeTextureLoader( manager ) {
		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	}
	Object.assign( CubeTextureLoader.prototype, {
		crossOrigin: 'anonymous',
		load: function ( urls, onLoad, onProgress, onError ) {
			var texture = new CubeTexture();
			var loader = new ImageLoader( this.manager );
			loader.setCrossOrigin( this.crossOrigin );
			loader.setPath( this.path );
			var loaded = 0;
			function loadTexture( i ) {
				loader.load( urls[ i ], function ( image ) {
					texture.images[ i ] = image;
					loaded ++;
					if ( loaded === 6 ) {
						texture.needsUpdate = true;
						if ( onLoad ) onLoad( texture );
					}
				}, undefined, onError );
			}
			for ( var i = 0; i < urls.length; ++ i ) {
				loadTexture( i );
			}
			return texture;
		},
		setCrossOrigin: function ( value ) {
			this.crossOrigin = value;
			return this;
		},
		setPath: function ( value ) {
			this.path = value;
			return this;
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function TextureLoader( manager ) {
		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	}
	Object.assign( TextureLoader.prototype, {
		crossOrigin: 'anonymous',
		load: function ( url, onLoad, onProgress, onError ) {
			var texture = new Texture();
			var loader = new ImageLoader( this.manager );
			loader.setCrossOrigin( this.crossOrigin );
			loader.setPath( this.path );
			loader.load( url, function ( image ) {
				texture.image = image;
				var isJPEG = url.search( /\.jpe?g($|\?)/i ) > 0 || url.search( /^data\:image\/jpeg/ ) === 0;
				texture.format = isJPEG ? RGBFormat : RGBAFormat;
				texture.needsUpdate = true;
				if ( onLoad !== undefined ) {
					onLoad( texture );
				}
			}, onProgress, onError );
			return texture;
		},
		setCrossOrigin: function ( value ) {
			this.crossOrigin = value;
			return this;
		},
		setPath: function ( value ) {
			this.path = value;
			return this;
		}
	} );
	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Extensible curve object
	 *
	 * Some common of curve methods:
	 * .getPoint( t, optionalTarget ), .getTangent( t )
	 * .getPointAt( u, optionalTarget ), .getTangentAt( u )
	 * .getPoints(), .getSpacedPoints()
	 * .getLength()
	 * .updateArcLengths()
	 *
	 * This following curves inherit from THREE.Curve:
	 *
	 * -- 2D curves --
	 * THREE.ArcCurve
	 * THREE.CubicBezierCurve
	 * THREE.EllipseCurve
	 * THREE.LineCurve
	 * THREE.QuadraticBezierCurve
	 * THREE.SplineCurve
	 *
	 * -- 3D curves --
	 * THREE.CatmullRomCurve3
	 * THREE.CubicBezierCurve3
	 * THREE.LineCurve3
	 * THREE.QuadraticBezierCurve3
	 *
	 * A series of curves can be represented as a THREE.CurvePath.
	 *
	 **/
	/**************************************************************
	 *	Abstract Curve base class
	 **************************************************************/
	function Curve() {
		this.type = 'Curve';
		this.arcLengthDivisions = 200;
	}
	Object.assign( Curve.prototype, {
		getPoint: function ( /* t, optionalTarget */ ) {
			console.warn( 'THREE.Curve: .getPoint() not implemented.' );
			return null;
		},
		getPointAt: function ( u, optionalTarget ) {
			var t = this.getUtoTmapping( u );
			return this.getPoint( t, optionalTarget );
		},
		getPoints: function ( divisions ) {
			if ( divisions === undefined ) divisions = 5;
			var points = [];
			for ( var d = 0; d <= divisions; d ++ ) {
				points.push( this.getPoint( d / divisions ) );
			}
			return points;
		},
		getSpacedPoints: function ( divisions ) {
			if ( divisions === undefined ) divisions = 5;
			var points = [];
			for ( var d = 0; d <= divisions; d ++ ) {
				points.push( this.getPointAt( d / divisions ) );
			}
			return points;
		},
		getLength: function () {
			var lengths = this.getLengths();
			return lengths[ lengths.length - 1 ];
		},
		getLengths: function ( divisions ) {
			if ( divisions === undefined ) divisions = this.arcLengthDivisions;
			if ( this.cacheArcLengths &&
				( this.cacheArcLengths.length === divisions + 1 ) &&
				! this.needsUpdate ) {
				return this.cacheArcLengths;
			}
			this.needsUpdate = false;
			var cache = [];
			var current, last = this.getPoint( 0 );
			var p, sum = 0;
			cache.push( 0 );
			for ( p = 1; p <= divisions; p ++ ) {
				current = this.getPoint( p / divisions );
				sum += current.distanceTo( last );
				cache.push( sum );
				last = current;
			}
			this.cacheArcLengths = cache;
			return cache; // { sums: cache, sum: sum }; Sum is in the last element.
		},
		updateArcLengths: function () {
			this.needsUpdate = true;
			this.getLengths();
		},
		getUtoTmapping: function ( u, distance ) {
			var arcLengths = this.getLengths();
			var i = 0, il = arcLengths.length;
			var targetArcLength; // The targeted u distance value to get
			if ( distance ) {
				targetArcLength = distance;
			} else {
				targetArcLength = u * arcLengths[ il - 1 ];
			}
			var low = 0, high = il - 1, comparison;
			while ( low <= high ) {
				i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats
				comparison = arcLengths[ i ] - targetArcLength;
				if ( comparison < 0 ) {
					low = i + 1;
				} else if ( comparison > 0 ) {
					high = i - 1;
				} else {
					high = i;
					break;
				}
			}
			i = high;
			if ( arcLengths[ i ] === targetArcLength ) {
				return i / ( il - 1 );
			}
			var lengthBefore = arcLengths[ i ];
			var lengthAfter = arcLengths[ i + 1 ];
			var segmentLength = lengthAfter - lengthBefore;
			var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;
			var t = ( i + segmentFraction ) / ( il - 1 );
			return t;
		},
		getTangent: function ( t ) {
			var delta = 0.0001;
			var t1 = t - delta;
			var t2 = t + delta;
			if ( t1 < 0 ) t1 = 0;
			if ( t2 > 1 ) t2 = 1;
			var pt1 = this.getPoint( t1 );
			var pt2 = this.getPoint( t2 );
			var vec = pt2.clone().sub( pt1 );
			return vec.normalize();
		},
		getTangentAt: function ( u ) {
			var t = this.getUtoTmapping( u );
			return this.getTangent( t );
		},
		computeFrenetFrames: function ( segments, closed ) {
			var normal = new Vector3();
			var tangents = [];
			var normals = [];
			var binormals = [];
			var vec = new Vector3();
			var mat = new Matrix4();
			var i, u, theta;
			for ( i = 0; i <= segments; i ++ ) {
				u = i / segments;
				tangents[ i ] = this.getTangentAt( u );
				tangents[ i ].normalize();
			}
			normals[ 0 ] = new Vector3();
			binormals[ 0 ] = new Vector3();
			var min = Number.MAX_VALUE;
			var tx = Math.abs( tangents[ 0 ].x );
			var ty = Math.abs( tangents[ 0 ].y );
			var tz = Math.abs( tangents[ 0 ].z );
			if ( tx <= min ) {
				min = tx;
				normal.set( 1, 0, 0 );
			}
			if ( ty <= min ) {
				min = ty;
				normal.set( 0, 1, 0 );
			}
			if ( tz <= min ) {
				normal.set( 0, 0, 1 );
			}
			vec.crossVectors( tangents[ 0 ], normal ).normalize();
			normals[ 0 ].crossVectors( tangents[ 0 ], vec );
			binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );
			for ( i = 1; i <= segments; i ++ ) {
				normals[ i ] = normals[ i - 1 ].clone();
				binormals[ i ] = binormals[ i - 1 ].clone();
				vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );
				if ( vec.length() > Number.EPSILON ) {
					vec.normalize();
					theta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors
					normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );
				}
				binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );
			}
			if ( closed === true ) {
				theta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );
				theta /= segments;
				if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {
					theta = - theta;
				}
				for ( i = 1; i <= segments; i ++ ) {
					normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
					binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );
				}
			}
			return {
				tangents: tangents,
				normals: normals,
				binormals: binormals
			};
		},
		clone: function () {
			return new this.constructor().copy( this );
		},
		copy: function ( source ) {
			this.arcLengthDivisions = source.arcLengthDivisions;
			return this;
		},
		toJSON: function () {
			var data = {
				metadata: {
					version: 4.5,
					type: 'Curve',
					generator: 'Curve.toJSON'
				}
			};
			data.arcLengthDivisions = this.arcLengthDivisions;
			data.type = this.type;
			return data;
		},
		fromJSON: function ( json ) {
			this.arcLengthDivisions = json.arcLengthDivisions;
			return this;
		}
	} );
	function EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {
		Curve.call( this );
		this.type = 'EllipseCurve';
		this.aX = aX || 0;
		this.aY = aY || 0;
		this.xRadius = xRadius || 1;
		this.yRadius = yRadius || 1;
		this.aStartAngle = aStartAngle || 0;
		this.aEndAngle = aEndAngle || 2 * Math.PI;
		this.aClockwise = aClockwise || false;
		this.aRotation = aRotation || 0;
	}
	EllipseCurve.prototype = Object.create( Curve.prototype );
	EllipseCurve.prototype.constructor = EllipseCurve;
	EllipseCurve.prototype.isEllipseCurve = true;
	EllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {
		var point = optionalTarget || new Vector2();
		var twoPi = Math.PI * 2;
		var deltaAngle = this.aEndAngle - this.aStartAngle;
		var samePoints = Math.abs( deltaAngle ) < Number.EPSILON;
		while ( deltaAngle < 0 ) deltaAngle += twoPi;
		while ( deltaAngle > twoPi ) deltaAngle -= twoPi;
		if ( deltaAngle < Number.EPSILON ) {
			if ( samePoints ) {
				deltaAngle = 0;
			} else {
				deltaAngle = twoPi;
			}
		}
		if ( this.aClockwise === true && ! samePoints ) {
			if ( deltaAngle === twoPi ) {
				deltaAngle = - twoPi;
			} else {
				deltaAngle = deltaAngle - twoPi;
			}
		}
		var angle = this.aStartAngle + t * deltaAngle;
		var x = this.aX + this.xRadius * Math.cos( angle );
		var y = this.aY + this.yRadius * Math.sin( angle );
		if ( this.aRotation !== 0 ) {
			var cos = Math.cos( this.aRotation );
			var sin = Math.sin( this.aRotation );
			var tx = x - this.aX;
			var ty = y - this.aY;
			x = tx * cos - ty * sin + this.aX;
			y = tx * sin + ty * cos + this.aY;
		}
		return point.set( x, y );
	};
	EllipseCurve.prototype.copy = function ( source ) {
		Curve.prototype.copy.call( this, source );
		this.aX = source.aX;
		this.aY = source.aY;
		this.xRadius = source.xRadius;
		this.yRadius = source.yRadius;
		this.aStartAngle = source.aStartAngle;
		this.aEndAngle = source.aEndAngle;
		this.aClockwise = source.aClockwise;
		this.aRotation = source.aRotation;
		return this;
	};
	EllipseCurve.prototype.toJSON = function () {
		var data = Curve.prototype.toJSON.call( this );
		data.aX = this.aX;
		data.aY = this.aY;
		data.xRadius = this.xRadius;
		data.yRadius = this.yRadius;
		data.aStartAngle = this.aStartAngle;
		data.aEndAngle = this.aEndAngle;
		data.aClockwise = this.aClockwise;
		data.aRotation = this.aRotation;
		return data;
	};
	EllipseCurve.prototype.fromJSON = function ( json ) {
		Curve.prototype.fromJSON.call( this, json );
		this.aX = json.aX;
		this.aY = json.aY;
		this.xRadius = json.xRadius;
		this.yRadius = json.yRadius;
		this.aStartAngle = json.aStartAngle;
		this.aEndAngle = json.aEndAngle;
		this.aClockwise = json.aClockwise;
		this.aRotation = json.aRotation;
		return this;
	};
	function ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {
		EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );
		this.type = 'ArcCurve';
	}
	ArcCurve.prototype = Object.create( EllipseCurve.prototype );
	ArcCurve.prototype.constructor = ArcCurve;
	ArcCurve.prototype.isArcCurve = true;
	/**
	 * @author zz85 https://github.com/zz85
	 *
	 * Centripetal CatmullRom Curve - which is useful for avoiding
	 * cusps and self-intersections in non-uniform catmull rom curves.
	 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
	 *
	 * curve.type accepts centripetal(default), chordal and catmullrom
	 * curve.tension is used for catmullrom which defaults to 0.5
	 */
	/*
	Based on an optimized c++ solution in
	 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
	 - http://ideone.com/NoEbVM
	This CubicPoly class could be used for reusing some variables and calculations,
	but for three.js curve use, it could be possible inlined and flatten into a single function call
	which can be placed in CurveUtils.
	*/
	function CubicPoly() {
		var c0 = 0, c1 = 0, c2 = 0, c3 = 0;
		/*
		 * Compute coefficients for a cubic polynomial
		 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
		 * such that
		 *   p(0) = x0, p(1) = x1
		 *  and
		 *   p'(0) = t0, p'(1) = t1.
		 */
		function init( x0, x1, t0, t1 ) {
			c0 = x0;
			c1 = t0;
			c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
			c3 = 2 * x0 - 2 * x1 + t0 + t1;
		}
		return {
			initCatmullRom: function ( x0, x1, x2, x3, tension ) {
				init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );
			},
			initNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {
				var t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
				var t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;
				t1 *= dt1;
				t2 *= dt1;
				init( x1, x2, t1, t2 );
			},
			calc: function ( t ) {
				var t2 = t * t;
				var t3 = t2 * t;
				return c0 + c1 * t + c2 * t2 + c3 * t3;
			}
		};
	}
	var tmp = new Vector3();
	var px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();
	function CatmullRomCurve3( points, closed, curveType, tension ) {
		Curve.call( this );
		this.type = 'CatmullRomCurve3';
		this.points = points || [];
		this.closed = closed || false;
		this.curveType = curveType || 'centripetal';
		this.tension = tension || 0.5;
	}
	CatmullRomCurve3.prototype = Object.create( Curve.prototype );
	CatmullRomCurve3.prototype.constructor = CatmullRomCurve3;
	CatmullRomCurve3.prototype.isCatmullRomCurve3 = true;
	CatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {
		var point = optionalTarget || new Vector3();
		var points = this.points;
		var l = points.length;
		var p = ( l - ( this.closed ? 0 : 1 ) ) * t;
		var intPoint = Math.floor( p );
		var weight = p - intPoint;
		if ( this.closed ) {
			intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;
		} else if ( weight === 0 && intPoint === l - 1 ) {
			intPoint = l - 2;
			weight = 1;
		}
		var p0, p1, p2, p3; // 4 points
		if ( this.closed || intPoint > 0 ) {
			p0 = points[ ( intPoint - 1 ) % l ];
		} else {
			tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
			p0 = tmp;
		}
		p1 = points[ intPoint % l ];
		p2 = points[ ( intPoint + 1 ) % l ];
		if ( this.closed || intPoint + 2 < l ) {
			p3 = points[ ( intPoint + 2 ) % l ];
		} else {
			tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );
			p3 = tmp;
		}
		if ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {
			var pow = this.curveType === 'chordal' ? 0.5 : 0.25;
			var dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
			var dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
			var dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );
			if ( dt1 < 1e-4 ) dt1 = 1.0;
			if ( dt0 < 1e-4 ) dt0 = dt1;
			if ( dt2 < 1e-4 ) dt2 = dt1;
			px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
			py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
			pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );
		} else if ( this.curveType === 'catmullrom' ) {
			px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );
			py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );
			pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );
		}
		point.set(
			px.calc( weight ),
			py.calc( weight ),
			pz.calc( weight )
		);
		return point;
	};
	CatmullRomCurve3.prototype.copy = function ( source ) {
		Curve.prototype.copy.call( this, source );
		this.points = [];
		for ( var i = 0, l = source.points.length; i < l; i ++ ) {
			var point = source.points[ i ];
			this.points.push( point.clone() );
		}
		this.closed = source.closed;
		this.curveType = source.curveType;
		this.tension = source.tension;
		return this;
	};
	CatmullRomCurve3.prototype.toJSON = function () {
		var data = Curve.prototype.toJSON.call( this );
		data.points = [];
		for ( var i = 0, l = this.points.length; i < l; i ++ ) {
			var point = this.points[ i ];
			data.points.push( point.toArray() );
		}
		data.closed = this.closed;
		data.curveType = this.curveType;
		data.tension = this.tension;
		return data;
	};
	CatmullRomCurve3.prototype.fromJSON = function ( json ) {
		Curve.prototype.fromJSON.call( this, json );
		this.points = [];
		for ( var i = 0, l = json.points.length; i < l; i ++ ) {
			var point = json.points[ i ];
			this.points.push( new Vector3().fromArray( point ) );
		}
		this.closed = json.closed;
		this.curveType = json.curveType;
		this.tension = json.tension;
		return this;
	};
	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 * Bezier Curves formulas obtained from
	 * http://en.wikipedia.org/wiki/Bézier_curve
	 */
	function CatmullRom( t, p0, p1, p2, p3 ) {
		var v0 = ( p2 - p0 ) * 0.5;
		var v1 = ( p3 - p1 ) * 0.5;
		var t2 = t * t;
		var t3 = t * t2;
		return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;
	}
	function QuadraticBezierP0( t, p ) {
		var k = 1 - t;
		return k * k * p;
	}
	function QuadraticBezierP1( t, p ) {
		return 2 * ( 1 - t ) * t * p;
	}
	function QuadraticBezierP2( t, p ) {
		return t * t * p;
	}
	function QuadraticBezier( t, p0, p1, p2 ) {
		return QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +
			QuadraticBezierP2( t, p2 );
	}
	function CubicBezierP0( t, p ) {
		var k = 1 - t;
		return k * k * k * p;
	}
	function CubicBezierP1( t, p ) {
		var k = 1 - t;
		return 3 * k * k * t * p;
	}
	function CubicBezierP2( t, p ) {
		return 3 * ( 1 - t ) * t * t * p;
	}
	function CubicBezierP3( t, p ) {
		return t * t * t * p;
	}
	function CubicBezier( t, p0, p1, p2, p3 ) {
		return CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +
			CubicBezierP3( t, p3 );
	}
	function CubicBezierCurve( v0, v1, v2, v3 ) {
		Curve.call( this );
		this.type = 'CubicBezierCurve';
		this.v0 = v0 || new Vector2();
		this.v1 = v1 || new Vector2();
		this.v2 = v2 || new Vector2();
		this.v3 = v3 || new Vector2();
	}
	CubicBezierCurve.prototype = Object.create( Curve.prototype );
	CubicBezierCurve.prototype.constructor = CubicBezierCurve;
	CubicBezierCurve.prototype.isCubicBezierCurve = true;
	CubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {
		var point = optionalTarget || new Vector2();
		var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
		point.set(
			CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
			CubicBezier( t, v0.y, v1.y, v2.y, v3.y )
		);
		return point;
	};
	CubicBezierCurve.prototype.copy = function ( source ) {
		Curve.prototype.copy.call( this, source );
		this.v0.copy( source.v0 );
		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );
		this.v3.copy( source.v3 );
		return this;
	};
	CubicBezierCurve.prototype.toJSON = function () {
		var data = Curve.prototype.toJSON.call( this );
		data.v0 = this.v0.toArray();
		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();
		data.v3 = this.v3.toArray();
		return data;
	};
	CubicBezierCurve.prototype.fromJSON = function ( json ) {
		Curve.prototype.fromJSON.call( this, json );
		this.v0.fromArray( json.v0 );
		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );
		this.v3.fromArray( json.v3 );
		return this;
	};
	function CubicBezierCurve3( v0, v1, v2, v3 ) {
		Curve.call( this );
		this.type = 'CubicBezierCurve3';
		this.v0 = v0 || new Vector3();
		this.v1 = v1 || new Vector3();
		this.v2 = v2 || new Vector3();
		this.v3 = v3 || new Vector3();
	}
	CubicBezierCurve3.prototype = Object.create( Curve.prototype );
	CubicBezierCurve3.prototype.constructor = CubicBezierCurve3;
	CubicBezierCurve3.prototype.isCubicBezierCurve3 = true;
	CubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {
		var point = optionalTarget || new Vector3();
		var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
		point.set(
			CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
			CubicBezier( t, v0.y, v1.y, v2.y, v3.y ),
			CubicBezier( t, v0.z, v1.z, v2.z, v3.z )
		);
		return point;
	};
	CubicBezierCurve3.prototype.copy = function ( source ) {
		Curve.prototype.copy.call( this, source );
		this.v0.copy( source.v0 );
		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );
		this.v3.copy( source.v3 );
		return this;
	};
	CubicBezierCurve3.prototype.toJSON = function () {
		var data = Curve.prototype.toJSON.call( this );
		data.v0 = this.v0.toArray();
		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();
		data.v3 = this.v3.toArray();
		return data;
	};
	CubicBezierCurve3.prototype.fromJSON = function ( json ) {
		Curve.prototype.fromJSON.call( this, json );
		this.v0.fromArray( json.v0 );
		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );
		this.v3.fromArray( json.v3 );
		return this;
	};
	function LineCurve( v1, v2 ) {
		Curve.call( this );
		this.type = 'LineCurve';
		this.v1 = v1 || new Vector2();
		this.v2 = v2 || new Vector2();
	}
	LineCurve.prototype = Object.create( Curve.prototype );
	LineCurve.prototype.constructor = LineCurve;
	LineCurve.prototype.isLineCurve = true;
	LineCurve.prototype.getPoint = function ( t, optionalTarget ) {
		var point = optionalTarget || new Vector2();
		if ( t === 1 ) {
			point.copy( this.v2 );
		} else {
			point.copy( this.v2 ).sub( this.v1 );
			point.multiplyScalar( t ).add( this.v1 );
		}
		return point;
	};
	LineCurve.prototype.getPointAt = function ( u, optionalTarget ) {
		return this.getPoint( u, optionalTarget );
	};
	LineCurve.prototype.getTangent = function ( /* t */ ) {
		var tangent = this.v2.clone().sub( this.v1 );
		return tangent.normalize();
	};
	LineCurve.prototype.copy = function ( source ) {
		Curve.prototype.copy.call( this, source );
		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );
		return this;
	};
	LineCurve.prototype.toJSON = function () {
		var data = Curve.prototype.toJSON.call( this );
		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();
		return data;
	};
	LineCurve.prototype.fromJSON = function ( json ) {
		Curve.prototype.fromJSON.call( this, json );
		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );
		return this;
	};
	function LineCurve3( v1, v2 ) {
		Curve.call( this );
		this.type = 'LineCurve3';
		this.v1 = v1 || new Vector3();
		this.v2 = v2 || new Vector3();
	}
	LineCurve3.prototype = Object.create( Curve.prototype );
	LineCurve3.prototype.constructor = LineCurve3;
	LineCurve3.prototype.isLineCurve3 = true;
	LineCurve3.prototype.getPoint = function ( t, optionalTarget ) {
		var point = optionalTarget || new Vector3();
		if ( t === 1 ) {
			point.copy( this.v2 );
		} else {
			point.copy( this.v2 ).sub( this.v1 );
			point.multiplyScalar( t ).add( this.v1 );
		}
		return point;
	};
	LineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {
		return this.getPoint( u, optionalTarget );
	};
	LineCurve3.prototype.copy = function ( source ) {
		Curve.prototype.copy.call( this, source );
		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );
		return this;
	};
	LineCurve3.prototype.toJSON = function () {
		var data = Curve.prototype.toJSON.call( this );
		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();
		return data;
	};
	LineCurve3.prototype.fromJSON = function ( json ) {
		Curve.prototype.fromJSON.call( this, json );
		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );
		return this;
	};
	function QuadraticBezierCurve( v0, v1, v2 ) {
		Curve.call( this );
		this.type = 'QuadraticBezierCurve';
		this.v0 = v0 || new Vector2();
		this.v1 = v1 || new Vector2();
		this.v2 = v2 || new Vector2();
	}
	QuadraticBezierCurve.prototype = Object.create( Curve.prototype );
	QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;
	QuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;
	QuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {
		var point = optionalTarget || new Vector2();
		var v0 = this.v0, v1 = this.v1, v2 = this.v2;
		point.set(
			QuadraticBezier( t, v0.x, v1.x, v2.x ),
			QuadraticBezier( t, v0.y, v1.y, v2.y )
		);
		return point;
	};
	QuadraticBezierCurve.prototype.copy = function ( source ) {
		Curve.prototype.copy.call( this, source );
		this.v0.copy( source.v0 );
		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );
		return this;
	};
	QuadraticBezierCurve.prototype.toJSON = function () {
		var data = Curve.prototype.toJSON.call( this );
		data.v0 = this.v0.toArray();
		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();
		return data;
	};
	QuadraticBezierCurve.prototype.fromJSON = function ( json ) {
		Curve.prototype.fromJSON.call( this, json );
		this.v0.fromArray( json.v0 );
		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );
		return this;
	};
	function QuadraticBezierCurve3( v0, v1, v2 ) {
		Curve.call( this );
		this.type = 'QuadraticBezierCurve3';
		this.v0 = v0 || new Vector3();
		this.v1 = v1 || new Vector3();
		this.v2 = v2 || new Vector3();
	}
	QuadraticBezierCurve3.prototype = Object.create( Curve.prototype );
	QuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;
	QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;
	QuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {
		var point = optionalTarget || new Vector3();
		var v0 = this.v0, v1 = this.v1, v2 = this.v2;
		point.set(
			QuadraticBezier( t, v0.x, v1.x, v2.x ),
			QuadraticBezier( t, v0.y, v1.y, v2.y ),
			QuadraticBezier( t, v0.z, v1.z, v2.z )
		);
		return point;
	};
	QuadraticBezierCurve3.prototype.copy = function ( source ) {
		Curve.prototype.copy.call( this, source );
		this.v0.copy( source.v0 );
		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );
		return this;
	};
	QuadraticBezierCurve3.prototype.toJSON = function () {
		var data = Curve.prototype.toJSON.call( this );
		data.v0 = this.v0.toArray();
		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();
		return data;
	};
	QuadraticBezierCurve3.prototype.fromJSON = function ( json ) {
		Curve.prototype.fromJSON.call( this, json );
		this.v0.fromArray( json.v0 );
		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );
		return this;
	};
	function SplineCurve( points /* array of Vector2 */ ) {
		Curve.call( this );
		this.type = 'SplineCurve';
		this.points = points || [];
	}
	SplineCurve.prototype = Object.create( Curve.prototype );
	SplineCurve.prototype.constructor = SplineCurve;
	SplineCurve.prototype.isSplineCurve = true;
	SplineCurve.prototype.getPoint = function ( t, optionalTarget ) {
		var point = optionalTarget || new Vector2();
		var points = this.points;
		var p = ( points.length - 1 ) * t;
		var intPoint = Math.floor( p );
		var weight = p - intPoint;
		var p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];
		var p1 = points[ intPoint ];
		var p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
		var p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];
		point.set(
			CatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),
			CatmullRom( weight, p0.y, p1.y, p2.y, p3.y )
		);
		return point;
	};
	SplineCurve.prototype.copy = function ( source ) {
		Curve.prototype.copy.call( this, source );
		this.points = [];
		for ( var i = 0, l = source.points.length; i < l; i ++ ) {
			var point = source.points[ i ];
			this.points.push( point.clone() );
		}
		return this;
	};
	SplineCurve.prototype.toJSON = function () {
		var data = Curve.prototype.toJSON.call( this );
		data.points = [];
		for ( var i = 0, l = this.points.length; i < l; i ++ ) {
			var point = this.points[ i ];
			data.points.push( point.toArray() );
		}
		return data;
	};
	SplineCurve.prototype.fromJSON = function ( json ) {
		Curve.prototype.fromJSON.call( this, json );
		this.points = [];
		for ( var i = 0, l = json.points.length; i < l; i ++ ) {
			var point = json.points[ i ];
			this.points.push( new Vector2().fromArray( point ) );
		}
		return this;
	};
	var Curves = /*#__PURE__*/Object.freeze({
		ArcCurve: ArcCurve,
		CatmullRomCurve3: CatmullRomCurve3,
		CubicBezierCurve: CubicBezierCurve,
		CubicBezierCurve3: CubicBezierCurve3,
		EllipseCurve: EllipseCurve,
		LineCurve: LineCurve,
		LineCurve3: LineCurve3,
		QuadraticBezierCurve: QuadraticBezierCurve,
		QuadraticBezierCurve3: QuadraticBezierCurve3,
		SplineCurve: SplineCurve
	});
	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 **/
	/**************************************************************
	 *	Curved Path - a curve path is simply a array of connected
	 *  curves, but retains the api of a curve
	 **************************************************************/
	function CurvePath() {
		Curve.call( this );
		this.type = 'CurvePath';
		this.curves = [];
		this.autoClose = false; // Automatically closes the path
	}
	CurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {
		constructor: CurvePath,
		add: function ( curve ) {
			this.curves.push( curve );
		},
		closePath: function () {
			var startPoint = this.curves[ 0 ].getPoint( 0 );
			var endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );
			if ( ! startPoint.equals( endPoint ) ) {
				this.curves.push( new LineCurve( endPoint, startPoint ) );
			}
		},
		getPoint: function ( t ) {
			var d = t * this.getLength();
			var curveLengths = this.getCurveLengths();
			var i = 0;
			while ( i < curveLengths.length ) {
				if ( curveLengths[ i ] >= d ) {
					var diff = curveLengths[ i ] - d;
					var curve = this.curves[ i ];
					var segmentLength = curve.getLength();
					var u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;
					return curve.getPointAt( u );
				}
				i ++;
			}
			return null;
		},
		getLength: function () {
			var lens = this.getCurveLengths();
			return lens[ lens.length - 1 ];
		},
		updateArcLengths: function () {
			this.needsUpdate = true;
			this.cacheLengths = null;
			this.getCurveLengths();
		},
		getCurveLengths: function () {
			if ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {
				return this.cacheLengths;
			}
			var lengths = [], sums = 0;
			for ( var i = 0, l = this.curves.length; i < l; i ++ ) {
				sums += this.curves[ i ].getLength();
				lengths.push( sums );
			}
			this.cacheLengths = lengths;
			return lengths;
		},
		getSpacedPoints: function ( divisions ) {
			if ( divisions === undefined ) divisions = 40;
			var points = [];
			for ( var i = 0; i <= divisions; i ++ ) {
				points.push( this.getPoint( i / divisions ) );
			}
			if ( this.autoClose ) {
				points.push( points[ 0 ] );
			}
			return points;
		},
		getPoints: function ( divisions ) {
			divisions = divisions || 12;
			var points = [], last;
			for ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {
				var curve = curves[ i ];
				var resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2
					: ( curve && ( curve.isLineCurve || curve.isLineCurve3 ) ) ? 1
						: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length
							: divisions;
				var pts = curve.getPoints( resolution );
				for ( var j = 0; j < pts.length; j ++ ) {
					var point = pts[ j ];
					if ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates
					points.push( point );
					last = point;
				}
			}
			if ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {
				points.push( points[ 0 ] );
			}
			return points;
		},
		copy: function ( source ) {
			Curve.prototype.copy.call( this, source );
			this.curves = [];
			for ( var i = 0, l = source.curves.length; i < l; i ++ ) {
				var curve = source.curves[ i ];
				this.curves.push( curve.clone() );
			}
			this.autoClose = source.autoClose;
			return this;
		},
		toJSON: function () {
			var data = Curve.prototype.toJSON.call( this );
			data.autoClose = this.autoClose;
			data.curves = [];
			for ( var i = 0, l = this.curves.length; i < l; i ++ ) {
				var curve = this.curves[ i ];
				data.curves.push( curve.toJSON() );
			}
			return data;
		},
		fromJSON: function ( json ) {
			Curve.prototype.fromJSON.call( this, json );
			this.autoClose = json.autoClose;
			this.curves = [];
			for ( var i = 0, l = json.curves.length; i < l; i ++ ) {
				var curve = json.curves[ i ];
				this.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );
			}
			return this;
		}
	} );
	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Creates free form 2d path using series of points, lines or curves.
	 **/
	function Path( points ) {
		CurvePath.call( this );
		this.type = 'Path';
		this.currentPoint = new Vector2();
		if ( points ) {
			this.setFromPoints( points );
		}
	}
	Path.prototype = Object.assign( Object.create( CurvePath.prototype ), {
		constructor: Path,
		setFromPoints: function ( points ) {
			this.moveTo( points[ 0 ].x, points[ 0 ].y );
			for ( var i = 1, l = points.length; i < l; i ++ ) {
				this.lineTo( points[ i ].x, points[ i ].y );
			}
		},
		moveTo: function ( x, y ) {
			this.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?
		},
		lineTo: function ( x, y ) {
			var curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );
			this.curves.push( curve );
			this.currentPoint.set( x, y );
		},
		quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {
			var curve = new QuadraticBezierCurve(
				this.currentPoint.clone(),
				new Vector2( aCPx, aCPy ),
				new Vector2( aX, aY )
			);
			this.curves.push( curve );
			this.currentPoint.set( aX, aY );
		},
		bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {
			var curve = new CubicBezierCurve(
				this.currentPoint.clone(),
				new Vector2( aCP1x, aCP1y ),
				new Vector2( aCP2x, aCP2y ),
				new Vector2( aX, aY )
			);
			this.curves.push( curve );
			this.currentPoint.set( aX, aY );
		},
		splineThru: function ( pts /*Array of Vector*/ ) {
			var npts = [ this.currentPoint.clone() ].concat( pts );
			var curve = new SplineCurve( npts );
			this.curves.push( curve );
			this.currentPoint.copy( pts[ pts.length - 1 ] );
		},
		arc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {
			var x0 = this.currentPoint.x;
			var y0 = this.currentPoint.y;
			this.absarc( aX + x0, aY + y0, aRadius,
				aStartAngle, aEndAngle, aClockwise );
		},
		absarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {
			this.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );
		},
		ellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {
			var x0 = this.currentPoint.x;
			var y0 = this.currentPoint.y;
			this.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );
		},
		absellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {
			var curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );
			if ( this.curves.length > 0 ) {
				var firstPoint = curve.getPoint( 0 );
				if ( ! firstPoint.equals( this.currentPoint ) ) {
					this.lineTo( firstPoint.x, firstPoint.y );
				}
			}
			this.curves.push( curve );
			var lastPoint = curve.getPoint( 1 );
			this.currentPoint.copy( lastPoint );
		},
		copy: function ( source ) {
			CurvePath.prototype.copy.call( this, source );
			this.currentPoint.copy( source.currentPoint );
			return this;
		},
		toJSON: function () {
			var data = CurvePath.prototype.toJSON.call( this );
			data.currentPoint = this.currentPoint.toArray();
			return data;
		},
		fromJSON: function ( json ) {
			CurvePath.prototype.fromJSON.call( this, json );
			this.currentPoint.fromArray( json.currentPoint );
			return this;
		}
	} );
	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Defines a 2d shape plane using paths.
	 **/
	function Shape( points ) {
		Path.call( this, points );
		this.uuid = _Math.generateUUID();
		this.type = 'Shape';
		this.holes = [];
	}
	Shape.prototype = Object.assign( Object.create( Path.prototype ), {
		constructor: Shape,
		getPointsHoles: function ( divisions ) {
			var holesPts = [];
			for ( var i = 0, l = this.holes.length; i < l; i ++ ) {
				holesPts[ i ] = this.holes[ i ].getPoints( divisions );
			}
			return holesPts;
		},
		extractPoints: function ( divisions ) {
			return {
				shape: this.getPoints( divisions ),
				holes: this.getPointsHoles( divisions )
			};
		},
		copy: function ( source ) {
			Path.prototype.copy.call( this, source );
			this.holes = [];
			for ( var i = 0, l = source.holes.length; i < l; i ++ ) {
				var hole = source.holes[ i ];
				this.holes.push( hole.clone() );
			}
			return this;
		},
		toJSON: function () {
			var data = Path.prototype.toJSON.call( this );
			data.uuid = this.uuid;
			data.holes = [];
			for ( var i = 0, l = this.holes.length; i < l; i ++ ) {
				var hole = this.holes[ i ];
				data.holes.push( hole.toJSON() );
			}
			return data;
		},
		fromJSON: function ( json ) {
			Path.prototype.fromJSON.call( this, json );
			this.uuid = json.uuid;
			this.holes = [];
			for ( var i = 0, l = json.holes.length; i < l; i ++ ) {
				var hole = json.holes[ i ];
				this.holes.push( new Path().fromJSON( hole ) );
			}
			return this;
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */
	function Light( color, intensity ) {
		Object3D.call( this );
		this.type = 'Light';
		this.color = new Color( color );
		this.intensity = intensity !== undefined ? intensity : 1;
		this.receiveShadow = undefined;
	}
	Light.prototype = Object.assign( Object.create( Object3D.prototype ), {
		constructor: Light,
		isLight: true,
		copy: function ( source ) {
			Object3D.prototype.copy.call( this, source );
			this.color.copy( source.color );
			this.intensity = source.intensity;
			return this;
		},
		toJSON: function ( meta ) {
			var data = Object3D.prototype.toJSON.call( this, meta );
			data.object.color = this.color.getHex();
			data.object.intensity = this.intensity;
			if ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();
			if ( this.distance !== undefined ) data.object.distance = this.distance;
			if ( this.angle !== undefined ) data.object.angle = this.angle;
			if ( this.decay !== undefined ) data.object.decay = this.decay;
			if ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;
			if ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();
			return data;
		}
	} );
	/**
	 * @author alteredq / http://alteredqualia.com/
	 */
	function HemisphereLight( skyColor, groundColor, intensity ) {
		Light.call( this, skyColor, intensity );
		this.type = 'HemisphereLight';
		this.castShadow = undefined;
		this.position.copy( Object3D.DefaultUp );
		this.updateMatrix();
		this.groundColor = new Color( groundColor );
	}
	HemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {
		constructor: HemisphereLight,
		isHemisphereLight: true,
		copy: function ( source ) {
			Light.prototype.copy.call( this, source );
			this.groundColor.copy( source.groundColor );
			return this;
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function LightShadow( camera ) {
		this.camera = camera;
		this.bias = 0;
		this.radius = 1;
		this.mapSize = new Vector2( 512, 512 );
		this.map = null;
		this.matrix = new Matrix4();
	}
	Object.assign( LightShadow.prototype, {
		copy: function ( source ) {
			this.camera = source.camera.clone();
			this.bias = source.bias;
			this.radius = source.radius;
			this.mapSize.copy( source.mapSize );
			return this;
		},
		clone: function () {
			return new this.constructor().copy( this );
		},
		toJSON: function () {
			var object = {};
			if ( this.bias !== 0 ) object.bias = this.bias;
			if ( this.radius !== 1 ) object.radius = this.radius;
			if ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();
			object.camera = this.camera.toJSON( false ).object;
			delete object.camera.matrix;
			return object;
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function SpotLightShadow() {
		LightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );
	}
	SpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {
		constructor: SpotLightShadow,
		isSpotLightShadow: true,
		update: function ( light ) {
			var camera = this.camera;
			var fov = _Math.RAD2DEG * 2 * light.angle;
			var aspect = this.mapSize.width / this.mapSize.height;
			var far = light.distance || camera.far;
			if ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {
				camera.fov = fov;
				camera.aspect = aspect;
				camera.far = far;
				camera.updateProjectionMatrix();
			}
		}
	} );
	/**
	 * @author alteredq / http://alteredqualia.com/
	 */
	function SpotLight( color, intensity, distance, angle, penumbra, decay ) {
		Light.call( this, color, intensity );
		this.type = 'SpotLight';
		this.position.copy( Object3D.DefaultUp );
		this.updateMatrix();
		this.target = new Object3D();
		Object.defineProperty( this, 'power', {
			get: function () {
				return this.intensity * Math.PI;
			},
			set: function ( power ) {
				this.intensity = power / Math.PI;
			}
		} );
		this.distance = ( distance !== undefined ) ? distance : 0;
		this.angle = ( angle !== undefined ) ? angle : Math.PI / 3;
		this.penumbra = ( penumbra !== undefined ) ? penumbra : 0;
		this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.
		this.shadow = new SpotLightShadow();
	}
	SpotLight.prototype = Object.assign( Object.create( Light.prototype ), {
		constructor: SpotLight,
		isSpotLight: true,
		copy: function ( source ) {
			Light.prototype.copy.call( this, source );
			this.distance = source.distance;
			this.angle = source.angle;
			this.penumbra = source.penumbra;
			this.decay = source.decay;
			this.target = source.target.clone();
			this.shadow = source.shadow.clone();
			return this;
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function PointLight( color, intensity, distance, decay ) {
		Light.call( this, color, intensity );
		this.type = 'PointLight';
		Object.defineProperty( this, 'power', {
			get: function () {
				return this.intensity * 4 * Math.PI;
			},
			set: function ( power ) {
				this.intensity = power / ( 4 * Math.PI );
			}
		} );
		this.distance = ( distance !== undefined ) ? distance : 0;
		this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.
		this.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );
	}
	PointLight.prototype = Object.assign( Object.create( Light.prototype ), {
		constructor: PointLight,
		isPointLight: true,
		copy: function ( source ) {
			Light.prototype.copy.call( this, source );
			this.distance = source.distance;
			this.decay = source.decay;
			this.shadow = source.shadow.clone();
			return this;
		}
	} );
	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author arose / http://github.com/arose
	 */
	function OrthographicCamera( left, right, top, bottom, near, far ) {
		Camera.call( this );
		this.type = 'OrthographicCamera';
		this.zoom = 1;
		this.view = null;
		this.left = ( left !== undefined ) ? left : - 1;
		this.right = ( right !== undefined ) ? right : 1;
		this.top = ( top !== undefined ) ? top : 1;
		this.bottom = ( bottom !== undefined ) ? bottom : - 1;
		this.near = ( near !== undefined ) ? near : 0.1;
		this.far = ( far !== undefined ) ? far : 2000;
		this.updateProjectionMatrix();
	}
	OrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {
		constructor: OrthographicCamera,
		isOrthographicCamera: true,
		copy: function ( source, recursive ) {
			Camera.prototype.copy.call( this, source, recursive );
			this.left = source.left;
			this.right = source.right;
			this.top = source.top;
			this.bottom = source.bottom;
			this.near = source.near;
			this.far = source.far;
			this.zoom = source.zoom;
			this.view = source.view === null ? null : Object.assign( {}, source.view );
			return this;
		},
		setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {
			if ( this.view === null ) {
				this.view = {
					enabled: true,
					fullWidth: 1,
					fullHeight: 1,
					offsetX: 0,
					offsetY: 0,
					width: 1,
					height: 1
				};
			}
			this.view.enabled = true;
			this.view.fullWidth = fullWidth;
			this.view.fullHeight = fullHeight;
			this.view.offsetX = x;
			this.view.offsetY = y;
			this.view.width = width;
			this.view.height = height;
			this.updateProjectionMatrix();
		},
		clearViewOffset: function () {
			if ( this.view !== null ) {
				this.view.enabled = false;
			}
			this.updateProjectionMatrix();
		},
		updateProjectionMatrix: function () {
			var dx = ( this.right - this.left ) / ( 2 * this.zoom );
			var dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
			var cx = ( this.right + this.left ) / 2;
			var cy = ( this.top + this.bottom ) / 2;
			var left = cx - dx;
			var right = cx + dx;
			var top = cy + dy;
			var bottom = cy - dy;
			if ( this.view !== null && this.view.enabled ) {
				var zoomW = this.zoom / ( this.view.width / this.view.fullWidth );
				var zoomH = this.zoom / ( this.view.height / this.view.fullHeight );
				var scaleW = ( this.right - this.left ) / this.view.width;
				var scaleH = ( this.top - this.bottom ) / this.view.height;
				left += scaleW * ( this.view.offsetX / zoomW );
				right = left + scaleW * ( this.view.width / zoomW );
				top -= scaleH * ( this.view.offsetY / zoomH );
				bottom = top - scaleH * ( this.view.height / zoomH );
			}
			this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );
			this.projectionMatrixInverse.getInverse( this.projectionMatrix );
		},
		toJSON: function ( meta ) {
			var data = Object3D.prototype.toJSON.call( this, meta );
			data.object.zoom = this.zoom;
			data.object.left = this.left;
			data.object.right = this.right;
			data.object.top = this.top;
			data.object.bottom = this.bottom;
			data.object.near = this.near;
			data.object.far = this.far;
			if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );
			return data;
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function DirectionalLightShadow( ) {
		LightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );
	}
	DirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {
		constructor: DirectionalLightShadow
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */
	function DirectionalLight( color, intensity ) {
		Light.call( this, color, intensity );
		this.type = 'DirectionalLight';
		this.position.copy( Object3D.DefaultUp );
		this.updateMatrix();
		this.target = new Object3D();
		this.shadow = new DirectionalLightShadow();
	}
	DirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {
		constructor: DirectionalLight,
		isDirectionalLight: true,
		copy: function ( source ) {
			Light.prototype.copy.call( this, source );
			this.target = source.target.clone();
			this.shadow = source.shadow.clone();
			return this;
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function AmbientLight( color, intensity ) {
		Light.call( this, color, intensity );
		this.type = 'AmbientLight';
		this.castShadow = undefined;
	}
	AmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {
		constructor: AmbientLight,
		isAmbientLight: true
	} );
	/**
	 * @author abelnation / http://github.com/abelnation
	 */
	function RectAreaLight( color, intensity, width, height ) {
		Light.call( this, color, intensity );
		this.type = 'RectAreaLight';
		this.width = ( width !== undefined ) ? width : 10;
		this.height = ( height !== undefined ) ? height : 10;
	}
	RectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {
		constructor: RectAreaLight,
		isRectAreaLight: true,
		copy: function ( source ) {
			Light.prototype.copy.call( this, source );
			this.width = source.width;
			this.height = source.height;
			return this;
		},
		toJSON: function ( meta ) {
			var data = Light.prototype.toJSON.call( this, meta );
			data.object.width = this.width;
			data.object.height = this.height;
			return data;
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function MaterialLoader( manager ) {
		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
		this.textures = {};
	}
	Object.assign( MaterialLoader.prototype, {
		load: function ( url, onLoad, onProgress, onError ) {
			var scope = this;
			var loader = new FileLoader( scope.manager );
			loader.setPath( scope.path );
			loader.load( url, function ( text ) {
				onLoad( scope.parse( JSON.parse( text ) ) );
			}, onProgress, onError );
		},
		parse: function ( json ) {
			var textures = this.textures;
			function getTexture( name ) {
				if ( textures[ name ] === undefined ) {
					console.warn( 'THREE.MaterialLoader: Undefined texture', name );
				}
				return textures[ name ];
			}
			var material = new Materials[ json.type ]();
			if ( json.uuid !== undefined ) material.uuid = json.uuid;
			if ( json.name !== undefined ) material.name = json.name;
			if ( json.color !== undefined ) material.color.setHex( json.color );
			if ( json.roughness !== undefined ) material.roughness = json.roughness;
			if ( json.metalness !== undefined ) material.metalness = json.metalness;
			if ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );
			if ( json.specular !== undefined ) material.specular.setHex( json.specular );
			if ( json.shininess !== undefined ) material.shininess = json.shininess;
			if ( json.clearCoat !== undefined ) material.clearCoat = json.clearCoat;
			if ( json.clearCoatRoughness !== undefined ) material.clearCoatRoughness = json.clearCoatRoughness;
			if ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;
			if ( json.fog !== undefined ) material.fog = json.fog;
			if ( json.flatShading !== undefined ) material.flatShading = json.flatShading;
			if ( json.blending !== undefined ) material.blending = json.blending;
			if ( json.combine !== undefined ) material.combine = json.combine;
			if ( json.side !== undefined ) material.side = json.side;
			if ( json.opacity !== undefined ) material.opacity = json.opacity;
			if ( json.transparent !== undefined ) material.transparent = json.transparent;
			if ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;
			if ( json.depthTest !== undefined ) material.depthTest = json.depthTest;
			if ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;
			if ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;
			if ( json.wireframe !== undefined ) material.wireframe = json.wireframe;
			if ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;
			if ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;
			if ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;
			if ( json.rotation !== undefined ) material.rotation = json.rotation;
			if ( json.linewidth !== 1 ) material.linewidth = json.linewidth;
			if ( json.dashSize !== undefined ) material.dashSize = json.dashSize;
			if ( json.gapSize !== undefined ) material.gapSize = json.gapSize;
			if ( json.scale !== undefined ) material.scale = json.scale;
			if ( json.polygonOffset !== undefined ) material.polygonOffset = json.polygonOffset;
			if ( json.polygonOffsetFactor !== undefined ) material.polygonOffsetFactor = json.polygonOffsetFactor;
			if ( json.polygonOffsetUnits !== undefined ) material.polygonOffsetUnits = json.polygonOffsetUnits;
			if ( json.skinning !== undefined ) material.skinning = json.skinning;
			if ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;
			if ( json.morphNormals !== undefined ) material.morphNormals = json.morphNormals;
			if ( json.dithering !== undefined ) material.dithering = json.dithering;
			if ( json.visible !== undefined ) material.visible = json.visible;
			if ( json.userData !== undefined ) material.userData = json.userData;
			if ( json.uniforms !== undefined ) {
				for ( var name in json.uniforms ) {
					var uniform = json.uniforms[ name ];
					material.uniforms[ name ] = {};
					switch ( uniform.type ) {
						case 't':
							material.uniforms[ name ].value = getTexture( uniform.value );
							break;
						case 'c':
							material.uniforms[ name ].value = new Color().setHex( uniform.value );
							break;
						case 'v2':
							material.uniforms[ name ].value = new Vector2().fromArray( uniform.value );
							break;
						case 'v3':
							material.uniforms[ name ].value = new Vector3().fromArray( uniform.value );
							break;
						case 'v4':
							material.uniforms[ name ].value = new Vector4().fromArray( uniform.value );
							break;
						case 'm3':
							material.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );
						case 'm4':
							material.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );
							break;
						default:
							material.uniforms[ name ].value = uniform.value;
					}
				}
			}
			if ( json.defines !== undefined ) material.defines = json.defines;
			if ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;
			if ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;
			if ( json.extensions !== undefined ) {
				for ( var key in json.extensions ) {
					material.extensions[ key ] = json.extensions[ key ];
				}
			}
			if ( json.shading !== undefined ) material.flatShading = json.shading === 1; // THREE.FlatShading
			if ( json.size !== undefined ) material.size = json.size;
			if ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;
			if ( json.map !== undefined ) material.map = getTexture( json.map );
			if ( json.matcap !== undefined ) material.matcap = getTexture( json.matcap );
			if ( json.alphaMap !== undefined ) {
				material.alphaMap = getTexture( json.alphaMap );
				material.transparent = true;
			}
			if ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );
			if ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;
			if ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );
			if ( json.normalMapType !== undefined ) material.normalMapType = json.normalMapType;
			if ( json.normalScale !== undefined ) {
				var normalScale = json.normalScale;
				if ( Array.isArray( normalScale ) === false ) {
					normalScale = [ normalScale, normalScale ];
				}
				material.normalScale = new Vector2().fromArray( normalScale );
			}
			if ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );
			if ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;
			if ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;
			if ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );
			if ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );
			if ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );
			if ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;
			if ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );
			if ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );
			if ( json.envMapIntensity !== undefined ) material.envMapIntensity = json.envMapIntensity;
			if ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;
			if ( json.refractionRatio !== undefined ) material.refractionRatio = json.refractionRatio;
			if ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );
			if ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;
			if ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );
			if ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;
			if ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );
			return material;
		},
		setPath: function ( value ) {
			this.path = value;
			return this;
		},
		setTextures: function ( value ) {
			this.textures = value;
			return this;
		}
	} );
	/**
	 * @author Don McCurdy / https://www.donmccurdy.com
	 */
	var LoaderUtils = {
		decodeText: function ( array ) {
			if ( typeof TextDecoder !== 'undefined' ) {
				return new TextDecoder().decode( array );
			}
			var s = '';
			for ( var i = 0, il = array.length; i < il; i ++ ) {
				s += String.fromCharCode( array[ i ] );
			}
			try {
				return decodeURIComponent( escape( s ) );
			} catch ( e ) { // see #16358
				return s;
			}
		},
		extractUrlBase: function ( url ) {
			var index = url.lastIndexOf( '/' );
			if ( index === - 1 ) return './';
			return url.substr( 0, index + 1 );
		}
	};
	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */
	function InstancedBufferGeometry() {
		BufferGeometry.call( this );
		this.type = 'InstancedBufferGeometry';
		this.maxInstancedCount = undefined;
	}
	InstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {
		constructor: InstancedBufferGeometry,
		isInstancedBufferGeometry: true,
		copy: function ( source ) {
			BufferGeometry.prototype.copy.call( this, source );
			this.maxInstancedCount = source.maxInstancedCount;
			return this;
		},
		clone: function () {
			return new this.constructor().copy( this );
		},
		toJSON: function () {
			var data = BufferGeometry.prototype.toJSON.call( this );
			data.maxInstancedCount = this.maxInstancedCount;
			data.isInstancedBufferGeometry = true;
			return data;
		}
	} );
	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */
	function InstancedBufferAttribute( array, itemSize, normalized, meshPerAttribute ) {
		if ( typeof ( normalized ) === 'number' ) {
			meshPerAttribute = normalized;
			normalized = false;
			console.error( 'THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.' );
		}
		BufferAttribute.call( this, array, itemSize, normalized );
		this.meshPerAttribute = meshPerAttribute || 1;
	}
	InstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {
		constructor: InstancedBufferAttribute,
		isInstancedBufferAttribute: true,
		copy: function ( source ) {
			BufferAttribute.prototype.copy.call( this, source );
			this.meshPerAttribute = source.meshPerAttribute;
			return this;
		},
		toJSON: function ()	{
			var data = BufferAttribute.prototype.toJSON.call( this );
			data.meshPerAttribute = this.meshPerAttribute;
			data.isInstancedBufferAttribute = true;
			return data;
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function BufferGeometryLoader( manager ) {
		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	}
	Object.assign( BufferGeometryLoader.prototype, {
		load: function ( url, onLoad, onProgress, onError ) {
			var scope = this;
			var loader = new FileLoader( scope.manager );
			loader.setPath( scope.path );
			loader.load( url, function ( text ) {
				onLoad( scope.parse( JSON.parse( text ) ) );
			}, onProgress, onError );
		},
		parse: function ( json ) {
			var geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();
			var index = json.data.index;
			if ( index !== undefined ) {
				var typedArray = new TYPED_ARRAYS[ index.type ]( index.array );
				geometry.setIndex( new BufferAttribute( typedArray, 1 ) );
			}
			var attributes = json.data.attributes;
			for ( var key in attributes ) {
				var attribute = attributes[ key ];
				var typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );
				var bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;
				var bufferAttribute = new bufferAttributeConstr( typedArray, attribute.itemSize, attribute.normalized );
				if ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;
				geometry.addAttribute( key, bufferAttribute );
			}
			var morphAttributes = json.data.morphAttributes;
			if ( morphAttributes ) {
				for ( var key in morphAttributes ) {
					var attributeArray = morphAttributes[ key ];
					var array = [];
					for ( var i = 0, il = attributeArray.length; i < il; i ++ ) {
						var attribute = attributeArray[ i ];
						var typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );
						var bufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );
						if ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;
						array.push( bufferAttribute );
					}
					geometry.morphAttributes[ key ] = array;
				}
			}
			var groups = json.data.groups || json.data.drawcalls || json.data.offsets;
			if ( groups !== undefined ) {
				for ( var i = 0, n = groups.length; i !== n; ++ i ) {
					var group = groups[ i ];
					geometry.addGroup( group.start, group.count, group.materialIndex );
				}
			}
			var boundingSphere = json.data.boundingSphere;
			if ( boundingSphere !== undefined ) {
				var center = new Vector3();
				if ( boundingSphere.center !== undefined ) {
					center.fromArray( boundingSphere.center );
				}
				geometry.boundingSphere = new Sphere( center, boundingSphere.radius );
			}
			if ( json.name ) geometry.name = json.name;
			if ( json.userData ) geometry.userData = json.userData;
			return geometry;
		},
		setPath: function ( value ) {
			this.path = value;
			return this;
		}
	} );
	var TYPED_ARRAYS = {
		Int8Array: Int8Array,
		Uint8Array: Uint8Array,
		Uint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,
		Int16Array: Int16Array,
		Uint16Array: Uint16Array,
		Int32Array: Int32Array,
		Uint32Array: Uint32Array,
		Float32Array: Float32Array,
		Float64Array: Float64Array
	};
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function ObjectLoader( manager ) {
		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
		this.resourcePath = '';
	}
	Object.assign( ObjectLoader.prototype, {
		crossOrigin: 'anonymous',
		load: function ( url, onLoad, onProgress, onError ) {
			var scope = this;
			var path = ( this.path === undefined ) ? LoaderUtils.extractUrlBase( url ) : this.path;
			this.resourcePath = this.resourcePath || path;
			var loader = new FileLoader( scope.manager );
			loader.setPath( this.path );
			loader.load( url, function ( text ) {
				var json = null;
				try {
					json = JSON.parse( text );
				} catch ( error ) {
					if ( onError !== undefined ) onError( error );
					console.error( 'THREE:ObjectLoader: Can\'t parse ' + url + '.', error.message );
					return;
				}
				var metadata = json.metadata;
				if ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {
					console.error( 'THREE.ObjectLoader: Can\'t load ' + url );
					return;
				}
				scope.parse( json, onLoad );
			}, onProgress, onError );
		},
		setPath: function ( value ) {
			this.path = value;
			return this;
		},
		setResourcePath: function ( value ) {
			this.resourcePath = value;
			return this;
		},
		setCrossOrigin: function ( value ) {
			this.crossOrigin = value;
			return this;
		},
		parse: function ( json, onLoad ) {
			var shapes = this.parseShape( json.shapes );
			var geometries = this.parseGeometries( json.geometries, shapes );
			var images = this.parseImages( json.images, function () {
				if ( onLoad !== undefined ) onLoad( object );
			} );
			var textures = this.parseTextures( json.textures, images );
			var materials = this.parseMaterials( json.materials, textures );
			var object = this.parseObject( json.object, geometries, materials );
			if ( json.animations ) {
				object.animations = this.parseAnimations( json.animations );
			}
			if ( json.images === undefined || json.images.length === 0 ) {
				if ( onLoad !== undefined ) onLoad( object );
			}
			return object;
		},
		parseShape: function ( json ) {
			var shapes = {};
			if ( json !== undefined ) {
				for ( var i = 0, l = json.length; i < l; i ++ ) {
					var shape = new Shape().fromJSON( json[ i ] );
					shapes[ shape.uuid ] = shape;
				}
			}
			return shapes;
		},
		parseGeometries: function ( json, shapes ) {
			var geometries = {};
			if ( json !== undefined ) {
				var bufferGeometryLoader = new BufferGeometryLoader();
				for ( var i = 0, l = json.length; i < l; i ++ ) {
					var geometry;
					var data = json[ i ];
					switch ( data.type ) {
						case 'PlaneGeometry':
						case 'PlaneBufferGeometry':
							geometry = new Geometries[ data.type ](
								data.width,
								data.height,
								data.widthSegments,
								data.heightSegments
							);
							break;
						case 'BoxGeometry':
						case 'BoxBufferGeometry':
						case 'CubeGeometry': // backwards compatible
							geometry = new Geometries[ data.type ](
								data.width,
								data.height,
								data.depth,
								data.widthSegments,
								data.heightSegments,
								data.depthSegments
							);
							break;
						case 'CircleGeometry':
						case 'CircleBufferGeometry':
							geometry = new Geometries[ data.type ](
								data.radius,
								data.segments,
								data.thetaStart,
								data.thetaLength
							);
							break;
						case 'CylinderGeometry':
						case 'CylinderBufferGeometry':
							geometry = new Geometries[ data.type ](
								data.radiusTop,
								data.radiusBottom,
								data.height,
								data.radialSegments,
								data.heightSegments,
								data.openEnded,
								data.thetaStart,
								data.thetaLength
							);
							break;
						case 'ConeGeometry':
						case 'ConeBufferGeometry':
							geometry = new Geometries[ data.type ](
								data.radius,
								data.height,
								data.radialSegments,
								data.heightSegments,
								data.openEnded,
								data.thetaStart,
								data.thetaLength
							);
							break;
						case 'SphereGeometry':
						case 'SphereBufferGeometry':
							geometry = new Geometries[ data.type ](
								data.radius,
								data.widthSegments,
								data.heightSegments,
								data.phiStart,
								data.phiLength,
								data.thetaStart,
								data.thetaLength
							);
							break;
						case 'DodecahedronGeometry':
						case 'DodecahedronBufferGeometry':
						case 'IcosahedronGeometry':
						case 'IcosahedronBufferGeometry':
						case 'OctahedronGeometry':
						case 'OctahedronBufferGeometry':
						case 'TetrahedronGeometry':
						case 'TetrahedronBufferGeometry':
							geometry = new Geometries[ data.type ](
								data.radius,
								data.detail
							);
							break;
						case 'RingGeometry':
						case 'RingBufferGeometry':
							geometry = new Geometries[ data.type ](
								data.innerRadius,
								data.outerRadius,
								data.thetaSegments,
								data.phiSegments,
								data.thetaStart,
								data.thetaLength
							);
							break;
						case 'TorusGeometry':
						case 'TorusBufferGeometry':
							geometry = new Geometries[ data.type ](
								data.radius,
								data.tube,
								data.radialSegments,
								data.tubularSegments,
								data.arc
							);
							break;
						case 'TorusKnotGeometry':
						case 'TorusKnotBufferGeometry':
							geometry = new Geometries[ data.type ](
								data.radius,
								data.tube,
								data.tubularSegments,
								data.radialSegments,
								data.p,
								data.q
							);
							break;
						case 'TubeGeometry':
						case 'TubeBufferGeometry':
							geometry = new Geometries[ data.type ](
								new Curves[ data.path.type ]().fromJSON( data.path ),
								data.tubularSegments,
								data.radius,
								data.radialSegments,
								data.closed
							);
							break;
						case 'LatheGeometry':
						case 'LatheBufferGeometry':
							geometry = new Geometries[ data.type ](
								data.points,
								data.segments,
								data.phiStart,
								data.phiLength
							);
							break;
						case 'PolyhedronGeometry':
						case 'PolyhedronBufferGeometry':
							geometry = new Geometries[ data.type ](
								data.vertices,
								data.indices,
								data.radius,
								data.details
							);
							break;
						case 'ShapeGeometry':
						case 'ShapeBufferGeometry':
							var geometryShapes = [];
							for ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {
								var shape = shapes[ data.shapes[ j ] ];
								geometryShapes.push( shape );
							}
							geometry = new Geometries[ data.type ](
								geometryShapes,
								data.curveSegments
							);
							break;
						case 'ExtrudeGeometry':
						case 'ExtrudeBufferGeometry':
							var geometryShapes = [];
							for ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {
								var shape = shapes[ data.shapes[ j ] ];
								geometryShapes.push( shape );
							}
							var extrudePath = data.options.extrudePath;
							if ( extrudePath !== undefined ) {
								data.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );
							}
							geometry = new Geometries[ data.type ](
								geometryShapes,
								data.options
							);
							break;
						case 'BufferGeometry':
						case 'InstancedBufferGeometry':
							geometry = bufferGeometryLoader.parse( data );
							break;
						case 'Geometry':
							if ( 'THREE' in window && 'LegacyJSONLoader' in THREE ) {
								var geometryLoader = new THREE.LegacyJSONLoader();
								geometry = geometryLoader.parse( data, this.resourcePath ).geometry;
							} else {
								console.error( 'THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type "Geometry".' );
							}
							break;
						default:
							console.warn( 'THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"' );
							continue;
					}
					geometry.uuid = data.uuid;
					if ( data.name !== undefined ) geometry.name = data.name;
					if ( geometry.isBufferGeometry === true && data.userData !== undefined ) geometry.userData = data.userData;
					geometries[ data.uuid ] = geometry;
				}
			}
			return geometries;
		},
		parseMaterials: function ( json, textures ) {
			var cache = {}; // MultiMaterial
			var materials = {};
			if ( json !== undefined ) {
				var loader = new MaterialLoader();
				loader.setTextures( textures );
				for ( var i = 0, l = json.length; i < l; i ++ ) {
					var data = json[ i ];
					if ( data.type === 'MultiMaterial' ) {
						var array = [];
						for ( var j = 0; j < data.materials.length; j ++ ) {
							var material = data.materials[ j ];
							if ( cache[ material.uuid ] === undefined ) {
								cache[ material.uuid ] = loader.parse( material );
							}
							array.push( cache[ material.uuid ] );
						}
						materials[ data.uuid ] = array;
					} else {
						if ( cache[ data.uuid ] === undefined ) {
							cache[ data.uuid ] = loader.parse( data );
						}
						materials[ data.uuid ] = cache[ data.uuid ];
					}
				}
			}
			return materials;
		},
		parseAnimations: function ( json ) {
			var animations = [];
			for ( var i = 0; i < json.length; i ++ ) {
				var data = json[ i ];
				var clip = AnimationClip.parse( data );
				if ( data.uuid !== undefined ) clip.uuid = data.uuid;
				animations.push( clip );
			}
			return animations;
		},
		parseImages: function ( json, onLoad ) {
			var scope = this;
			var images = {};
			function loadImage( url ) {
				scope.manager.itemStart( url );
				return loader.load( url, function () {
					scope.manager.itemEnd( url );
				}, undefined, function () {
					scope.manager.itemError( url );
					scope.manager.itemEnd( url );
				} );
			}
			if ( json !== undefined && json.length > 0 ) {
				var manager = new LoadingManager( onLoad );
				var loader = new ImageLoader( manager );
				loader.setCrossOrigin( this.crossOrigin );
				for ( var i = 0, il = json.length; i < il; i ++ ) {
					var image = json[ i ];
					var url = image.url;
					if ( Array.isArray( url ) ) {
						images[ image.uuid ] = [];
						for ( var j = 0, jl = url.length; j < jl; j ++ ) {
							var currentUrl = url[ j ];
							var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( currentUrl ) ? currentUrl : scope.resourcePath + currentUrl;
							images[ image.uuid ].push( loadImage( path ) );
						}
					} else {
						var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( image.url ) ? image.url : scope.resourcePath + image.url;
						images[ image.uuid ] = loadImage( path );
					}
				}
			}
			return images;
		},
		parseTextures: function ( json, images ) {
			function parseConstant( value, type ) {
				if ( typeof value === 'number' ) return value;
				console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );
				return type[ value ];
			}
			var textures = {};
			if ( json !== undefined ) {
				for ( var i = 0, l = json.length; i < l; i ++ ) {
					var data = json[ i ];
					if ( data.image === undefined ) {
						console.warn( 'THREE.ObjectLoader: No "image" specified for', data.uuid );
					}
					if ( images[ data.image ] === undefined ) {
						console.warn( 'THREE.ObjectLoader: Undefined image', data.image );
					}
					var texture;
					if ( Array.isArray( images[ data.image ] ) ) {
						texture = new CubeTexture( images[ data.image ] );
					} else {
						texture = new Texture( images[ data.image ] );
					}
					texture.needsUpdate = true;
					texture.uuid = data.uuid;
					if ( data.name !== undefined ) texture.name = data.name;
					if ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );
					if ( data.offset !== undefined ) texture.offset.fromArray( data.offset );
					if ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );
					if ( data.center !== undefined ) texture.center.fromArray( data.center );
					if ( data.rotation !== undefined ) texture.rotation = data.rotation;
					if ( data.wrap !== undefined ) {
						texture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );
						texture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );
					}
					if ( data.format !== undefined ) texture.format = data.format;
					if ( data.type !== undefined ) texture.type = data.type;
					if ( data.encoding !== undefined ) texture.encoding = data.encoding;
					if ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );
					if ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );
					if ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;
					if ( data.flipY !== undefined ) texture.flipY = data.flipY;
					if ( data.premultiplyAlpha !== undefined ) texture.premultiplyAlpha = data.premultiplyAlpha;
					if ( data.unpackAlignment !== undefined ) texture.unpackAlignment = data.unpackAlignment;
					textures[ data.uuid ] = texture;
				}
			}
			return textures;
		},
		parseObject: function ( data, geometries, materials ) {
			var object;
			function getGeometry( name ) {
				if ( geometries[ name ] === undefined ) {
					console.warn( 'THREE.ObjectLoader: Undefined geometry', name );
				}
				return geometries[ name ];
			}
			function getMaterial( name ) {
				if ( name === undefined ) return undefined;
				if ( Array.isArray( name ) ) {
					var array = [];
					for ( var i = 0, l = name.length; i < l; i ++ ) {
						var uuid = name[ i ];
						if ( materials[ uuid ] === undefined ) {
							console.warn( 'THREE.ObjectLoader: Undefined material', uuid );
						}
						array.push( materials[ uuid ] );
					}
					return array;
				}
				if ( materials[ name ] === undefined ) {
					console.warn( 'THREE.ObjectLoader: Undefined material', name );
				}
				return materials[ name ];
			}
			switch ( data.type ) {
				case 'Scene':
					object = new Scene();
					if ( data.background !== undefined ) {
						if ( Number.isInteger( data.background ) ) {
							object.background = new Color( data.background );
						}
					}
					if ( data.fog !== undefined ) {
						if ( data.fog.type === 'Fog' ) {
							object.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );
						} else if ( data.fog.type === 'FogExp2' ) {
							object.fog = new FogExp2( data.fog.color, data.fog.density );
						}
					}
					break;
				case 'PerspectiveCamera':
					object = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );
					if ( data.focus !== undefined ) object.focus = data.focus;
					if ( data.zoom !== undefined ) object.zoom = data.zoom;
					if ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;
					if ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;
					if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );
					break;
				case 'OrthographicCamera':
					object = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );
					if ( data.zoom !== undefined ) object.zoom = data.zoom;
					if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );
					break;
				case 'AmbientLight':
					object = new AmbientLight( data.color, data.intensity );
					break;
				case 'DirectionalLight':
					object = new DirectionalLight( data.color, data.intensity );
					break;
				case 'PointLight':
					object = new PointLight( data.color, data.intensity, data.distance, data.decay );
					break;
				case 'RectAreaLight':
					object = new RectAreaLight( data.color, data.intensity, data.width, data.height );
					break;
				case 'SpotLight':
					object = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );
					break;
				case 'HemisphereLight':
					object = new HemisphereLight( data.color, data.groundColor, data.intensity );
					break;
				case 'SkinnedMesh':
					console.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );
				case 'Mesh':
					var geometry = getGeometry( data.geometry );
					var material = getMaterial( data.material );
					if ( geometry.bones && geometry.bones.length > 0 ) {
						object = new SkinnedMesh( geometry, material );
					} else {
						object = new Mesh( geometry, material );
					}
					if ( data.drawMode !== undefined ) object.setDrawMode( data.drawMode );
					break;
				case 'LOD':
					object = new LOD();
					break;
				case 'Line':
					object = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );
					break;
				case 'LineLoop':
					object = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );
					break;
				case 'LineSegments':
					object = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );
					break;
				case 'PointCloud':
				case 'Points':
					object = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );
					break;
				case 'Sprite':
					object = new Sprite( getMaterial( data.material ) );
					break;
				case 'Group':
					object = new Group();
					break;
				default:
					object = new Object3D();
			}
			object.uuid = data.uuid;
			if ( data.name !== undefined ) object.name = data.name;
			if ( data.matrix !== undefined ) {
				object.matrix.fromArray( data.matrix );
				if ( data.matrixAutoUpdate !== undefined ) object.matrixAutoUpdate = data.matrixAutoUpdate;
				if ( object.matrixAutoUpdate ) object.matrix.decompose( object.position, object.quaternion, object.scale );
			} else {
				if ( data.position !== undefined ) object.position.fromArray( data.position );
				if ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );
				if ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );
				if ( data.scale !== undefined ) object.scale.fromArray( data.scale );
			}
			if ( data.castShadow !== undefined ) object.castShadow = data.castShadow;
			if ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;
			if ( data.shadow ) {
				if ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;
				if ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;
				if ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );
				if ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );
			}
			if ( data.visible !== undefined ) object.visible = data.visible;
			if ( data.frustumCulled !== undefined ) object.frustumCulled = data.frustumCulled;
			if ( data.renderOrder !== undefined ) object.renderOrder = data.renderOrder;
			if ( data.userData !== undefined ) object.userData = data.userData;
			if ( data.layers !== undefined ) object.layers.mask = data.layers;
			if ( data.children !== undefined ) {
				var children = data.children;
				for ( var i = 0; i < children.length; i ++ ) {
					object.add( this.parseObject( children[ i ], geometries, materials ) );
				}
			}
			if ( data.type === 'LOD' ) {
				var levels = data.levels;
				for ( var l = 0; l < levels.length; l ++ ) {
					var level = levels[ l ];
					var child = object.getObjectByProperty( 'uuid', level.object );
					if ( child !== undefined ) {
						object.addLevel( child, level.distance );
					}
				}
			}
			return object;
		}
	} );
	var TEXTURE_MAPPING = {
		UVMapping: UVMapping,
		CubeReflectionMapping: CubeReflectionMapping,
		CubeRefractionMapping: CubeRefractionMapping,
		EquirectangularReflectionMapping: EquirectangularReflectionMapping,
		EquirectangularRefractionMapping: EquirectangularRefractionMapping,
		SphericalReflectionMapping: SphericalReflectionMapping,
		CubeUVReflectionMapping: CubeUVReflectionMapping,
		CubeUVRefractionMapping: CubeUVRefractionMapping
	};
	var TEXTURE_WRAPPING = {
		RepeatWrapping: RepeatWrapping,
		ClampToEdgeWrapping: ClampToEdgeWrapping,
		MirroredRepeatWrapping: MirroredRepeatWrapping
	};
	var TEXTURE_FILTER = {
		NearestFilter: NearestFilter,
		NearestMipmapNearestFilter: NearestMipmapNearestFilter,
		NearestMipmapLinearFilter: NearestMipmapLinearFilter,
		LinearFilter: LinearFilter,
		LinearMipmapNearestFilter: LinearMipmapNearestFilter,
		LinearMipmapLinearFilter: LinearMipmapLinearFilter
	};
	/**
	 * @author thespite / http://clicktorelease.com/
	 */
	function ImageBitmapLoader( manager ) {
		if ( typeof createImageBitmap === 'undefined' ) {
			console.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );
		}
		if ( typeof fetch === 'undefined' ) {
			console.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );
		}
		this.manager = manager !== undefined ? manager : DefaultLoadingManager;
		this.options = undefined;
	}
	ImageBitmapLoader.prototype = {
		constructor: ImageBitmapLoader,
		setOptions: function setOptions( options ) {
			this.options = options;
			return this;
		},
		load: function ( url, onLoad, onProgress, onError ) {
			if ( url === undefined ) url = '';
			if ( this.path !== undefined ) url = this.path + url;
			url = this.manager.resolveURL( url );
			var scope = this;
			var cached = Cache.get( url );
			if ( cached !== undefined ) {
				scope.manager.itemStart( url );
				setTimeout( function () {
					if ( onLoad ) onLoad( cached );
					scope.manager.itemEnd( url );
				}, 0 );
				return cached;
			}
			fetch( url ).then( function ( res ) {
				return res.blob();
			} ).then( function ( blob ) {
				if ( scope.options === undefined ) {
					return createImageBitmap( blob );
				} else {
					return createImageBitmap( blob, scope.options );
				}
			} ).then( function ( imageBitmap ) {
				Cache.add( url, imageBitmap );
				if ( onLoad ) onLoad( imageBitmap );
				scope.manager.itemEnd( url );
			} ).catch( function ( e ) {
				if ( onError ) onError( e );
				scope.manager.itemError( url );
				scope.manager.itemEnd( url );
			} );
			scope.manager.itemStart( url );
		},
		setCrossOrigin: function ( /* value */ ) {
			return this;
		},
		setPath: function ( value ) {
			this.path = value;
			return this;
		}
	};
	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * minimal class for proxing functions to Path. Replaces old "extractSubpaths()"
	 **/
	function ShapePath() {
		this.type = 'ShapePath';
		this.color = new Color();
		this.subPaths = [];
		this.currentPath = null;
	}
	Object.assign( ShapePath.prototype, {
		moveTo: function ( x, y ) {
			this.currentPath = new Path();
			this.subPaths.push( this.currentPath );
			this.currentPath.moveTo( x, y );
		},
		lineTo: function ( x, y ) {
			this.currentPath.lineTo( x, y );
		},
		quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {
			this.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );
		},
		bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {
			this.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );
		},
		splineThru: function ( pts ) {
			this.currentPath.splineThru( pts );
		},
		toShapes: function ( isCCW, noHoles ) {
			function toShapesNoHoles( inSubpaths ) {
				var shapes = [];
				for ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {
					var tmpPath = inSubpaths[ i ];
					var tmpShape = new Shape();
					tmpShape.curves = tmpPath.curves;
					shapes.push( tmpShape );
				}
				return shapes;
			}
			function isPointInsidePolygon( inPt, inPolygon ) {
				var polyLen = inPolygon.length;
				var inside = false;
				for ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {
					var edgeLowPt = inPolygon[ p ];
					var edgeHighPt = inPolygon[ q ];
					var edgeDx = edgeHighPt.x - edgeLowPt.x;
					var edgeDy = edgeHighPt.y - edgeLowPt.y;
					if ( Math.abs( edgeDy ) > Number.EPSILON ) {
						if ( edgeDy < 0 ) {
							edgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;
							edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;
						}
						if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) 		continue;
						if ( inPt.y === edgeLowPt.y ) {
							if ( inPt.x === edgeLowPt.x )		return	true;		// inPt is on contour ?
						} else {
							var perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );
							if ( perpEdge === 0 )				return	true;		// inPt is on contour ?
							if ( perpEdge < 0 ) 				continue;
							inside = ! inside;		// true intersection left of inPt
						}
					} else {
						if ( inPt.y !== edgeLowPt.y ) 		continue;			// parallel
						if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
							 ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )		return	true;	// inPt: Point on contour !
					}
				}
				return	inside;
			}
			var isClockWise = ShapeUtils.isClockWise;
			var subPaths = this.subPaths;
			if ( subPaths.length === 0 ) return [];
			if ( noHoles === true )	return	toShapesNoHoles( subPaths );
			var solid, tmpPath, tmpShape, shapes = [];
			if ( subPaths.length === 1 ) {
				tmpPath = subPaths[ 0 ];
				tmpShape = new Shape();
				tmpShape.curves = tmpPath.curves;
				shapes.push( tmpShape );
				return shapes;
			}
			var holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );
			holesFirst = isCCW ? ! holesFirst : holesFirst;
			var betterShapeHoles = [];
			var newShapes = [];
			var newShapeHoles = [];
			var mainIdx = 0;
			var tmpPoints;
			newShapes[ mainIdx ] = undefined;
			newShapeHoles[ mainIdx ] = [];
			for ( var i = 0, l = subPaths.length; i < l; i ++ ) {
				tmpPath = subPaths[ i ];
				tmpPoints = tmpPath.getPoints();
				solid = isClockWise( tmpPoints );
				solid = isCCW ? ! solid : solid;
				if ( solid ) {
					if ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )	mainIdx ++;
					newShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };
					newShapes[ mainIdx ].s.curves = tmpPath.curves;
					if ( holesFirst )	mainIdx ++;
					newShapeHoles[ mainIdx ] = [];
				} else {
					newShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );
				}
			}
			if ( ! newShapes[ 0 ] )	return	toShapesNoHoles( subPaths );
			if ( newShapes.length > 1 ) {
				var ambiguous = false;
				var toChange = [];
				for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {
					betterShapeHoles[ sIdx ] = [];
				}
				for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {
					var sho = newShapeHoles[ sIdx ];
					for ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {
						var ho = sho[ hIdx ];
						var hole_unassigned = true;
						for ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {
							if ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {
								if ( sIdx !== s2Idx )	toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );
								if ( hole_unassigned ) {
									hole_unassigned = false;
									betterShapeHoles[ s2Idx ].push( ho );
								} else {
									ambiguous = true;
								}
							}
						}
						if ( hole_unassigned ) {
							betterShapeHoles[ sIdx ].push( ho );
						}
					}
				}
				if ( toChange.length > 0 ) {
					if ( ! ambiguous )	newShapeHoles = betterShapeHoles;
				}
			}
			var tmpHoles;
			for ( var i = 0, il = newShapes.length; i < il; i ++ ) {
				tmpShape = newShapes[ i ].s;
				shapes.push( tmpShape );
				tmpHoles = newShapeHoles[ i ];
				for ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {
					tmpShape.holes.push( tmpHoles[ j ].h );
				}
			}
			return shapes;
		}
	} );
	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author mrdoob / http://mrdoob.com/
	 */
	function Font( data ) {
		this.type = 'Font';
		this.data = data;
	}
	Object.assign( Font.prototype, {
		isFont: true,
		generateShapes: function ( text, size ) {
			if ( size === undefined ) size = 100;
			var shapes = [];
			var paths = createPaths( text, size, this.data );
			for ( var p = 0, pl = paths.length; p < pl; p ++ ) {
				Array.prototype.push.apply( shapes, paths[ p ].toShapes() );
			}
			return shapes;
		}
	} );
	function createPaths( text, size, data ) {
		var chars = Array.from ? Array.from( text ) : String( text ).split( '' ); // see #13988
		var scale = size / data.resolution;
		var line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;
		var paths = [];
		var offsetX = 0, offsetY = 0;
		for ( var i = 0; i < chars.length; i ++ ) {
			var char = chars[ i ];
			if ( char === '\n' ) {
				offsetX = 0;
				offsetY -= line_height;
			} else {
				var ret = createPath( char, scale, offsetX, offsetY, data );
				offsetX += ret.offsetX;
				paths.push( ret.path );
			}
		}
		return paths;
	}
	function createPath( char, scale, offsetX, offsetY, data ) {
		var glyph = data.glyphs[ char ] || data.glyphs[ '?' ];
		if ( ! glyph ) {
			console.error( 'THREE.Font: character "' + char + '" does not exists in font family ' + data.familyName + '.' );
			return;
		}
		var path = new ShapePath();
		var x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;
		if ( glyph.o ) {
			var outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );
			for ( var i = 0, l = outline.length; i < l; ) {
				var action = outline[ i ++ ];
				switch ( action ) {
					case 'm': // moveTo
						x = outline[ i ++ ] * scale + offsetX;
						y = outline[ i ++ ] * scale + offsetY;
						path.moveTo( x, y );
						break;
					case 'l': // lineTo
						x = outline[ i ++ ] * scale + offsetX;
						y = outline[ i ++ ] * scale + offsetY;
						path.lineTo( x, y );
						break;
					case 'q': // quadraticCurveTo
						cpx = outline[ i ++ ] * scale + offsetX;
						cpy = outline[ i ++ ] * scale + offsetY;
						cpx1 = outline[ i ++ ] * scale + offsetX;
						cpy1 = outline[ i ++ ] * scale + offsetY;
						path.quadraticCurveTo( cpx1, cpy1, cpx, cpy );
						break;
					case 'b': // bezierCurveTo
						cpx = outline[ i ++ ] * scale + offsetX;
						cpy = outline[ i ++ ] * scale + offsetY;
						cpx1 = outline[ i ++ ] * scale + offsetX;
						cpy1 = outline[ i ++ ] * scale + offsetY;
						cpx2 = outline[ i ++ ] * scale + offsetX;
						cpy2 = outline[ i ++ ] * scale + offsetY;
						path.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );
						break;
				}
			}
		}
		return { offsetX: glyph.ha * scale, path: path };
	}
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function FontLoader( manager ) {
		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	}
	Object.assign( FontLoader.prototype, {
		load: function ( url, onLoad, onProgress, onError ) {
			var scope = this;
			var loader = new FileLoader( this.manager );
			loader.setPath( this.path );
			loader.load( url, function ( text ) {
				var json;
				try {
					json = JSON.parse( text );
				} catch ( e ) {
					console.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );
					json = JSON.parse( text.substring( 65, text.length - 2 ) );
				}
				var font = scope.parse( json );
				if ( onLoad ) onLoad( font );
			}, onProgress, onError );
		},
		parse: function ( json ) {
			return new Font( json );
		},
		setPath: function ( value ) {
			this.path = value;
			return this;
		}
	} );
	/**
	 * @author alteredq / http://alteredqualia.com/
	 */
	function Loader() {}
	Loader.Handlers = {
		handlers: [],
		add: function ( regex, loader ) {
			this.handlers.push( regex, loader );
		},
		get: function ( file ) {
			var handlers = this.handlers;
			for ( var i = 0, l = handlers.length; i < l; i += 2 ) {
				var regex = handlers[ i ];
				var loader = handlers[ i + 1 ];
				if ( regex.test( file ) ) {
					return loader;
				}
			}
			return null;
		}
	};
	Object.assign( Loader.prototype, {
		crossOrigin: 'anonymous',
		onLoadStart: function () {},
		onLoadProgress: function () {},
		onLoadComplete: function () {},
		initMaterials: function ( materials, texturePath, crossOrigin ) {
			var array = [];
			for ( var i = 0; i < materials.length; ++ i ) {
				array[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );
			}
			return array;
		},
		createMaterial: ( function () {
			var BlendingMode = {
				NoBlending: NoBlending,
				NormalBlending: NormalBlending,
				AdditiveBlending: AdditiveBlending,
				SubtractiveBlending: SubtractiveBlending,
				MultiplyBlending: MultiplyBlending,
				CustomBlending: CustomBlending
			};
			var color = new Color();
			var textureLoader = new TextureLoader();
			var materialLoader = new MaterialLoader();
			return function createMaterial( m, texturePath, crossOrigin ) {
				var textures = {};
				function loadTexture( path, repeat, offset, wrap, anisotropy ) {
					var fullPath = texturePath + path;
					var loader = Loader.Handlers.get( fullPath );
					var texture;
					if ( loader !== null ) {
						texture = loader.load( fullPath );
					} else {
						textureLoader.setCrossOrigin( crossOrigin );
						texture = textureLoader.load( fullPath );
					}
					if ( repeat !== undefined ) {
						texture.repeat.fromArray( repeat );
						if ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;
						if ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;
					}
					if ( offset !== undefined ) {
						texture.offset.fromArray( offset );
					}
					if ( wrap !== undefined ) {
						if ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;
						if ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;
						if ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;
						if ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;
					}
					if ( anisotropy !== undefined ) {
						texture.anisotropy = anisotropy;
					}
					var uuid = _Math.generateUUID();
					textures[ uuid ] = texture;
					return uuid;
				}
				var json = {
					uuid: _Math.generateUUID(),
					type: 'MeshLambertMaterial'
				};
				for ( var name in m ) {
					var value = m[ name ];
					switch ( name ) {
						case 'DbgColor':
						case 'DbgIndex':
						case 'opticalDensity':
						case 'illumination':
							break;
						case 'DbgName':
							json.name = value;
							break;
						case 'blending':
							json.blending = BlendingMode[ value ];
							break;
						case 'colorAmbient':
						case 'mapAmbient':
							console.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );
							break;
						case 'colorDiffuse':
							json.color = color.fromArray( value ).getHex();
							break;
						case 'colorSpecular':
							json.specular = color.fromArray( value ).getHex();
							break;
						case 'colorEmissive':
							json.emissive = color.fromArray( value ).getHex();
							break;
						case 'specularCoef':
							json.shininess = value;
							break;
						case 'shading':
							if ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';
							if ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';
							if ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';
							break;
						case 'mapDiffuse':
							json.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );
							break;
						case 'mapDiffuseRepeat':
						case 'mapDiffuseOffset':
						case 'mapDiffuseWrap':
						case 'mapDiffuseAnisotropy':
							break;
						case 'mapEmissive':
							json.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );
							break;
						case 'mapEmissiveRepeat':
						case 'mapEmissiveOffset':
						case 'mapEmissiveWrap':
						case 'mapEmissiveAnisotropy':
							break;
						case 'mapLight':
							json.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );
							break;
						case 'mapLightRepeat':
						case 'mapLightOffset':
						case 'mapLightWrap':
						case 'mapLightAnisotropy':
							break;
						case 'mapAO':
							json.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );
							break;
						case 'mapAORepeat':
						case 'mapAOOffset':
						case 'mapAOWrap':
						case 'mapAOAnisotropy':
							break;
						case 'mapBump':
							json.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );
							break;
						case 'mapBumpScale':
							json.bumpScale = value;
							break;
						case 'mapBumpRepeat':
						case 'mapBumpOffset':
						case 'mapBumpWrap':
						case 'mapBumpAnisotropy':
							break;
						case 'mapNormal':
							json.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );
							break;
						case 'mapNormalFactor':
							json.normalScale = value;
							break;
						case 'mapNormalRepeat':
						case 'mapNormalOffset':
						case 'mapNormalWrap':
						case 'mapNormalAnisotropy':
							break;
						case 'mapSpecular':
							json.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );
							break;
						case 'mapSpecularRepeat':
						case 'mapSpecularOffset':
						case 'mapSpecularWrap':
						case 'mapSpecularAnisotropy':
							break;
						case 'mapMetalness':
							json.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );
							break;
						case 'mapMetalnessRepeat':
						case 'mapMetalnessOffset':
						case 'mapMetalnessWrap':
						case 'mapMetalnessAnisotropy':
							break;
						case 'mapRoughness':
							json.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );
							break;
						case 'mapRoughnessRepeat':
						case 'mapRoughnessOffset':
						case 'mapRoughnessWrap':
						case 'mapRoughnessAnisotropy':
							break;
						case 'mapAlpha':
							json.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );
							break;
						case 'mapAlphaRepeat':
						case 'mapAlphaOffset':
						case 'mapAlphaWrap':
						case 'mapAlphaAnisotropy':
							break;
						case 'flipSided':
							json.side = BackSide;
							break;
						case 'doubleSided':
							json.side = DoubleSide;
							break;
						case 'transparency':
							console.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );
							json.opacity = value;
							break;
						case 'depthTest':
						case 'depthWrite':
						case 'colorWrite':
						case 'opacity':
						case 'reflectivity':
						case 'transparent':
						case 'visible':
						case 'wireframe':
							json[ name ] = value;
							break;
						case 'vertexColors':
							if ( value === true ) json.vertexColors = VertexColors;
							if ( value === 'face' ) json.vertexColors = FaceColors;
							break;
						default:
							console.error( 'THREE.Loader.createMaterial: Unsupported', name, value );
							break;
					}
				}
				if ( json.type === 'MeshBasicMaterial' ) delete json.emissive;
				if ( json.type !== 'MeshPhongMaterial' ) delete json.specular;
				if ( json.opacity < 1 ) json.transparent = true;
				materialLoader.setTextures( textures );
				return materialLoader.parse( json );
			};
		} )()
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	var context;
	var AudioContext = {
		getContext: function () {
			if ( context === undefined ) {
				context = new ( window.AudioContext || window.webkitAudioContext )();
			}
			return context;
		},
		setContext: function ( value ) {
			context = value;
		}
	};
	/**
	 * @author Reece Aaron Lecrivain / http://reecenotes.com/
	 */
	function AudioLoader( manager ) {
		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	}
	Object.assign( AudioLoader.prototype, {
		load: function ( url, onLoad, onProgress, onError ) {
			var loader = new FileLoader( this.manager );
			loader.setResponseType( 'arraybuffer' );
			loader.setPath( this.path );
			loader.load( url, function ( buffer ) {
				var bufferCopy = buffer.slice( 0 );
				var context = AudioContext.getContext();
				context.decodeAudioData( bufferCopy, function ( audioBuffer ) {
					onLoad( audioBuffer );
				} );
			}, onProgress, onError );
		},
		setPath: function ( value ) {
			this.path = value;
			return this;
		}
	} );
	/**
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * Primary reference:
	 *   https://graphics.stanford.edu/papers/envmap/envmap.pdf
	 *
	 * Secondary reference:
	 *   https://www.ppsloan.org/publications/StupidSH36.pdf
	 */
	function SphericalHarmonics3() {
		this.coefficients = [];
		for ( var i = 0; i < 9; i ++ ) {
			this.coefficients.push( new Vector3() );
		}
	}
	Object.assign( SphericalHarmonics3.prototype, {
		isSphericalHarmonics3: true,
		set: function ( coefficients ) {
			for ( var i = 0; i < 9; i ++ ) {
				this.coefficients[ i ].copy( coefficients[ i ] );
			}
			return this;
		},
		zero: function () {
			for ( var i = 0; i < 9; i ++ ) {
				this.coefficients[ i ].set( 0, 0, 0 );
			}
			return this;
		},
		getAt: function ( normal, target ) {
			var x = normal.x, y = normal.y, z = normal.z;
			var coeff = this.coefficients;
			target.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );
			target.addScale( coeff[ 1 ], 0.488603 * y );
			target.addScale( coeff[ 2 ], 0.488603 * z );
			target.addScale( coeff[ 3 ], 0.488603 * x );
			target.addScale( coeff[ 4 ], 1.092548 * ( x * y ) );
			target.addScale( coeff[ 5 ], 1.092548 * ( y * z ) );
			target.addScale( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );
			target.addScale( coeff[ 7 ], 1.092548 * ( x * z ) );
			target.addScale( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );
			return target;
		},
		getIrradianceAt: function ( normal, target ) {
			var x = normal.x, y = normal.y, z = normal.z;
			var coeff = this.coefficients;
			target.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095
			target.addScale( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603
			target.addScale( coeff[ 2 ], 2.0 * 0.511664 * z );
			target.addScale( coeff[ 3 ], 2.0 * 0.511664 * x );
			target.addScale( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548
			target.addScale( coeff[ 5 ], 2.0 * 0.429043 * y * z );
			target.addScale( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3
			target.addScale( coeff[ 7 ], 2.0 * 0.429043 * x * z );
			target.addScale( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274
			return target;
		},
		add: function ( sh ) {
			for ( var i = 0; i < 9; i ++ ) {
				this.coefficients[ i ].add( sh.coefficients[ i ] );
			}
			return this;
		},
		scale: function ( s ) {
			for ( var i = 0; i < 9; i ++ ) {
				this.coefficients[ i ].multiplyScalar( s );
			}
			return this;
		},
		lerp: function ( sh, alpha ) {
			for ( var i = 0; i < 9; i ++ ) {
				this.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );
			}
			return this;
		},
		equals: function ( sh ) {
			for ( var i = 0; i < 9; i ++ ) {
				if ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {
					return false;
				}
			}
			return true;
		},
		copy: function ( sh ) {
			return this.set( sh.coefficients );
		},
		clone: function () {
			return new this.constructor().copy( this );
		},
		fromArray: function ( array ) {
			var coefficients = this.coefficients;
			for ( var i = 0; i < 9; i ++ ) {
				coefficients[ i ].fromArray( array, i * 3 );
			}
			return this;
		},
		toArray: function () {
			var array = [];
			var coefficients = this.coefficients;
			for ( var i = 0; i < 9; i ++ ) {
				coefficients[ i ].toArray( array, i * 3 );
			}
			return array;
		}
	} );
	Object.assign( SphericalHarmonics3, {
		getBasisAt: function ( normal, shBasis ) {
			var x = normal.x, y = normal.y, z = normal.z;
			shBasis[ 0 ] = 0.282095;
			shBasis[ 1 ] = 0.488603 * y;
			shBasis[ 2 ] = 0.488603 * z;
			shBasis[ 3 ] = 0.488603 * x;
			shBasis[ 4 ] = 1.092548 * x * y;
			shBasis[ 5 ] = 1.092548 * y * z;
			shBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );
			shBasis[ 7 ] = 1.092548 * x * z;
			shBasis[ 8 ] = 0.546274 * ( x * x - y * y );
		}
	} );
	/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * A LightProbe is a source of indirect-diffuse light
	 */
	function LightProbe( sh, intensity ) {
		Light.call( this, undefined, intensity );
		this.sh = ( sh !== undefined ) ? sh : new SphericalHarmonics3();
	}
	LightProbe.prototype = Object.assign( Object.create( Light.prototype ), {
		constructor: LightProbe,
		isLightProbe: true,
		copy: function ( source ) {
			Light.prototype.copy.call( this, source );
			this.sh.copy( source.sh );
			this.intensity = source.intensity;
			return this;
		},
		toJSON: function ( meta ) {
			var data = Light.prototype.toJSON.call( this, meta );
			return data;
		}
	} );
	/**
	 * @author WestLangley / http://github.com/WestLangley
	 */
	function HemisphereLightProbe( skyColor, groundColor, intensity ) {
		LightProbe.call( this, undefined, intensity );
		var color1 = new Color().set( skyColor );
		var color2 = new Color().set( groundColor );
		var sky = new Vector3( color1.r, color1.g, color1.b );
		var ground = new Vector3( color2.r, color2.g, color2.b );
		var c0 = Math.sqrt( Math.PI );
		var c1 = c0 * Math.sqrt( 0.75 );
		this.sh.coefficients[ 0 ].copy( sky ).add( ground ).multiplyScalar( c0 );
		this.sh.coefficients[ 1 ].copy( sky ).sub( ground ).multiplyScalar( c1 );
	}
	HemisphereLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {
		constructor: HemisphereLightProbe,
		isHemisphereLightProbe: true,
		copy: function ( source ) { // modifying colors not currently supported
			LightProbe.prototype.copy.call( this, source );
			return this;
		},
		toJSON: function ( meta ) {
			var data = LightProbe.prototype.toJSON.call( this, meta );
			return data;
		}
	} );
	/**
	 * @author WestLangley / http://github.com/WestLangley
	 */
	function AmbientLightProbe( color, intensity ) {
		LightProbe.call( this, undefined, intensity );
		var color1 = new Color().set( color );
		this.sh.coefficients[ 0 ].set( color1.r, color1.g, color1.b ).multiplyScalar( 2 * Math.sqrt( Math.PI ) );
	}
	AmbientLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {
		constructor: AmbientLightProbe,
		isAmbientLightProbe: true,
		copy: function ( source ) { // modifying color not currently supported
			LightProbe.prototype.copy.call( this, source );
			return this;
		},
		toJSON: function ( meta ) {
			var data = LightProbe.prototype.toJSON.call( this, meta );
			return data;
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function StereoCamera() {
		this.type = 'StereoCamera';
		this.aspect = 1;
		this.eyeSep = 0.064;
		this.cameraL = new PerspectiveCamera();
		this.cameraL.layers.enable( 1 );
		this.cameraL.matrixAutoUpdate = false;
		this.cameraR = new PerspectiveCamera();
		this.cameraR.layers.enable( 2 );
		this.cameraR.matrixAutoUpdate = false;
	}
	Object.assign( StereoCamera.prototype, {
		update: ( function () {
			var instance, focus, fov, aspect, near, far, zoom, eyeSep;
			var eyeRight = new Matrix4();
			var eyeLeft = new Matrix4();
			return function update( camera ) {
				var needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||
													aspect !== camera.aspect * this.aspect || near !== camera.near ||
													far !== camera.far || zoom !== camera.zoom || eyeSep !== this.eyeSep;
				if ( needsUpdate ) {
					instance = this;
					focus = camera.focus;
					fov = camera.fov;
					aspect = camera.aspect * this.aspect;
					near = camera.near;
					far = camera.far;
					zoom = camera.zoom;
					var projectionMatrix = camera.projectionMatrix.clone();
					eyeSep = this.eyeSep / 2;
					var eyeSepOnProjection = eyeSep * near / focus;
					var ymax = ( near * Math.tan( _Math.DEG2RAD * fov * 0.5 ) ) / zoom;
					var xmin, xmax;
					eyeLeft.elements[ 12 ] = - eyeSep;
					eyeRight.elements[ 12 ] = eyeSep;
					xmin = - ymax * aspect + eyeSepOnProjection;
					xmax = ymax * aspect + eyeSepOnProjection;
					projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
					projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );
					this.cameraL.projectionMatrix.copy( projectionMatrix );
					xmin = - ymax * aspect - eyeSepOnProjection;
					xmax = ymax * aspect - eyeSepOnProjection;
					projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
					projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );
					this.cameraR.projectionMatrix.copy( projectionMatrix );
				}
				this.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );
				this.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );
			};
		} )()
	} );
	/**
	 * @author alteredq / http://alteredqualia.com/
	 */
	function Clock( autoStart ) {
		this.autoStart = ( autoStart !== undefined ) ? autoStart : true;
		this.startTime = 0;
		this.oldTime = 0;
		this.elapsedTime = 0;
		this.running = false;
	}
	Object.assign( Clock.prototype, {
		start: function () {
			this.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732
			this.oldTime = this.startTime;
			this.elapsedTime = 0;
			this.running = true;
		},
		stop: function () {
			this.getElapsedTime();
			this.running = false;
			this.autoStart = false;
		},
		getElapsedTime: function () {
			this.getDelta();
			return this.elapsedTime;
		},
		getDelta: function () {
			var diff = 0;
			if ( this.autoStart && ! this.running ) {
				this.start();
				return 0;
			}
			if ( this.running ) {
				var newTime = ( typeof performance === 'undefined' ? Date : performance ).now();
				diff = ( newTime - this.oldTime ) / 1000;
				this.oldTime = newTime;
				this.elapsedTime += diff;
			}
			return diff;
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function AudioListener() {
		Object3D.call( this );
		this.type = 'AudioListener';
		this.context = AudioContext.getContext();
		this.gain = this.context.createGain();
		this.gain.connect( this.context.destination );
		this.filter = null;
		this.timeDelta = 0;
	}
	AudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {
		constructor: AudioListener,
		getInput: function () {
			return this.gain;
		},
		removeFilter: function ( ) {
			if ( this.filter !== null ) {
				this.gain.disconnect( this.filter );
				this.filter.disconnect( this.context.destination );
				this.gain.connect( this.context.destination );
				this.filter = null;
			}
			return this;
		},
		getFilter: function () {
			return this.filter;
		},
		setFilter: function ( value ) {
			if ( this.filter !== null ) {
				this.gain.disconnect( this.filter );
				this.filter.disconnect( this.context.destination );
			} else {
				this.gain.disconnect( this.context.destination );
			}
			this.filter = value;
			this.gain.connect( this.filter );
			this.filter.connect( this.context.destination );
			return this;
		},
		getMasterVolume: function () {
			return this.gain.gain.value;
		},
		setMasterVolume: function ( value ) {
			this.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );
			return this;
		},
		updateMatrixWorld: ( function () {
			var position = new Vector3();
			var quaternion = new Quaternion();
			var scale = new Vector3();
			var orientation = new Vector3();
			var clock = new Clock();
			return function updateMatrixWorld( force ) {
				Object3D.prototype.updateMatrixWorld.call( this, force );
				var listener = this.context.listener;
				var up = this.up;
				this.timeDelta = clock.getDelta();
				this.matrixWorld.decompose( position, quaternion, scale );
				orientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );
				if ( listener.positionX ) {
					var endTime = this.context.currentTime + this.timeDelta;
					listener.positionX.linearRampToValueAtTime( position.x, endTime );
					listener.positionY.linearRampToValueAtTime( position.y, endTime );
					listener.positionZ.linearRampToValueAtTime( position.z, endTime );
					listener.forwardX.linearRampToValueAtTime( orientation.x, endTime );
					listener.forwardY.linearRampToValueAtTime( orientation.y, endTime );
					listener.forwardZ.linearRampToValueAtTime( orientation.z, endTime );
					listener.upX.linearRampToValueAtTime( up.x, endTime );
					listener.upY.linearRampToValueAtTime( up.y, endTime );
					listener.upZ.linearRampToValueAtTime( up.z, endTime );
				} else {
					listener.setPosition( position.x, position.y, position.z );
					listener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );
				}
			};
		} )()
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Reece Aaron Lecrivain / http://reecenotes.com/
	 */
	function Audio( listener ) {
		Object3D.call( this );
		this.type = 'Audio';
		this.listener = listener;
		this.context = listener.context;
		this.gain = this.context.createGain();
		this.gain.connect( listener.getInput() );
		this.autoplay = false;
		this.buffer = null;
		this.detune = 0;
		this.loop = false;
		this.startTime = 0;
		this.offset = 0;
		this.playbackRate = 1;
		this.isPlaying = false;
		this.hasPlaybackControl = true;
		this.sourceType = 'empty';
		this.filters = [];
	}
	Audio.prototype = Object.assign( Object.create( Object3D.prototype ), {
		constructor: Audio,
		getOutput: function () {
			return this.gain;
		},
		setNodeSource: function ( audioNode ) {
			this.hasPlaybackControl = false;
			this.sourceType = 'audioNode';
			this.source = audioNode;
			this.connect();
			return this;
		},
		setMediaElementSource: function ( mediaElement ) {
			this.hasPlaybackControl = false;
			this.sourceType = 'mediaNode';
			this.source = this.context.createMediaElementSource( mediaElement );
			this.connect();
			return this;
		},
		setBuffer: function ( audioBuffer ) {
			this.buffer = audioBuffer;
			this.sourceType = 'buffer';
			if ( this.autoplay ) this.play();
			return this;
		},
		play: function () {
			if ( this.isPlaying === true ) {
				console.warn( 'THREE.Audio: Audio is already playing.' );
				return;
			}
			if ( this.hasPlaybackControl === false ) {
				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;
			}
			var source = this.context.createBufferSource();
			source.buffer = this.buffer;
			source.loop = this.loop;
			source.onended = this.onEnded.bind( this );
			this.startTime = this.context.currentTime;
			source.start( this.startTime, this.offset );
			this.isPlaying = true;
			this.source = source;
			this.setDetune( this.detune );
			this.setPlaybackRate( this.playbackRate );
			return this.connect();
		},
		pause: function () {
			if ( this.hasPlaybackControl === false ) {
				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;
			}
			if ( this.isPlaying === true ) {
				this.source.stop();
				this.source.onended = null;
				this.offset += ( this.context.currentTime - this.startTime ) * this.playbackRate;
				this.isPlaying = false;
			}
			return this;
		},
		stop: function () {
			if ( this.hasPlaybackControl === false ) {
				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;
			}
			this.source.stop();
			this.source.onended = null;
			this.offset = 0;
			this.isPlaying = false;
			return this;
		},
		connect: function () {
			if ( this.filters.length > 0 ) {
				this.source.connect( this.filters[ 0 ] );
				for ( var i = 1, l = this.filters.length; i < l; i ++ ) {
					this.filters[ i - 1 ].connect( this.filters[ i ] );
				}
				this.filters[ this.filters.length - 1 ].connect( this.getOutput() );
			} else {
				this.source.connect( this.getOutput() );
			}
			return this;
		},
		disconnect: function () {
			if ( this.filters.length > 0 ) {
				this.source.disconnect( this.filters[ 0 ] );
				for ( var i = 1, l = this.filters.length; i < l; i ++ ) {
					this.filters[ i - 1 ].disconnect( this.filters[ i ] );
				}
				this.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );
			} else {
				this.source.disconnect( this.getOutput() );
			}
			return this;
		},
		getFilters: function () {
			return this.filters;
		},
		setFilters: function ( value ) {
			if ( ! value ) value = [];
			if ( this.isPlaying === true ) {
				this.disconnect();
				this.filters = value;
				this.connect();
			} else {
				this.filters = value;
			}
			return this;
		},
		setDetune: function ( value ) {
			this.detune = value;
			if ( this.source.detune === undefined ) return; // only set detune when available
			if ( this.isPlaying === true ) {
				this.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );
			}
			return this;
		},
		getDetune: function () {
			return this.detune;
		},
		getFilter: function () {
			return this.getFilters()[ 0 ];
		},
		setFilter: function ( filter ) {
			return this.setFilters( filter ? [ filter ] : [] );
		},
		setPlaybackRate: function ( value ) {
			if ( this.hasPlaybackControl === false ) {
				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;
			}
			this.playbackRate = value;
			if ( this.isPlaying === true ) {
				this.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );
			}
			return this;
		},
		getPlaybackRate: function () {
			return this.playbackRate;
		},
		onEnded: function () {
			this.isPlaying = false;
		},
		getLoop: function () {
			if ( this.hasPlaybackControl === false ) {
				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return false;
			}
			return this.loop;
		},
		setLoop: function ( value ) {
			if ( this.hasPlaybackControl === false ) {
				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;
			}
			this.loop = value;
			if ( this.isPlaying === true ) {
				this.source.loop = this.loop;
			}
			return this;
		},
		getVolume: function () {
			return this.gain.gain.value;
		},
		setVolume: function ( value ) {
			this.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );
			return this;
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function PositionalAudio( listener ) {
		Audio.call( this, listener );
		this.panner = this.context.createPanner();
		this.panner.panningModel = 'HRTF';
		this.panner.connect( this.gain );
	}
	PositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {
		constructor: PositionalAudio,
		getOutput: function () {
			return this.panner;
		},
		getRefDistance: function () {
			return this.panner.refDistance;
		},
		setRefDistance: function ( value ) {
			this.panner.refDistance = value;
			return this;
		},
		getRolloffFactor: function () {
			return this.panner.rolloffFactor;
		},
		setRolloffFactor: function ( value ) {
			this.panner.rolloffFactor = value;
			return this;
		},
		getDistanceModel: function () {
			return this.panner.distanceModel;
		},
		setDistanceModel: function ( value ) {
			this.panner.distanceModel = value;
			return this;
		},
		getMaxDistance: function () {
			return this.panner.maxDistance;
		},
		setMaxDistance: function ( value ) {
			this.panner.maxDistance = value;
			return this;
		},
		setDirectionalCone: function ( coneInnerAngle, coneOuterAngle, coneOuterGain ) {
			this.panner.coneInnerAngle = coneInnerAngle;
			this.panner.coneOuterAngle = coneOuterAngle;
			this.panner.coneOuterGain = coneOuterGain;
			return this;
		},
		updateMatrixWorld: ( function () {
			var position = new Vector3();
			var quaternion = new Quaternion();
			var scale = new Vector3();
			var orientation = new Vector3();
			return function updateMatrixWorld( force ) {
				Object3D.prototype.updateMatrixWorld.call( this, force );
				if ( this.hasPlaybackControl === true && this.isPlaying === false ) return;
				this.matrixWorld.decompose( position, quaternion, scale );
				orientation.set( 0, 0, 1 ).applyQuaternion( quaternion );
				var panner = this.panner;
				if ( panner.positionX ) {
					var endTime = this.context.currentTime + this.listener.timeDelta;
					panner.positionX.linearRampToValueAtTime( position.x, endTime );
					panner.positionY.linearRampToValueAtTime( position.y, endTime );
					panner.positionZ.linearRampToValueAtTime( position.z, endTime );
					panner.orientationX.linearRampToValueAtTime( orientation.x, endTime );
					panner.orientationY.linearRampToValueAtTime( orientation.y, endTime );
					panner.orientationZ.linearRampToValueAtTime( orientation.z, endTime );
				} else {
					panner.setPosition( position.x, position.y, position.z );
					panner.setOrientation( orientation.x, orientation.y, orientation.z );
				}
			};
		} )()
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function AudioAnalyser( audio, fftSize ) {
		this.analyser = audio.context.createAnalyser();
		this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;
		this.data = new Uint8Array( this.analyser.frequencyBinCount );
		audio.getOutput().connect( this.analyser );
	}
	Object.assign( AudioAnalyser.prototype, {
		getFrequencyData: function () {
			this.analyser.getByteFrequencyData( this.data );
			return this.data;
		},
		getAverageFrequency: function () {
			var value = 0, data = this.getFrequencyData();
			for ( var i = 0; i < data.length; i ++ ) {
				value += data[ i ];
			}
			return value / data.length;
		}
	} );
	/**
	 *
	 * Buffered scene graph property that allows weighted accumulation.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */
	function PropertyMixer( binding, typeName, valueSize ) {
		this.binding = binding;
		this.valueSize = valueSize;
		var bufferType = Float64Array,
			mixFunction;
		switch ( typeName ) {
			case 'quaternion':
				mixFunction = this._slerp;
				break;
			case 'string':
			case 'bool':
				bufferType = Array;
				mixFunction = this._select;
				break;
			default:
				mixFunction = this._lerp;
		}
		this.buffer = new bufferType( valueSize * 4 );
		this._mixBufferRegion = mixFunction;
		this.cumulativeWeight = 0;
		this.useCount = 0;
		this.referenceCount = 0;
	}
	Object.assign( PropertyMixer.prototype, {
		accumulate: function ( accuIndex, weight ) {
			var buffer = this.buffer,
				stride = this.valueSize,
				offset = accuIndex * stride + stride,
				currentWeight = this.cumulativeWeight;
			if ( currentWeight === 0 ) {
				for ( var i = 0; i !== stride; ++ i ) {
					buffer[ offset + i ] = buffer[ i ];
				}
				currentWeight = weight;
			} else {
				currentWeight += weight;
				var mix = weight / currentWeight;
				this._mixBufferRegion( buffer, offset, 0, mix, stride );
			}
			this.cumulativeWeight = currentWeight;
		},
		apply: function ( accuIndex ) {
			var stride = this.valueSize,
				buffer = this.buffer,
				offset = accuIndex * stride + stride,
				weight = this.cumulativeWeight,
				binding = this.binding;
			this.cumulativeWeight = 0;
			if ( weight < 1 ) {
				var originalValueOffset = stride * 3;
				this._mixBufferRegion(
					buffer, offset, originalValueOffset, 1 - weight, stride );
			}
			for ( var i = stride, e = stride + stride; i !== e; ++ i ) {
				if ( buffer[ i ] !== buffer[ i + stride ] ) {
					binding.setValue( buffer, offset );
					break;
				}
			}
		},
		saveOriginalState: function () {
			var binding = this.binding;
			var buffer = this.buffer,
				stride = this.valueSize,
				originalValueOffset = stride * 3;
			binding.getValue( buffer, originalValueOffset );
			for ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {
				buffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];
			}
			this.cumulativeWeight = 0;
		},
		restoreOriginalState: function () {
			var originalValueOffset = this.valueSize * 3;
			this.binding.setValue( this.buffer, originalValueOffset );
		},
		_select: function ( buffer, dstOffset, srcOffset, t, stride ) {
			if ( t >= 0.5 ) {
				for ( var i = 0; i !== stride; ++ i ) {
					buffer[ dstOffset + i ] = buffer[ srcOffset + i ];
				}
			}
		},
		_slerp: function ( buffer, dstOffset, srcOffset, t ) {
			Quaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );
		},
		_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {
			var s = 1 - t;
			for ( var i = 0; i !== stride; ++ i ) {
				var j = dstOffset + i;
				buffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;
			}
		}
	} );
	/**
	 *
	 * A reference to a real property in the scene graph.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */
	var RESERVED_CHARS_RE = '\\[\\]\\.:\\/';
	function Composite( targetGroup, path, optionalParsedPath ) {
		var parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );
		this._targetGroup = targetGroup;
		this._bindings = targetGroup.subscribe_( path, parsedPath );
	}
	Object.assign( Composite.prototype, {
		getValue: function ( array, offset ) {
			this.bind(); // bind all binding
			var firstValidIndex = this._targetGroup.nCachedObjects_,
				binding = this._bindings[ firstValidIndex ];
			if ( binding !== undefined ) binding.getValue( array, offset );
		},
		setValue: function ( array, offset ) {
			var bindings = this._bindings;
			for ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {
				bindings[ i ].setValue( array, offset );
			}
		},
		bind: function () {
			var bindings = this._bindings;
			for ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {
				bindings[ i ].bind();
			}
		},
		unbind: function () {
			var bindings = this._bindings;
			for ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {
				bindings[ i ].unbind();
			}
		}
	} );
	function PropertyBinding( rootNode, path, parsedPath ) {
		this.path = path;
		this.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );
		this.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;
		this.rootNode = rootNode;
	}
	Object.assign( PropertyBinding, {
		Composite: Composite,
		create: function ( root, path, parsedPath ) {
			if ( ! ( root && root.isAnimationObjectGroup ) ) {
				return new PropertyBinding( root, path, parsedPath );
			} else {
				return new PropertyBinding.Composite( root, path, parsedPath );
			}
		},
		/**
		 * Replaces spaces with underscores and removes unsupported characters from
		 * node names, to ensure compatibility with parseTrackName().
		 *
		 * @param {string} name Node name to be sanitized.
		 * @return {string}
		 */
		sanitizeNodeName: ( function () {
			var reservedRe = new RegExp( '[' + RESERVED_CHARS_RE + ']', 'g' );
			return function sanitizeNodeName( name ) {
				return name.replace( /\s/g, '_' ).replace( reservedRe, '' );
			};
		}() ),
		parseTrackName: function () {
			var wordChar = '[^' + RESERVED_CHARS_RE + ']';
			var wordCharOrDot = '[^' + RESERVED_CHARS_RE.replace( '\\.', '' ) + ']';
			var directoryRe = /((?:WC+[\/:])*)/.source.replace( 'WC', wordChar );
			var nodeRe = /(WCOD+)?/.source.replace( 'WCOD', wordCharOrDot );
			var objectRe = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace( 'WC', wordChar );
			var propertyRe = /\.(WC+)(?:\[(.+)\])?/.source.replace( 'WC', wordChar );
			var trackRe = new RegExp( ''
				+ '^'
				+ directoryRe
				+ nodeRe
				+ objectRe
				+ propertyRe
				+ '$'
			);
			var supportedObjectNames = [ 'material', 'materials', 'bones' ];
			return function parseTrackName( trackName ) {
				var matches = trackRe.exec( trackName );
				if ( ! matches ) {
					throw new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );
				}
				var results = {
					nodeName: matches[ 2 ],
					objectName: matches[ 3 ],
					objectIndex: matches[ 4 ],
					propertyName: matches[ 5 ], // required
					propertyIndex: matches[ 6 ]
				};
				var lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );
				if ( lastDot !== undefined && lastDot !== - 1 ) {
					var objectName = results.nodeName.substring( lastDot + 1 );
					if ( supportedObjectNames.indexOf( objectName ) !== - 1 ) {
						results.nodeName = results.nodeName.substring( 0, lastDot );
						results.objectName = objectName;
					}
				}
				if ( results.propertyName === null || results.propertyName.length === 0 ) {
					throw new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );
				}
				return results;
			};
		}(),
		findNode: function ( root, nodeName ) {
			if ( ! nodeName || nodeName === "" || nodeName === "root" || nodeName === "." || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {
				return root;
			}
			if ( root.skeleton ) {
				var bone = root.skeleton.getBoneByName( nodeName );
				if ( bone !== undefined ) {
					return bone;
				}
			}
			if ( root.children ) {
				var searchNodeSubtree = function ( children ) {
					for ( var i = 0; i < children.length; i ++ ) {
						var childNode = children[ i ];
						if ( childNode.name === nodeName || childNode.uuid === nodeName ) {
							return childNode;
						}
						var result = searchNodeSubtree( childNode.children );
						if ( result ) return result;
					}
					return null;
				};
				var subTreeNode = searchNodeSubtree( root.children );
				if ( subTreeNode ) {
					return subTreeNode;
				}
			}
			return null;
		}
	} );
	Object.assign( PropertyBinding.prototype, { // prototype, continued
		_getValue_unavailable: function () {},
		_setValue_unavailable: function () {},
		BindingType: {
			Direct: 0,
			EntireArray: 1,
			ArrayElement: 2,
			HasFromToArray: 3
		},
		Versioning: {
			None: 0,
			NeedsUpdate: 1,
			MatrixWorldNeedsUpdate: 2
		},
		GetterByBindingType: [
			function getValue_direct( buffer, offset ) {
				buffer[ offset ] = this.node[ this.propertyName ];
			},
			function getValue_array( buffer, offset ) {
				var source = this.resolvedProperty;
				for ( var i = 0, n = source.length; i !== n; ++ i ) {
					buffer[ offset ++ ] = source[ i ];
				}
			},
			function getValue_arrayElement( buffer, offset ) {
				buffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];
			},
			function getValue_toArray( buffer, offset ) {
				this.resolvedProperty.toArray( buffer, offset );
			}
		],
		SetterByBindingTypeAndVersioning: [
			[
				function setValue_direct( buffer, offset ) {
					this.targetObject[ this.propertyName ] = buffer[ offset ];
				},
				function setValue_direct_setNeedsUpdate( buffer, offset ) {
					this.targetObject[ this.propertyName ] = buffer[ offset ];
					this.targetObject.needsUpdate = true;
				},
				function setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {
					this.targetObject[ this.propertyName ] = buffer[ offset ];
					this.targetObject.matrixWorldNeedsUpdate = true;
				}
			], [
				function setValue_array( buffer, offset ) {
					var dest = this.resolvedProperty;
					for ( var i = 0, n = dest.length; i !== n; ++ i ) {
						dest[ i ] = buffer[ offset ++ ];
					}
				},
				function setValue_array_setNeedsUpdate( buffer, offset ) {
					var dest = this.resolvedProperty;
					for ( var i = 0, n = dest.length; i !== n; ++ i ) {
						dest[ i ] = buffer[ offset ++ ];
					}
					this.targetObject.needsUpdate = true;
				},
				function setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {
					var dest = this.resolvedProperty;
					for ( var i = 0, n = dest.length; i !== n; ++ i ) {
						dest[ i ] = buffer[ offset ++ ];
					}
					this.targetObject.matrixWorldNeedsUpdate = true;
				}
			], [
				function setValue_arrayElement( buffer, offset ) {
					this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
				},
				function setValue_arrayElement_setNeedsUpdate( buffer, offset ) {
					this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
					this.targetObject.needsUpdate = true;
				},
				function setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {
					this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
					this.targetObject.matrixWorldNeedsUpdate = true;
				}
			], [
				function setValue_fromArray( buffer, offset ) {
					this.resolvedProperty.fromArray( buffer, offset );
				},
				function setValue_fromArray_setNeedsUpdate( buffer, offset ) {
					this.resolvedProperty.fromArray( buffer, offset );
					this.targetObject.needsUpdate = true;
				},
				function setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {
					this.resolvedProperty.fromArray( buffer, offset );
					this.targetObject.matrixWorldNeedsUpdate = true;
				}
			]
		],
		getValue: function getValue_unbound( targetArray, offset ) {
			this.bind();
			this.getValue( targetArray, offset );
		},
		setValue: function getValue_unbound( sourceArray, offset ) {
			this.bind();
			this.setValue( sourceArray, offset );
		},
		bind: function () {
			var targetObject = this.node,
				parsedPath = this.parsedPath,
				objectName = parsedPath.objectName,
				propertyName = parsedPath.propertyName,
				propertyIndex = parsedPath.propertyIndex;
			if ( ! targetObject ) {
				targetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;
				this.node = targetObject;
			}
			this.getValue = this._getValue_unavailable;
			this.setValue = this._setValue_unavailable;
			if ( ! targetObject ) {
				console.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\'t found.' );
				return;
			}
			if ( objectName ) {
				var objectIndex = parsedPath.objectIndex;
				switch ( objectName ) {
					case 'materials':
						if ( ! targetObject.material ) {
							console.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );
							return;
						}
						if ( ! targetObject.material.materials ) {
							console.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );
							return;
						}
						targetObject = targetObject.material.materials;
						break;
					case 'bones':
						if ( ! targetObject.skeleton ) {
							console.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );
							return;
						}
						targetObject = targetObject.skeleton.bones;
						for ( var i = 0; i < targetObject.length; i ++ ) {
							if ( targetObject[ i ].name === objectIndex ) {
								objectIndex = i;
								break;
							}
						}
						break;
					default:
						if ( targetObject[ objectName ] === undefined ) {
							console.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );
							return;
						}
						targetObject = targetObject[ objectName ];
				}
				if ( objectIndex !== undefined ) {
					if ( targetObject[ objectIndex ] === undefined ) {
						console.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );
						return;
					}
					targetObject = targetObject[ objectIndex ];
				}
			}
			var nodeProperty = targetObject[ propertyName ];
			if ( nodeProperty === undefined ) {
				var nodeName = parsedPath.nodeName;
				console.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +
					'.' + propertyName + ' but it wasn\'t found.', targetObject );
				return;
			}
			var versioning = this.Versioning.None;
			this.targetObject = targetObject;
			if ( targetObject.needsUpdate !== undefined ) { // material
				versioning = this.Versioning.NeedsUpdate;
			} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform
				versioning = this.Versioning.MatrixWorldNeedsUpdate;
			}
			var bindingType = this.BindingType.Direct;
			if ( propertyIndex !== undefined ) {
				if ( propertyName === "morphTargetInfluences" ) {
					if ( ! targetObject.geometry ) {
						console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );
						return;
					}
					if ( targetObject.geometry.isBufferGeometry ) {
						if ( ! targetObject.geometry.morphAttributes ) {
							console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );
							return;
						}
						for ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {
							if ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {
								propertyIndex = i;
								break;
							}
						}
					} else {
						if ( ! targetObject.geometry.morphTargets ) {
							console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );
							return;
						}
						for ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {
							if ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {
								propertyIndex = i;
								break;
							}
						}
					}
				}
				bindingType = this.BindingType.ArrayElement;
				this.resolvedProperty = nodeProperty;
				this.propertyIndex = propertyIndex;
			} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {
				bindingType = this.BindingType.HasFromToArray;
				this.resolvedProperty = nodeProperty;
			} else if ( Array.isArray( nodeProperty ) ) {
				bindingType = this.BindingType.EntireArray;
				this.resolvedProperty = nodeProperty;
			} else {
				this.propertyName = propertyName;
			}
			this.getValue = this.GetterByBindingType[ bindingType ];
			this.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];
		},
		unbind: function () {
			this.node = null;
			this.getValue = this._getValue_unbound;
			this.setValue = this._setValue_unbound;
		}
	} );
	Object.assign( PropertyBinding.prototype, {
		_getValue_unbound: PropertyBinding.prototype.getValue,
		_setValue_unbound: PropertyBinding.prototype.setValue,
	} );
	/**
	 *
	 * A group of objects that receives a shared animation state.
	 *
	 * Usage:
	 *
	 *  - Add objects you would otherwise pass as 'root' to the
	 *    constructor or the .clipAction method of AnimationMixer.
	 *
	 *  - Instead pass this object as 'root'.
	 *
	 *  - You can also add and remove objects later when the mixer
	 *    is running.
	 *
	 * Note:
	 *
	 *    Objects of this class appear as one object to the mixer,
	 *    so cache control of the individual objects must be done
	 *    on the group.
	 *
	 * Limitation:
	 *
	 *  - The animated properties must be compatible among the
	 *    all objects in the group.
	 *
	 *  - A single property can either be controlled through a
	 *    target group or directly, but not both.
	 *
	 * @author tschw
	 */
	function AnimationObjectGroup() {
		this.uuid = _Math.generateUUID();
		this._objects = Array.prototype.slice.call( arguments );
		this.nCachedObjects_ = 0; // threshold
		var indices = {};
		this._indicesByUUID = indices; // for bookkeeping
		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {
			indices[ arguments[ i ].uuid ] = i;
		}
		this._paths = []; // inside: string
		this._parsedPaths = []; // inside: { we don't care, here }
		this._bindings = []; // inside: Array< PropertyBinding >
		this._bindingsIndicesByPath = {}; // inside: indices in these arrays
		var scope = this;
		this.stats = {
			objects: {
				get total() {
					return scope._objects.length;
				},
				get inUse() {
					return this.total - scope.nCachedObjects_;
				}
			},
			get bindingsPerObject() {
				return scope._bindings.length;
			}
		};
	}
	Object.assign( AnimationObjectGroup.prototype, {
		isAnimationObjectGroup: true,
		add: function () {
			var objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				indicesByUUID = this._indicesByUUID,
				paths = this._paths,
				parsedPaths = this._parsedPaths,
				bindings = this._bindings,
				nBindings = bindings.length,
				knownObject = undefined;
			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {
				var object = arguments[ i ],
					uuid = object.uuid,
					index = indicesByUUID[ uuid ];
				if ( index === undefined ) {
					index = nObjects ++;
					indicesByUUID[ uuid ] = index;
					objects.push( object );
					for ( var j = 0, m = nBindings; j !== m; ++ j ) {
						bindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );
					}
				} else if ( index < nCachedObjects ) {
					knownObject = objects[ index ];
					var firstActiveIndex = -- nCachedObjects,
						lastCachedObject = objects[ firstActiveIndex ];
					indicesByUUID[ lastCachedObject.uuid ] = index;
					objects[ index ] = lastCachedObject;
					indicesByUUID[ uuid ] = firstActiveIndex;
					objects[ firstActiveIndex ] = object;
					for ( var j = 0, m = nBindings; j !== m; ++ j ) {
						var bindingsForPath = bindings[ j ],
							lastCached = bindingsForPath[ firstActiveIndex ],
							binding = bindingsForPath[ index ];
						bindingsForPath[ index ] = lastCached;
						if ( binding === undefined ) {
							binding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );
						}
						bindingsForPath[ firstActiveIndex ] = binding;
					}
				} else if ( objects[ index ] !== knownObject ) {
					console.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +
						'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );
				} // else the object is already where we want it to be
			} // for arguments
			this.nCachedObjects_ = nCachedObjects;
		},
		remove: function () {
			var objects = this._objects,
				nCachedObjects = this.nCachedObjects_,
				indicesByUUID = this._indicesByUUID,
				bindings = this._bindings,
				nBindings = bindings.length;
			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {
				var object = arguments[ i ],
					uuid = object.uuid,
					index = indicesByUUID[ uuid ];
				if ( index !== undefined && index >= nCachedObjects ) {
					var lastCachedIndex = nCachedObjects ++,
						firstActiveObject = objects[ lastCachedIndex ];
					indicesByUUID[ firstActiveObject.uuid ] = index;
					objects[ index ] = firstActiveObject;
					indicesByUUID[ uuid ] = lastCachedIndex;
					objects[ lastCachedIndex ] = object;
					for ( var j = 0, m = nBindings; j !== m; ++ j ) {
						var bindingsForPath = bindings[ j ],
							firstActive = bindingsForPath[ lastCachedIndex ],
							binding = bindingsForPath[ index ];
						bindingsForPath[ index ] = firstActive;
						bindingsForPath[ lastCachedIndex ] = binding;
					}
				}
			} // for arguments
			this.nCachedObjects_ = nCachedObjects;
		},
		uncache: function () {
			var objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				indicesByUUID = this._indicesByUUID,
				bindings = this._bindings,
				nBindings = bindings.length;
			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {
				var object = arguments[ i ],
					uuid = object.uuid,
					index = indicesByUUID[ uuid ];
				if ( index !== undefined ) {
					delete indicesByUUID[ uuid ];
					if ( index < nCachedObjects ) {
						var firstActiveIndex = -- nCachedObjects,
							lastCachedObject = objects[ firstActiveIndex ],
							lastIndex = -- nObjects,
							lastObject = objects[ lastIndex ];
						indicesByUUID[ lastCachedObject.uuid ] = index;
						objects[ index ] = lastCachedObject;
						indicesByUUID[ lastObject.uuid ] = firstActiveIndex;
						objects[ firstActiveIndex ] = lastObject;
						objects.pop();
						for ( var j = 0, m = nBindings; j !== m; ++ j ) {
							var bindingsForPath = bindings[ j ],
								lastCached = bindingsForPath[ firstActiveIndex ],
								last = bindingsForPath[ lastIndex ];
							bindingsForPath[ index ] = lastCached;
							bindingsForPath[ firstActiveIndex ] = last;
							bindingsForPath.pop();
						}
					} else {
						var lastIndex = -- nObjects,
							lastObject = objects[ lastIndex ];
						indicesByUUID[ lastObject.uuid ] = index;
						objects[ index ] = lastObject;
						objects.pop();
						for ( var j = 0, m = nBindings; j !== m; ++ j ) {
							var bindingsForPath = bindings[ j ];
							bindingsForPath[ index ] = bindingsForPath[ lastIndex ];
							bindingsForPath.pop();
						}
					} // cached or active
				} // if object is known
			} // for arguments
			this.nCachedObjects_ = nCachedObjects;
		},
		subscribe_: function ( path, parsedPath ) {
			var indicesByPath = this._bindingsIndicesByPath,
				index = indicesByPath[ path ],
				bindings = this._bindings;
			if ( index !== undefined ) return bindings[ index ];
			var paths = this._paths,
				parsedPaths = this._parsedPaths,
				objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				bindingsForPath = new Array( nObjects );
			index = bindings.length;
			indicesByPath[ path ] = index;
			paths.push( path );
			parsedPaths.push( parsedPath );
			bindings.push( bindingsForPath );
			for ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {
				var object = objects[ i ];
				bindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );
			}
			return bindingsForPath;
		},
		unsubscribe_: function ( path ) {
			var indicesByPath = this._bindingsIndicesByPath,
				index = indicesByPath[ path ];
			if ( index !== undefined ) {
				var paths = this._paths,
					parsedPaths = this._parsedPaths,
					bindings = this._bindings,
					lastBindingsIndex = bindings.length - 1,
					lastBindings = bindings[ lastBindingsIndex ],
					lastBindingsPath = path[ lastBindingsIndex ];
				indicesByPath[ lastBindingsPath ] = index;
				bindings[ index ] = lastBindings;
				bindings.pop();
				parsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];
				parsedPaths.pop();
				paths[ index ] = paths[ lastBindingsIndex ];
				paths.pop();
			}
		}
	} );
	/**
	 *
	 * Action provided by AnimationMixer for scheduling clip playback on specific
	 * objects.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 *
	 */
	function AnimationAction( mixer, clip, localRoot ) {
		this._mixer = mixer;
		this._clip = clip;
		this._localRoot = localRoot || null;
		var tracks = clip.tracks,
			nTracks = tracks.length,
			interpolants = new Array( nTracks );
		var interpolantSettings = {
			endingStart: ZeroCurvatureEnding,
			endingEnd: ZeroCurvatureEnding
		};
		for ( var i = 0; i !== nTracks; ++ i ) {
			var interpolant = tracks[ i ].createInterpolant( null );
			interpolants[ i ] = interpolant;
			interpolant.settings = interpolantSettings;
		}
		this._interpolantSettings = interpolantSettings;
		this._interpolants = interpolants; // bound by the mixer
		this._propertyBindings = new Array( nTracks );
		this._cacheIndex = null; // for the memory manager
		this._byClipCacheIndex = null; // for the memory manager
		this._timeScaleInterpolant = null;
		this._weightInterpolant = null;
		this.loop = LoopRepeat;
		this._loopCount = - 1;
		this._startTime = null;
		this.time = 0;
		this.timeScale = 1;
		this._effectiveTimeScale = 1;
		this.weight = 1;
		this._effectiveWeight = 1;
		this.repetitions = Infinity; // no. of repetitions when looping
		this.paused = false; // true -> zero effective time scale
		this.enabled = true; // false -> zero effective weight
		this.clampWhenFinished = false;// keep feeding the last frame?
		this.zeroSlopeAtStart = true;// for smooth interpolation w/o separate
		this.zeroSlopeAtEnd = true;// clips for start, loop and end
	}
	Object.assign( AnimationAction.prototype, {
		play: function () {
			this._mixer._activateAction( this );
			return this;
		},
		stop: function () {
			this._mixer._deactivateAction( this );
			return this.reset();
		},
		reset: function () {
			this.paused = false;
			this.enabled = true;
			this.time = 0; // restart clip
			this._loopCount = - 1;// forget previous loops
			this._startTime = null;// forget scheduling
			return this.stopFading().stopWarping();
		},
		isRunning: function () {
			return this.enabled && ! this.paused && this.timeScale !== 0 &&
				this._startTime === null && this._mixer._isActiveAction( this );
		},
		isScheduled: function () {
			return this._mixer._isActiveAction( this );
		},
		startAt: function ( time ) {
			this._startTime = time;
			return this;
		},
		setLoop: function ( mode, repetitions ) {
			this.loop = mode;
			this.repetitions = repetitions;
			return this;
		},
		setEffectiveWeight: function ( weight ) {
			this.weight = weight;
			this._effectiveWeight = this.enabled ? weight : 0;
			return this.stopFading();
		},
		getEffectiveWeight: function () {
			return this._effectiveWeight;
		},
		fadeIn: function ( duration ) {
			return this._scheduleFading( duration, 0, 1 );
		},
		fadeOut: function ( duration ) {
			return this._scheduleFading( duration, 1, 0 );
		},
		crossFadeFrom: function ( fadeOutAction, duration, warp ) {
			fadeOutAction.fadeOut( duration );
			this.fadeIn( duration );
			if ( warp ) {
				var fadeInDuration = this._clip.duration,
					fadeOutDuration = fadeOutAction._clip.duration,
					startEndRatio = fadeOutDuration / fadeInDuration,
					endStartRatio = fadeInDuration / fadeOutDuration;
				fadeOutAction.warp( 1.0, startEndRatio, duration );
				this.warp( endStartRatio, 1.0, duration );
			}
			return this;
		},
		crossFadeTo: function ( fadeInAction, duration, warp ) {
			return fadeInAction.crossFadeFrom( this, duration, warp );
		},
		stopFading: function () {
			var weightInterpolant = this._weightInterpolant;
			if ( weightInterpolant !== null ) {
				this._weightInterpolant = null;
				this._mixer._takeBackControlInterpolant( weightInterpolant );
			}
			return this;
		},
		setEffectiveTimeScale: function ( timeScale ) {
			this.timeScale = timeScale;
			this._effectiveTimeScale = this.paused ? 0 : timeScale;
			return this.stopWarping();
		},
		getEffectiveTimeScale: function () {
			return this._effectiveTimeScale;
		},
		setDuration: function ( duration ) {
			this.timeScale = this._clip.duration / duration;
			return this.stopWarping();
		},
		syncWith: function ( action ) {
			this.time = action.time;
			this.timeScale = action.timeScale;
			return this.stopWarping();
		},
		halt: function ( duration ) {
			return this.warp( this._effectiveTimeScale, 0, duration );
		},
		warp: function ( startTimeScale, endTimeScale, duration ) {
			var mixer = this._mixer, now = mixer.time,
				interpolant = this._timeScaleInterpolant,
				timeScale = this.timeScale;
			if ( interpolant === null ) {
				interpolant = mixer._lendControlInterpolant();
				this._timeScaleInterpolant = interpolant;
			}
			var times = interpolant.parameterPositions,
				values = interpolant.sampleValues;
			times[ 0 ] = now;
			times[ 1 ] = now + duration;
			values[ 0 ] = startTimeScale / timeScale;
			values[ 1 ] = endTimeScale / timeScale;
			return this;
		},
		stopWarping: function () {
			var timeScaleInterpolant = this._timeScaleInterpolant;
			if ( timeScaleInterpolant !== null ) {
				this._timeScaleInterpolant = null;
				this._mixer._takeBackControlInterpolant( timeScaleInterpolant );
			}
			return this;
		},
		getMixer: function () {
			return this._mixer;
		},
		getClip: function () {
			return this._clip;
		},
		getRoot: function () {
			return this._localRoot || this._mixer._root;
		},
		_update: function ( time, deltaTime, timeDirection, accuIndex ) {
			if ( ! this.enabled ) {
				this._updateWeight( time );
				return;
			}
			var startTime = this._startTime;
			if ( startTime !== null ) {
				var timeRunning = ( time - startTime ) * timeDirection;
				if ( timeRunning < 0 || timeDirection === 0 ) {
					return; // yet to come / don't decide when delta = 0
				}
				this._startTime = null; // unschedule
				deltaTime = timeDirection * timeRunning;
			}
			deltaTime *= this._updateTimeScale( time );
			var clipTime = this._updateTime( deltaTime );
			var weight = this._updateWeight( time );
			if ( weight > 0 ) {
				var interpolants = this._interpolants;
				var propertyMixers = this._propertyBindings;
				for ( var j = 0, m = interpolants.length; j !== m; ++ j ) {
					interpolants[ j ].evaluate( clipTime );
					propertyMixers[ j ].accumulate( accuIndex, weight );
				}
			}
		},
		_updateWeight: function ( time ) {
			var weight = 0;
			if ( this.enabled ) {
				weight = this.weight;
				var interpolant = this._weightInterpolant;
				if ( interpolant !== null ) {
					var interpolantValue = interpolant.evaluate( time )[ 0 ];
					weight *= interpolantValue;
					if ( time > interpolant.parameterPositions[ 1 ] ) {
						this.stopFading();
						if ( interpolantValue === 0 ) {
							this.enabled = false;
						}
					}
				}
			}
			this._effectiveWeight = weight;
			return weight;
		},
		_updateTimeScale: function ( time ) {
			var timeScale = 0;
			if ( ! this.paused ) {
				timeScale = this.timeScale;
				var interpolant = this._timeScaleInterpolant;
				if ( interpolant !== null ) {
					var interpolantValue = interpolant.evaluate( time )[ 0 ];
					timeScale *= interpolantValue;
					if ( time > interpolant.parameterPositions[ 1 ] ) {
						this.stopWarping();
						if ( timeScale === 0 ) {
							this.paused = true;
						} else {
							this.timeScale = timeScale;
						}
					}
				}
			}
			this._effectiveTimeScale = timeScale;
			return timeScale;
		},
		_updateTime: function ( deltaTime ) {
			var time = this.time + deltaTime;
			var duration = this._clip.duration;
			var loop = this.loop;
			var loopCount = this._loopCount;
			var pingPong = ( loop === LoopPingPong );
			if ( deltaTime === 0 ) {
				if ( loopCount === - 1 ) return time;
				return ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;
			}
			if ( loop === LoopOnce ) {
				if ( loopCount === - 1 ) {
					this._loopCount = 0;
					this._setEndings( true, true, false );
				}
				handle_stop: {
					if ( time >= duration ) {
						time = duration;
					} else if ( time < 0 ) {
						time = 0;
					} else {
						this.time = time;
						break handle_stop;
					}
					if ( this.clampWhenFinished ) this.paused = true;
					else this.enabled = false;
					this.time = time;
					this._mixer.dispatchEvent( {
						type: 'finished', action: this,
						direction: deltaTime < 0 ? - 1 : 1
					} );
				}
			} else { // repetitive Repeat or PingPong
				if ( loopCount === - 1 ) {
					if ( deltaTime >= 0 ) {
						loopCount = 0;
						this._setEndings( true, this.repetitions === 0, pingPong );
					} else {
						this._setEndings( this.repetitions === 0, true, pingPong );
					}
				}
				if ( time >= duration || time < 0 ) {
					var loopDelta = Math.floor( time / duration ); // signed
					time -= duration * loopDelta;
					loopCount += Math.abs( loopDelta );
					var pending = this.repetitions - loopCount;
					if ( pending <= 0 ) {
						if ( this.clampWhenFinished ) this.paused = true;
						else this.enabled = false;
						time = deltaTime > 0 ? duration : 0;
						this.time = time;
						this._mixer.dispatchEvent( {
							type: 'finished', action: this,
							direction: deltaTime > 0 ? 1 : - 1
						} );
					} else {
						if ( pending === 1 ) {
							var atStart = deltaTime < 0;
							this._setEndings( atStart, ! atStart, pingPong );
						} else {
							this._setEndings( false, false, pingPong );
						}
						this._loopCount = loopCount;
						this.time = time;
						this._mixer.dispatchEvent( {
							type: 'loop', action: this, loopDelta: loopDelta
						} );
					}
				} else {
					this.time = time;
				}
				if ( pingPong && ( loopCount & 1 ) === 1 ) {
					return duration - time;
				}
			}
			return time;
		},
		_setEndings: function ( atStart, atEnd, pingPong ) {
			var settings = this._interpolantSettings;
			if ( pingPong ) {
				settings.endingStart = ZeroSlopeEnding;
				settings.endingEnd = ZeroSlopeEnding;
			} else {
				if ( atStart ) {
					settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;
				} else {
					settings.endingStart = WrapAroundEnding;
				}
				if ( atEnd ) {
					settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;
				} else {
					settings.endingEnd 	 = WrapAroundEnding;
				}
			}
		},
		_scheduleFading: function ( duration, weightNow, weightThen ) {
			var mixer = this._mixer, now = mixer.time,
				interpolant = this._weightInterpolant;
			if ( interpolant === null ) {
				interpolant = mixer._lendControlInterpolant();
				this._weightInterpolant = interpolant;
			}
			var times = interpolant.parameterPositions,
				values = interpolant.sampleValues;
			times[ 0 ] = now;
			values[ 0 ] = weightNow;
			times[ 1 ] = now + duration;
			values[ 1 ] = weightThen;
			return this;
		}
	} );
	/**
	 *
	 * Player for AnimationClips.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */
	function AnimationMixer( root ) {
		this._root = root;
		this._initMemoryManager();
		this._accuIndex = 0;
		this.time = 0;
		this.timeScale = 1.0;
	}
	AnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {
		constructor: AnimationMixer,
		_bindAction: function ( action, prototypeAction ) {
			var root = action._localRoot || this._root,
				tracks = action._clip.tracks,
				nTracks = tracks.length,
				bindings = action._propertyBindings,
				interpolants = action._interpolants,
				rootUuid = root.uuid,
				bindingsByRoot = this._bindingsByRootAndName,
				bindingsByName = bindingsByRoot[ rootUuid ];
			if ( bindingsByName === undefined ) {
				bindingsByName = {};
				bindingsByRoot[ rootUuid ] = bindingsByName;
			}
			for ( var i = 0; i !== nTracks; ++ i ) {
				var track = tracks[ i ],
					trackName = track.name,
					binding = bindingsByName[ trackName ];
				if ( binding !== undefined ) {
					bindings[ i ] = binding;
				} else {
					binding = bindings[ i ];
					if ( binding !== undefined ) {
						if ( binding._cacheIndex === null ) {
							++ binding.referenceCount;
							this._addInactiveBinding( binding, rootUuid, trackName );
						}
						continue;
					}
					var path = prototypeAction && prototypeAction.
						_propertyBindings[ i ].binding.parsedPath;
					binding = new PropertyMixer(
						PropertyBinding.create( root, trackName, path ),
						track.ValueTypeName, track.getValueSize() );
					++ binding.referenceCount;
					this._addInactiveBinding( binding, rootUuid, trackName );
					bindings[ i ] = binding;
				}
				interpolants[ i ].resultBuffer = binding.buffer;
			}
		},
		_activateAction: function ( action ) {
			if ( ! this._isActiveAction( action ) ) {
				if ( action._cacheIndex === null ) {
					var rootUuid = ( action._localRoot || this._root ).uuid,
						clipUuid = action._clip.uuid,
						actionsForClip = this._actionsByClip[ clipUuid ];
					this._bindAction( action,
						actionsForClip && actionsForClip.knownActions[ 0 ] );
					this._addInactiveAction( action, clipUuid, rootUuid );
				}
				var bindings = action._propertyBindings;
				for ( var i = 0, n = bindings.length; i !== n; ++ i ) {
					var binding = bindings[ i ];
					if ( binding.useCount ++ === 0 ) {
						this._lendBinding( binding );
						binding.saveOriginalState();
					}
				}
				this._lendAction( action );
			}
		},
		_deactivateAction: function ( action ) {
			if ( this._isActiveAction( action ) ) {
				var bindings = action._propertyBindings;
				for ( var i = 0, n = bindings.length; i !== n; ++ i ) {
					var binding = bindings[ i ];
					if ( -- binding.useCount === 0 ) {
						binding.restoreOriginalState();
						this._takeBackBinding( binding );
					}
				}
				this._takeBackAction( action );
			}
		},
		_initMemoryManager: function () {
			this._actions = []; // 'nActiveActions' followed by inactive ones
			this._nActiveActions = 0;
			this._actionsByClip = {};
			this._bindings = []; // 'nActiveBindings' followed by inactive ones
			this._nActiveBindings = 0;
			this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >
			this._controlInterpolants = []; // same game as above
			this._nActiveControlInterpolants = 0;
			var scope = this;
			this.stats = {
				actions: {
					get total() {
						return scope._actions.length;
					},
					get inUse() {
						return scope._nActiveActions;
					}
				},
				bindings: {
					get total() {
						return scope._bindings.length;
					},
					get inUse() {
						return scope._nActiveBindings;
					}
				},
				controlInterpolants: {
					get total() {
						return scope._controlInterpolants.length;
					},
					get inUse() {
						return scope._nActiveControlInterpolants;
					}
				}
			};
		},
		_isActiveAction: function ( action ) {
			var index = action._cacheIndex;
			return index !== null && index < this._nActiveActions;
		},
		_addInactiveAction: function ( action, clipUuid, rootUuid ) {
			var actions = this._actions,
				actionsByClip = this._actionsByClip,
				actionsForClip = actionsByClip[ clipUuid ];
			if ( actionsForClip === undefined ) {
				actionsForClip = {
					knownActions: [ action ],
					actionByRoot: {}
				};
				action._byClipCacheIndex = 0;
				actionsByClip[ clipUuid ] = actionsForClip;
			} else {
				var knownActions = actionsForClip.knownActions;
				action._byClipCacheIndex = knownActions.length;
				knownActions.push( action );
			}
			action._cacheIndex = actions.length;
			actions.push( action );
			actionsForClip.actionByRoot[ rootUuid ] = action;
		},
		_removeInactiveAction: function ( action ) {
			var actions = this._actions,
				lastInactiveAction = actions[ actions.length - 1 ],
				cacheIndex = action._cacheIndex;
			lastInactiveAction._cacheIndex = cacheIndex;
			actions[ cacheIndex ] = lastInactiveAction;
			actions.pop();
			action._cacheIndex = null;
			var clipUuid = action._clip.uuid,
				actionsByClip = this._actionsByClip,
				actionsForClip = actionsByClip[ clipUuid ],
				knownActionsForClip = actionsForClip.knownActions,
				lastKnownAction =
					knownActionsForClip[ knownActionsForClip.length - 1 ],
				byClipCacheIndex = action._byClipCacheIndex;
			lastKnownAction._byClipCacheIndex = byClipCacheIndex;
			knownActionsForClip[ byClipCacheIndex ] = lastKnownAction;
			knownActionsForClip.pop();
			action._byClipCacheIndex = null;
			var actionByRoot = actionsForClip.actionByRoot,
				rootUuid = ( action._localRoot || this._root ).uuid;
			delete actionByRoot[ rootUuid ];
			if ( knownActionsForClip.length === 0 ) {
				delete actionsByClip[ clipUuid ];
			}
			this._removeInactiveBindingsForAction( action );
		},
		_removeInactiveBindingsForAction: function ( action ) {
			var bindings = action._propertyBindings;
			for ( var i = 0, n = bindings.length; i !== n; ++ i ) {
				var binding = bindings[ i ];
				if ( -- binding.referenceCount === 0 ) {
					this._removeInactiveBinding( binding );
				}
			}
		},
		_lendAction: function ( action ) {
			var actions = this._actions,
				prevIndex = action._cacheIndex,
				lastActiveIndex = this._nActiveActions ++,
				firstInactiveAction = actions[ lastActiveIndex ];
			action._cacheIndex = lastActiveIndex;
			actions[ lastActiveIndex ] = action;
			firstInactiveAction._cacheIndex = prevIndex;
			actions[ prevIndex ] = firstInactiveAction;
		},
		_takeBackAction: function ( action ) {
			var actions = this._actions,
				prevIndex = action._cacheIndex,
				firstInactiveIndex = -- this._nActiveActions,
				lastActiveAction = actions[ firstInactiveIndex ];
			action._cacheIndex = firstInactiveIndex;
			actions[ firstInactiveIndex ] = action;
			lastActiveAction._cacheIndex = prevIndex;
			actions[ prevIndex ] = lastActiveAction;
		},
		_addInactiveBinding: function ( binding, rootUuid, trackName ) {
			var bindingsByRoot = this._bindingsByRootAndName,
				bindingByName = bindingsByRoot[ rootUuid ],
				bindings = this._bindings;
			if ( bindingByName === undefined ) {
				bindingByName = {};
				bindingsByRoot[ rootUuid ] = bindingByName;
			}
			bindingByName[ trackName ] = binding;
			binding._cacheIndex = bindings.length;
			bindings.push( binding );
		},
		_removeInactiveBinding: function ( binding ) {
			var bindings = this._bindings,
				propBinding = binding.binding,
				rootUuid = propBinding.rootNode.uuid,
				trackName = propBinding.path,
				bindingsByRoot = this._bindingsByRootAndName,
				bindingByName = bindingsByRoot[ rootUuid ],
				lastInactiveBinding = bindings[ bindings.length - 1 ],
				cacheIndex = binding._cacheIndex;
			lastInactiveBinding._cacheIndex = cacheIndex;
			bindings[ cacheIndex ] = lastInactiveBinding;
			bindings.pop();
			delete bindingByName[ trackName ];
			if ( Object.keys( bindingByName ).length === 0 ) {
				delete bindingsByRoot[ rootUuid ];
			}
		},
		_lendBinding: function ( binding ) {
			var bindings = this._bindings,
				prevIndex = binding._cacheIndex,
				lastActiveIndex = this._nActiveBindings ++,
				firstInactiveBinding = bindings[ lastActiveIndex ];
			binding._cacheIndex = lastActiveIndex;
			bindings[ lastActiveIndex ] = binding;
			firstInactiveBinding._cacheIndex = prevIndex;
			bindings[ prevIndex ] = firstInactiveBinding;
		},
		_takeBackBinding: function ( binding ) {
			var bindings = this._bindings,
				prevIndex = binding._cacheIndex,
				firstInactiveIndex = -- this._nActiveBindings,
				lastActiveBinding = bindings[ firstInactiveIndex ];
			binding._cacheIndex = firstInactiveIndex;
			bindings[ firstInactiveIndex ] = binding;
			lastActiveBinding._cacheIndex = prevIndex;
			bindings[ prevIndex ] = lastActiveBinding;
		},
		_lendControlInterpolant: function () {
			var interpolants = this._controlInterpolants,
				lastActiveIndex = this._nActiveControlInterpolants ++,
				interpolant = interpolants[ lastActiveIndex ];
			if ( interpolant === undefined ) {
				interpolant = new LinearInterpolant(
					new Float32Array( 2 ), new Float32Array( 2 ),
					1, this._controlInterpolantsResultBuffer );
				interpolant.__cacheIndex = lastActiveIndex;
				interpolants[ lastActiveIndex ] = interpolant;
			}
			return interpolant;
		},
		_takeBackControlInterpolant: function ( interpolant ) {
			var interpolants = this._controlInterpolants,
				prevIndex = interpolant.__cacheIndex,
				firstInactiveIndex = -- this._nActiveControlInterpolants,
				lastActiveInterpolant = interpolants[ firstInactiveIndex ];
			interpolant.__cacheIndex = firstInactiveIndex;
			interpolants[ firstInactiveIndex ] = interpolant;
			lastActiveInterpolant.__cacheIndex = prevIndex;
			interpolants[ prevIndex ] = lastActiveInterpolant;
		},
		_controlInterpolantsResultBuffer: new Float32Array( 1 ),
		clipAction: function ( clip, optionalRoot ) {
			var root = optionalRoot || this._root,
				rootUuid = root.uuid,
				clipObject = typeof clip === 'string' ?
					AnimationClip.findByName( root, clip ) : clip,
				clipUuid = clipObject !== null ? clipObject.uuid : clip,
				actionsForClip = this._actionsByClip[ clipUuid ],
				prototypeAction = null;
			if ( actionsForClip !== undefined ) {
				var existingAction =
						actionsForClip.actionByRoot[ rootUuid ];
				if ( existingAction !== undefined ) {
					return existingAction;
				}
				prototypeAction = actionsForClip.knownActions[ 0 ];
				if ( clipObject === null )
					clipObject = prototypeAction._clip;
			}
			if ( clipObject === null ) return null;
			var newAction = new AnimationAction( this, clipObject, optionalRoot );
			this._bindAction( newAction, prototypeAction );
			this._addInactiveAction( newAction, clipUuid, rootUuid );
			return newAction;
		},
		existingAction: function ( clip, optionalRoot ) {
			var root = optionalRoot || this._root,
				rootUuid = root.uuid,
				clipObject = typeof clip === 'string' ?
					AnimationClip.findByName( root, clip ) : clip,
				clipUuid = clipObject ? clipObject.uuid : clip,
				actionsForClip = this._actionsByClip[ clipUuid ];
			if ( actionsForClip !== undefined ) {
				return actionsForClip.actionByRoot[ rootUuid ] || null;
			}
			return null;
		},
		stopAllAction: function () {
			var actions = this._actions,
				nActions = this._nActiveActions,
				bindings = this._bindings,
				nBindings = this._nActiveBindings;
			this._nActiveActions = 0;
			this._nActiveBindings = 0;
			for ( var i = 0; i !== nActions; ++ i ) {
				actions[ i ].reset();
			}
			for ( var i = 0; i !== nBindings; ++ i ) {
				bindings[ i ].useCount = 0;
			}
			return this;
		},
		update: function ( deltaTime ) {
			deltaTime *= this.timeScale;
			var actions = this._actions,
				nActions = this._nActiveActions,
				time = this.time += deltaTime,
				timeDirection = Math.sign( deltaTime ),
				accuIndex = this._accuIndex ^= 1;
			for ( var i = 0; i !== nActions; ++ i ) {
				var action = actions[ i ];
				action._update( time, deltaTime, timeDirection, accuIndex );
			}
			var bindings = this._bindings,
				nBindings = this._nActiveBindings;
			for ( var i = 0; i !== nBindings; ++ i ) {
				bindings[ i ].apply( accuIndex );
			}
			return this;
		},
		getRoot: function () {
			return this._root;
		},
		uncacheClip: function ( clip ) {
			var actions = this._actions,
				clipUuid = clip.uuid,
				actionsByClip = this._actionsByClip,
				actionsForClip = actionsByClip[ clipUuid ];
			if ( actionsForClip !== undefined ) {
				var actionsToRemove = actionsForClip.knownActions;
				for ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {
					var action = actionsToRemove[ i ];
					this._deactivateAction( action );
					var cacheIndex = action._cacheIndex,
						lastInactiveAction = actions[ actions.length - 1 ];
					action._cacheIndex = null;
					action._byClipCacheIndex = null;
					lastInactiveAction._cacheIndex = cacheIndex;
					actions[ cacheIndex ] = lastInactiveAction;
					actions.pop();
					this._removeInactiveBindingsForAction( action );
				}
				delete actionsByClip[ clipUuid ];
			}
		},
		uncacheRoot: function ( root ) {
			var rootUuid = root.uuid,
				actionsByClip = this._actionsByClip;
			for ( var clipUuid in actionsByClip ) {
				var actionByRoot = actionsByClip[ clipUuid ].actionByRoot,
					action = actionByRoot[ rootUuid ];
				if ( action !== undefined ) {
					this._deactivateAction( action );
					this._removeInactiveAction( action );
				}
			}
			var bindingsByRoot = this._bindingsByRootAndName,
				bindingByName = bindingsByRoot[ rootUuid ];
			if ( bindingByName !== undefined ) {
				for ( var trackName in bindingByName ) {
					var binding = bindingByName[ trackName ];
					binding.restoreOriginalState();
					this._removeInactiveBinding( binding );
				}
			}
		},
		uncacheAction: function ( clip, optionalRoot ) {
			var action = this.existingAction( clip, optionalRoot );
			if ( action !== null ) {
				this._deactivateAction( action );
				this._removeInactiveAction( action );
			}
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function Uniform( value ) {
		if ( typeof value === 'string' ) {
			console.warn( 'THREE.Uniform: Type parameter is no longer needed.' );
			value = arguments[ 1 ];
		}
		this.value = value;
	}
	Uniform.prototype.clone = function () {
		return new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );
	};
	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */
	function InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {
		InterleavedBuffer.call( this, array, stride );
		this.meshPerAttribute = meshPerAttribute || 1;
	}
	InstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {
		constructor: InstancedInterleavedBuffer,
		isInstancedInterleavedBuffer: true,
		copy: function ( source ) {
			InterleavedBuffer.prototype.copy.call( this, source );
			this.meshPerAttribute = source.meshPerAttribute;
			return this;
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author bhouston / http://clara.io/
	 * @author stephomi / http://stephaneginier.com/
	 */
	function Raycaster( origin, direction, near, far ) {
		this.ray = new Ray( origin, direction );
		this.near = near || 0;
		this.far = far || Infinity;
		this.params = {
			Mesh: {},
			Line: {},
			LOD: {},
			Points: { threshold: 1 },
			Sprite: {}
		};
		Object.defineProperties( this.params, {
			PointCloud: {
				get: function () {
					console.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );
					return this.Points;
				}
			}
		} );
	}
	function ascSort( a, b ) {
		return a.distance - b.distance;
	}
	function intersectObject( object, raycaster, intersects, recursive ) {
		if ( object.visible === false ) return;
		object.raycast( raycaster, intersects );
		if ( recursive === true ) {
			var children = object.children;
			for ( var i = 0, l = children.length; i < l; i ++ ) {
				intersectObject( children[ i ], raycaster, intersects, true );
			}
		}
	}
	Object.assign( Raycaster.prototype, {
		linePrecision: 1,
		set: function ( origin, direction ) {
			this.ray.set( origin, direction );
		},
		setFromCamera: function ( coords, camera ) {
			if ( ( camera && camera.isPerspectiveCamera ) ) {
				this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
				this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();
				this._camera = camera;
			} else if ( ( camera && camera.isOrthographicCamera ) ) {
				this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera
				this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );
				this._camera = camera;
			} else {
				console.error( 'THREE.Raycaster: Unsupported camera type.' );
			}
		},
		intersectObject: function ( object, recursive, optionalTarget ) {
			var intersects = optionalTarget || [];
			intersectObject( object, this, intersects, recursive );
			intersects.sort( ascSort );
			return intersects;
		},
		intersectObjects: function ( objects, recursive, optionalTarget ) {
			var intersects = optionalTarget || [];
			if ( Array.isArray( objects ) === false ) {
				console.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );
				return intersects;
			}
			for ( var i = 0, l = objects.length; i < l; i ++ ) {
				intersectObject( objects[ i ], this, intersects, recursive );
			}
			intersects.sort( ascSort );
			return intersects;
		}
	} );
	/**
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
	 *
	 * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.
	 * The azimuthal angle (theta) is measured from the positive z-axiz.
	 */
	function Spherical( radius, phi, theta ) {
		this.radius = ( radius !== undefined ) ? radius : 1.0;
		this.phi = ( phi !== undefined ) ? phi : 0; // polar angle
		this.theta = ( theta !== undefined ) ? theta : 0; // azimuthal angle
		return this;
	}
	Object.assign( Spherical.prototype, {
		set: function ( radius, phi, theta ) {
			this.radius = radius;
			this.phi = phi;
			this.theta = theta;
			return this;
		},
		clone: function () {
			return new this.constructor().copy( this );
		},
		copy: function ( other ) {
			this.radius = other.radius;
			this.phi = other.phi;
			this.theta = other.theta;
			return this;
		},
		makeSafe: function () {
			var EPS = 0.000001;
			this.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );
			return this;
		},
		setFromVector3: function ( v ) {
			return this.setFromCartesianCoords( v.x, v.y, v.z );
		},
		setFromCartesianCoords: function ( x, y, z ) {
			this.radius = Math.sqrt( x * x + y * y + z * z );
			if ( this.radius === 0 ) {
				this.theta = 0;
				this.phi = 0;
			} else {
				this.theta = Math.atan2( x, z );
				this.phi = Math.acos( _Math.clamp( y / this.radius, - 1, 1 ) );
			}
			return this;
		}
	} );
	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
	 *
	 */
	function Cylindrical( radius, theta, y ) {
		this.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane
		this.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis
		this.y = ( y !== undefined ) ? y : 0; // height above the x-z plane
		return this;
	}
	Object.assign( Cylindrical.prototype, {
		set: function ( radius, theta, y ) {
			this.radius = radius;
			this.theta = theta;
			this.y = y;
			return this;
		},
		clone: function () {
			return new this.constructor().copy( this );
		},
		copy: function ( other ) {
			this.radius = other.radius;
			this.theta = other.theta;
			this.y = other.y;
			return this;
		},
		setFromVector3: function ( v ) {
			return this.setFromCartesianCoords( v.x, v.y, v.z );
		},
		setFromCartesianCoords: function ( x, y, z ) {
			this.radius = Math.sqrt( x * x + z * z );
			this.theta = Math.atan2( x, z );
			this.y = y;
			return this;
		}
	} );
	/**
	 * @author bhouston / http://clara.io
	 */
	function Box2( min, max ) {
		this.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );
		this.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );
	}
	Object.assign( Box2.prototype, {
		set: function ( min, max ) {
			this.min.copy( min );
			this.max.copy( max );
			return this;
		},
		setFromPoints: function ( points ) {
			this.makeEmpty();
			for ( var i = 0, il = points.length; i < il; i ++ ) {
				this.expandByPoint( points[ i ] );
			}
			return this;
		},
		setFromCenterAndSize: function () {
			var v1 = new Vector2();
			return function setFromCenterAndSize( center, size ) {
				var halfSize = v1.copy( size ).multiplyScalar( 0.5 );
				this.min.copy( center ).sub( halfSize );
				this.max.copy( center ).add( halfSize );
				return this;
			};
		}(),
		clone: function () {
			return new this.constructor().copy( this );
		},
		copy: function ( box ) {
			this.min.copy( box.min );
			this.max.copy( box.max );
			return this;
		},
		makeEmpty: function () {
			this.min.x = this.min.y = + Infinity;
			this.max.x = this.max.y = - Infinity;
			return this;
		},
		isEmpty: function () {
			return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );
		},
		getCenter: function ( target ) {
			if ( target === undefined ) {
				console.warn( 'THREE.Box2: .getCenter() target is now required' );
				target = new Vector2();
			}
			return this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );
		},
		getSize: function ( target ) {
			if ( target === undefined ) {
				console.warn( 'THREE.Box2: .getSize() target is now required' );
				target = new Vector2();
			}
			return this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );
		},
		expandByPoint: function ( point ) {
			this.min.min( point );
			this.max.max( point );
			return this;
		},
		expandByVector: function ( vector ) {
			this.min.sub( vector );
			this.max.add( vector );
			return this;
		},
		expandByScalar: function ( scalar ) {
			this.min.addScalar( - scalar );
			this.max.addScalar( scalar );
			return this;
		},
		containsPoint: function ( point ) {
			return point.x < this.min.x || point.x > this.max.x ||
				point.y < this.min.y || point.y > this.max.y ? false : true;
		},
		containsBox: function ( box ) {
			return this.min.x <= box.min.x && box.max.x <= this.max.x &&
				this.min.y <= box.min.y && box.max.y <= this.max.y;
		},
		getParameter: function ( point, target ) {
			if ( target === undefined ) {
				console.warn( 'THREE.Box2: .getParameter() target is now required' );
				target = new Vector2();
			}
			return target.set(
				( point.x - this.min.x ) / ( this.max.x - this.min.x ),
				( point.y - this.min.y ) / ( this.max.y - this.min.y )
			);
		},
		intersectsBox: function ( box ) {
			return box.max.x < this.min.x || box.min.x > this.max.x ||
				box.max.y < this.min.y || box.min.y > this.max.y ? false : true;
		},
		clampPoint: function ( point, target ) {
			if ( target === undefined ) {
				console.warn( 'THREE.Box2: .clampPoint() target is now required' );
				target = new Vector2();
			}
			return target.copy( point ).clamp( this.min, this.max );
		},
		distanceToPoint: function () {
			var v1 = new Vector2();
			return function distanceToPoint( point ) {
				var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
				return clampedPoint.sub( point ).length();
			};
		}(),
		intersect: function ( box ) {
			this.min.max( box.min );
			this.max.min( box.max );
			return this;
		},
		union: function ( box ) {
			this.min.min( box.min );
			this.max.max( box.max );
			return this;
		},
		translate: function ( offset ) {
			this.min.add( offset );
			this.max.add( offset );
			return this;
		},
		equals: function ( box ) {
			return box.min.equals( this.min ) && box.max.equals( this.max );
		}
	} );
	/**
	 * @author bhouston / http://clara.io
	 */
	var _startP, _startEnd;
	function Line3( start, end ) {
		this.start = ( start !== undefined ) ? start : new Vector3();
		this.end = ( end !== undefined ) ? end : new Vector3();
	}
	Object.assign( Line3.prototype, {
		set: function ( start, end ) {
			this.start.copy( start );
			this.end.copy( end );
			return this;
		},
		clone: function () {
			return new this.constructor().copy( this );
		},
		copy: function ( line ) {
			this.start.copy( line.start );
			this.end.copy( line.end );
			return this;
		},
		getCenter: function ( target ) {
			if ( target === undefined ) {
				console.warn( 'THREE.Line3: .getCenter() target is now required' );
				target = new Vector3();
			}
			return target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );
		},
		delta: function ( target ) {
			if ( target === undefined ) {
				console.warn( 'THREE.Line3: .delta() target is now required' );
				target = new Vector3();
			}
			return target.subVectors( this.end, this.start );
		},
		distanceSq: function () {
			return this.start.distanceToSquared( this.end );
		},
		distance: function () {
			return this.start.distanceTo( this.end );
		},
		at: function ( t, target ) {
			if ( target === undefined ) {
				console.warn( 'THREE.Line3: .at() target is now required' );
				target = new Vector3();
			}
			return this.delta( target ).multiplyScalar( t ).add( this.start );
		},
		closestPointToPointParameter: function ( point, clampToLine ) {
			if ( _startP === undefined ) {
				_startP = new Vector3();
				_startEnd = new Vector3();
			}
			_startP.subVectors( point, this.start );
			_startEnd.subVectors( this.end, this.start );
			var startEnd2 = _startEnd.dot( _startEnd );
			var startEnd_startP = _startEnd.dot( _startP );
			var t = startEnd_startP / startEnd2;
			if ( clampToLine ) {
				t = _Math.clamp( t, 0, 1 );
			}
			return t;
		},
		closestPointToPoint: function ( point, clampToLine, target ) {
			var t = this.closestPointToPointParameter( point, clampToLine );
			if ( target === undefined ) {
				console.warn( 'THREE.Line3: .closestPointToPoint() target is now required' );
				target = new Vector3();
			}
			return this.delta( target ).multiplyScalar( t ).add( this.start );
		},
		applyMatrix4: function ( matrix ) {
			this.start.applyMatrix4( matrix );
			this.end.applyMatrix4( matrix );
			return this;
		},
		equals: function ( line ) {
			return line.start.equals( this.start ) && line.end.equals( this.end );
		}
	} );
	/**
	 * @author alteredq / http://alteredqualia.com/
	 */
	function ImmediateRenderObject( material ) {
		Object3D.call( this );
		this.material = material;
		this.render = function ( /* renderCallback */ ) {};
	}
	ImmediateRenderObject.prototype = Object.create( Object3D.prototype );
	ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;
	ImmediateRenderObject.prototype.isImmediateRenderObject = true;
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */
	function VertexNormalsHelper( object, size, hex, linewidth ) {
		this.object = object;
		this.size = ( size !== undefined ) ? size : 1;
		var color = ( hex !== undefined ) ? hex : 0xff0000;
		var width = ( linewidth !== undefined ) ? linewidth : 1;
		var nNormals = 0;
		var objGeometry = this.object.geometry;
		if ( objGeometry && objGeometry.isGeometry ) {
			nNormals = objGeometry.faces.length * 3;
		} else if ( objGeometry && objGeometry.isBufferGeometry ) {
			nNormals = objGeometry.attributes.normal.count;
		}
		var geometry = new BufferGeometry();
		var positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );
		geometry.addAttribute( 'position', positions );
		LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );
		this.matrixAutoUpdate = false;
		this.update();
	}
	VertexNormalsHelper.prototype = Object.create( LineSegments.prototype );
	VertexNormalsHelper.prototype.constructor = VertexNormalsHelper;
	VertexNormalsHelper.prototype.update = ( function () {
		var v1 = new Vector3();
		var v2 = new Vector3();
		var normalMatrix = new Matrix3();
		return function update() {
			var keys = [ 'a', 'b', 'c' ];
			this.object.updateMatrixWorld( true );
			normalMatrix.getNormalMatrix( this.object.matrixWorld );
			var matrixWorld = this.object.matrixWorld;
			var position = this.geometry.attributes.position;
			var objGeometry = this.object.geometry;
			if ( objGeometry && objGeometry.isGeometry ) {
				var vertices = objGeometry.vertices;
				var faces = objGeometry.faces;
				var idx = 0;
				for ( var i = 0, l = faces.length; i < l; i ++ ) {
					var face = faces[ i ];
					for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {
						var vertex = vertices[ face[ keys[ j ] ] ];
						var normal = face.vertexNormals[ j ];
						v1.copy( vertex ).applyMatrix4( matrixWorld );
						v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );
						position.setXYZ( idx, v1.x, v1.y, v1.z );
						idx = idx + 1;
						position.setXYZ( idx, v2.x, v2.y, v2.z );
						idx = idx + 1;
					}
				}
			} else if ( objGeometry && objGeometry.isBufferGeometry ) {
				var objPos = objGeometry.attributes.position;
				var objNorm = objGeometry.attributes.normal;
				var idx = 0;
				for ( var j = 0, jl = objPos.count; j < jl; j ++ ) {
					v1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );
					v2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );
					v2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );
					position.setXYZ( idx, v1.x, v1.y, v1.z );
					idx = idx + 1;
					position.setXYZ( idx, v2.x, v2.y, v2.z );
					idx = idx + 1;
				}
			}
			position.needsUpdate = true;
		};
	}() );
	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */
	function SpotLightHelper( light, color ) {
		Object3D.call( this );
		this.light = light;
		this.light.updateMatrixWorld();
		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;
		this.color = color;
		var geometry = new BufferGeometry();
		var positions = [
			0, 0, 0, 	0, 0, 1,
			0, 0, 0, 	1, 0, 1,
			0, 0, 0,	- 1, 0, 1,
			0, 0, 0, 	0, 1, 1,
			0, 0, 0, 	0, - 1, 1
		];
		for ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {
			var p1 = ( i / l ) * Math.PI * 2;
			var p2 = ( j / l ) * Math.PI * 2;
			positions.push(
				Math.cos( p1 ), Math.sin( p1 ), 1,
				Math.cos( p2 ), Math.sin( p2 ), 1
			);
		}
		geometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
		var material = new LineBasicMaterial( { fog: false } );
		this.cone = new LineSegments( geometry, material );
		this.add( this.cone );
		this.update();
	}
	SpotLightHelper.prototype = Object.create( Object3D.prototype );
	SpotLightHelper.prototype.constructor = SpotLightHelper;
	SpotLightHelper.prototype.dispose = function () {
		this.cone.geometry.dispose();
		this.cone.material.dispose();
	};
	SpotLightHelper.prototype.update = function () {
		var vector = new Vector3();
		return function update() {
			this.light.updateMatrixWorld();
			var coneLength = this.light.distance ? this.light.distance : 1000;
			var coneWidth = coneLength * Math.tan( this.light.angle );
			this.cone.scale.set( coneWidth, coneWidth, coneLength );
			vector.setFromMatrixPosition( this.light.target.matrixWorld );
			this.cone.lookAt( vector );
			if ( this.color !== undefined ) {
				this.cone.material.color.set( this.color );
			} else {
				this.cone.material.color.copy( this.light.color );
			}
		};
	}();
	/**
	 * @author Sean Griffin / http://twitter.com/sgrif
	 * @author Michael Guerrero / http://realitymeltdown.com
	 * @author mrdoob / http://mrdoob.com/
	 * @author ikerr / http://verold.com
	 * @author Mugen87 / https://github.com/Mugen87
	 */
	function getBoneList( object ) {
		var boneList = [];
		if ( object && object.isBone ) {
			boneList.push( object );
		}
		for ( var i = 0; i < object.children.length; i ++ ) {
			boneList.push.apply( boneList, getBoneList( object.children[ i ] ) );
		}
		return boneList;
	}
	function SkeletonHelper( object ) {
		var bones = getBoneList( object );
		var geometry = new BufferGeometry();
		var vertices = [];
		var colors = [];
		var color1 = new Color( 0, 0, 1 );
		var color2 = new Color( 0, 1, 0 );
		for ( var i = 0; i < bones.length; i ++ ) {
			var bone = bones[ i ];
			if ( bone.parent && bone.parent.isBone ) {
				vertices.push( 0, 0, 0 );
				vertices.push( 0, 0, 0 );
				colors.push( color1.r, color1.g, color1.b );
				colors.push( color2.r, color2.g, color2.b );
			}
		}
		geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
		var material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );
		LineSegments.call( this, geometry, material );
		this.root = object;
		this.bones = bones;
		this.matrix = object.matrixWorld;
		this.matrixAutoUpdate = false;
	}
	SkeletonHelper.prototype = Object.create( LineSegments.prototype );
	SkeletonHelper.prototype.constructor = SkeletonHelper;
	SkeletonHelper.prototype.updateMatrixWorld = function () {
		var vector = new Vector3();
		var boneMatrix = new Matrix4();
		var matrixWorldInv = new Matrix4();
		return function updateMatrixWorld( force ) {
			var bones = this.bones;
			var geometry = this.geometry;
			var position = geometry.getAttribute( 'position' );
			matrixWorldInv.getInverse( this.root.matrixWorld );
			for ( var i = 0, j = 0; i < bones.length; i ++ ) {
				var bone = bones[ i ];
				if ( bone.parent && bone.parent.isBone ) {
					boneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );
					vector.setFromMatrixPosition( boneMatrix );
					position.setXYZ( j, vector.x, vector.y, vector.z );
					boneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );
					vector.setFromMatrixPosition( boneMatrix );
					position.setXYZ( j + 1, vector.x, vector.y, vector.z );
					j += 2;
				}
			}
			geometry.getAttribute( 'position' ).needsUpdate = true;
			Object3D.prototype.updateMatrixWorld.call( this, force );
		};
	}();
	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */
	function PointLightHelper( light, sphereSize, color ) {
		this.light = light;
		this.light.updateMatrixWorld();
		this.color = color;
		var geometry = new SphereBufferGeometry( sphereSize, 4, 2 );
		var material = new MeshBasicMaterial( { wireframe: true, fog: false } );
		Mesh.call( this, geometry, material );
		this.matrix = this.light.matrixWorld;
		this.matrixAutoUpdate = false;
		this.update();
		/*
		var distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );
		var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );
		this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
		this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );
		var d = light.distance;
		if ( d === 0.0 ) {
			this.lightDistance.visible = false;
		} else {
			this.lightDistance.scale.set( d, d, d );
		}
		this.add( this.lightDistance );
		*/
	}
	PointLightHelper.prototype = Object.create( Mesh.prototype );
	PointLightHelper.prototype.constructor = PointLightHelper;
	PointLightHelper.prototype.dispose = function () {
		this.geometry.dispose();
		this.material.dispose();
	};
	PointLightHelper.prototype.update = function () {
		if ( this.color !== undefined ) {
			this.material.color.set( this.color );
		} else {
			this.material.color.copy( this.light.color );
		}
		/*
		var d = this.light.distance;
		if ( d === 0.0 ) {
			this.lightDistance.visible = false;
		} else {
			this.lightDistance.visible = true;
			this.lightDistance.scale.set( d, d, d );
		}
		*/
	};
	/**
	 * @author abelnation / http://github.com/abelnation
	 * @author Mugen87 / http://github.com/Mugen87
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 *  This helper must be added as a child of the light
	 */
	function RectAreaLightHelper( light, color ) {
		this.type = 'RectAreaLightHelper';
		this.light = light;
		this.color = color; // optional hardwired color for the helper
		var positions = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, - 1, 0, 1, 1, 0 ];
		var geometry = new BufferGeometry();
		geometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
		geometry.computeBoundingSphere();
		var material = new LineBasicMaterial( { fog: false } );
		Line.call( this, geometry, material );
		var positions2 = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, 1, 0, - 1, - 1, 0, 1, - 1, 0 ];
		var geometry2 = new BufferGeometry();
		geometry2.addAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );
		geometry2.computeBoundingSphere();
		this.add( new Mesh( geometry2, new MeshBasicMaterial( { side: BackSide, fog: false } ) ) );
		this.update();
	}
	RectAreaLightHelper.prototype = Object.create( Line.prototype );
	RectAreaLightHelper.prototype.constructor = RectAreaLightHelper;
	RectAreaLightHelper.prototype.update = function () {
		this.scale.set( 0.5 * this.light.width, 0.5 * this.light.height, 1 );
		if ( this.color !== undefined ) {
			this.material.color.set( this.color );
			this.children[ 0 ].material.color.set( this.color );
		} else {
			this.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );
			var c = this.material.color;
			var max = Math.max( c.r, c.g, c.b );
			if ( max > 1 ) c.multiplyScalar( 1 / max );
			this.children[ 0 ].material.color.copy( this.material.color );
		}
	};
	RectAreaLightHelper.prototype.dispose = function () {
		this.geometry.dispose();
		this.material.dispose();
		this.children[ 0 ].geometry.dispose();
		this.children[ 0 ].material.dispose();
	};
	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */
	function HemisphereLightHelper( light, size, color ) {
		Object3D.call( this );
		this.light = light;
		this.light.updateMatrixWorld();
		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;
		this.color = color;
		var geometry = new OctahedronBufferGeometry( size );
		geometry.rotateY( Math.PI * 0.5 );
		this.material = new MeshBasicMaterial( { wireframe: true, fog: false } );
		if ( this.color === undefined ) this.material.vertexColors = VertexColors;
		var position = geometry.getAttribute( 'position' );
		var colors = new Float32Array( position.count * 3 );
		geometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );
		this.add( new Mesh( geometry, this.material ) );
		this.update();
	}
	HemisphereLightHelper.prototype = Object.create( Object3D.prototype );
	HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;
	HemisphereLightHelper.prototype.dispose = function () {
		this.children[ 0 ].geometry.dispose();
		this.children[ 0 ].material.dispose();
	};
	HemisphereLightHelper.prototype.update = function () {
		var vector = new Vector3();
		var color1 = new Color();
		var color2 = new Color();
		return function update() {
			var mesh = this.children[ 0 ];
			if ( this.color !== undefined ) {
				this.material.color.set( this.color );
			} else {
				var colors = mesh.geometry.getAttribute( 'color' );
				color1.copy( this.light.color );
				color2.copy( this.light.groundColor );
				for ( var i = 0, l = colors.count; i < l; i ++ ) {
					var color = ( i < ( l / 2 ) ) ? color1 : color2;
					colors.setXYZ( i, color.r, color.g, color.b );
				}
				colors.needsUpdate = true;
			}
			mesh.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );
		};
	}();
	/**
	 * @author WestLangley / http://github.com/WestLangley
	 */
	function LightProbeHelper( lightProbe, size ) {
		this.lightProbe = lightProbe;
		this.size = size;
		var defines = {};
		defines[ 'GAMMA_OUTPUT' ] = "";
		var material = new ShaderMaterial( {
			defines: defines,
			uniforms: {
				sh: { value: this.lightProbe.sh.coefficients }, // by reference
				intensity: { value: this.lightProbe.intensity }
			},
			vertexShader: [
				'varying vec3 vNormal;',
				'void main() {',
				'	vNormal = normalize( normalMatrix * normal );',
				'	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
				'}',
			].join( '\n' ),
			fragmentShader: [
				'#define RECIPROCAL_PI 0.318309886',
				'vec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {',
				'	// matrix is assumed to be orthogonal',
				'	return normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );',
				'}',
				'vec3 linearToOutput( in vec3 a ) {',
				'	#ifdef GAMMA_OUTPUT',
				'		return pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );',
				'	#else',
				'		return a;',
				'	#endif',
				'}',
				'// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf',
				'vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {',
				'	// normal is assumed to have unit length',
				'	float x = normal.x, y = normal.y, z = normal.z;',
				'	// band 0',
				'	vec3 result = shCoefficients[ 0 ] * 0.886227;',
				'	// band 1',
				'	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;',
				'	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;',
				'	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;',
				'	// band 2',
				'	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;',
				'	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;',
				'	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );',
				'	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;',
				'	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );',
				'	return result;',
				'}',
				'uniform vec3 sh[ 9 ]; // sh coefficients',
				'uniform float intensity; // light probe intensity',
				'varying vec3 vNormal;',
				'void main() {',
				'	vec3 normal = normalize( vNormal );',
				'	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );',
				'	vec3 irradiance = shGetIrradianceAt( worldNormal, sh );',
				'	vec3 outgoingLight = RECIPROCAL_PI * irradiance * intensity;',
				'	outgoingLight = linearToOutput( outgoingLight );',
				'	gl_FragColor = vec4( outgoingLight, 1.0 );',
				'}'
			].join( '\n' )
		} );
		var geometry = new SphereBufferGeometry( 1, 32, 16 );
		Mesh.call( this, geometry, material );
		this.onBeforeRender();
	}
	LightProbeHelper.prototype = Object.create( Mesh.prototype );
	LightProbeHelper.prototype.constructor = LightProbeHelper;
	LightProbeHelper.prototype.dispose = function () {
		this.geometry.dispose();
		this.material.dispose();
	};
	LightProbeHelper.prototype.onBeforeRender = function () {
		return function update() {
			this.position.copy( this.lightProbe.position );
			this.scale.set( 1, 1, 1 ).multiplyScalar( this.size );
			this.material.uniforms.intensity.value = this.lightProbe.intensity;
		};
	}();
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function GridHelper( size, divisions, color1, color2 ) {
		size = size || 10;
		divisions = divisions || 10;
		color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
		color2 = new Color( color2 !== undefined ? color2 : 0x888888 );
		var center = divisions / 2;
		var step = size / divisions;
		var halfSize = size / 2;
		var vertices = [], colors = [];
		for ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {
			vertices.push( - halfSize, 0, k, halfSize, 0, k );
			vertices.push( k, 0, - halfSize, k, 0, halfSize );
			var color = i === center ? color1 : color2;
			color.toArray( colors, j ); j += 3;
			color.toArray( colors, j ); j += 3;
			color.toArray( colors, j ); j += 3;
			color.toArray( colors, j ); j += 3;
		}
		var geometry = new BufferGeometry();
		geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
		var material = new LineBasicMaterial( { vertexColors: VertexColors } );
		LineSegments.call( this, geometry, material );
	}
	GridHelper.prototype = Object.assign( Object.create( LineSegments.prototype ), {
		constructor: GridHelper,
		copy: function ( source ) {
			LineSegments.prototype.copy.call( this, source );
			this.geometry.copy( source.geometry );
			this.material.copy( source.material );
			return this;
		},
		clone: function () {
			return new this.constructor().copy( this );
		}
	} );
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / http://github.com/Mugen87
	 * @author Hectate / http://www.github.com/Hectate
	 */
	function PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {
		radius = radius || 10;
		radials = radials || 16;
		circles = circles || 8;
		divisions = divisions || 64;
		color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
		color2 = new Color( color2 !== undefined ? color2 : 0x888888 );
		var vertices = [];
		var colors = [];
		var x, z;
		var v, i, j, r, color;
		for ( i = 0; i <= radials; i ++ ) {
			v = ( i / radials ) * ( Math.PI * 2 );
			x = Math.sin( v ) * radius;
			z = Math.cos( v ) * radius;
			vertices.push( 0, 0, 0 );
			vertices.push( x, 0, z );
			color = ( i & 1 ) ? color1 : color2;
			colors.push( color.r, color.g, color.b );
			colors.push( color.r, color.g, color.b );
		}
		for ( i = 0; i <= circles; i ++ ) {
			color = ( i & 1 ) ? color1 : color2;
			r = radius - ( radius / circles * i );
			for ( j = 0; j < divisions; j ++ ) {
				v = ( j / divisions ) * ( Math.PI * 2 );
				x = Math.sin( v ) * r;
				z = Math.cos( v ) * r;
				vertices.push( x, 0, z );
				colors.push( color.r, color.g, color.b );
				v = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );
				x = Math.sin( v ) * r;
				z = Math.cos( v ) * r;
				vertices.push( x, 0, z );
				colors.push( color.r, color.g, color.b );
			}
		}
		var geometry = new BufferGeometry();
		geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
		var material = new LineBasicMaterial( { vertexColors: VertexColors } );
		LineSegments.call( this, geometry, material );
	}
	PolarGridHelper.prototype = Object.create( LineSegments.prototype );
	PolarGridHelper.prototype.constructor = PolarGridHelper;
	/**
	 * @author Mugen87 / http://github.com/Mugen87
	 */
	function PositionalAudioHelper( audio, range, divisionsInnerAngle, divisionsOuterAngle ) {
		this.audio = audio;
		this.range = range || 1;
		this.divisionsInnerAngle = divisionsInnerAngle || 16;
		this.divisionsOuterAngle = divisionsOuterAngle || 2;
		var geometry = new BufferGeometry();
		var divisions = this.divisionsInnerAngle + this.divisionsOuterAngle * 2;
		var positions = new Float32Array( ( divisions * 3 + 3 ) * 3 );
		geometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );
		var materialInnerAngle = new LineBasicMaterial( { color: 0x00ff00 } );
		var materialOuterAngle = new LineBasicMaterial( { color: 0xffff00 } );
		Line.call( this, geometry, [ materialOuterAngle, materialInnerAngle ] );
		this.update();
	}
	PositionalAudioHelper.prototype = Object.create( Line.prototype );
	PositionalAudioHelper.prototype.constructor = PositionalAudioHelper;
	PositionalAudioHelper.prototype.update = function () {
		var audio = this.audio;
		var range = this.range;
		var divisionsInnerAngle = this.divisionsInnerAngle;
		var divisionsOuterAngle = this.divisionsOuterAngle;
		var coneInnerAngle = _Math.degToRad( audio.panner.coneInnerAngle );
		var coneOuterAngle = _Math.degToRad( audio.panner.coneOuterAngle );
		var halfConeInnerAngle = coneInnerAngle / 2;
		var halfConeOuterAngle = coneOuterAngle / 2;
		var start = 0;
		var count = 0;
		var i, stride;
		var geometry = this.geometry;
		var positionAttribute = geometry.attributes.position;
		geometry.clearGroups();
		function generateSegment( from, to, divisions, materialIndex ) {
			var step = ( to - from ) / divisions;
			positionAttribute.setXYZ( start, 0, 0, 0 );
			count ++;
			for ( i = from; i < to; i += step ) {
				stride = start + count;
				positionAttribute.setXYZ( stride, Math.sin( i ) * range, 0, Math.cos( i ) * range );
				positionAttribute.setXYZ( stride + 1, Math.sin( Math.min( i + step, to ) ) * range, 0, Math.cos( Math.min( i + step, to ) ) * range );
				positionAttribute.setXYZ( stride + 2, 0, 0, 0 );
				count += 3;
			}
			geometry.addGroup( start, count, materialIndex );
			start += count;
			count = 0;
		}
		generateSegment( - halfConeOuterAngle, - halfConeInnerAngle, divisionsOuterAngle, 0 );
		generateSegment( - halfConeInnerAngle, halfConeInnerAngle, divisionsInnerAngle, 1 );
		generateSegment( halfConeInnerAngle, halfConeOuterAngle, divisionsOuterAngle, 0 );
		positionAttribute.needsUpdate = true;
		if ( coneInnerAngle === coneOuterAngle ) this.material[ 0 ].visible = false;
	};
	PositionalAudioHelper.prototype.dispose = function () {
		this.geometry.dispose();
		this.material[ 0 ].dispose();
		this.material[ 1 ].dispose();
	};
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */
	function FaceNormalsHelper( object, size, hex, linewidth ) {
		this.object = object;
		this.size = ( size !== undefined ) ? size : 1;
		var color = ( hex !== undefined ) ? hex : 0xffff00;
		var width = ( linewidth !== undefined ) ? linewidth : 1;
		var nNormals = 0;
		var objGeometry = this.object.geometry;
		if ( objGeometry && objGeometry.isGeometry ) {
			nNormals = objGeometry.faces.length;
		} else {
			console.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );
		}
		var geometry = new BufferGeometry();
		var positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );
		geometry.addAttribute( 'position', positions );
		LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );
		this.matrixAutoUpdate = false;
		this.update();
	}
	FaceNormalsHelper.prototype = Object.create( LineSegments.prototype );
	FaceNormalsHelper.prototype.constructor = FaceNormalsHelper;
	FaceNormalsHelper.prototype.update = ( function () {
		var v1 = new Vector3();
		var v2 = new Vector3();
		var normalMatrix = new Matrix3();
		return function update() {
			this.object.updateMatrixWorld( true );
			normalMatrix.getNormalMatrix( this.object.matrixWorld );
			var matrixWorld = this.object.matrixWorld;
			var position = this.geometry.attributes.position;
			var objGeometry = this.object.geometry;
			var vertices = objGeometry.vertices;
			var faces = objGeometry.faces;
			var idx = 0;
			for ( var i = 0, l = faces.length; i < l; i ++ ) {
				var face = faces[ i ];
				var normal = face.normal;
				v1.copy( vertices[ face.a ] )
					.add( vertices[ face.b ] )
					.add( vertices[ face.c ] )
					.divideScalar( 3 )
					.applyMatrix4( matrixWorld );
				v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );
				position.setXYZ( idx, v1.x, v1.y, v1.z );
				idx = idx + 1;
				position.setXYZ( idx, v2.x, v2.y, v2.z );
				idx = idx + 1;
			}
			position.needsUpdate = true;
		};
	}() );
	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */
	function DirectionalLightHelper( light, size, color ) {
		Object3D.call( this );
		this.light = light;
		this.light.updateMatrixWorld();
		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;
		this.color = color;
		if ( size === undefined ) size = 1;
		var geometry = new BufferGeometry();
		geometry.addAttribute( 'position', new Float32BufferAttribute( [
			- size, size, 0,
			size, size, 0,
			size, - size, 0,
			- size, - size, 0,
			- size, size, 0
		], 3 ) );
		var material = new LineBasicMaterial( { fog: false } );
		this.lightPlane = new Line( geometry, material );
		this.add( this.lightPlane );
		geometry = new BufferGeometry();
		geometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );
		this.targetLine = new Line( geometry, material );
		this.add( this.targetLine );
		this.update();
	}
	DirectionalLightHelper.prototype = Object.create( Object3D.prototype );
	DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;
	DirectionalLightHelper.prototype.dispose = function () {
		this.lightPlane.geometry.dispose();
		this.lightPlane.material.dispose();
		this.targetLine.geometry.dispose();
		this.targetLine.material.dispose();
	};
	DirectionalLightHelper.prototype.update = function () {
		var v1 = new Vector3();
		var v2 = new Vector3();
		var v3 = new Vector3();
		return function update() {
			v1.setFromMatrixPosition( this.light.matrixWorld );
			v2.setFromMatrixPosition( this.light.target.matrixWorld );
			v3.subVectors( v2, v1 );
			this.lightPlane.lookAt( v2 );
			if ( this.color !== undefined ) {
				this.lightPlane.material.color.set( this.color );
				this.targetLine.material.color.set( this.color );
			} else {
				this.lightPlane.material.color.copy( this.light.color );
				this.targetLine.material.color.copy( this.light.color );
			}
			this.targetLine.lookAt( v2 );
			this.targetLine.scale.z = v3.length();
		};
	}();
	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 *	- shows frustum, line of sight and up of the camera
	 *	- suitable for fast updates
	 * 	- based on frustum visualization in lightgl.js shadowmap example
	 *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
	 */
	function CameraHelper( camera ) {
		var geometry = new BufferGeometry();
		var material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );
		var vertices = [];
		var colors = [];
		var pointMap = {};
		var colorFrustum = new Color( 0xffaa00 );
		var colorCone = new Color( 0xff0000 );
		var colorUp = new Color( 0x00aaff );
		var colorTarget = new Color( 0xffffff );
		var colorCross = new Color( 0x333333 );
		addLine( 'n1', 'n2', colorFrustum );
		addLine( 'n2', 'n4', colorFrustum );
		addLine( 'n4', 'n3', colorFrustum );
		addLine( 'n3', 'n1', colorFrustum );
		addLine( 'f1', 'f2', colorFrustum );
		addLine( 'f2', 'f4', colorFrustum );
		addLine( 'f4', 'f3', colorFrustum );
		addLine( 'f3', 'f1', colorFrustum );
		addLine( 'n1', 'f1', colorFrustum );
		addLine( 'n2', 'f2', colorFrustum );
		addLine( 'n3', 'f3', colorFrustum );
		addLine( 'n4', 'f4', colorFrustum );
		addLine( 'p', 'n1', colorCone );
		addLine( 'p', 'n2', colorCone );
		addLine( 'p', 'n3', colorCone );
		addLine( 'p', 'n4', colorCone );
		addLine( 'u1', 'u2', colorUp );
		addLine( 'u2', 'u3', colorUp );
		addLine( 'u3', 'u1', colorUp );
		addLine( 'c', 't', colorTarget );
		addLine( 'p', 'c', colorCross );
		addLine( 'cn1', 'cn2', colorCross );
		addLine( 'cn3', 'cn4', colorCross );
		addLine( 'cf1', 'cf2', colorCross );
		addLine( 'cf3', 'cf4', colorCross );
		function addLine( a, b, color ) {
			addPoint( a, color );
			addPoint( b, color );
		}
		function addPoint( id, color ) {
			vertices.push( 0, 0, 0 );
			colors.push( color.r, color.g, color.b );
			if ( pointMap[ id ] === undefined ) {
				pointMap[ id ] = [];
			}
			pointMap[ id ].push( ( vertices.length / 3 ) - 1 );
		}
		geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
		LineSegments.call( this, geometry, material );
		this.camera = camera;
		if ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();
		this.matrix = camera.matrixWorld;
		this.matrixAutoUpdate = false;
		this.pointMap = pointMap;
		this.update();
	}
	CameraHelper.prototype = Object.create( LineSegments.prototype );
	CameraHelper.prototype.constructor = CameraHelper;
	CameraHelper.prototype.update = function () {
		var geometry, pointMap;
		var vector = new Vector3();
		var camera = new Camera();
		function setPoint( point, x, y, z ) {
			vector.set( x, y, z ).unproject( camera );
			var points = pointMap[ point ];
			if ( points !== undefined ) {
				var position = geometry.getAttribute( 'position' );
				for ( var i = 0, l = points.length; i < l; i ++ ) {
					position.setXYZ( points[ i ], vector.x, vector.y, vector.z );
				}
			}
		}
		return function update() {
			geometry = this.geometry;
			pointMap = this.pointMap;
			var w = 1, h = 1;
			camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );
			setPoint( 'c', 0, 0, - 1 );
			setPoint( 't', 0, 0, 1 );
			setPoint( 'n1', - w, - h, - 1 );
			setPoint( 'n2', w, - h, - 1 );
			setPoint( 'n3', - w, h, - 1 );
			setPoint( 'n4', w, h, - 1 );
			setPoint( 'f1', - w, - h, 1 );
			setPoint( 'f2', w, - h, 1 );
			setPoint( 'f3', - w, h, 1 );
			setPoint( 'f4', w, h, 1 );
			setPoint( 'u1', w * 0.7, h * 1.1, - 1 );
			setPoint( 'u2', - w * 0.7, h * 1.1, - 1 );
			setPoint( 'u3', 0, h * 2, - 1 );
			setPoint( 'cf1', - w, 0, 1 );
			setPoint( 'cf2', w, 0, 1 );
			setPoint( 'cf3', 0, - h, 1 );
			setPoint( 'cf4', 0, h, 1 );
			setPoint( 'cn1', - w, 0, - 1 );
			setPoint( 'cn2', w, 0, - 1 );
			setPoint( 'cn3', 0, - h, - 1 );
			setPoint( 'cn4', 0, h, - 1 );
			geometry.getAttribute( 'position' ).needsUpdate = true;
		};
	}();
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / http://github.com/Mugen87
	 */
	function BoxHelper( object, color ) {
		this.object = object;
		if ( color === undefined ) color = 0xffff00;
		var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
		var positions = new Float32Array( 8 * 3 );
		var geometry = new BufferGeometry();
		geometry.setIndex( new BufferAttribute( indices, 1 ) );
		geometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );
		LineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );
		this.matrixAutoUpdate = false;
		this.update();
	}
	BoxHelper.prototype = Object.create( LineSegments.prototype );
	BoxHelper.prototype.constructor = BoxHelper;
	BoxHelper.prototype.update = ( function () {
		var box = new Box3();
		return function update( object ) {
			if ( object !== undefined ) {
				console.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );
			}
			if ( this.object !== undefined ) {
				box.setFromObject( this.object );
			}
			if ( box.isEmpty() ) return;
			var min = box.min;
			var max = box.max;
			/*
			  5____4
			1/___0/|
			| 6__|_7
			2/___3/
			0: max.x, max.y, max.z
			1: min.x, max.y, max.z
			2: min.x, min.y, max.z
			3: max.x, min.y, max.z
			4: max.x, max.y, min.z
			5: min.x, max.y, min.z
			6: min.x, min.y, min.z
			7: max.x, min.y, min.z
			*/
			var position = this.geometry.attributes.position;
			var array = position.array;
			array[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;
			array[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;
			array[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;
			array[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;
			array[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;
			array[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;
			array[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;
			array[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;
			position.needsUpdate = true;
			this.geometry.computeBoundingSphere();
		};
	} )();
	BoxHelper.prototype.setFromObject = function ( object ) {
		this.object = object;
		this.update();
		return this;
	};
	BoxHelper.prototype.copy = function ( source ) {
		LineSegments.prototype.copy.call( this, source );
		this.object = source.object;
		return this;
	};
	BoxHelper.prototype.clone = function () {
		return new this.constructor().copy( this );
	};
	/**
	 * @author WestLangley / http://github.com/WestLangley
	 */
	function Box3Helper( box, color ) {
		this.type = 'Box3Helper';
		this.box = box;
		color = color || 0xffff00;
		var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
		var positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];
		var geometry = new BufferGeometry();
		geometry.setIndex( new BufferAttribute( indices, 1 ) );
		geometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
		LineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );
		this.geometry.computeBoundingSphere();
	}
	Box3Helper.prototype = Object.create( LineSegments.prototype );
	Box3Helper.prototype.constructor = Box3Helper;
	Box3Helper.prototype.updateMatrixWorld = function ( force ) {
		var box = this.box;
		if ( box.isEmpty() ) return;
		box.getCenter( this.position );
		box.getSize( this.scale );
		this.scale.multiplyScalar( 0.5 );
		Object3D.prototype.updateMatrixWorld.call( this, force );
	};
	/**
	 * @author WestLangley / http://github.com/WestLangley
	 */
	function PlaneHelper( plane, size, hex ) {
		this.type = 'PlaneHelper';
		this.plane = plane;
		this.size = ( size === undefined ) ? 1 : size;
		var color = ( hex !== undefined ) ? hex : 0xffff00;
		var positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];
		var geometry = new BufferGeometry();
		geometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
		geometry.computeBoundingSphere();
		Line.call( this, geometry, new LineBasicMaterial( { color: color } ) );
		var positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];
		var geometry2 = new BufferGeometry();
		geometry2.addAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );
		geometry2.computeBoundingSphere();
		this.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false } ) ) );
	}
	PlaneHelper.prototype = Object.create( Line.prototype );
	PlaneHelper.prototype.constructor = PlaneHelper;
	PlaneHelper.prototype.updateMatrixWorld = function ( force ) {
		var scale = - this.plane.constant;
		if ( Math.abs( scale ) < 1e-8 ) scale = 1e-8; // sign does not matter
		this.scale.set( 0.5 * this.size, 0.5 * this.size, scale );
		this.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here
		this.lookAt( this.plane.normal );
		Object3D.prototype.updateMatrixWorld.call( this, force );
	};
	/**
	 * @author WestLangley / http://github.com/WestLangley
	 * @author zz85 / http://github.com/zz85
	 * @author bhouston / http://clara.io
	 *
	 * Creates an arrow for visualizing directions
	 *
	 * Parameters:
	 *  dir - Vector3
	 *  origin - Vector3
	 *  length - Number
	 *  color - color in hex value
	 *  headLength - Number
	 *  headWidth - Number
	 */
	var lineGeometry, coneGeometry;
	function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {
		Object3D.call( this );
		if ( dir === undefined ) dir = new Vector3( 0, 0, 1 );
		if ( origin === undefined ) origin = new Vector3( 0, 0, 0 );
		if ( length === undefined ) length = 1;
		if ( color === undefined ) color = 0xffff00;
		if ( headLength === undefined ) headLength = 0.2 * length;
		if ( headWidth === undefined ) headWidth = 0.2 * headLength;
		if ( lineGeometry === undefined ) {
			lineGeometry = new BufferGeometry();
			lineGeometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );
			coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );
			coneGeometry.translate( 0, - 0.5, 0 );
		}
		this.position.copy( origin );
		this.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );
		this.line.matrixAutoUpdate = false;
		this.add( this.line );
		this.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );
		this.cone.matrixAutoUpdate = false;
		this.add( this.cone );
		this.setDirection( dir );
		this.setLength( length, headLength, headWidth );
	}
	ArrowHelper.prototype = Object.create( Object3D.prototype );
	ArrowHelper.prototype.constructor = ArrowHelper;
	ArrowHelper.prototype.setDirection = ( function () {
		var axis = new Vector3();
		var radians;
		return function setDirection( dir ) {
			if ( dir.y > 0.99999 ) {
				this.quaternion.set( 0, 0, 0, 1 );
			} else if ( dir.y < - 0.99999 ) {
				this.quaternion.set( 1, 0, 0, 0 );
			} else {
				axis.set( dir.z, 0, - dir.x ).normalize();
				radians = Math.acos( dir.y );
				this.quaternion.setFromAxisAngle( axis, radians );
			}
		};
	}() );
	ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {
		if ( headLength === undefined ) headLength = 0.2 * length;
		if ( headWidth === undefined ) headWidth = 0.2 * headLength;
		this.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );
		this.line.updateMatrix();
		this.cone.scale.set( headWidth, headLength, headWidth );
		this.cone.position.y = length;
		this.cone.updateMatrix();
	};
	ArrowHelper.prototype.setColor = function ( color ) {
		this.line.material.color.set( color );
		this.cone.material.color.set( color );
	};
	ArrowHelper.prototype.copy = function ( source ) {
		Object3D.prototype.copy.call( this, source, false );
		this.line.copy( source.line );
		this.cone.copy( source.cone );
		return this;
	};
	ArrowHelper.prototype.clone = function () {
		return new this.constructor().copy( this );
	};
	/**
	 * @author sroucheray / http://sroucheray.org/
	 * @author mrdoob / http://mrdoob.com/
	 */
	function AxesHelper( size ) {
		size = size || 1;
		var vertices = [
			0, 0, 0,	size, 0, 0,
			0, 0, 0,	0, size, 0,
			0, 0, 0,	0, 0, size
		];
		var colors = [
			1, 0, 0,	1, 0.6, 0,
			0, 1, 0,	0.6, 1, 0,
			0, 0, 1,	0, 0.6, 1
		];
		var geometry = new BufferGeometry();
		geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
		var material = new LineBasicMaterial( { vertexColors: VertexColors } );
		LineSegments.call( this, geometry, material );
	}
	AxesHelper.prototype = Object.create( LineSegments.prototype );
	AxesHelper.prototype.constructor = AxesHelper;
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	function Face4( a, b, c, d, normal, color, materialIndex ) {
		console.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );
		return new Face3( a, b, c, normal, color, materialIndex );
	}
	var LineStrip = 0;
	var LinePieces = 1;
	function MeshFaceMaterial( materials ) {
		console.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );
		return materials;
	}
	function MultiMaterial( materials ) {
		if ( materials === undefined ) materials = [];
		console.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );
		materials.isMultiMaterial = true;
		materials.materials = materials;
		materials.clone = function () {
			return materials.slice();
		};
		return materials;
	}
	function PointCloud( geometry, material ) {
		console.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );
		return new Points( geometry, material );
	}
	function Particle( material ) {
		console.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );
		return new Sprite( material );
	}
	function ParticleSystem( geometry, material ) {
		console.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );
		return new Points( geometry, material );
	}
	function PointCloudMaterial( parameters ) {
		console.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );
		return new PointsMaterial( parameters );
	}
	function ParticleBasicMaterial( parameters ) {
		console.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );
		return new PointsMaterial( parameters );
	}
	function ParticleSystemMaterial( parameters ) {
		console.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );
		return new PointsMaterial( parameters );
	}
	function Vertex( x, y, z ) {
		console.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );
		return new Vector3( x, y, z );
	}
	function DynamicBufferAttribute( array, itemSize ) {
		console.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );
		return new BufferAttribute( array, itemSize ).setDynamic( true );
	}
	function Int8Attribute( array, itemSize ) {
		console.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );
		return new Int8BufferAttribute( array, itemSize );
	}
	function Uint8Attribute( array, itemSize ) {
		console.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );
		return new Uint8BufferAttribute( array, itemSize );
	}
	function Uint8ClampedAttribute( array, itemSize ) {
		console.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );
		return new Uint8ClampedBufferAttribute( array, itemSize );
	}
	function Int16Attribute( array, itemSize ) {
		console.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );
		return new Int16BufferAttribute( array, itemSize );
	}
	function Uint16Attribute( array, itemSize ) {
		console.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );
		return new Uint16BufferAttribute( array, itemSize );
	}
	function Int32Attribute( array, itemSize ) {
		console.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );
		return new Int32BufferAttribute( array, itemSize );
	}
	function Uint32Attribute( array, itemSize ) {
		console.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );
		return new Uint32BufferAttribute( array, itemSize );
	}
	function Float32Attribute( array, itemSize ) {
		console.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );
		return new Float32BufferAttribute( array, itemSize );
	}
	function Float64Attribute( array, itemSize ) {
		console.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );
		return new Float64BufferAttribute( array, itemSize );
	}
	Curve.create = function ( construct, getPoint ) {
		console.log( 'THREE.Curve.create() has been deprecated' );
		construct.prototype = Object.create( Curve.prototype );
		construct.prototype.constructor = construct;
		construct.prototype.getPoint = getPoint;
		return construct;
	};
	Object.assign( CurvePath.prototype, {
		createPointsGeometry: function ( divisions ) {
			console.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );
			var pts = this.getPoints( divisions );
			return this.createGeometry( pts );
		},
		createSpacedPointsGeometry: function ( divisions ) {
			console.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );
			var pts = this.getSpacedPoints( divisions );
			return this.createGeometry( pts );
		},
		createGeometry: function ( points ) {
			console.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );
			var geometry = new Geometry();
			for ( var i = 0, l = points.length; i < l; i ++ ) {
				var point = points[ i ];
				geometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );
			}
			return geometry;
		}
	} );
	Object.assign( Path.prototype, {
		fromPoints: function ( points ) {
			console.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );
			this.setFromPoints( points );
		}
	} );
	function ClosedSplineCurve3( points ) {
		console.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );
		CatmullRomCurve3.call( this, points );
		this.type = 'catmullrom';
		this.closed = true;
	}
	ClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );
	function SplineCurve3( points ) {
		console.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );
		CatmullRomCurve3.call( this, points );
		this.type = 'catmullrom';
	}
	SplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );
	function Spline( points ) {
		console.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );
		CatmullRomCurve3.call( this, points );
		this.type = 'catmullrom';
	}
	Spline.prototype = Object.create( CatmullRomCurve3.prototype );
	Object.assign( Spline.prototype, {
		initFromArray: function ( /* a */ ) {
			console.error( 'THREE.Spline: .initFromArray() has been removed.' );
		},
		getControlPointsArray: function ( /* optionalTarget */ ) {
			console.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );
		},
		reparametrizeByArcLength: function ( /* samplingCoef */ ) {
			console.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );
		}
	} );
	function AxisHelper( size ) {
		console.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );
		return new AxesHelper( size );
	}
	function BoundingBoxHelper( object, color ) {
		console.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );
		return new BoxHelper( object, color );
	}
	function EdgesHelper( object, hex ) {
		console.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );
		return new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );
	}
	GridHelper.prototype.setColors = function () {
		console.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );
	};
	SkeletonHelper.prototype.update = function () {
		console.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );
	};
	function WireframeHelper( object, hex ) {
		console.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );
		return new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );
	}
	Object.assign( Loader.prototype, {
		extractUrlBase: function ( url ) {
			console.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );
			return LoaderUtils.extractUrlBase( url );
		}
	} );
	function XHRLoader( manager ) {
		console.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );
		return new FileLoader( manager );
	}
	function BinaryTextureLoader( manager ) {
		console.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );
		return new DataTextureLoader( manager );
	}
	Object.assign( ObjectLoader.prototype, {
		setTexturePath: function ( value ) {
			console.warn( 'THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().' );
			return this.setResourcePath( value );
		}
	} );
	Object.assign( Box2.prototype, {
		center: function ( optionalTarget ) {
			console.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );
			return this.getCenter( optionalTarget );
		},
		empty: function () {
			console.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );
			return this.isEmpty();
		},
		isIntersectionBox: function ( box ) {
			console.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );
			return this.intersectsBox( box );
		},
		size: function ( optionalTarget ) {
			console.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );
			return this.getSize( optionalTarget );
		}
	} );
	Object.assign( Box3.prototype, {
		center: function ( optionalTarget ) {
			console.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );
			return this.getCenter( optionalTarget );
		},
		empty: function () {
			console.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );
			return this.isEmpty();
		},
		isIntersectionBox: function ( box ) {
			console.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );
			return this.intersectsBox( box );
		},
		isIntersectionSphere: function ( sphere ) {
			console.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
			return this.intersectsSphere( sphere );
		},
		size: function ( optionalTarget ) {
			console.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );
			return this.getSize( optionalTarget );
		}
	} );
	Line3.prototype.center = function ( optionalTarget ) {
		console.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );
		return this.getCenter( optionalTarget );
	};
	Object.assign( _Math, {
		random16: function () {
			console.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );
			return Math.random();
		},
		nearestPowerOfTwo: function ( value ) {
			console.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );
			return _Math.floorPowerOfTwo( value );
		},
		nextPowerOfTwo: function ( value ) {
			console.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );
			return _Math.ceilPowerOfTwo( value );
		}
	} );
	Object.assign( Matrix3.prototype, {
		flattenToArrayOffset: function ( array, offset ) {
			console.warn( "THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
			return this.toArray( array, offset );
		},
		multiplyVector3: function ( vector ) {
			console.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );
			return vector.applyMatrix3( this );
		},
		multiplyVector3Array: function ( /* a */ ) {
			console.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );
		},
		applyToBuffer: function ( buffer /*, offset, length */ ) {
			console.warn( 'THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );
			return this.applyToBufferAttribute( buffer );
		},
		applyToVector3Array: function ( /* array, offset, length */ ) {
			console.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );
		}
	} );
	Object.assign( Matrix4.prototype, {
		extractPosition: function ( m ) {
			console.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );
			return this.copyPosition( m );
		},
		flattenToArrayOffset: function ( array, offset ) {
			console.warn( "THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
			return this.toArray( array, offset );
		},
		getPosition: function () {
			var v1;
			return function getPosition() {
				if ( v1 === undefined ) v1 = new Vector3();
				console.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );
				return v1.setFromMatrixColumn( this, 3 );
			};
		}(),
		setRotationFromQuaternion: function ( q ) {
			console.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );
			return this.makeRotationFromQuaternion( q );
		},
		multiplyToArray: function () {
			console.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );
		},
		multiplyVector3: function ( vector ) {
			console.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
			return vector.applyMatrix4( this );
		},
		multiplyVector4: function ( vector ) {
			console.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
			return vector.applyMatrix4( this );
		},
		multiplyVector3Array: function ( /* a */ ) {
			console.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );
		},
		rotateAxis: function ( v ) {
			console.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );
			v.transformDirection( this );
		},
		crossVector: function ( vector ) {
			console.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
			return vector.applyMatrix4( this );
		},
		translate: function () {
			console.error( 'THREE.Matrix4: .translate() has been removed.' );
		},
		rotateX: function () {
			console.error( 'THREE.Matrix4: .rotateX() has been removed.' );
		},
		rotateY: function () {
			console.error( 'THREE.Matrix4: .rotateY() has been removed.' );
		},
		rotateZ: function () {
			console.error( 'THREE.Matrix4: .rotateZ() has been removed.' );
		},
		rotateByAxis: function () {
			console.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );
		},
		applyToBuffer: function ( buffer /*, offset, length */ ) {
			console.warn( 'THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );
			return this.applyToBufferAttribute( buffer );
		},
		applyToVector3Array: function ( /* array, offset, length */ ) {
			console.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );
		},
		makeFrustum: function ( left, right, bottom, top, near, far ) {
			console.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );
			return this.makePerspective( left, right, top, bottom, near, far );
		}
	} );
	Plane.prototype.isIntersectionLine = function ( line ) {
		console.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );
		return this.intersectsLine( line );
	};
	Quaternion.prototype.multiplyVector3 = function ( vector ) {
		console.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );
		return vector.applyQuaternion( this );
	};
	Object.assign( Ray.prototype, {
		isIntersectionBox: function ( box ) {
			console.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );
			return this.intersectsBox( box );
		},
		isIntersectionPlane: function ( plane ) {
			console.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );
			return this.intersectsPlane( plane );
		},
		isIntersectionSphere: function ( sphere ) {
			console.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
			return this.intersectsSphere( sphere );
		}
	} );
	Object.assign( Triangle.prototype, {
		area: function () {
			console.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );
			return this.getArea();
		},
		barycoordFromPoint: function ( point, target ) {
			console.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );
			return this.getBarycoord( point, target );
		},
		midpoint: function ( target ) {
			console.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );
			return this.getMidpoint( target );
		},
		normal: function ( target ) {
			console.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );
			return this.getNormal( target );
		},
		plane: function ( target ) {
			console.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );
			return this.getPlane( target );
		}
	} );
	Object.assign( Triangle, {
		barycoordFromPoint: function ( point, a, b, c, target ) {
			console.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );
			return Triangle.getBarycoord( point, a, b, c, target );
		},
		normal: function ( a, b, c, target ) {
			console.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );
			return Triangle.getNormal( a, b, c, target );
		}
	} );
	Object.assign( Shape.prototype, {
		extractAllPoints: function ( divisions ) {
			console.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );
			return this.extractPoints( divisions );
		},
		extrude: function ( options ) {
			console.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );
			return new ExtrudeGeometry( this, options );
		},
		makeGeometry: function ( options ) {
			console.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );
			return new ShapeGeometry( this, options );
		}
	} );
	Object.assign( Vector2.prototype, {
		fromAttribute: function ( attribute, index, offset ) {
			console.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );
			return this.fromBufferAttribute( attribute, index, offset );
		},
		distanceToManhattan: function ( v ) {
			console.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );
			return this.manhattanDistanceTo( v );
		},
		lengthManhattan: function () {
			console.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );
			return this.manhattanLength();
		}
	} );
	Object.assign( Vector3.prototype, {
		setEulerFromRotationMatrix: function () {
			console.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );
		},
		setEulerFromQuaternion: function () {
			console.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );
		},
		getPositionFromMatrix: function ( m ) {
			console.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );
			return this.setFromMatrixPosition( m );
		},
		getScaleFromMatrix: function ( m ) {
			console.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );
			return this.setFromMatrixScale( m );
		},
		getColumnFromMatrix: function ( index, matrix ) {
			console.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );
			return this.setFromMatrixColumn( matrix, index );
		},
		applyProjection: function ( m ) {
			console.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );
			return this.applyMatrix4( m );
		},
		fromAttribute: function ( attribute, index, offset ) {
			console.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );
			return this.fromBufferAttribute( attribute, index, offset );
		},
		distanceToManhattan: function ( v ) {
			console.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );
			return this.manhattanDistanceTo( v );
		},
		lengthManhattan: function () {
			console.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );
			return this.manhattanLength();
		}
	} );
	Object.assign( Vector4.prototype, {
		fromAttribute: function ( attribute, index, offset ) {
			console.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );
			return this.fromBufferAttribute( attribute, index, offset );
		},
		lengthManhattan: function () {
			console.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );
			return this.manhattanLength();
		}
	} );
	Object.assign( Geometry.prototype, {
		computeTangents: function () {
			console.error( 'THREE.Geometry: .computeTangents() has been removed.' );
		},
		computeLineDistances: function () {
			console.error( 'THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.' );
		}
	} );
	Object.assign( Object3D.prototype, {
		getChildByName: function ( name ) {
			console.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );
			return this.getObjectByName( name );
		},
		renderDepth: function () {
			console.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );
		},
		translate: function ( distance, axis ) {
			console.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );
			return this.translateOnAxis( axis, distance );
		},
		getWorldRotation: function () {
			console.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );
		}
	} );
	Object.defineProperties( Object3D.prototype, {
		eulerOrder: {
			get: function () {
				console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
				return this.rotation.order;
			},
			set: function ( value ) {
				console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
				this.rotation.order = value;
			}
		},
		useQuaternion: {
			get: function () {
				console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );
			},
			set: function () {
				console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );
			}
		}
	} );
	Object.defineProperties( LOD.prototype, {
		objects: {
			get: function () {
				console.warn( 'THREE.LOD: .objects has been renamed to .levels.' );
				return this.levels;
			}
		}
	} );
	Object.defineProperty( Skeleton.prototype, 'useVertexTexture', {
		get: function () {
			console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );
		},
		set: function () {
			console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );
		}
	} );
	SkinnedMesh.prototype.initBones = function () {
		console.error( 'THREE.SkinnedMesh: initBones() has been removed.' );
	};
	Object.defineProperty( Curve.prototype, '__arcLengthDivisions', {
		get: function () {
			console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
			return this.arcLengthDivisions;
		},
		set: function ( value ) {
			console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
			this.arcLengthDivisions = value;
		}
	} );
	PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {
		console.warn( "THREE.PerspectiveCamera.setLens is deprecated. " +
				"Use .setFocalLength and .filmGauge for a photographic setup." );
		if ( filmGauge !== undefined ) this.filmGauge = filmGauge;
		this.setFocalLength( focalLength );
	};
	Object.defineProperties( Light.prototype, {
		onlyShadow: {
			set: function () {
				console.warn( 'THREE.Light: .onlyShadow has been removed.' );
			}
		},
		shadowCameraFov: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );
				this.shadow.camera.fov = value;
			}
		},
		shadowCameraLeft: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );
				this.shadow.camera.left = value;
			}
		},
		shadowCameraRight: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );
				this.shadow.camera.right = value;
			}
		},
		shadowCameraTop: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );
				this.shadow.camera.top = value;
			}
		},
		shadowCameraBottom: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );
				this.shadow.camera.bottom = value;
			}
		},
		shadowCameraNear: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );
				this.shadow.camera.near = value;
			}
		},
		shadowCameraFar: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );
				this.shadow.camera.far = value;
			}
		},
		shadowCameraVisible: {
			set: function () {
				console.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );
			}
		},
		shadowBias: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );
				this.shadow.bias = value;
			}
		},
		shadowDarkness: {
			set: function () {
				console.warn( 'THREE.Light: .shadowDarkness has been removed.' );
			}
		},
		shadowMapWidth: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );
				this.shadow.mapSize.width = value;
			}
		},
		shadowMapHeight: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );
				this.shadow.mapSize.height = value;
			}
		}
	} );
	Object.defineProperties( BufferAttribute.prototype, {
		length: {
			get: function () {
				console.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );
				return this.array.length;
			}
		},
		copyIndicesArray: function ( /* indices */ ) {
			console.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );
		}
	} );
	Object.assign( BufferGeometry.prototype, {
		addIndex: function ( index ) {
			console.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );
			this.setIndex( index );
		},
		addDrawCall: function ( start, count, indexOffset ) {
			if ( indexOffset !== undefined ) {
				console.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );
			}
			console.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );
			this.addGroup( start, count );
		},
		clearDrawCalls: function () {
			console.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );
			this.clearGroups();
		},
		computeTangents: function () {
			console.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );
		},
		computeOffsets: function () {
			console.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );
		}
	} );
	Object.defineProperties( BufferGeometry.prototype, {
		drawcalls: {
			get: function () {
				console.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );
				return this.groups;
			}
		},
		offsets: {
			get: function () {
				console.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );
				return this.groups;
			}
		}
	} );
	Object.assign( ExtrudeBufferGeometry.prototype, {
		getArrays: function () {
			console.error( 'THREE.ExtrudeBufferGeometry: .getArrays() has been removed.' );
		},
		addShapeList: function () {
			console.error( 'THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.' );
		},
		addShape: function () {
			console.error( 'THREE.ExtrudeBufferGeometry: .addShape() has been removed.' );
		}
	} );
	Object.defineProperties( Uniform.prototype, {
		dynamic: {
			set: function () {
				console.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );
			}
		},
		onUpdate: {
			value: function () {
				console.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );
				return this;
			}
		}
	} );
	Object.defineProperties( Material.prototype, {
		wrapAround: {
			get: function () {
				console.warn( 'THREE.Material: .wrapAround has been removed.' );
			},
			set: function () {
				console.warn( 'THREE.Material: .wrapAround has been removed.' );
			}
		},
		overdraw: {
			get: function () {
				console.warn( 'THREE.Material: .overdraw has been removed.' );
			},
			set: function () {
				console.warn( 'THREE.Material: .overdraw has been removed.' );
			}
		},
		wrapRGB: {
			get: function () {
				console.warn( 'THREE.Material: .wrapRGB has been removed.' );
				return new Color();
			}
		},
		shading: {
			get: function () {
				console.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
			},
			set: function ( value ) {
				console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
				this.flatShading = ( value === FlatShading );
			}
		}
	} );
	Object.defineProperties( MeshPhongMaterial.prototype, {
		metal: {
			get: function () {
				console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );
				return false;
			},
			set: function () {
				console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );
			}
		}
	} );
	Object.defineProperties( ShaderMaterial.prototype, {
		derivatives: {
			get: function () {
				console.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
				return this.extensions.derivatives;
			},
			set: function ( value ) {
				console.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
				this.extensions.derivatives = value;
			}
		}
	} );
	Object.assign( WebGLRenderer.prototype, {
		clearTarget: function ( renderTarget, color, depth, stencil ) {
			console.warn( 'THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.' );
			this.setRenderTarget( renderTarget );
			this.clear( color, depth, stencil );
		},
		animate: function ( callback ) {
			console.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );
			this.setAnimationLoop( callback );
		},
		getCurrentRenderTarget: function () {
			console.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );
			return this.getRenderTarget();
		},
		getMaxAnisotropy: function () {
			console.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );
			return this.capabilities.getMaxAnisotropy();
		},
		getPrecision: function () {
			console.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );
			return this.capabilities.precision;
		},
		resetGLState: function () {
			console.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );
			return this.state.reset();
		},
		supportsFloatTextures: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).' );
			return this.extensions.get( 'OES_texture_float' );
		},
		supportsHalfFloatTextures: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).' );
			return this.extensions.get( 'OES_texture_half_float' );
		},
		supportsStandardDerivatives: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).' );
			return this.extensions.get( 'OES_standard_derivatives' );
		},
		supportsCompressedTextureS3TC: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).' );
			return this.extensions.get( 'WEBGL_compressed_texture_s3tc' );
		},
		supportsCompressedTexturePVRTC: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).' );
			return this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );
		},
		supportsBlendMinMax: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).' );
			return this.extensions.get( 'EXT_blend_minmax' );
		},
		supportsVertexTextures: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );
			return this.capabilities.vertexTextures;
		},
		supportsInstancedArrays: function () {
			console.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).' );
			return this.extensions.get( 'ANGLE_instanced_arrays' );
		},
		enableScissorTest: function ( boolean ) {
			console.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );
			this.setScissorTest( boolean );
		},
		initMaterial: function () {
			console.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );
		},
		addPrePlugin: function () {
			console.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );
		},
		addPostPlugin: function () {
			console.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );
		},
		updateShadowMap: function () {
			console.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );
		},
		setFaceCulling: function () {
			console.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );
		},
		allocTextureUnit: function () {
			console.warn( 'THREE.WebGLRenderer: .allocTextureUnit() has been removed.' );
		},
		setTexture: function () {
			console.warn( 'THREE.WebGLRenderer: .setTexture() has been removed.' );
		},
		setTexture2D: function () {
			console.warn( 'THREE.WebGLRenderer: .setTexture2D() has been removed.' );
		},
		setTextureCube: function () {
			console.warn( 'THREE.WebGLRenderer: .setTextureCube() has been removed.' );
		},
		getActiveMipMapLevel: function () {
			console.warn( 'THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().' );
			return this.getActiveMipmapLevel();
		}
	} );
	Object.defineProperties( WebGLRenderer.prototype, {
		shadowMapEnabled: {
			get: function () {
				return this.shadowMap.enabled;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );
				this.shadowMap.enabled = value;
			}
		},
		shadowMapType: {
			get: function () {
				return this.shadowMap.type;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );
				this.shadowMap.type = value;
			}
		},
		shadowMapCullFace: {
			get: function () {
				console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );
				return undefined;
			},
			set: function ( /* value */ ) {
				console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );
			}
		},
		context: {
			get: function () {
				console.warn( 'THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.' );
				return this.getContext();
			}
		}
	} );
	Object.defineProperties( WebGLShadowMap.prototype, {
		cullFace: {
			get: function () {
				console.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );
				return undefined;
			},
			set: function ( /* cullFace */ ) {
				console.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );
			}
		},
		renderReverseSided: {
			get: function () {
				console.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );
				return undefined;
			},
			set: function () {
				console.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );
			}
		},
		renderSingleSided: {
			get: function () {
				console.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );
				return undefined;
			},
			set: function () {
				console.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );
			}
		}
	} );
	Object.defineProperties( WebGLRenderTargetCube.prototype, {
		activeCubeFace: {
			set: function ( /* value */ ) {
				console.warn( 'THREE.WebGLRenderTargetCube: .activeCubeFace has been removed. It is now the second parameter of WebGLRenderer.setRenderTarget().' );
			}
		},
		activeMipMapLevel: {
			set: function ( /* value */ ) {
				console.warn( 'THREE.WebGLRenderTargetCube: .activeMipMapLevel has been removed. It is now the third parameter of WebGLRenderer.setRenderTarget().' );
			}
		}
	} );
	Object.defineProperties( WebGLRenderTarget.prototype, {
		wrapS: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
				return this.texture.wrapS;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
				this.texture.wrapS = value;
			}
		},
		wrapT: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
				return this.texture.wrapT;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
				this.texture.wrapT = value;
			}
		},
		magFilter: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
				return this.texture.magFilter;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
				this.texture.magFilter = value;
			}
		},
		minFilter: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
				return this.texture.minFilter;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
				this.texture.minFilter = value;
			}
		},
		anisotropy: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
				return this.texture.anisotropy;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
				this.texture.anisotropy = value;
			}
		},
		offset: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
				return this.texture.offset;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
				this.texture.offset = value;
			}
		},
		repeat: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
				return this.texture.repeat;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
				this.texture.repeat = value;
			}
		},
		format: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
				return this.texture.format;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
				this.texture.format = value;
			}
		},
		type: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
				return this.texture.type;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
				this.texture.type = value;
			}
		},
		generateMipmaps: {
			get: function () {
				console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
				return this.texture.generateMipmaps;
			},
			set: function ( value ) {
				console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
				this.texture.generateMipmaps = value;
			}
		}
	} );
	Object.defineProperties( WebVRManager.prototype, {
		standing: {
			set: function ( /* value */ ) {
				console.warn( 'THREE.WebVRManager: .standing has been removed.' );
			}
		},
		userHeight: {
			set: function ( /* value */ ) {
				console.warn( 'THREE.WebVRManager: .userHeight has been removed.' );
			}
		}
	} );
	Audio.prototype.load = function ( file ) {
		console.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );
		var scope = this;
		var audioLoader = new AudioLoader();
		audioLoader.load( file, function ( buffer ) {
			scope.setBuffer( buffer );
		} );
		return this;
	};
	AudioAnalyser.prototype.getData = function () {
		console.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );
		return this.getFrequencyData();
	};
	CubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {
		console.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );
		return this.update( renderer, scene );
	};
	var GeometryUtils = {
		merge: function ( geometry1, geometry2, materialIndexOffset ) {
			console.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );
			var matrix;
			if ( geometry2.isMesh ) {
				geometry2.matrixAutoUpdate && geometry2.updateMatrix();
				matrix = geometry2.matrix;
				geometry2 = geometry2.geometry;
			}
			geometry1.merge( geometry2, matrix, materialIndexOffset );
		},
		center: function ( geometry ) {
			console.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );
			return geometry.center();
		}
	};
	ImageUtils.crossOrigin = undefined;
	ImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {
		console.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );
		var loader = new TextureLoader();
		loader.setCrossOrigin( this.crossOrigin );
		var texture = loader.load( url, onLoad, undefined, onError );
		if ( mapping ) texture.mapping = mapping;
		return texture;
	};
	ImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {
		console.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );
		var loader = new CubeTextureLoader();
		loader.setCrossOrigin( this.crossOrigin );
		var texture = loader.load( urls, onLoad, undefined, onError );
		if ( mapping ) texture.mapping = mapping;
		return texture;
	};
	ImageUtils.loadCompressedTexture = function () {
		console.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );
	};
	ImageUtils.loadCompressedTextureCube = function () {
		console.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );
	};
	function CanvasRenderer() {
		console.error( 'THREE.CanvasRenderer has been removed' );
	}
	function JSONLoader() {
		console.error( 'THREE.JSONLoader has been removed.' );
	}
	var SceneUtils = {
		createMultiMaterialObject: function ( /* geometry, materials */ ) {
			console.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );
		},
		detach: function ( /* child, parent, scene */ ) {
			console.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );
		},
		attach: function ( /* child, scene, parent */ ) {
			console.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );
		}
	};
	function LensFlare() {
		console.error( 'THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js' );
	}
	exports.ACESFilmicToneMapping = ACESFilmicToneMapping;
	exports.AddEquation = AddEquation;
	exports.AddOperation = AddOperation;
	exports.AdditiveBlending = AdditiveBlending;
	exports.AlphaFormat = AlphaFormat;
	exports.AlwaysDepth = AlwaysDepth;
	exports.AlwaysStencilFunc = AlwaysStencilFunc;
	exports.AmbientLight = AmbientLight;
	exports.AmbientLightProbe = AmbientLightProbe;
	exports.AnimationClip = AnimationClip;
	exports.AnimationLoader = AnimationLoader;
	exports.AnimationMixer = AnimationMixer;
	exports.AnimationObjectGroup = AnimationObjectGroup;
	exports.AnimationUtils = AnimationUtils;
	exports.ArcCurve = ArcCurve;
	exports.ArrayCamera = ArrayCamera;
	exports.ArrowHelper = ArrowHelper;
	exports.Audio = Audio;
	exports.AudioAnalyser = AudioAnalyser;
	exports.AudioContext = AudioContext;
	exports.AudioListener = AudioListener;
	exports.AudioLoader = AudioLoader;
	exports.AxesHelper = AxesHelper;
	exports.AxisHelper = AxisHelper;
	exports.BackSide = BackSide;
	exports.BasicDepthPacking = BasicDepthPacking;
	exports.BasicShadowMap = BasicShadowMap;
	exports.BinaryTextureLoader = BinaryTextureLoader;
	exports.Bone = Bone;
	exports.BooleanKeyframeTrack = BooleanKeyframeTrack;
	exports.BoundingBoxHelper = BoundingBoxHelper;
	exports.Box2 = Box2;
	exports.Box3 = Box3;
	exports.Box3Helper = Box3Helper;
	exports.BoxBufferGeometry = BoxBufferGeometry;
	exports.BoxGeometry = BoxGeometry;
	exports.BoxHelper = BoxHelper;
	exports.BufferAttribute = BufferAttribute;
	exports.BufferGeometry = BufferGeometry;
	exports.BufferGeometryLoader = BufferGeometryLoader;
	exports.ByteType = ByteType;
	exports.Cache = Cache;
	exports.Camera = Camera;
	exports.CameraHelper = CameraHelper;
	exports.CanvasRenderer = CanvasRenderer;
	exports.CanvasTexture = CanvasTexture;
	exports.CatmullRomCurve3 = CatmullRomCurve3;
	exports.CineonToneMapping = CineonToneMapping;
	exports.CircleBufferGeometry = CircleBufferGeometry;
	exports.CircleGeometry = CircleGeometry;
	exports.ClampToEdgeWrapping = ClampToEdgeWrapping;
	exports.Clock = Clock;
	exports.ClosedSplineCurve3 = ClosedSplineCurve3;
	exports.Color = Color;
	exports.ColorKeyframeTrack = ColorKeyframeTrack;
	exports.CompressedTexture = CompressedTexture;
	exports.CompressedTextureLoader = CompressedTextureLoader;
	exports.ConeBufferGeometry = ConeBufferGeometry;
	exports.ConeGeometry = ConeGeometry;
	exports.CubeCamera = CubeCamera;
	exports.CubeGeometry = BoxGeometry;
	exports.CubeReflectionMapping = CubeReflectionMapping;
	exports.CubeRefractionMapping = CubeRefractionMapping;
	exports.CubeTexture = CubeTexture;
	exports.CubeTextureLoader = CubeTextureLoader;
	exports.CubeUVReflectionMapping = CubeUVReflectionMapping;
	exports.CubeUVRefractionMapping = CubeUVRefractionMapping;
	exports.CubicBezierCurve = CubicBezierCurve;
	exports.CubicBezierCurve3 = CubicBezierCurve3;
	exports.CubicInterpolant = CubicInterpolant;
	exports.CullFaceBack = CullFaceBack;
	exports.CullFaceFront = CullFaceFront;
	exports.CullFaceFrontBack = CullFaceFrontBack;
	exports.CullFaceNone = CullFaceNone;
	exports.Curve = Curve;
	exports.CurvePath = CurvePath;
	exports.CustomBlending = CustomBlending;
	exports.CylinderBufferGeometry = CylinderBufferGeometry;
	exports.CylinderGeometry = CylinderGeometry;
	exports.Cylindrical = Cylindrical;
	exports.DataTexture = DataTexture;
	exports.DataTexture2DArray = DataTexture2DArray;
	exports.DataTexture3D = DataTexture3D;
	exports.DataTextureLoader = DataTextureLoader;
	exports.DecrementStencilOp = DecrementStencilOp;
	exports.DecrementWrapStencilOp = DecrementWrapStencilOp;
	exports.DefaultLoadingManager = DefaultLoadingManager;
	exports.DepthFormat = DepthFormat;
	exports.DepthStencilFormat = DepthStencilFormat;
	exports.DepthTexture = DepthTexture;
	exports.DirectionalLight = DirectionalLight;
	exports.DirectionalLightHelper = DirectionalLightHelper;
	exports.DirectionalLightShadow = DirectionalLightShadow;
	exports.DiscreteInterpolant = DiscreteInterpolant;
	exports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;
	exports.DodecahedronGeometry = DodecahedronGeometry;
	exports.DoubleSide = DoubleSide;
	exports.DstAlphaFactor = DstAlphaFactor;
	exports.DstColorFactor = DstColorFactor;
	exports.DynamicBufferAttribute = DynamicBufferAttribute;
	exports.EdgesGeometry = EdgesGeometry;
	exports.EdgesHelper = EdgesHelper;
	exports.EllipseCurve = EllipseCurve;
	exports.EqualDepth = EqualDepth;
	exports.EqualStencilFunc = EqualStencilFunc;
	exports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;
	exports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;
	exports.Euler = Euler;
	exports.EventDispatcher = EventDispatcher;
	exports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;
	exports.ExtrudeGeometry = ExtrudeGeometry;
	exports.Face3 = Face3;
	exports.Face4 = Face4;
	exports.FaceColors = FaceColors;
	exports.FaceNormalsHelper = FaceNormalsHelper;
	exports.FileLoader = FileLoader;
	exports.FlatShading = FlatShading;
	exports.Float32Attribute = Float32Attribute;
	exports.Float32BufferAttribute = Float32BufferAttribute;
	exports.Float64Attribute = Float64Attribute;
	exports.Float64BufferAttribute = Float64BufferAttribute;
	exports.FloatType = FloatType;
	exports.Fog = Fog;
	exports.FogExp2 = FogExp2;
	exports.Font = Font;
	exports.FontLoader = FontLoader;
	exports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;
	exports.FrontFaceDirectionCW = FrontFaceDirectionCW;
	exports.FrontSide = FrontSide;
	exports.Frustum = Frustum;
	exports.GammaEncoding = GammaEncoding;
	exports.Geometry = Geometry;
	exports.GeometryUtils = GeometryUtils;
	exports.GreaterDepth = GreaterDepth;
	exports.GreaterEqualDepth = GreaterEqualDepth;
	exports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;
	exports.GreaterStencilFunc = GreaterStencilFunc;
	exports.GridHelper = GridHelper;
	exports.Group = Group;
	exports.HalfFloatType = HalfFloatType;
	exports.HemisphereLight = HemisphereLight;
	exports.HemisphereLightHelper = HemisphereLightHelper;
	exports.HemisphereLightProbe = HemisphereLightProbe;
	exports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;
	exports.IcosahedronGeometry = IcosahedronGeometry;
	exports.ImageBitmapLoader = ImageBitmapLoader;
	exports.ImageLoader = ImageLoader;
	exports.ImageUtils = ImageUtils;
	exports.ImmediateRenderObject = ImmediateRenderObject;
	exports.IncrementStencilOp = IncrementStencilOp;
	exports.IncrementWrapStencilOp = IncrementWrapStencilOp;
	exports.InstancedBufferAttribute = InstancedBufferAttribute;
	exports.InstancedBufferGeometry = InstancedBufferGeometry;
	exports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;
	exports.Int16Attribute = Int16Attribute;
	exports.Int16BufferAttribute = Int16BufferAttribute;
	exports.Int32Attribute = Int32Attribute;
	exports.Int32BufferAttribute = Int32BufferAttribute;
	exports.Int8Attribute = Int8Attribute;
	exports.Int8BufferAttribute = Int8BufferAttribute;
	exports.IntType = IntType;
	exports.InterleavedBuffer = InterleavedBuffer;
	exports.InterleavedBufferAttribute = InterleavedBufferAttribute;
	exports.Interpolant = Interpolant;
	exports.InterpolateDiscrete = InterpolateDiscrete;
	exports.InterpolateLinear = InterpolateLinear;
	exports.InterpolateSmooth = InterpolateSmooth;
	exports.InvertStencilOp = InvertStencilOp;
	exports.JSONLoader = JSONLoader;
	exports.KeepStencilOp = KeepStencilOp;
	exports.KeyframeTrack = KeyframeTrack;
	exports.LOD = LOD;
	exports.LatheBufferGeometry = LatheBufferGeometry;
	exports.LatheGeometry = LatheGeometry;
	exports.Layers = Layers;
	exports.LensFlare = LensFlare;
	exports.LessDepth = LessDepth;
	exports.LessEqualDepth = LessEqualDepth;
	exports.LessEqualStencilFunc = LessEqualStencilFunc;
	exports.LessStencilFunc = LessStencilFunc;
	exports.Light = Light;
	exports.LightProbe = LightProbe;
	exports.LightProbeHelper = LightProbeHelper;
	exports.LightShadow = LightShadow;
	exports.Line = Line;
	exports.Line3 = Line3;
	exports.LineBasicMaterial = LineBasicMaterial;
	exports.LineCurve = LineCurve;
	exports.LineCurve3 = LineCurve3;
	exports.LineDashedMaterial = LineDashedMaterial;
	exports.LineLoop = LineLoop;
	exports.LinePieces = LinePieces;
	exports.LineSegments = LineSegments;
	exports.LineStrip = LineStrip;
	exports.LinearEncoding = LinearEncoding;
	exports.LinearFilter = LinearFilter;
	exports.LinearInterpolant = LinearInterpolant;
	exports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;
	exports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;
	exports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;
	exports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;
	exports.LinearToneMapping = LinearToneMapping;
	exports.Loader = Loader;
	exports.LoaderUtils = LoaderUtils;
	exports.LoadingManager = LoadingManager;
	exports.LogLuvEncoding = LogLuvEncoding;
	exports.LoopOnce = LoopOnce;
	exports.LoopPingPong = LoopPingPong;
	exports.LoopRepeat = LoopRepeat;
	exports.LuminanceAlphaFormat = LuminanceAlphaFormat;
	exports.LuminanceFormat = LuminanceFormat;
	exports.MOUSE = MOUSE;
	exports.Material = Material;
	exports.MaterialLoader = MaterialLoader;
	exports.Math = _Math;
	exports.Matrix3 = Matrix3;
	exports.Matrix4 = Matrix4;
	exports.MaxEquation = MaxEquation;
	exports.Mesh = Mesh;
	exports.MeshBasicMaterial = MeshBasicMaterial;
	exports.MeshDepthMaterial = MeshDepthMaterial;
	exports.MeshDistanceMaterial = MeshDistanceMaterial;
	exports.MeshFaceMaterial = MeshFaceMaterial;
	exports.MeshLambertMaterial = MeshLambertMaterial;
	exports.MeshMatcapMaterial = MeshMatcapMaterial;
	exports.MeshNormalMaterial = MeshNormalMaterial;
	exports.MeshPhongMaterial = MeshPhongMaterial;
	exports.MeshPhysicalMaterial = MeshPhysicalMaterial;
	exports.MeshStandardMaterial = MeshStandardMaterial;
	exports.MeshToonMaterial = MeshToonMaterial;
	exports.MinEquation = MinEquation;
	exports.MirroredRepeatWrapping = MirroredRepeatWrapping;
	exports.MixOperation = MixOperation;
	exports.MultiMaterial = MultiMaterial;
	exports.MultiplyBlending = MultiplyBlending;
	exports.MultiplyOperation = MultiplyOperation;
	exports.NearestFilter = NearestFilter;
	exports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;
	exports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;
	exports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;
	exports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;
	exports.NeverDepth = NeverDepth;
	exports.NeverStencilFunc = NeverStencilFunc;
	exports.NoBlending = NoBlending;
	exports.NoColors = NoColors;
	exports.NoToneMapping = NoToneMapping;
	exports.NormalBlending = NormalBlending;
	exports.NotEqualDepth = NotEqualDepth;
	exports.NotEqualStencilFunc = NotEqualStencilFunc;
	exports.NumberKeyframeTrack = NumberKeyframeTrack;
	exports.Object3D = Object3D;
	exports.ObjectLoader = ObjectLoader;
	exports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;
	exports.OctahedronBufferGeometry = OctahedronBufferGeometry;
	exports.OctahedronGeometry = OctahedronGeometry;
	exports.OneFactor = OneFactor;
	exports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;
	exports.OneMinusDstColorFactor = OneMinusDstColorFactor;
	exports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;
	exports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;
	exports.OrthographicCamera = OrthographicCamera;
	exports.PCFShadowMap = PCFShadowMap;
	exports.PCFSoftShadowMap = PCFSoftShadowMap;
	exports.ParametricBufferGeometry = ParametricBufferGeometry;
	exports.ParametricGeometry = ParametricGeometry;
	exports.Particle = Particle;
	exports.ParticleBasicMaterial = ParticleBasicMaterial;
	exports.ParticleSystem = ParticleSystem;
	exports.ParticleSystemMaterial = ParticleSystemMaterial;
	exports.Path = Path;
	exports.PerspectiveCamera = PerspectiveCamera;
	exports.Plane = Plane;
	exports.PlaneBufferGeometry = PlaneBufferGeometry;
	exports.PlaneGeometry = PlaneGeometry;
	exports.PlaneHelper = PlaneHelper;
	exports.PointCloud = PointCloud;
	exports.PointCloudMaterial = PointCloudMaterial;
	exports.PointLight = PointLight;
	exports.PointLightHelper = PointLightHelper;
	exports.Points = Points;
	exports.PointsMaterial = PointsMaterial;
	exports.PolarGridHelper = PolarGridHelper;
	exports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;
	exports.PolyhedronGeometry = PolyhedronGeometry;
	exports.PositionalAudio = PositionalAudio;
	exports.PositionalAudioHelper = PositionalAudioHelper;
	exports.PropertyBinding = PropertyBinding;
	exports.PropertyMixer = PropertyMixer;
	exports.QuadraticBezierCurve = QuadraticBezierCurve;
	exports.QuadraticBezierCurve3 = QuadraticBezierCurve3;
	exports.Quaternion = Quaternion;
	exports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;
	exports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;
	exports.REVISION = REVISION;
	exports.RGBADepthPacking = RGBADepthPacking;
	exports.RGBAFormat = RGBAFormat;
	exports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;
	exports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;
	exports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;
	exports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;
	exports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;
	exports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;
	exports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;
	exports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;
	exports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;
	exports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;
	exports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;
	exports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;
	exports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;
	exports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;
	exports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;
	exports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;
	exports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;
	exports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;
	exports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;
	exports.RGBDEncoding = RGBDEncoding;
	exports.RGBEEncoding = RGBEEncoding;
	exports.RGBEFormat = RGBEFormat;
	exports.RGBFormat = RGBFormat;
	exports.RGBM16Encoding = RGBM16Encoding;
	exports.RGBM7Encoding = RGBM7Encoding;
	exports.RGB_ETC1_Format = RGB_ETC1_Format;
	exports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;
	exports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;
	exports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;
	exports.RawShaderMaterial = RawShaderMaterial;
	exports.Ray = Ray;
	exports.Raycaster = Raycaster;
	exports.RectAreaLight = RectAreaLight;
	exports.RectAreaLightHelper = RectAreaLightHelper;
	exports.RedFormat = RedFormat;
	exports.ReinhardToneMapping = ReinhardToneMapping;
	exports.RepeatWrapping = RepeatWrapping;
	exports.ReplaceStencilOp = ReplaceStencilOp;
	exports.ReverseSubtractEquation = ReverseSubtractEquation;
	exports.RingBufferGeometry = RingBufferGeometry;
	exports.RingGeometry = RingGeometry;
	exports.Scene = Scene;
	exports.SceneUtils = SceneUtils;
	exports.ShaderChunk = ShaderChunk;
	exports.ShaderLib = ShaderLib;
	exports.ShaderMaterial = ShaderMaterial;
	exports.ShadowMaterial = ShadowMaterial;
	exports.Shape = Shape;
	exports.ShapeBufferGeometry = ShapeBufferGeometry;
	exports.ShapeGeometry = ShapeGeometry;
	exports.ShapePath = ShapePath;
	exports.ShapeUtils = ShapeUtils;
	exports.ShortType = ShortType;
	exports.Skeleton = Skeleton;
	exports.SkeletonHelper = SkeletonHelper;
	exports.SkinnedMesh = SkinnedMesh;
	exports.SmoothShading = SmoothShading;
	exports.Sphere = Sphere;
	exports.SphereBufferGeometry = SphereBufferGeometry;
	exports.SphereGeometry = SphereGeometry;
	exports.Spherical = Spherical;
	exports.SphericalHarmonics3 = SphericalHarmonics3;
	exports.SphericalReflectionMapping = SphericalReflectionMapping;
	exports.Spline = Spline;
	exports.SplineCurve = SplineCurve;
	exports.SplineCurve3 = SplineCurve3;
	exports.SpotLight = SpotLight;
	exports.SpotLightHelper = SpotLightHelper;
	exports.SpotLightShadow = SpotLightShadow;
	exports.Sprite = Sprite;
	exports.SpriteMaterial = SpriteMaterial;
	exports.SrcAlphaFactor = SrcAlphaFactor;
	exports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;
	exports.SrcColorFactor = SrcColorFactor;
	exports.StereoCamera = StereoCamera;
	exports.StringKeyframeTrack = StringKeyframeTrack;
	exports.SubtractEquation = SubtractEquation;
	exports.SubtractiveBlending = SubtractiveBlending;
	exports.TOUCH = TOUCH;
	exports.TangentSpaceNormalMap = TangentSpaceNormalMap;
	exports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;
	exports.TetrahedronGeometry = TetrahedronGeometry;
	exports.TextBufferGeometry = TextBufferGeometry;
	exports.TextGeometry = TextGeometry;
	exports.Texture = Texture;
	exports.TextureLoader = TextureLoader;
	exports.TorusBufferGeometry = TorusBufferGeometry;
	exports.TorusGeometry = TorusGeometry;
	exports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;
	exports.TorusKnotGeometry = TorusKnotGeometry;
	exports.Triangle = Triangle;
	exports.TriangleFanDrawMode = TriangleFanDrawMode;
	exports.TriangleStripDrawMode = TriangleStripDrawMode;
	exports.TrianglesDrawMode = TrianglesDrawMode;
	exports.TubeBufferGeometry = TubeBufferGeometry;
	exports.TubeGeometry = TubeGeometry;
	exports.UVMapping = UVMapping;
	exports.Uint16Attribute = Uint16Attribute;
	exports.Uint16BufferAttribute = Uint16BufferAttribute;
	exports.Uint32Attribute = Uint32Attribute;
	exports.Uint32BufferAttribute = Uint32BufferAttribute;
	exports.Uint8Attribute = Uint8Attribute;
	exports.Uint8BufferAttribute = Uint8BufferAttribute;
	exports.Uint8ClampedAttribute = Uint8ClampedAttribute;
	exports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;
	exports.Uncharted2ToneMapping = Uncharted2ToneMapping;
	exports.Uniform = Uniform;
	exports.UniformsLib = UniformsLib;
	exports.UniformsUtils = UniformsUtils;
	exports.UnsignedByteType = UnsignedByteType;
	exports.UnsignedInt248Type = UnsignedInt248Type;
	exports.UnsignedIntType = UnsignedIntType;
	exports.UnsignedShort4444Type = UnsignedShort4444Type;
	exports.UnsignedShort5551Type = UnsignedShort5551Type;
	exports.UnsignedShort565Type = UnsignedShort565Type;
	exports.UnsignedShortType = UnsignedShortType;
	exports.Vector2 = Vector2;
	exports.Vector3 = Vector3;
	exports.Vector4 = Vector4;
	exports.VectorKeyframeTrack = VectorKeyframeTrack;
	exports.Vertex = Vertex;
	exports.VertexColors = VertexColors;
	exports.VertexNormalsHelper = VertexNormalsHelper;
	exports.VideoTexture = VideoTexture;
	exports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;
	exports.WebGLRenderTarget = WebGLRenderTarget;
	exports.WebGLRenderTargetCube = WebGLRenderTargetCube;
	exports.WebGLRenderer = WebGLRenderer;
	exports.WebGLUtils = WebGLUtils;
	exports.WireframeGeometry = WireframeGeometry;
	exports.WireframeHelper = WireframeHelper;
	exports.WrapAroundEnding = WrapAroundEnding;
	exports.XHRLoader = XHRLoader;
	exports.ZeroCurvatureEnding = ZeroCurvatureEnding;
	exports.ZeroFactor = ZeroFactor;
	exports.ZeroSlopeEnding = ZeroSlopeEnding;
	exports.ZeroStencilOp = ZeroStencilOp;
	exports.sRGBEncoding = sRGBEncoding;
	Object.defineProperty(exports, '__esModule', { value: true });
}));
/**
 * @author Eberhard Graether / http://egraether.com/
 * @author Mark Lundin 	/ http://mark-lundin.com
 * @author Simone Manini / http://daron1337.github.io
 * @author Luca Antiga 	/ http://lantiga.github.io
 */
THREE.TrackballControls = function ( object, domElement ) {
	var _this = this;
	var STATE = { NONE: - 1, ROTATE: 0, ZOOM: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_ZOOM_PAN: 4 };
	this.object = object;
	this.domElement = ( domElement !== undefined ) ? domElement : document;
	this.enabled = true;
	this.screen = { left: 0, top: 0, width: 0, height: 0 };
	this.rotateSpeed = 1.0;
	this.zoomSpeed = 1.2;
	this.panSpeed = 0.3;
	this.noRotate = false;
	this.noZoom = false;
	this.noPan = false;
	this.staticMoving = false;
	this.dynamicDampingFactor = 0.2;
	this.minDistance = 0;
	this.maxDistance = Infinity;
	this.keys = [ 65 /*A*/, 83 /*S*/, 68 /*D*/ ];
	this.mouseButtons = { LEFT: THREE.MOUSE.ROTATE, MIDDLE: THREE.MOUSE.ZOOM, RIGHT: THREE.MOUSE.PAN };
	this.target = new THREE.Vector3();
	var EPS = 0.000001;
	var lastPosition = new THREE.Vector3();
	var _state = STATE.NONE,
		_keyState = STATE.NONE,
		_eye = new THREE.Vector3(),
		_movePrev = new THREE.Vector2(),
		_moveCurr = new THREE.Vector2(),
		_lastAxis = new THREE.Vector3(),
		_lastAngle = 0,
		_zoomStart = new THREE.Vector2(),
		_zoomEnd = new THREE.Vector2(),
		_touchZoomDistanceStart = 0,
		_touchZoomDistanceEnd = 0,
		_panStart = new THREE.Vector2(),
		_panEnd = new THREE.Vector2();
	this.target0 = this.target.clone();
	this.position0 = this.object.position.clone();
	this.up0 = this.object.up.clone();
	var changeEvent = { type: 'change' };
	var startEvent = { type: 'start' };
	var endEvent = { type: 'end' };
	this.handleResize = function () {
		if ( this.domElement === document ) {
			this.screen.left = 0;
			this.screen.top = 0;
			this.screen.width = window.innerWidth;
			this.screen.height = window.innerHeight;
		} else {
			var box = this.domElement.getBoundingClientRect();
			var d = this.domElement.ownerDocument.documentElement;
			this.screen.left = box.left + window.pageXOffset - d.clientLeft;
			this.screen.top = box.top + window.pageYOffset - d.clientTop;
			this.screen.width = box.width;
			this.screen.height = box.height;
		}
	};
	var getMouseOnScreen = ( function () {
		var vector = new THREE.Vector2();
		return function getMouseOnScreen( pageX, pageY ) {
			vector.set(
				( pageX - _this.screen.left ) / _this.screen.width,
				( pageY - _this.screen.top ) / _this.screen.height
			);
			return vector;
		};
	}() );
	var getMouseOnCircle = ( function () {
		var vector = new THREE.Vector2();
		return function getMouseOnCircle( pageX, pageY ) {
			vector.set(
				( ( pageX - _this.screen.width * 0.5 - _this.screen.left ) / ( _this.screen.width * 0.5 ) ),
				( ( _this.screen.height + 2 * ( _this.screen.top - pageY ) ) / _this.screen.width ) // screen.width intentional
			);
			return vector;
		};
	}() );
	this.rotateCamera = ( function () {
		var axis = new THREE.Vector3(),
			quaternion = new THREE.Quaternion(),
			eyeDirection = new THREE.Vector3(),
			objectUpDirection = new THREE.Vector3(),
			objectSidewaysDirection = new THREE.Vector3(),
			moveDirection = new THREE.Vector3(),
			angle;
		return function rotateCamera() {
			moveDirection.set( _moveCurr.x - _movePrev.x, _moveCurr.y - _movePrev.y, 0 );
			angle = moveDirection.length();
			if ( angle ) {
				_eye.copy( _this.object.position ).sub( _this.target );
				eyeDirection.copy( _eye ).normalize();
				objectUpDirection.copy( _this.object.up ).normalize();
				objectSidewaysDirection.crossVectors( objectUpDirection, eyeDirection ).normalize();
				objectUpDirection.setLength( _moveCurr.y - _movePrev.y );
				objectSidewaysDirection.setLength( _moveCurr.x - _movePrev.x );
				moveDirection.copy( objectUpDirection.add( objectSidewaysDirection ) );
				axis.crossVectors( moveDirection, _eye ).normalize();
				angle *= _this.rotateSpeed;
				quaternion.setFromAxisAngle( axis, angle );
				_eye.applyQuaternion( quaternion );
				_this.object.up.applyQuaternion( quaternion );
				_lastAxis.copy( axis );
				_lastAngle = angle;
			} else if ( ! _this.staticMoving && _lastAngle ) {
				_lastAngle *= Math.sqrt( 1.0 - _this.dynamicDampingFactor );
				_eye.copy( _this.object.position ).sub( _this.target );
				quaternion.setFromAxisAngle( _lastAxis, _lastAngle );
				_eye.applyQuaternion( quaternion );
				_this.object.up.applyQuaternion( quaternion );
			}
			_movePrev.copy( _moveCurr );
		};
	}() );
	this.zoomCamera = function () {
		var factor;
		if ( _state === STATE.TOUCH_ZOOM_PAN ) {
			factor = _touchZoomDistanceStart / _touchZoomDistanceEnd;
			_touchZoomDistanceStart = _touchZoomDistanceEnd;
			_eye.multiplyScalar( factor );
		} else {
			factor = 1.0 + ( _zoomEnd.y - _zoomStart.y ) * _this.zoomSpeed;
			if ( factor !== 1.0 && factor > 0.0 ) {
				_eye.multiplyScalar( factor );
			}
			if ( _this.staticMoving ) {
				_zoomStart.copy( _zoomEnd );
			} else {
				_zoomStart.y += ( _zoomEnd.y - _zoomStart.y ) * this.dynamicDampingFactor;
			}
		}
	};
	this.panCamera = ( function () {
		var mouseChange = new THREE.Vector2(),
			objectUp = new THREE.Vector3(),
			pan = new THREE.Vector3();
		return function panCamera() {
			mouseChange.copy( _panEnd ).sub( _panStart );
			if ( mouseChange.lengthSq() ) {
				mouseChange.multiplyScalar( _eye.length() * _this.panSpeed );
				pan.copy( _eye ).cross( _this.object.up ).setLength( mouseChange.x );
				pan.add( objectUp.copy( _this.object.up ).setLength( mouseChange.y ) );
				_this.object.position.add( pan );
				_this.target.add( pan );
				if ( _this.staticMoving ) {
					_panStart.copy( _panEnd );
				} else {
					_panStart.add( mouseChange.subVectors( _panEnd, _panStart ).multiplyScalar( _this.dynamicDampingFactor ) );
				}
			}
		};
	}() );
	this.checkDistances = function () {
		if ( ! _this.noZoom || ! _this.noPan ) {
			if ( _eye.lengthSq() > _this.maxDistance * _this.maxDistance ) {
				_this.object.position.addVectors( _this.target, _eye.setLength( _this.maxDistance ) );
				_zoomStart.copy( _zoomEnd );
			}
			if ( _eye.lengthSq() < _this.minDistance * _this.minDistance ) {
				_this.object.position.addVectors( _this.target, _eye.setLength( _this.minDistance ) );
				_zoomStart.copy( _zoomEnd );
			}
		}
	};
	this.update = function () {
		_eye.subVectors( _this.object.position, _this.target );
		if ( ! _this.noRotate ) {
			_this.rotateCamera();
		}
		if ( ! _this.noZoom ) {
			_this.zoomCamera();
		}
		if ( ! _this.noPan ) {
			_this.panCamera();
		}
		_this.object.position.addVectors( _this.target, _eye );
		_this.checkDistances();
		_this.object.lookAt( _this.target );
		if ( lastPosition.distanceToSquared( _this.object.position ) > EPS ) {
			_this.dispatchEvent( changeEvent );
			lastPosition.copy( _this.object.position );
		}
	};
	this.reset = function () {
		_state = STATE.NONE;
		_keyState = STATE.NONE;
		_this.target.copy( _this.target0 );
		_this.object.position.copy( _this.position0 );
		_this.object.up.copy( _this.up0 );
		_eye.subVectors( _this.object.position, _this.target );
		_this.object.lookAt( _this.target );
		_this.dispatchEvent( changeEvent );
		lastPosition.copy( _this.object.position );
	};
	function keydown( event ) {
		if ( _this.enabled === false ) return;
		window.removeEventListener( 'keydown', keydown );
		if ( _keyState !== STATE.NONE ) {
			return;
		} else if ( event.keyCode === _this.keys[ STATE.ROTATE ] && ! _this.noRotate ) {
			_keyState = STATE.ROTATE;
		} else if ( event.keyCode === _this.keys[ STATE.ZOOM ] && ! _this.noZoom ) {
			_keyState = STATE.ZOOM;
		} else if ( event.keyCode === _this.keys[ STATE.PAN ] && ! _this.noPan ) {
			_keyState = STATE.PAN;
		}
	}
	function keyup() {
		if ( _this.enabled === false ) return;
		_keyState = STATE.NONE;
		window.addEventListener( 'keydown', keydown, false );
	}
	function mousedown( event ) {
		if ( _this.enabled === false ) return;
		event.preventDefault();
		event.stopPropagation();
		if ( _state === STATE.NONE ) {
			switch ( event.button ) {
				case _this.mouseButtons.LEFT:
					_state = STATE.ROTATE;
					break;
				case _this.mouseButtons.MIDDLE:
					_state = STATE.ZOOM;
					break;
				case _this.mouseButtons.RIGHT:
					_state = STATE.PAN;
					break;
				default:
					_state = STATE.NONE;
			}
		}
		var state = ( _keyState !== STATE.NONE ) ? _keyState : _state;
		if ( state === STATE.ROTATE && ! _this.noRotate ) {
			_moveCurr.copy( getMouseOnCircle( event.pageX, event.pageY ) );
			_movePrev.copy( _moveCurr );
		} else if ( state === STATE.ZOOM && ! _this.noZoom ) {
			_zoomStart.copy( getMouseOnScreen( event.pageX, event.pageY ) );
			_zoomEnd.copy( _zoomStart );
		} else if ( state === STATE.PAN && ! _this.noPan ) {
			_panStart.copy( getMouseOnScreen( event.pageX, event.pageY ) );
			_panEnd.copy( _panStart );
		}
		document.addEventListener( 'mousemove', mousemove, false );
		document.addEventListener( 'mouseup', mouseup, false );
		_this.dispatchEvent( startEvent );
	}
	function mousemove( event ) {
		if ( _this.enabled === false ) return;
		event.preventDefault();
		event.stopPropagation();
		var state = ( _keyState !== STATE.NONE ) ? _keyState : _state;
		if ( state === STATE.ROTATE && ! _this.noRotate ) {
			_movePrev.copy( _moveCurr );
			_moveCurr.copy( getMouseOnCircle( event.pageX, event.pageY ) );
		} else if ( state === STATE.ZOOM && ! _this.noZoom ) {
			_zoomEnd.copy( getMouseOnScreen( event.pageX, event.pageY ) );
		} else if ( state === STATE.PAN && ! _this.noPan ) {
			_panEnd.copy( getMouseOnScreen( event.pageX, event.pageY ) );
		}
	}
	function mouseup( event ) {
		if ( _this.enabled === false ) return;
		event.preventDefault();
		event.stopPropagation();
		_state = STATE.NONE;
		document.removeEventListener( 'mousemove', mousemove );
		document.removeEventListener( 'mouseup', mouseup );
		_this.dispatchEvent( endEvent );
	}
	function mousewheel( event ) {
		if ( _this.enabled === false ) return;
		if ( _this.noZoom === true ) return;
		event.preventDefault();
		event.stopPropagation();
		switch ( event.deltaMode ) {
			case 2:
				_zoomStart.y -= event.deltaY * 0.025;
				break;
			case 1:
				_zoomStart.y -= event.deltaY * 0.01;
				break;
			default:
				_zoomStart.y -= event.deltaY * 0.00025;
				break;
		}
		_this.dispatchEvent( startEvent );
		_this.dispatchEvent( endEvent );
	}
	function touchstart( event ) {
		if ( _this.enabled === false ) return;
		event.preventDefault();
		switch ( event.touches.length ) {
			case 1:
				_state = STATE.TOUCH_ROTATE;
				_moveCurr.copy( getMouseOnCircle( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY ) );
				_movePrev.copy( _moveCurr );
				break;
			default: // 2 or more
				_state = STATE.TOUCH_ZOOM_PAN;
				var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
				var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;
				_touchZoomDistanceEnd = _touchZoomDistanceStart = Math.sqrt( dx * dx + dy * dy );
				var x = ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX ) / 2;
				var y = ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY ) / 2;
				_panStart.copy( getMouseOnScreen( x, y ) );
				_panEnd.copy( _panStart );
				break;
		}
		_this.dispatchEvent( startEvent );
	}
	function touchmove( event ) {
		if ( _this.enabled === false ) return;
		event.preventDefault();
		event.stopPropagation();
		switch ( event.touches.length ) {
			case 1:
				_movePrev.copy( _moveCurr );
				_moveCurr.copy( getMouseOnCircle( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY ) );
				break;
			default: // 2 or more
				var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
				var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;
				_touchZoomDistanceEnd = Math.sqrt( dx * dx + dy * dy );
				var x = ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX ) / 2;
				var y = ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY ) / 2;
				_panEnd.copy( getMouseOnScreen( x, y ) );
				break;
		}
	}
	function touchend( event ) {
		if ( _this.enabled === false ) return;
		switch ( event.touches.length ) {
			case 0:
				_state = STATE.NONE;
				break;
			case 1:
				_state = STATE.TOUCH_ROTATE;
				_moveCurr.copy( getMouseOnCircle( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY ) );
				_movePrev.copy( _moveCurr );
				break;
		}
		_this.dispatchEvent( endEvent );
	}
	function contextmenu( event ) {
		if ( _this.enabled === false ) return;
		event.preventDefault();
	}
	this.dispose = function () {
		this.domElement.removeEventListener( 'contextmenu', contextmenu, false );
		this.domElement.removeEventListener( 'mousedown', mousedown, false );
		this.domElement.removeEventListener( 'wheel', mousewheel, false );
		this.domElement.removeEventListener( 'touchstart', touchstart, false );
		this.domElement.removeEventListener( 'touchend', touchend, false );
		this.domElement.removeEventListener( 'touchmove', touchmove, false );
		document.removeEventListener( 'mousemove', mousemove, false );
		document.removeEventListener( 'mouseup', mouseup, false );
		window.removeEventListener( 'keydown', keydown, false );
		window.removeEventListener( 'keyup', keyup, false );
	};
	this.domElement.addEventListener( 'contextmenu', contextmenu, false );
	this.domElement.addEventListener( 'mousedown', mousedown, false );
	this.domElement.addEventListener( 'wheel', mousewheel, false );
	this.domElement.addEventListener( 'touchstart', touchstart, false );
	this.domElement.addEventListener( 'touchend', touchend, false );
	this.domElement.addEventListener( 'touchmove', touchmove, false );
	window.addEventListener( 'keydown', keydown, false );
	window.addEventListener( 'keyup', keyup, false );
	this.handleResize();
	this.update();
};
THREE.TrackballControls.prototype = Object.create( THREE.EventDispatcher.prototype );
THREE.TrackballControls.prototype.constructor = THREE.TrackballControls;
/**
 * Based on http://www.emagix.net/academic/mscs-project/item/camera-sync-with-css3-and-webgl-threejs
 * @author mrdoob / http://mrdoob.com/
 * @author yomotsu / https://yomotsu.net/
 */
THREE.CSS3DObject = function ( element ) {
	THREE.Object3D.call( this );
	this.element = element;
	this.element.style.position = 'absolute';
	this.addEventListener( 'removed', function () {
		if ( this.element.parentNode !== null ) {
			this.element.parentNode.removeChild( this.element );
		}
	} );
};
THREE.CSS3DObject.prototype = Object.create( THREE.Object3D.prototype );
THREE.CSS3DObject.prototype.constructor = THREE.CSS3DObject;
THREE.CSS3DSprite = function ( element ) {
	THREE.CSS3DObject.call( this, element );
};
THREE.CSS3DSprite.prototype = Object.create( THREE.CSS3DObject.prototype );
THREE.CSS3DSprite.prototype.constructor = THREE.CSS3DSprite;
THREE.CSS3DRenderer = function () {
	console.log( 'THREE.CSS3DRenderer', THREE.REVISION );
	var _width, _height;
	var _widthHalf, _heightHalf;
	var matrix = new THREE.Matrix4();
	var cache = {
		camera: { fov: 0, style: '' },
		objects: new WeakMap()
	};
	var domElement = document.createElement( 'div' );
	domElement.style.overflow = 'hidden';
	this.domElement = domElement;
	var cameraElement = document.createElement( 'div' );
	cameraElement.style.WebkitTransformStyle = 'preserve-3d';
	cameraElement.style.transformStyle = 'preserve-3d';
	domElement.appendChild( cameraElement );
	var isIE = /Trident/i.test( navigator.userAgent );
	this.getSize = function () {
		return {
			width: _width,
			height: _height
		};
	};
	this.setSize = function ( width, height ) {
		_width = width;
		_height = height;
		_widthHalf = _width / 2;
		_heightHalf = _height / 2;
		domElement.style.width = width + 'px';
		domElement.style.height = height + 'px';
		cameraElement.style.width = width + 'px';
		cameraElement.style.height = height + 'px';
	};
	function epsilon( value ) {
		return Math.abs( value ) < 1e-10 ? 0 : value;
	}
	function getCameraCSSMatrix( matrix ) {
		var elements = matrix.elements;
		return 'matrix3d(' +
			epsilon( elements[ 0 ] ) + ',' +
			epsilon( - elements[ 1 ] ) + ',' +
			epsilon( elements[ 2 ] ) + ',' +
			epsilon( elements[ 3 ] ) + ',' +
			epsilon( elements[ 4 ] ) + ',' +
			epsilon( - elements[ 5 ] ) + ',' +
			epsilon( elements[ 6 ] ) + ',' +
			epsilon( elements[ 7 ] ) + ',' +
			epsilon( elements[ 8 ] ) + ',' +
			epsilon( - elements[ 9 ] ) + ',' +
			epsilon( elements[ 10 ] ) + ',' +
			epsilon( elements[ 11 ] ) + ',' +
			epsilon( elements[ 12 ] ) + ',' +
			epsilon( - elements[ 13 ] ) + ',' +
			epsilon( elements[ 14 ] ) + ',' +
			epsilon( elements[ 15 ] ) +
		')';
	}
	function getObjectCSSMatrix( matrix, cameraCSSMatrix ) {
		var elements = matrix.elements;
		var matrix3d = 'matrix3d(' +
			epsilon( elements[ 0 ] ) + ',' +
			epsilon( elements[ 1 ] ) + ',' +
			epsilon( elements[ 2 ] ) + ',' +
			epsilon( elements[ 3 ] ) + ',' +
			epsilon( - elements[ 4 ] ) + ',' +
			epsilon( - elements[ 5 ] ) + ',' +
			epsilon( - elements[ 6 ] ) + ',' +
			epsilon( - elements[ 7 ] ) + ',' +
			epsilon( elements[ 8 ] ) + ',' +
			epsilon( elements[ 9 ] ) + ',' +
			epsilon( elements[ 10 ] ) + ',' +
			epsilon( elements[ 11 ] ) + ',' +
			epsilon( elements[ 12 ] ) + ',' +
			epsilon( elements[ 13 ] ) + ',' +
			epsilon( elements[ 14 ] ) + ',' +
			epsilon( elements[ 15 ] ) +
		')';
		if ( isIE ) {
			return 'translate(-50%,-50%)' +
				'translate(' + _widthHalf + 'px,' + _heightHalf + 'px)' +
				cameraCSSMatrix +
				matrix3d;
		}
		return 'translate(-50%,-50%)' + matrix3d;
	}
	function renderObject( object, camera, cameraCSSMatrix ) {
		if ( object instanceof THREE.CSS3DObject ) {
			var style;
			if ( object instanceof THREE.CSS3DSprite ) {
				matrix.copy( camera.matrixWorldInverse );
				matrix.transpose();
				matrix.copyPosition( object.matrixWorld );
				matrix.scale( object.scale );
				matrix.elements[ 3 ] = 0;
				matrix.elements[ 7 ] = 0;
				matrix.elements[ 11 ] = 0;
				matrix.elements[ 15 ] = 1;
				style = getObjectCSSMatrix( matrix, cameraCSSMatrix );
			} else {
				style = getObjectCSSMatrix( object.matrixWorld, cameraCSSMatrix );
			}
			var element = object.element;
			var cachedObject = cache.objects.get( object );
			if ( cachedObject === undefined || cachedObject.style !== style ) {
				element.style.WebkitTransform = style;
				element.style.transform = style;
				var objectData = { style: style };
				if ( isIE ) {
					objectData.distanceToCameraSquared = getDistanceToSquared( camera, object );
				}
				cache.objects.set( object, objectData );
			}
			if ( element.parentNode !== cameraElement ) {
				cameraElement.appendChild( element );
			}
		}
		for ( var i = 0, l = object.children.length; i < l; i ++ ) {
			renderObject( object.children[ i ], camera, cameraCSSMatrix );
		}
	}
	var getDistanceToSquared = function () {
		var a = new THREE.Vector3();
		var b = new THREE.Vector3();
		return function ( object1, object2 ) {
			a.setFromMatrixPosition( object1.matrixWorld );
			b.setFromMatrixPosition( object2.matrixWorld );
			return a.distanceToSquared( b );
		};
	}();
	function filterAndFlatten( scene ) {
		var result = [];
		scene.traverse( function ( object ) {
			if ( object instanceof THREE.CSS3DObject ) result.push( object );
		} );
		return result;
	}
	function zOrder( scene ) {
		var sorted = filterAndFlatten( scene ).sort( function ( a, b ) {
			var distanceA = cache.objects.get( a ).distanceToCameraSquared;
			var distanceB = cache.objects.get( b ).distanceToCameraSquared;
			return distanceA - distanceB;
		} );
		var zMax = sorted.length;
		for ( var i = 0, l = sorted.length; i < l; i ++ ) {
			sorted[ i ].element.style.zIndex = zMax - i;
		}
	}
	this.render = function ( scene, camera ) {
		var fov = camera.projectionMatrix.elements[ 5 ] * _heightHalf;
		if ( cache.camera.fov !== fov ) {
			if ( camera.isPerspectiveCamera ) {
				domElement.style.WebkitPerspective = fov + 'px';
				domElement.style.perspective = fov + 'px';
			}
			cache.camera.fov = fov;
		}
		scene.updateMatrixWorld();
		if ( camera.parent === null ) camera.updateMatrixWorld();
		if ( camera.isOrthographicCamera ) {
			var tx = - ( camera.right + camera.left ) / 2;
			var ty = ( camera.top + camera.bottom ) / 2;
		}
		var cameraCSSMatrix = camera.isOrthographicCamera ?
			'scale(' + fov + ')' + 'translate(' + epsilon( tx ) + 'px,' + epsilon( ty ) + 'px)' + getCameraCSSMatrix( camera.matrixWorldInverse ) :
			'translateZ(' + fov + 'px)' + getCameraCSSMatrix( camera.matrixWorldInverse );
		var style = cameraCSSMatrix +
			'translate(' + _widthHalf + 'px,' + _heightHalf + 'px)';
		if ( cache.camera.style !== style && ! isIE ) {
			cameraElement.style.WebkitTransform = style;
			cameraElement.style.transform = style;
			cache.camera.style = style;
		}
		renderObject( scene, camera, cameraCSSMatrix );
		if ( isIE ) {
			zOrder( scene );
		}
	};
};
/**
 * @author alteredq / http://alteredqualia.com/
 */
THREE.EffectComposer = function ( renderer, renderTarget ) {
	this.renderer = renderer;
	if ( renderTarget === undefined ) {
		var parameters = {
			minFilter: THREE.LinearFilter,
			magFilter: THREE.LinearFilter,
			format: THREE.RGBAFormat,
			stencilBuffer: false
		};
		var size = renderer.getSize( new THREE.Vector2() );
		this._pixelRatio = renderer.getPixelRatio();
		this._width = size.width;
		this._height = size.height;
		renderTarget = new THREE.WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, parameters );
		renderTarget.texture.name = 'EffectComposer.rt1';
	} else {
		this._pixelRatio = 1;
		this._width = renderTarget.width;
		this._height = renderTarget.height;
	}
	this.renderTarget1 = renderTarget;
	this.renderTarget2 = renderTarget.clone();
	this.renderTarget2.texture.name = 'EffectComposer.rt2';
	this.writeBuffer = this.renderTarget1;
	this.readBuffer = this.renderTarget2;
	this.renderToScreen = true;
	this.passes = [];
	if ( THREE.CopyShader === undefined ) {
		console.error( 'THREE.EffectComposer relies on THREE.CopyShader' );
	}
	if ( THREE.ShaderPass === undefined ) {
		console.error( 'THREE.EffectComposer relies on THREE.ShaderPass' );
	}
	this.copyPass = new THREE.ShaderPass( THREE.CopyShader );
	this.clock = new THREE.Clock();
};
Object.assign( THREE.EffectComposer.prototype, {
	swapBuffers: function () {
		var tmp = this.readBuffer;
		this.readBuffer = this.writeBuffer;
		this.writeBuffer = tmp;
	},
	addPass: function ( pass ) {
		this.passes.push( pass );
		pass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );
	},
	insertPass: function ( pass, index ) {
		this.passes.splice( index, 0, pass );
	},
	isLastEnabledPass: function ( passIndex ) {
		for ( var i = passIndex + 1; i < this.passes.length; i ++ ) {
			if ( this.passes[ i ].enabled ) {
				return false;
			}
		}
		return true;
	},
	render: function ( deltaTime ) {
		if ( deltaTime === undefined ) {
			deltaTime = this.clock.getDelta();
		}
		var currentRenderTarget = this.renderer.getRenderTarget();
		var maskActive = false;
		var pass, i, il = this.passes.length;
		for ( i = 0; i < il; i ++ ) {
			pass = this.passes[ i ];
			if ( pass.enabled === false ) continue;
			pass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );
			pass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );
			if ( pass.needsSwap ) {
				if ( maskActive ) {
					var context = this.renderer.getContext();
					var stencil = this.renderer.state.buffers.stencil;
					stencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );
					this.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );
					stencil.setFunc( context.EQUAL, 1, 0xffffffff );
				}
				this.swapBuffers();
			}
			if ( THREE.MaskPass !== undefined ) {
				if ( pass instanceof THREE.MaskPass ) {
					maskActive = true;
				} else if ( pass instanceof THREE.ClearMaskPass ) {
					maskActive = false;
				}
			}
		}
		this.renderer.setRenderTarget( currentRenderTarget );
	},
	reset: function ( renderTarget ) {
		if ( renderTarget === undefined ) {
			var size = this.renderer.getSize( new THREE.Vector2() );
			this._pixelRatio = this.renderer.getPixelRatio();
			this._width = size.width;
			this._height = size.height;
			renderTarget = this.renderTarget1.clone();
			renderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );
		}
		this.renderTarget1.dispose();
		this.renderTarget2.dispose();
		this.renderTarget1 = renderTarget;
		this.renderTarget2 = renderTarget.clone();
		this.writeBuffer = this.renderTarget1;
		this.readBuffer = this.renderTarget2;
	},
	setSize: function ( width, height ) {
		this._width = width;
		this._height = height;
		var effectiveWidth = this._width * this._pixelRatio;
		var effectiveHeight = this._height * this._pixelRatio;
		this.renderTarget1.setSize( effectiveWidth, effectiveHeight );
		this.renderTarget2.setSize( effectiveWidth, effectiveHeight );
		for ( var i = 0; i < this.passes.length; i ++ ) {
			this.passes[ i ].setSize( effectiveWidth, effectiveHeight );
		}
	},
	setPixelRatio: function ( pixelRatio ) {
		this._pixelRatio = pixelRatio;
		this.setSize( this._width, this._height );
	}
} );
THREE.Pass = function () {
	this.enabled = true;
	this.needsSwap = true;
	this.clear = false;
	this.renderToScreen = false;
};
Object.assign( THREE.Pass.prototype, {
	setSize: function ( /* width, height */ ) {},
	render: function ( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {
		console.error( 'THREE.Pass: .render() must be implemented in derived pass.' );
	}
} );
THREE.Pass.FullScreenQuad = ( function () {
	var camera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );
	var geometry = new THREE.PlaneBufferGeometry( 2, 2 );
	var FullScreenQuad = function ( material ) {
		this._mesh = new THREE.Mesh( geometry, material );
	};
	Object.defineProperty( FullScreenQuad.prototype, 'material', {
		get: function () {
			return this._mesh.material;
		},
		set: function ( value ) {
			this._mesh.material = value;
		}
	} );
	Object.assign( FullScreenQuad.prototype, {
		render: function ( renderer ) {
			renderer.render( this._mesh, camera );
		}
	} );
	return FullScreenQuad;
} )();
/**
 * @author alteredq / http://alteredqualia.com/
 */
THREE.MaskPass = function ( scene, camera ) {
	THREE.Pass.call( this );
	this.scene = scene;
	this.camera = camera;
	this.clear = true;
	this.needsSwap = false;
	this.inverse = false;
};
THREE.MaskPass.prototype = Object.assign( Object.create( THREE.Pass.prototype ), {
	constructor: THREE.MaskPass,
	render: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {
		var context = renderer.getContext();
		var state = renderer.state;
		state.buffers.color.setMask( false );
		state.buffers.depth.setMask( false );
		state.buffers.color.setLocked( true );
		state.buffers.depth.setLocked( true );
		var writeValue, clearValue;
		if ( this.inverse ) {
			writeValue = 0;
			clearValue = 1;
		} else {
			writeValue = 1;
			clearValue = 0;
		}
		state.buffers.stencil.setTest( true );
		state.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );
		state.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );
		state.buffers.stencil.setClear( clearValue );
		renderer.setRenderTarget( readBuffer );
		if ( this.clear ) renderer.clear();
		renderer.render( this.scene, this.camera );
		renderer.setRenderTarget( writeBuffer );
		if ( this.clear ) renderer.clear();
		renderer.render( this.scene, this.camera );
		state.buffers.color.setLocked( false );
		state.buffers.depth.setLocked( false );
		state.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1
		state.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );
	}
} );
THREE.ClearMaskPass = function () {
	THREE.Pass.call( this );
	this.needsSwap = false;
};
THREE.ClearMaskPass.prototype = Object.create( THREE.Pass.prototype );
Object.assign( THREE.ClearMaskPass.prototype, {
	render: function ( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {
		renderer.state.buffers.stencil.setTest( false );
	}
} );
/**
 * @author alteredq / http://alteredqualia.com/
 */
THREE.RenderPass = function ( scene, camera, overrideMaterial, clearColor, clearAlpha ) {
	THREE.Pass.call( this );
	this.scene = scene;
	this.camera = camera;
	this.overrideMaterial = overrideMaterial;
	this.clearColor = clearColor;
	this.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;
	this.clear = true;
	this.clearDepth = false;
	this.needsSwap = false;
};
THREE.RenderPass.prototype = Object.assign( Object.create( THREE.Pass.prototype ), {
	constructor: THREE.RenderPass,
	render: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {
		var oldAutoClear = renderer.autoClear;
		renderer.autoClear = false;
		this.scene.overrideMaterial = this.overrideMaterial;
		var oldClearColor, oldClearAlpha;
		if ( this.clearColor ) {
			oldClearColor = renderer.getClearColor().getHex();
			oldClearAlpha = renderer.getClearAlpha();
			renderer.setClearColor( this.clearColor, this.clearAlpha );
		}
		if ( this.clearDepth ) {
			renderer.clearDepth();
		}
		renderer.setRenderTarget( this.renderToScreen ? null : readBuffer );
		if ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );
		renderer.render( this.scene, this.camera );
		if ( this.clearColor ) {
			renderer.setClearColor( oldClearColor, oldClearAlpha );
		}
		this.scene.overrideMaterial = null;
		renderer.autoClear = oldAutoClear;
	}
} );
/**
 * @author alteredq / http://alteredqualia.com/
 */
THREE.ShaderPass = function ( shader, textureID ) {
	THREE.Pass.call( this );
	this.textureID = ( textureID !== undefined ) ? textureID : "tDiffuse";
	if ( shader instanceof THREE.ShaderMaterial ) {
		this.uniforms = shader.uniforms;
		this.material = shader;
	} else if ( shader ) {
		this.uniforms = THREE.UniformsUtils.clone( shader.uniforms );
		this.material = new THREE.ShaderMaterial( {
			defines: Object.assign( {}, shader.defines ),
			uniforms: this.uniforms,
			vertexShader: shader.vertexShader,
			fragmentShader: shader.fragmentShader
		} );
	}
	this.fsQuad = new THREE.Pass.FullScreenQuad( this.material );
};
THREE.ShaderPass.prototype = Object.assign( Object.create( THREE.Pass.prototype ), {
	constructor: THREE.ShaderPass,
	render: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {
		if ( this.uniforms[ this.textureID ] ) {
			this.uniforms[ this.textureID ].value = readBuffer.texture;
		}
		this.fsQuad.material = this.material;
		if ( this.renderToScreen ) {
			renderer.setRenderTarget( null );
			this.fsQuad.render( renderer );
		} else {
			renderer.setRenderTarget( writeBuffer );
			if ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );
			this.fsQuad.render( renderer );
		}
	}
} );
/**
 * @author spidersharma / http://eduperiment.com/
 *
 * Inspired from Unreal Engine
 * https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/Bloom/
 */
THREE.UnrealBloomPass = function ( resolution, strength, radius, threshold ) {
	THREE.Pass.call( this );
	this.strength = ( strength !== undefined ) ? strength : 1;
	this.radius = radius;
	this.threshold = threshold;
	this.resolution = ( resolution !== undefined ) ? new THREE.Vector2( resolution.x, resolution.y ) : new THREE.Vector2( 256, 256 );
	this.clearColor = new THREE.Color( 0, 0, 0 );
	var pars = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBAFormat };
	this.renderTargetsHorizontal = [];
	this.renderTargetsVertical = [];
	this.nMips = 5;
	var resx = Math.round( this.resolution.x / 2 );
	var resy = Math.round( this.resolution.y / 2 );
	this.renderTargetBright = new THREE.WebGLRenderTarget( resx, resy, pars );
	this.renderTargetBright.texture.name = "UnrealBloomPass.bright";
	this.renderTargetBright.texture.generateMipmaps = false;
	for ( var i = 0; i < this.nMips; i ++ ) {
		var renderTargetHorizonal = new THREE.WebGLRenderTarget( resx, resy, pars );
		renderTargetHorizonal.texture.name = "UnrealBloomPass.h" + i;
		renderTargetHorizonal.texture.generateMipmaps = false;
		this.renderTargetsHorizontal.push( renderTargetHorizonal );
		var renderTargetVertical = new THREE.WebGLRenderTarget( resx, resy, pars );
		renderTargetVertical.texture.name = "UnrealBloomPass.v" + i;
		renderTargetVertical.texture.generateMipmaps = false;
		this.renderTargetsVertical.push( renderTargetVertical );
		resx = Math.round( resx / 2 );
		resy = Math.round( resy / 2 );
	}
	if ( THREE.LuminosityHighPassShader === undefined )
		console.error( "THREE.UnrealBloomPass relies on THREE.LuminosityHighPassShader" );
	var highPassShader = THREE.LuminosityHighPassShader;
	this.highPassUniforms = THREE.UniformsUtils.clone( highPassShader.uniforms );
	this.highPassUniforms[ "luminosityThreshold" ].value = threshold;
	this.highPassUniforms[ "smoothWidth" ].value = 0.01;
	this.materialHighPassFilter = new THREE.ShaderMaterial( {
		uniforms: this.highPassUniforms,
		vertexShader: highPassShader.vertexShader,
		fragmentShader: highPassShader.fragmentShader,
		defines: {}
	} );
	this.separableBlurMaterials = [];
	var kernelSizeArray = [ 3, 5, 7, 9, 11 ];
	var resx = Math.round( this.resolution.x / 2 );
	var resy = Math.round( this.resolution.y / 2 );
	for ( var i = 0; i < this.nMips; i ++ ) {
		this.separableBlurMaterials.push( this.getSeperableBlurMaterial( kernelSizeArray[ i ] ) );
		this.separableBlurMaterials[ i ].uniforms[ "texSize" ].value = new THREE.Vector2( resx, resy );
		resx = Math.round( resx / 2 );
		resy = Math.round( resy / 2 );
	}
	this.compositeMaterial = this.getCompositeMaterial( this.nMips );
	this.compositeMaterial.uniforms[ "blurTexture1" ].value = this.renderTargetsVertical[ 0 ].texture;
	this.compositeMaterial.uniforms[ "blurTexture2" ].value = this.renderTargetsVertical[ 1 ].texture;
	this.compositeMaterial.uniforms[ "blurTexture3" ].value = this.renderTargetsVertical[ 2 ].texture;
	this.compositeMaterial.uniforms[ "blurTexture4" ].value = this.renderTargetsVertical[ 3 ].texture;
	this.compositeMaterial.uniforms[ "blurTexture5" ].value = this.renderTargetsVertical[ 4 ].texture;
	this.compositeMaterial.uniforms[ "bloomStrength" ].value = strength;
	this.compositeMaterial.uniforms[ "bloomRadius" ].value = 0.1;
	this.compositeMaterial.needsUpdate = true;
	var bloomFactors = [ 1.0, 0.8, 0.6, 0.4, 0.2 ];
	this.compositeMaterial.uniforms[ "bloomFactors" ].value = bloomFactors;
	this.bloomTintColors = [ new THREE.Vector3( 1, 1, 1 ), new THREE.Vector3( 1, 1, 1 ), new THREE.Vector3( 1, 1, 1 ),
							 new THREE.Vector3( 1, 1, 1 ), new THREE.Vector3( 1, 1, 1 ) ];
	this.compositeMaterial.uniforms[ "bloomTintColors" ].value = this.bloomTintColors;
	if ( THREE.CopyShader === undefined ) {
		console.error( "THREE.UnrealBloomPass relies on THREE.CopyShader" );
	}
	var copyShader = THREE.CopyShader;
	this.copyUniforms = THREE.UniformsUtils.clone( copyShader.uniforms );
	this.copyUniforms[ "opacity" ].value = 1.0;
	this.materialCopy = new THREE.ShaderMaterial( {
		uniforms: this.copyUniforms,
		vertexShader: copyShader.vertexShader,
		fragmentShader: copyShader.fragmentShader,
		blending: THREE.AdditiveBlending,
		depthTest: false,
		depthWrite: false,
		transparent: true
	} );
	this.enabled = true;
	this.needsSwap = false;
	this.oldClearColor = new THREE.Color();
	this.oldClearAlpha = 1;
	this.basic = new THREE.MeshBasicMaterial();
	this.fsQuad = new THREE.Pass.FullScreenQuad( null );
};
THREE.UnrealBloomPass.prototype = Object.assign( Object.create( THREE.Pass.prototype ), {
	constructor: THREE.UnrealBloomPass,
	dispose: function () {
		for ( var i = 0; i < this.renderTargetsHorizontal.length; i ++ ) {
			this.renderTargetsHorizontal[ i ].dispose();
		}
		for ( var i = 0; i < this.renderTargetsVertical.length; i ++ ) {
			this.renderTargetsVertical[ i ].dispose();
		}
		this.renderTargetBright.dispose();
	},
	setSize: function ( width, height ) {
		var resx = Math.round( width / 2 );
		var resy = Math.round( height / 2 );
		this.renderTargetBright.setSize( resx, resy );
		for ( var i = 0; i < this.nMips; i ++ ) {
			this.renderTargetsHorizontal[ i ].setSize( resx, resy );
			this.renderTargetsVertical[ i ].setSize( resx, resy );
			this.separableBlurMaterials[ i ].uniforms[ "texSize" ].value = new THREE.Vector2( resx, resy );
			resx = Math.round( resx / 2 );
			resy = Math.round( resy / 2 );
		}
	},
	render: function ( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {
		this.oldClearColor.copy( renderer.getClearColor() );
		this.oldClearAlpha = renderer.getClearAlpha();
		var oldAutoClear = renderer.autoClear;
		renderer.autoClear = false;
		renderer.setClearColor( this.clearColor, 0 );
		if ( maskActive ) renderer.state.buffers.stencil.setTest( false );
		if ( this.renderToScreen ) {
			this.fsQuad.material = this.basic;
			this.basic.map = readBuffer.texture;
			renderer.setRenderTarget( null );
			renderer.clear();
			this.fsQuad.render( renderer );
		}
		this.highPassUniforms[ "tDiffuse" ].value = readBuffer.texture;
		this.highPassUniforms[ "luminosityThreshold" ].value = this.threshold;
		this.fsQuad.material = this.materialHighPassFilter;
		renderer.setRenderTarget( this.renderTargetBright );
		renderer.clear();
		this.fsQuad.render( renderer );
		var inputRenderTarget = this.renderTargetBright;
		for ( var i = 0; i < this.nMips; i ++ ) {
			this.fsQuad.material = this.separableBlurMaterials[ i ];
			this.separableBlurMaterials[ i ].uniforms[ "colorTexture" ].value = inputRenderTarget.texture;
			this.separableBlurMaterials[ i ].uniforms[ "direction" ].value = THREE.UnrealBloomPass.BlurDirectionX;
			renderer.setRenderTarget( this.renderTargetsHorizontal[ i ] );
			renderer.clear();
			this.fsQuad.render( renderer );
			this.separableBlurMaterials[ i ].uniforms[ "colorTexture" ].value = this.renderTargetsHorizontal[ i ].texture;
			this.separableBlurMaterials[ i ].uniforms[ "direction" ].value = THREE.UnrealBloomPass.BlurDirectionY;
			renderer.setRenderTarget( this.renderTargetsVertical[ i ] );
			renderer.clear();
			this.fsQuad.render( renderer );
			inputRenderTarget = this.renderTargetsVertical[ i ];
		}
		this.fsQuad.material = this.compositeMaterial;
		this.compositeMaterial.uniforms[ "bloomStrength" ].value = this.strength;
		this.compositeMaterial.uniforms[ "bloomRadius" ].value = this.radius;
		this.compositeMaterial.uniforms[ "bloomTintColors" ].value = this.bloomTintColors;
		renderer.setRenderTarget( this.renderTargetsHorizontal[ 0 ] );
		renderer.clear();
		this.fsQuad.render( renderer );
		this.fsQuad.material = this.materialCopy;
		this.copyUniforms[ "tDiffuse" ].value = this.renderTargetsHorizontal[ 0 ].texture;
		if ( maskActive ) renderer.state.buffers.stencil.setTest( true );
		if ( this.renderToScreen ) {
			renderer.setRenderTarget( null );
			this.fsQuad.render( renderer );
		} else {
			renderer.setRenderTarget( readBuffer );
			this.fsQuad.render( renderer );
		}
		renderer.setClearColor( this.oldClearColor, this.oldClearAlpha );
		renderer.autoClear = oldAutoClear;
	},
	getSeperableBlurMaterial: function ( kernelRadius ) {
		return new THREE.ShaderMaterial( {
			defines: {
				"KERNEL_RADIUS": kernelRadius,
				"SIGMA": kernelRadius
			},
			uniforms: {
				"colorTexture": { value: null },
				"texSize": { value: new THREE.Vector2( 0.5, 0.5 ) },
				"direction": { value: new THREE.Vector2( 0.5, 0.5 ) }
			},
			vertexShader:
				"varying vec2 vUv;\n\
				void main() {\n\
					vUv = uv;\n\
					gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\
				}",
			fragmentShader:
				"#include <common>\
				varying vec2 vUv;\n\
				uniform sampler2D colorTexture;\n\
				uniform vec2 texSize;\
				uniform vec2 direction;\
				\
				float gaussianPdf(in float x, in float sigma) {\
					return 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\
				}\
				void main() {\n\
					vec2 invSize = 1.0 / texSize;\
					float fSigma = float(SIGMA);\
					float weightSum = gaussianPdf(0.0, fSigma);\
					vec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\
					for( int i = 1; i < KERNEL_RADIUS; i ++ ) {\
						float x = float(i);\
						float w = gaussianPdf(x, fSigma);\
						vec2 uvOffset = direction * invSize * x;\
						vec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\
						vec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\
						diffuseSum += (sample1 + sample2) * w;\
						weightSum += 2.0 * w;\
					}\
					gl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n\
				}"
		} );
	},
	getCompositeMaterial: function ( nMips ) {
		return new THREE.ShaderMaterial( {
			defines: {
				"NUM_MIPS": nMips
			},
			uniforms: {
				"blurTexture1": { value: null },
				"blurTexture2": { value: null },
				"blurTexture3": { value: null },
				"blurTexture4": { value: null },
				"blurTexture5": { value: null },
				"dirtTexture": { value: null },
				"bloomStrength": { value: 1.0 },
				"bloomFactors": { value: null },
				"bloomTintColors": { value: null },
				"bloomRadius": { value: 0.0 }
			},
			vertexShader:
				"varying vec2 vUv;\n\
				void main() {\n\
					vUv = uv;\n\
					gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\
				}",
			fragmentShader:
				"varying vec2 vUv;\
				uniform sampler2D blurTexture1;\
				uniform sampler2D blurTexture2;\
				uniform sampler2D blurTexture3;\
				uniform sampler2D blurTexture4;\
				uniform sampler2D blurTexture5;\
				uniform sampler2D dirtTexture;\
				uniform float bloomStrength;\
				uniform float bloomRadius;\
				uniform float bloomFactors[NUM_MIPS];\
				uniform vec3 bloomTintColors[NUM_MIPS];\
				\
				float lerpBloomFactor(const in float factor) { \
					float mirrorFactor = 1.2 - factor;\
					return mix(factor, mirrorFactor, bloomRadius);\
				}\
				\
				void main() {\
					gl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) + \
													 lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) + \
													 lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) + \
													 lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) + \
													 lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\
				}"
		} );
	}
} );
THREE.UnrealBloomPass.BlurDirectionX = new THREE.Vector2( 1.0, 0.0 );
THREE.UnrealBloomPass.BlurDirectionY = new THREE.Vector2( 0.0, 1.0 );
/**
 * @author alteredq / http://alteredqualia.com/
 *
 * Full-screen textured quad shader
 */
THREE.CopyShader = {
	uniforms: {
		"tDiffuse": { value: null },
		"opacity":  { value: 1.0 }
	},
	vertexShader: [
		"varying vec2 vUv;",
		"void main() {",
			"vUv = uv;",
			"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",
		"}"
	].join( "\n" ),
	fragmentShader: [
		"uniform float opacity;",
		"uniform sampler2D tDiffuse;",
		"varying vec2 vUv;",
		"void main() {",
			"vec4 texel = texture2D( tDiffuse, vUv );",
			"gl_FragColor = opacity * texel;",
		"}"
	].join( "\n" )
};
/**
 * @author bhouston / http://clara.io/
 *
 * Luminosity
 * http://en.wikipedia.org/wiki/Luminosity
 */
THREE.LuminosityHighPassShader = {
	shaderID: "luminosityHighPass",
	uniforms: {
		"tDiffuse": { value: null },
		"luminosityThreshold": { value: 1.0 },
		"smoothWidth": { value: 1.0 },
		"defaultColor": { value: new THREE.Color( 0x000000 ) },
		"defaultOpacity": { value: 0.0 }
	},
	vertexShader: [
		"varying vec2 vUv;",
		"void main() {",
			"vUv = uv;",
			"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",
		"}"
	].join("\n"),
	fragmentShader: [
		"uniform sampler2D tDiffuse;",
		"uniform vec3 defaultColor;",
		"uniform float defaultOpacity;",
		"uniform float luminosityThreshold;",
		"uniform float smoothWidth;",
		"varying vec2 vUv;",
		"void main() {",
			"vec4 texel = texture2D( tDiffuse, vUv );",
			"vec3 luma = vec3( 0.299, 0.587, 0.114 );",
			"float v = dot( texel.xyz, luma );",
			"vec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );",
			"float alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );",
			"gl_FragColor = mix( outputColor, texel, alpha );",
		"}"
	].join("\n")
};
!function(i){var r={};function n(t){if(r[t])return r[t].exports;var e=r[t]={i:t,l:!1,exports:{}};return i[t].call(e.exports,e,e.exports,n),e.l=!0,e.exports}n.m=i,n.c=r,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=4)}([function(t,c,h){"use strict";(function(t,e){h.d(c,"e",function(){return i}),h.d(c,"g",function(){return n}),h.d(c,"f",function(){return r}),h.d(c,"c",function(){return o}),h.d(c,"a",function(){return s}),h.d(c,"b",function(){return l}),h.d(c,"d",function(){return u});
/*!
 * VERSION: 2.1.3
 * DATE: 2019-05-17
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 *
 * @author: Jack Doyle, jack@greensock.com
 */
var i="undefined"!=typeof window?window:t.exports&&void 0!==e?e:{},r=function(h){var f={},r=h.document,p=h.GreenSockGlobals=h.GreenSockGlobals||h;if(p.TweenLite)return p.TweenLite;function d(t){var e,i=t.split("."),r=p;for(e=0;e<i.length;e++)r[i[e]]=r=r[i[e]]||{};return r}function l(t){var e,i=[],r=t.length;for(e=0;e!==r;i.push(t[e++]));return i}function _(){}var t,e,i,m,g,n,a,v=d("com.greensock"),y=1e-8,w=(n=Object.prototype.toString,a=n.call([]),function(t){return null!=t&&(t instanceof Array||"object"==typeof t&&!!t.push&&n.call(t)===a)}),b={},T=function(s,l,u,c){this.sc=b[s]?b[s].sc:[],(b[s]=this).gsClass=null,this.func=u;var h=[];this.check=function(t){for(var e,i,r,n,a=l.length,o=a;-1<--a;)(e=b[l[a]]||new T(l[a],[])).gsClass?(h[a]=e.gsClass,o--):t&&e.sc.push(this);if(0===o&&u)for(r=(i=("com.greensock."+s).split(".")).pop(),n=d(i.join("."))[r]=this.gsClass=u.apply(u,h),c&&(p[r]=f[r]=n),a=0;a<this.sc.length;a++)this.sc[a].check()},this.check(!0)},o=h._gsDefine=function(t,e,i,r){return new T(t,e,i,r)},x=v._class=function(t,e,i){return e=e||function(){},o(t,[],function(){return e},i),e};o.globals=p;var s=[0,0,1,1],P=x("easing.Ease",function(t,e,i,r){this._func=t,this._type=i||0,this._power=r||0,this._params=e?s.concat(e):s},!0),S=P.map={},u=P.register=function(t,e,i,r){for(var n,a,o,s,l=e.split(","),u=l.length,c=(i||"easeIn,easeOut,easeInOut").split(",");-1<--u;)for(a=l[u],n=r?x("easing."+a,null,!0):v.easing[a]||{},o=c.length;-1<--o;)s=c[o],S[a+"."+s]=S[s+a]=n[s]=t.getRatio?t:t[s]||new t};for((i=P.prototype)._calcEnd=!1,i.getRatio=function(t){if(this._func)return this._params[0]=t,this._func.apply(null,this._params);var e=this._type,i=this._power,r=1===e?1-t:2===e?t:t<.5?2*t:2*(1-t);return 1===i?r*=r:2===i?r*=r*r:3===i?r*=r*r*r:4===i&&(r*=r*r*r*r),1===e?1-r:2===e?r:t<.5?r/2:1-r/2},e=(t=["Linear","Quad","Cubic","Quart","Quint,Strong"]).length;-1<--e;)i=t[e]+",Power"+e,u(new P(null,null,1,e),i,"easeOut",!0),u(new P(null,null,2,e),i,"easeIn"+(0===e?",easeNone":"")),u(new P(null,null,3,e),i,"easeInOut");S.linear=v.easing.Linear.easeIn,S.swing=v.easing.Quad.easeInOut;var k=x("events.EventDispatcher",function(t){this._listeners={},this._eventTarget=t||this});(i=k.prototype).addEventListener=function(t,e,i,r,n){n=n||0;var a,o,s=this._listeners[t],l=0;for(this!==m||g||m.wake(),null==s&&(this._listeners[t]=s=[]),o=s.length;-1<--o;)(a=s[o]).c===e&&a.s===i?s.splice(o,1):0===l&&a.pr<n&&(l=o+1);s.splice(l,0,{c:e,s:i,up:r,pr:n})},i.removeEventListener=function(t,e){var i,r=this._listeners[t];if(r)for(i=r.length;-1<--i;)if(r[i].c===e)return void r.splice(i,1)},i.dispatchEvent=function(t){var e,i,r,n=this._listeners[t];if(n)for(1<(e=n.length)&&(n=n.slice(0)),i=this._eventTarget;-1<--e;)(r=n[e])&&(r.up?r.c.call(r.s||i,{type:t,target:i}):r.c.call(r.s||i))};var E=h.requestAnimationFrame,O=h.cancelAnimationFrame,R=Date.now||function(){return(new Date).getTime()},C=R();for(e=(t=["ms","moz","webkit","o"]).length;-1<--e&&!E;)E=h[t[e]+"RequestAnimationFrame"],O=h[t[e]+"CancelAnimationFrame"]||h[t[e]+"CancelRequestAnimationFrame"];x("Ticker",function(t,e){var n,a,o,s,l,u=this,c=R(),i=!(!1===e||!E)&&"auto",h=500,f=33,p=function(t){var e,i,r=R()-C;h<r&&(c+=r-f),C+=r,u.time=(C-c)/1e3,e=u.time-l,(!n||0<e||!0===t)&&(u.frame++,l+=e+(s<=e?.004:s-e),i=!0),!0!==t&&(o=a(p)),i&&u.dispatchEvent("tick")};k.call(u),u.time=u.frame=0,u.tick=function(){p(!0)},u.lagSmoothing=function(t,e){if(!arguments.length)return h<1e8;h=t||1e8,f=Math.min(e,h,0)},u.sleep=function(){null!=o&&(i&&O?O(o):clearTimeout(o),a=_,o=null,u===m&&(g=!1))},u.wake=function(t){null!==o?u.sleep():t?c+=-C+(C=R()):10<u.frame&&(C=R()-h+5),a=0===n?_:i&&E?E:function(t){return setTimeout(t,1e3*(l-u.time)+1|0)},u===m&&(g=!0),p(2)},u.fps=function(t){if(!arguments.length)return n;s=1/((n=t)||60),l=this.time+s,u.wake()},u.useRAF=function(t){if(!arguments.length)return i;u.sleep(),i=t,u.fps(n)},u.fps(t),setTimeout(function(){"auto"===i&&u.frame<5&&"hidden"!==(r||{}).visibilityState&&u.useRAF(!1)},1500)}),(i=v.Ticker.prototype=new v.events.EventDispatcher).constructor=v.Ticker;var c=x("core.Animation",function(t,e){if(this.vars=e=e||{},this._duration=this._totalDuration=t||0,this._delay=Number(e.delay)||0,this._timeScale=1,this._active=!!e.immediateRender,this.data=e.data,this._reversed=!!e.reversed,Z){g||m.wake();var i=this.vars.useFrames?G:Z;i.add(this,i._time),this.vars.paused&&this.paused(!0)}});m=c.ticker=new v.Ticker,(i=c.prototype)._dirty=i._gc=i._initted=i._paused=!1,i._totalTime=i._time=0,i._rawPrevTime=-1,i._next=i._last=i._onUpdate=i._timeline=i.timeline=null,i._paused=!1;var A=function(){g&&2e3<R()-C&&("hidden"!==(r||{}).visibilityState||!m.lagSmoothing())&&m.wake();var t=setTimeout(A,2e3);t.unref&&t.unref()};A(),i.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},i.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},i.resume=function(t,e){return null!=t&&this.seek(t,e),this.paused(!1)},i.seek=function(t,e){return this.totalTime(Number(t),!1!==e)},i.restart=function(t,e){return this.reversed(!1).paused(!1).totalTime(t?-this._delay:0,!1!==e,!0)},i.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},i.render=function(t,e,i){},i.invalidate=function(){return this._time=this._totalTime=0,this._initted=this._gc=!1,this._rawPrevTime=-1,!this._gc&&this.timeline||this._enabled(!0),this},i.isActive=function(){var t,e=this._timeline,i=this._startTime;return!e||!this._gc&&!this._paused&&e.isActive()&&(t=e.rawTime(!0))>=i&&t<i+this.totalDuration()/this._timeScale-y},i._enabled=function(t,e){return g||m.wake(),this._gc=!t,this._active=this.isActive(),!0!==e&&(t&&!this.timeline?this._timeline.add(this,this._startTime-this._delay):!t&&this.timeline&&this._timeline._remove(this,!0)),!1},i._kill=function(t,e){return this._enabled(!1,!1)},i.kill=function(t,e){return this._kill(t,e),this},i._uncache=function(t){for(var e=t?this:this.timeline;e;)e._dirty=!0,e=e.timeline;return this},i._swapSelfInParams=function(t){for(var e=t.length,i=t.concat();-1<--e;)"{self}"===t[e]&&(i[e]=this);return i},i._callback=function(t){var e=this.vars,i=e[t],r=e[t+"Params"],n=e[t+"Scope"]||e.callbackScope||this;switch(r?r.length:0){case 0:i.call(n);break;case 1:i.call(n,r[0]);break;case 2:i.call(n,r[0],r[1]);break;default:i.apply(n,r)}},i.eventCallback=function(t,e,i,r){if("on"===(t||"").substr(0,2)){var n=this.vars;if(1===arguments.length)return n[t];null==e?delete n[t]:(n[t]=e,n[t+"Params"]=w(i)&&-1!==i.join("").indexOf("{self}")?this._swapSelfInParams(i):i,n[t+"Scope"]=r),"onUpdate"===t&&(this._onUpdate=e)}return this},i.delay=function(t){return arguments.length?(this._timeline.smoothChildTiming&&this.startTime(this._startTime+t-this._delay),this._delay=t,this):this._delay},i.duration=function(t){return arguments.length?(this._duration=this._totalDuration=t,this._uncache(!0),this._timeline.smoothChildTiming&&0<this._time&&this._time<this._duration&&0!==t&&this.totalTime(this._totalTime*(t/this._duration),!0),this):(this._dirty=!1,this._duration)},i.totalDuration=function(t){return this._dirty=!1,arguments.length?this.duration(t):this._totalDuration},i.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),this.totalTime(t>this._duration?this._duration:t,e)):this._time},i.totalTime=function(t,e,i){if(g||m.wake(),!arguments.length)return this._totalTime;if(this._timeline){if(t<0&&!i&&(t+=this.totalDuration()),this._timeline.smoothChildTiming){this._dirty&&this.totalDuration();var r=this._totalDuration,n=this._timeline;if(r<t&&!i&&(t=r),this._startTime=(this._paused?this._pauseTime:n._time)-(this._reversed?r-t:t)/this._timeScale,n._dirty||this._uncache(!1),n._timeline)for(;n._timeline;)n._timeline._time!==(n._startTime+n._totalTime)/n._timeScale&&n.totalTime(n._totalTime,!0),n=n._timeline}this._gc&&this._enabled(!0,!1),this._totalTime===t&&0!==this._duration||(j.length&&K(),this.render(t,e,!1),j.length&&K())}return this},i.progress=i.totalProgress=function(t,e){var i=this.duration();return arguments.length?this.totalTime(i*t,e):i?this._time/i:this.ratio},i.startTime=function(t){return arguments.length?(t!==this._startTime&&(this._startTime=t,this.timeline&&this.timeline._sortChildren&&this.timeline.add(this,t-this._delay)),this):this._startTime},i.endTime=function(t){return this._startTime+(0!=t?this.totalDuration():this.duration())/this._timeScale},i.timeScale=function(t){if(!arguments.length)return this._timeScale;var e,i;for(t=t||y,this._timeline&&this._timeline.smoothChildTiming&&(i=(e=this._pauseTime)||0===e?e:this._timeline.totalTime(),this._startTime=i-(i-this._startTime)*this._timeScale/t),this._timeScale=t,i=this.timeline;i&&i.timeline;)i._dirty=!0,i.totalDuration(),i=i.timeline;return this},i.reversed=function(t){return arguments.length?(t!=this._reversed&&(this._reversed=t,this.totalTime(this._timeline&&!this._timeline.smoothChildTiming?this.totalDuration()-this._totalTime:this._totalTime,!0)),this):this._reversed},i.paused=function(t){if(!arguments.length)return this._paused;var e,i,r=this._timeline;return t!=this._paused&&r&&(g||t||m.wake(),i=(e=r.rawTime())-this._pauseTime,!t&&r.smoothChildTiming&&(this._startTime+=i,this._uncache(!1)),this._pauseTime=t?e:null,this._paused=t,this._active=this.isActive(),!t&&0!=i&&this._initted&&this.duration()&&(e=r.smoothChildTiming?this._totalTime:(e-this._startTime)/this._timeScale,this.render(e,e===this._totalTime,!0))),this._gc&&!t&&this._enabled(!0,!1),this};var M=x("core.SimpleTimeline",function(t){c.call(this,0,t),this.autoRemoveChildren=this.smoothChildTiming=!0});(i=M.prototype=new c).constructor=M,i.kill()._gc=!1,i._first=i._last=i._recent=null,i._sortChildren=!1,i.add=i.insert=function(t,e,i,r){var n,a;if(t._startTime=Number(e||0)+t._delay,t._paused&&this!==t._timeline&&(t._pauseTime=this.rawTime()-(t._timeline.rawTime()-t._pauseTime)),t.timeline&&t.timeline._remove(t,!0),t.timeline=t._timeline=this,t._gc&&t._enabled(!0,!0),n=this._last,this._sortChildren)for(a=t._startTime;n&&n._startTime>a;)n=n._prev;return n?(t._next=n._next,n._next=t):(t._next=this._first,this._first=t),t._next?t._next._prev=t:this._last=t,t._prev=n,this._recent=t,this._timeline&&this._uncache(!0),this},i._remove=function(t,e){return t.timeline===this&&(e||t._enabled(!1,!0),t._prev?t._prev._next=t._next:this._first===t&&(this._first=t._next),t._next?t._next._prev=t._prev:this._last===t&&(this._last=t._prev),t._next=t._prev=t.timeline=null,t===this._recent&&(this._recent=this._last),this._timeline&&this._uncache(!0)),this},i.render=function(t,e,i){var r,n=this._first;for(this._totalTime=this._time=this._rawPrevTime=t;n;)r=n._next,(n._active||t>=n._startTime&&!n._paused&&!n._gc)&&(n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)),n=r},i.rawTime=function(){return g||m.wake(),this._totalTime};function L(t){return t&&t.length&&t!==h&&t[0]&&(t[0]===h||t[0].nodeType&&t[0].style&&!t.nodeType)}var D=x("TweenLite",function(t,e,i){if(c.call(this,e,i),this.render=D.prototype.render,null==t)throw"Cannot tween a null target.";this.target=t="string"!=typeof t?t:D.selector(t)||t;var r,n,a,o=t.jquery||t.length&&t!==h&&t[0]&&(t[0]===h||t[0].nodeType&&t[0].style&&!t.nodeType),s=this.vars.overwrite;if(this._overwrite=s=null==s?$[D.defaultOverwrite]:"number"==typeof s?s>>0:$[s],(o||t instanceof Array||t.push&&w(t))&&"number"!=typeof t[0])for(this._targets=a=l(t),this._propLookup=[],this._siblings=[],r=0;r<a.length;r++)(n=a[r])?"string"!=typeof n?n.length&&n!==h&&n[0]&&(n[0]===h||n[0].nodeType&&n[0].style&&!n.nodeType)?(a.splice(r--,1),this._targets=a=a.concat(l(n))):(this._siblings[r]=tt(n,this,!1),1===s&&1<this._siblings[r].length&&et(n,this,null,1,this._siblings[r])):"string"==typeof(n=a[r--]=D.selector(n))&&a.splice(r+1,1):a.splice(r--,1);else this._propLookup={},this._siblings=tt(t,this,!1),1===s&&1<this._siblings.length&&et(t,this,null,1,this._siblings);(this.vars.immediateRender||0===e&&0===this._delay&&!1!==this.vars.immediateRender)&&(this._time=-y,this.render(Math.min(0,-this._delay)))},!0);(i=D.prototype=new c).constructor=D,i.kill()._gc=!1,i.ratio=0,i._firstPT=i._targets=i._overwrittenProps=i._startAt=null,i._notifyPluginsOfEnabled=i._lazy=!1,D.version="2.1.3",D.defaultEase=i._ease=new P(null,null,1,1),D.defaultOverwrite="auto",D.ticker=m,D.autoSleep=120,D.lagSmoothing=function(t,e){m.lagSmoothing(t,e)},D.selector=h.$||h.jQuery||function(t){var e=h.$||h.jQuery;return e?(D.selector=e)(t):(r=r||h.document)?r.querySelectorAll?r.querySelectorAll(t):r.getElementById("#"===t.charAt(0)?t.substr(1):t):t};function F(t){for(var e,i=this._firstPT;i;)e=i.blob?1===t&&null!=this.end?this.end:t?this.join(""):this.start:i.c*t+i.s,i.m?e=i.m.call(this._tween,e,this._target||i.t,this._tween):e<1e-6&&-1e-6<e&&!i.blob&&(e=0),i.f?i.fp?i.t[i.p](i.fp,e):i.t[i.p](e):i.t[i.p]=e,i=i._next}function z(t){return(1e3*t|0)/1e3+""}function N(t,e,i,r){var n,a,o,s,l,u,c,h=[],f=0,p="",d=0;for(h.start=t,h.end=e,t=h[0]=t+"",e=h[1]=e+"",i&&(i(h),t=h[0],e=h[1]),h.length=0,n=t.match(B)||[],a=e.match(B)||[],r&&(r._next=null,r.blob=1,h._firstPT=h._applyPT=r),l=a.length,s=0;s<l;s++)c=a[s],p+=(u=e.substr(f,e.indexOf(c,f)-f))||!s?u:",",f+=u.length,d?d=(d+1)%5:"rgba("===u.substr(-5)&&(d=1),c===n[s]||n.length<=s?p+=c:(p&&(h.push(p),p=""),o=parseFloat(n[s]),h.push(o),h._firstPT={_next:h._firstPT,t:h,p:h.length-1,s:o,c:("="===c.charAt(1)?parseInt(c.charAt(0)+"1",10)*parseFloat(c.substr(2)):parseFloat(c)-o)||0,f:0,m:d&&d<4?Math.round:z}),f+=c.length;return(p+=e.substr(f))&&h.push(p),h.setRatio=F,X.test(e)&&(h.end=null),h}function I(t,e,i,r,n,a,o,s,l){"function"==typeof r&&(r=r(l||0,t));var u=typeof t[e],c="function"!=u?"":e.indexOf("set")||"function"!=typeof t["get"+e.substr(3)]?e:"get"+e.substr(3),h="get"!==i?i:c?o?t[c](o):t[c]():t[e],f="string"==typeof r&&"="===r.charAt(1),p={t:t,p:e,s:h,f:"function"==u,pg:0,n:n||e,m:a?"function"==typeof a?a:Math.round:0,pr:0,c:f?parseInt(r.charAt(0)+"1",10)*parseFloat(r.substr(2)):parseFloat(r)-h||0};if("number"==typeof h&&("number"==typeof r||f)||(o||isNaN(h)||!f&&isNaN(r)||"boolean"==typeof h||"boolean"==typeof r?(p.fp=o,p={t:N(h,f?parseFloat(p.s)+p.c+(p.s+"").replace(/[0-9\-\.]/g,""):r,s||D.defaultStringFilter,p),p:"setRatio",s:0,c:1,f:2,pg:0,n:n||e,pr:0,m:0}):(p.s=parseFloat(h),f||(p.c=parseFloat(r)-p.s||0))),p.c)return(p._next=this._firstPT)&&(p._next._prev=p),this._firstPT=p}var j=[],H={},B=/(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,X=/[\+-]=-?[\.\d]/,q=D._internals={isArray:w,isSelector:L,lazyTweens:j,blobDif:N},Y=D._plugins={},V=q.tweenLookup={},U=0,W=q.reservedProps={ease:1,delay:1,overwrite:1,onComplete:1,onCompleteParams:1,onCompleteScope:1,useFrames:1,runBackwards:1,startAt:1,onUpdate:1,onUpdateParams:1,onUpdateScope:1,onStart:1,onStartParams:1,onStartScope:1,onReverseComplete:1,onReverseCompleteParams:1,onReverseCompleteScope:1,onRepeat:1,onRepeatParams:1,onRepeatScope:1,easeParams:1,yoyo:1,immediateRender:1,repeat:1,repeatDelay:1,data:1,paused:1,reversed:1,autoCSS:1,lazy:1,onOverwrite:1,callbackScope:1,stringFilter:1,id:1,yoyoEase:1,stagger:1},$={none:0,all:1,auto:2,concurrent:3,allOnStart:4,preexisting:5,true:1,false:0},G=c._rootFramesTimeline=new M,Z=c._rootTimeline=new M,Q=30,K=q.lazyRender=function(){var t,e,i=j.length;for(H={},t=0;t<i;t++)(e=j[t])&&!1!==e._lazy&&(e.render(e._lazy[0],e._lazy[1],!0),e._lazy=!1);j.length=0};Z._startTime=m.time,G._startTime=m.frame,Z._active=G._active=!0,setTimeout(K,1),c._updateRoot=D.render=function(){var t,e,i;if(j.length&&K(),Z.render((m.time-Z._startTime)*Z._timeScale,!1,!1),G.render((m.frame-G._startTime)*G._timeScale,!1,!1),j.length&&K(),m.frame>=Q){for(i in Q=m.frame+(parseInt(D.autoSleep,10)||120),V){for(t=(e=V[i].tweens).length;-1<--t;)e[t]._gc&&e.splice(t,1);0===e.length&&delete V[i]}if((!(i=Z._first)||i._paused)&&D.autoSleep&&!G._first&&1===m._listeners.tick.length){for(;i&&i._paused;)i=i._next;i||m.sleep()}}},m.addEventListener("tick",c._updateRoot);function J(t,e,i,r){var n,a,o=t.vars.onOverwrite;return o&&(n=o(t,e,i,r)),(o=D.onOverwrite)&&(a=o(t,e,i,r)),!1!==n&&!1!==a}var tt=function(t,e,i){var r,n,a=t._gsTweenID;if(V[a||(t._gsTweenID=a="t"+U++)]||(V[a]={target:t,tweens:[]}),e&&((r=V[a].tweens)[n=r.length]=e,i))for(;-1<--n;)r[n]===e&&r.splice(n,1);return V[a].tweens},et=function(t,e,i,r,n){var a,o,s,l;if(1===r||4<=r){for(l=n.length,a=0;a<l;a++)if((s=n[a])!==e)s._gc||s._kill(null,t,e)&&(o=!0);else if(5===r)break;return o}var u,c=e._startTime+y,h=[],f=0,p=0===e._duration;for(a=n.length;-1<--a;)(s=n[a])===e||s._gc||s._paused||(s._timeline!==e._timeline?(u=u||it(e,0,p),0===it(s,u,p)&&(h[f++]=s)):s._startTime<=c&&s._startTime+s.totalDuration()/s._timeScale>c&&((p||!s._initted)&&c-s._startTime<=2*y||(h[f++]=s)));for(a=f;-1<--a;)if(l=(s=h[a])._firstPT,2===r&&s._kill(i,t,e)&&(o=!0),2!==r||!s._firstPT&&s._initted&&l){if(2!==r&&!J(s,e))continue;s._enabled(!1,!1)&&(o=!0)}return o},it=function(t,e,i){for(var r=t._timeline,n=r._timeScale,a=t._startTime;r._timeline;){if(a+=r._startTime,n*=r._timeScale,r._paused)return-100;r=r._timeline}return e<(a/=n)?a-e:i&&a===e||!t._initted&&a-e<2*y?y:(a+=t.totalDuration()/t._timeScale/n)>e+y?0:a-e-y};i._init=function(){var t,e,i,r,n,a,o=this.vars,s=this._overwrittenProps,l=this._duration,u=!!o.immediateRender,c=o.ease,h=this._startAt;if(o.startAt){for(r in h&&(h.render(-1,!0),h.kill()),n={},o.startAt)n[r]=o.startAt[r];if(n.data="isStart",n.overwrite=!1,n.immediateRender=!0,n.lazy=u&&!1!==o.lazy,n.startAt=n.delay=null,n.onUpdate=o.onUpdate,n.onUpdateParams=o.onUpdateParams,n.onUpdateScope=o.onUpdateScope||o.callbackScope||this,this._startAt=D.to(this.target||{},0,n),u)if(0<this._time)this._startAt=null;else if(0!==l)return}else if(o.runBackwards&&0!==l)if(h)h.render(-1,!0),h.kill(),this._startAt=null;else{for(r in 0!==this._time&&(u=!1),i={},o)W[r]&&"autoCSS"!==r||(i[r]=o[r]);if(i.overwrite=0,i.data="isFromStart",i.lazy=u&&!1!==o.lazy,i.immediateRender=u,this._startAt=D.to(this.target,0,i),u){if(0===this._time)return}else this._startAt._init(),this._startAt._enabled(!1),this.vars.immediateRender&&(this._startAt=null)}if(this._ease=c=c?c instanceof P?c:"function"==typeof c?new P(c,o.easeParams):S[c]||D.defaultEase:D.defaultEase,o.easeParams instanceof Array&&c.config&&(this._ease=c.config.apply(c,o.easeParams)),this._easeType=this._ease._type,this._easePower=this._ease._power,this._firstPT=null,this._targets)for(a=this._targets.length,t=0;t<a;t++)this._initProps(this._targets[t],this._propLookup[t]={},this._siblings[t],s?s[t]:null,t)&&(e=!0);else e=this._initProps(this.target,this._propLookup,this._siblings,s,0);if(e&&D._onPluginEvent("_onInitAllProps",this),s&&(this._firstPT||"function"!=typeof this.target&&this._enabled(!1,!1)),o.runBackwards)for(i=this._firstPT;i;)i.s+=i.c,i.c=-i.c,i=i._next;this._onUpdate=o.onUpdate,this._initted=!0},i._initProps=function(t,e,i,r,n){var a,o,s,l,u,c;if(null==t)return!1;for(a in H[t._gsTweenID]&&K(),this.vars.css||t.style&&t!==h&&t.nodeType&&Y.css&&!1!==this.vars.autoCSS&&function(t,e){var i,r={};for(i in t)W[i]||i in e&&"transform"!==i&&"x"!==i&&"y"!==i&&"width"!==i&&"height"!==i&&"className"!==i&&"border"!==i||!(!Y[i]||Y[i]&&Y[i]._autoCSS)||(r[i]=t[i],delete t[i]);t.css=r}(this.vars,t),this.vars)if(c=this.vars[a],W[a])c&&(c instanceof Array||c.push&&w(c))&&-1!==c.join("").indexOf("{self}")&&(this.vars[a]=c=this._swapSelfInParams(c,this));else if(Y[a]&&(l=new Y[a])._onInitTween(t,this.vars[a],this,n)){for(this._firstPT=u={_next:this._firstPT,t:l,p:"setRatio",s:0,c:1,f:1,n:a,pg:1,pr:l._priority,m:0},o=l._overwriteProps.length;-1<--o;)e[l._overwriteProps[o]]=this._firstPT;(l._priority||l._onInitAllProps)&&(s=!0),(l._onDisable||l._onEnable)&&(this._notifyPluginsOfEnabled=!0),u._next&&(u._next._prev=u)}else e[a]=I.call(this,t,a,"get",c,a,0,null,this.vars.stringFilter,n);return r&&this._kill(r,t)?this._initProps(t,e,i,r,n):1<this._overwrite&&this._firstPT&&1<i.length&&et(t,this,e,this._overwrite,i)?(this._kill(e,t),this._initProps(t,e,i,r,n)):(this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration)&&(H[t._gsTweenID]=!0),s)},i.render=function(t,e,i){var r,n,a,o,s=this,l=s._time,u=s._duration,c=s._rawPrevTime;if(u-y<=t&&0<=t)s._totalTime=s._time=u,s.ratio=s._ease._calcEnd?s._ease.getRatio(1):1,s._reversed||(r=!0,n="onComplete",i=i||s._timeline.autoRemoveChildren),0===u&&(!s._initted&&s.vars.lazy&&!i||(s._startTime===s._timeline._duration&&(t=0),(c<0||t<=0&&-y<=t||c===y&&"isPause"!==s.data)&&c!==t&&(i=!0,y<c&&(n="onReverseComplete")),s._rawPrevTime=o=!e||t||c===t?t:y));else if(t<y)s._totalTime=s._time=0,s.ratio=s._ease._calcEnd?s._ease.getRatio(0):0,(0!==l||0===u&&0<c)&&(n="onReverseComplete",r=s._reversed),-y<t?t=0:t<0&&(s._active=!1,0===u&&(!s._initted&&s.vars.lazy&&!i||(0<=c&&(c!==y||"isPause"!==s.data)&&(i=!0),s._rawPrevTime=o=!e||t||c===t?t:y))),(!s._initted||s._startAt&&s._startAt.progress())&&(i=!0);else if(s._totalTime=s._time=t,s._easeType){var h=t/u,f=s._easeType,p=s._easePower;(1===f||3===f&&.5<=h)&&(h=1-h),3===f&&(h*=2),1===p?h*=h:2===p?h*=h*h:3===p?h*=h*h*h:4===p&&(h*=h*h*h*h),s.ratio=1===f?1-h:2===f?h:t/u<.5?h/2:1-h/2}else s.ratio=s._ease.getRatio(t/u);if(s._time!==l||i){if(!s._initted){if(s._init(),!s._initted||s._gc)return;if(!i&&s._firstPT&&(!1!==s.vars.lazy&&s._duration||s.vars.lazy&&!s._duration))return s._time=s._totalTime=l,s._rawPrevTime=c,j.push(s),void(s._lazy=[t,e]);s._time&&!r?s.ratio=s._ease.getRatio(s._time/u):r&&s._ease._calcEnd&&(s.ratio=s._ease.getRatio(0===s._time?0:1))}for(!1!==s._lazy&&(s._lazy=!1),s._active||!s._paused&&s._time!==l&&0<=t&&(s._active=!0),0===l&&(s._startAt&&(0<=t?s._startAt.render(t,!0,i):n=n||"_dummyGS"),s.vars.onStart&&(0===s._time&&0!==u||e||s._callback("onStart"))),a=s._firstPT;a;)a.f?a.t[a.p](a.c*s.ratio+a.s):a.t[a.p]=a.c*s.ratio+a.s,a=a._next;s._onUpdate&&(t<0&&s._startAt&&-1e-4!==t&&s._startAt.render(t,!0,i),e||(s._time!==l||r||i)&&s._callback("onUpdate")),n&&(s._gc&&!i||(t<0&&s._startAt&&!s._onUpdate&&-1e-4!==t&&s._startAt.render(t,!0,i),r&&(s._timeline.autoRemoveChildren&&s._enabled(!1,!1),s._active=!1),!e&&s.vars[n]&&s._callback(n),0===u&&s._rawPrevTime===y&&o!==y&&(s._rawPrevTime=0)))}},i._kill=function(t,e,i){if("all"===t&&(t=null),null==t&&(null==e||e===this.target))return this._lazy=!1,this._enabled(!1,!1);e="string"!=typeof e?e||this._targets||this.target:D.selector(e)||e;var r,n,a,o,s,l,u,c,h,f=i&&this._time&&i._startTime===this._startTime&&this._timeline===i._timeline,p=this._firstPT;if((w(e)||L(e))&&"number"!=typeof e[0])for(r=e.length;-1<--r;)this._kill(t,e[r],i)&&(l=!0);else{if(this._targets){for(r=this._targets.length;-1<--r;)if(e===this._targets[r]){s=this._propLookup[r]||{},this._overwrittenProps=this._overwrittenProps||[],n=this._overwrittenProps[r]=t?this._overwrittenProps[r]||{}:"all";break}}else{if(e!==this.target)return!1;s=this._propLookup,n=this._overwrittenProps=t?this._overwrittenProps||{}:"all"}if(s){if(u=t||s,c=t!==n&&"all"!==n&&t!==s&&("object"!=typeof t||!t._tempKill),i&&(D.onOverwrite||this.vars.onOverwrite)){for(a in u)s[a]&&(h=h||[]).push(a);if((h||!t)&&!J(this,i,e,h))return!1}for(a in u)(o=s[a])&&(f&&(o.f?o.t[o.p](o.s):o.t[o.p]=o.s,l=!0),o.pg&&o.t._kill(u)&&(l=!0),o.pg&&0!==o.t._overwriteProps.length||(o._prev?o._prev._next=o._next:o===this._firstPT&&(this._firstPT=o._next),o._next&&(o._next._prev=o._prev),o._next=o._prev=null),delete s[a]),c&&(n[a]=1);!this._firstPT&&this._initted&&p&&this._enabled(!1,!1)}}return l},i.invalidate=function(){this._notifyPluginsOfEnabled&&D._onPluginEvent("_onDisable",this);var t=this._time;return this._firstPT=this._overwrittenProps=this._startAt=this._onUpdate=null,this._notifyPluginsOfEnabled=this._active=this._lazy=!1,this._propLookup=this._targets?{}:[],c.prototype.invalidate.call(this),this.vars.immediateRender&&(this._time=-y,this.render(t,!1,!1!==this.vars.lazy)),this},i._enabled=function(t,e){if(g||m.wake(),t&&this._gc){var i,r=this._targets;if(r)for(i=r.length;-1<--i;)this._siblings[i]=tt(r[i],this,!0);else this._siblings=tt(this.target,this,!0)}return c.prototype._enabled.call(this,t,e),!(!this._notifyPluginsOfEnabled||!this._firstPT)&&D._onPluginEvent(t?"_onEnable":"_onDisable",this)},D.to=function(t,e,i){return new D(t,e,i)},D.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new D(t,e,i)},D.fromTo=function(t,e,i,r){return r.startAt=i,r.immediateRender=0!=r.immediateRender&&0!=i.immediateRender,new D(t,e,r)},D.delayedCall=function(t,e,i,r,n){return new D(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:r,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,lazy:!1,useFrames:n,overwrite:0})},D.set=function(t,e){return new D(t,0,e)},D.getTweensOf=function(t,e){if(null==t)return[];var i,r,n,a;if(t="string"!=typeof t?t:D.selector(t)||t,(w(t)||L(t))&&"number"!=typeof t[0]){for(i=t.length,r=[];-1<--i;)r=r.concat(D.getTweensOf(t[i],e));for(i=r.length;-1<--i;)for(a=r[i],n=i;-1<--n;)a===r[n]&&r.splice(i,1)}else if(t._gsTweenID)for(i=(r=tt(t).concat()).length;-1<--i;)(r[i]._gc||e&&!r[i].isActive())&&r.splice(i,1);return r||[]},D.killTweensOf=D.killDelayedCallsTo=function(t,e,i){"object"==typeof e&&(i=e,e=!1);for(var r=D.getTweensOf(t,e),n=r.length;-1<--n;)r[n]._kill(i,t)};var rt=x("plugins.TweenPlugin",function(t,e){this._overwriteProps=(t||"").split(","),this._propName=this._overwriteProps[0],this._priority=e||0,this._super=rt.prototype},!0);if(i=rt.prototype,rt.version="1.19.0",rt.API=2,i._firstPT=null,i._addTween=I,i.setRatio=F,i._kill=function(t){var e,i=this._overwriteProps,r=this._firstPT;if(null!=t[this._propName])this._overwriteProps=[];else for(e=i.length;-1<--e;)null!=t[i[e]]&&i.splice(e,1);for(;r;)null!=t[r.n]&&(r._next&&(r._next._prev=r._prev),r._prev?(r._prev._next=r._next,r._prev=null):this._firstPT===r&&(this._firstPT=r._next)),r=r._next;return!1},i._mod=i._roundProps=function(t){for(var e,i=this._firstPT;i;)(e=t[this._propName]||null!=i.n&&t[i.n.split(this._propName+"_").join("")])&&"function"==typeof e&&(2===i.f?i.t._applyPT.m=e:i.m=e),i=i._next},D._onPluginEvent=function(t,e){var i,r,n,a,o,s=e._firstPT;if("_onInitAllProps"===t){for(;s;){for(o=s._next,r=n;r&&r.pr>s.pr;)r=r._next;(s._prev=r?r._prev:a)?s._prev._next=s:n=s,(s._next=r)?r._prev=s:a=s,s=o}s=e._firstPT=n}for(;s;)s.pg&&"function"==typeof s.t[t]&&s.t[t]()&&(i=!0),s=s._next;return i},rt.activate=function(t){for(var e=t.length;-1<--e;)t[e].API===rt.API&&(Y[(new t[e])._propName]=t[e]);return!0},o.plugin=function(t){if(!(t&&t.propName&&t.init&&t.API))throw"illegal plugin definition.";var e,i=t.propName,r=t.priority||0,n=t.overwriteProps,a={init:"_onInitTween",set:"setRatio",kill:"_kill",round:"_mod",mod:"_mod",initAll:"_onInitAllProps"},o=x("plugins."+i.charAt(0).toUpperCase()+i.substr(1)+"Plugin",function(){rt.call(this,i,r),this._overwriteProps=n||[]},!0===t.global),s=o.prototype=new rt(i);for(e in(s.constructor=o).API=t.API,a)"function"==typeof t[e]&&(s[a[e]]=t[e]);return o.version=t.version,rt.activate([o]),o},t=h._gsQueue){for(e=0;e<t.length;e++)t[e]();for(i in b)b[i].func||h.console.log("GSAP encountered missing dependency: "+i)}return g=!1,D}(i),n=i.GreenSockGlobals,a=n.com.greensock,o=a.core.SimpleTimeline,s=a.core.Animation,l=n.Ease,u=(n.Linear,n.Power1,n.Power2,n.Power3,n.Power4,n.TweenPlugin);a.events.EventDispatcher}).call(this,h(5)(t),h(6))},function(t,e,i){t.exports=function(){var n=function(){function a(){}return a.prototype.then=function(i,r){var n=new a,t=this.s;if(t){var e=1&t?i:r;if(e){try{o(n,1,e(this.v))}catch(t){o(n,2,t)}return n}return this}return this.o=function(t){try{var e=t.v;1&t.s?o(n,1,i?i(e):e):r?o(n,1,r(e)):o(n,2,e)}catch(t){o(n,2,t)}},n},a}();function o(t,e,i){if(!t.s){if(i instanceof n){if(!i.s)return void(i.o=o.bind(null,t,e));1&e&&(e=i.s),i=i.v}if(i&&i.then)return void i.then(o.bind(null,t,e),o.bind(null,t,2));t.s=e,t.v=i;var r=t.o;r&&r(t)}}function c(t,e){try{var i=t()}catch(t){return e(t)}return i&&i.then?i.then(void 0,e):i}!function(){function t(t){return{value:t,done:!0}}function e(t){return{value:t,done:!1}}Symbol.asyncIterator||(Symbol.asyncIterator=Symbol("Symbol.asyncIterator"))}();var t,i,a=(function(t){var i=t.exports=function(o,e){return e=e||function(){},function(){var n=!1,a=arguments,t=new Promise(function(i,r){var t,e=o.apply({async:function(){return n=!0,function(t,e){t?r(t):i(e)}}},Array.prototype.slice.call(a));n||(!(t=e)||"object"!=typeof t&&"function"!=typeof t||"function"!=typeof t.then?i(e):e.then(i,r))});return t.then(e.bind(null,null),e),t}};i.cb=function(e,t){return i(function(){var t=Array.prototype.slice.call(arguments);return t.length===e.length-1&&t.push(this.async()),e.apply(this,t)},t)}}(t={exports:{}}),t.exports);!function(t){t[t.off=0]="off",t[t.error=1]="error",t[t.warning=2]="warning",t[t.info=3]="info",t[t.debug=4]="debug"}(i=i||{});var e=i.off,p=function(t){this.m=t};p.getLevel=function(){return e},p.setLevel=function(t){return e=i[t]},p.prototype.error=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];this.P(console.error,i.error,t)},p.prototype.warn=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];this.P(console.warn,i.warning,t)},p.prototype.info=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];this.P(console.info,i.info,t)},p.prototype.debug=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];this.P(console.log,i.debug,t)},p.prototype.P=function(t,e,i){e<=p.getLevel()&&t.apply(console,["["+this.m+"] "].concat(i))};var r=function(){this.logger=new p("@barba/core"),this.all=["ready","page","reset","currentAdded","currentRemoved","nextAdded","nextRemoved","beforeAppear","appear","afterAppear","appearCanceled","before","beforeLeave","leave","afterLeave","leaveCanceled","beforeEnter","enter","afterEnter","enterCanceled","after"],this.registered=new Map,this.init()};r.prototype.init=function(){var r=this;this.registered.clear(),this.all.forEach(function(i){r[i]||(r[i]=function(t,e){void 0===e&&(e=null),r.registered.has(i)||r.registered.set(i,new Set),r.registered.get(i).add({ctx:e,fn:t})})})},r.prototype.do=function(t){for(var i=[],e=arguments.length-1;0<e--;)i[e]=arguments[e+1];if(this.registered.has(t)){var r=Promise.resolve();return this.registered.get(t).forEach(function(t){var e=t.ctx?t.fn.bind(t.ctx):t.fn;r=r.then(function(){return a(e).apply(void 0,i)})}),r}return Promise.resolve()},r.prototype.clear=function(){var e=this;this.all.forEach(function(t){delete e[t]}),this.init()},r.prototype.help=function(){this.logger.info("Available hooks: "+this.all.join(","));var i=[];this.registered.forEach(function(t,e){return i.push(e)}),this.logger.info("Registered hooks: "+i.join(","))};var s=new r,l=function a(t,e,i){return t instanceof RegExp?function(t,e){if(!e)return t;var i=t.source.match(/\((?!\?)/g);if(i)for(var r=0;r<i.length;r++)e.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,pattern:null});return t}(t,e):Array.isArray(t)?function(t,e,i){for(var r=[],n=0;n<t.length;n++)r.push(a(t[n],e,i).source);return new RegExp("(?:"+r.join("|")+")",m(i))}(t,e,i):function(t,e,i){return g(d(t,i),e,i)}(t,e,i)},u=d,h=_,f=g,x="/",P=new RegExp(["(\\\\.)","(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?"].join("|"),"g");function d(t,e){for(var i,r=[],n=0,a=0,o="",s=e&&e.delimiter||x,l=e&&e.whitelist||void 0,u=!1;null!==(i=P.exec(t));){var c=i[0],h=i[1],f=i.index;if(o+=t.slice(a,f),a=f+c.length,h)o+=h[1],u=!0;else{var p="",d=i[2],_=i[3],m=i[4],g=i[5];if(!u&&o.length){var v=o.length-1,y=o[v];(!l||-1<l.indexOf(y))&&(p=y,o=o.slice(0,v))}o&&(r.push(o),o="",u=!1);var w=_||m,b=p||s;r.push({name:d||n++,prefix:p,delimiter:b,optional:"?"===g||"*"===g,repeat:"+"===g||"*"===g,pattern:w?(T=w,T.replace(/([=!:$\/()])/g,"\\$1")):"[^"+S(b===s?b:b+s)+"]+?"})}}var T;return(o||a<t.length)&&r.push(o+t.substr(a)),r}function _(u){for(var c=new Array(u.length),t=0;t<u.length;t++)"object"==typeof u[t]&&(c[t]=new RegExp("^(?:"+u[t].pattern+")$"));return function(t,e){for(var i="",r=e&&e.encode||encodeURIComponent,n=0;n<u.length;n++){var a=u[n];if("string"!=typeof a){var o,s=t?t[a.name]:void 0;if(Array.isArray(s)){if(!a.repeat)throw new TypeError('Expected "'+a.name+'" to not repeat, but got array');if(0===s.length){if(a.optional)continue;throw new TypeError('Expected "'+a.name+'" to not be empty')}for(var l=0;l<s.length;l++){if(o=r(s[l],a),!c[n].test(o))throw new TypeError('Expected all "'+a.name+'" to match "'+a.pattern+'"');i+=(0===l?a.prefix:a.delimiter)+o}}else if("string"!=typeof s&&"number"!=typeof s&&"boolean"!=typeof s){if(!a.optional)throw new TypeError('Expected "'+a.name+'" to be '+(a.repeat?"an array":"a string"))}else{if(o=r(String(s),a),!c[n].test(o))throw new TypeError('Expected "'+a.name+'" to match "'+a.pattern+'", but got "'+o+'"');i+=a.prefix+o}}else i+=a}return i}}function S(t){return t.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function m(t){return t&&t.sensitive?"":"i"}function g(t,e,i){for(var r=(i=i||{}).strict,n=!1!==i.start,a=!1!==i.end,o=i.delimiter||x,s=[].concat(i.endsWith||[]).map(S).concat("$").join("|"),l=n?"^":"",u=0;u<t.length;u++){var c=t[u];if("string"==typeof c)l+=S(c);else{var h=c.repeat?"(?:"+c.pattern+")(?:"+S(c.delimiter)+"(?:"+c.pattern+"))*":c.pattern;e&&e.push(c),l+=c.optional?c.prefix?"(?:"+S(c.prefix)+"("+h+"))?":"("+h+")?":S(c.prefix)+"("+h+")"}}if(a)r||(l+="(?:"+S(o)+")?"),l+="$"===s?"$":"(?="+s+")";else{var f=t[t.length-1],p="string"==typeof f?f[f.length-1]===o:void 0===f;r||(l+="(?:"+S(o)+"(?="+s+"))?"),p||(l+="(?="+S(o)+"|"+s+")")}return new RegExp(l,m(i))}l.parse=u,l.compile=function(t,e){return _(d(t,e))},l.tokensToFunction=h,l.tokensToRegExp=f;var v={container:"container",namespace:"namespace",prefix:"data-barba",prevent:"prevent",wrapper:"wrapper"},y=function(){this.g=v,this.A=new DOMParser};y.prototype.toString=function(t){return t.outerHTML},y.prototype.toDocument=function(t){return this.A.parseFromString(t,"text/html")},y.prototype.toElement=function(t){var e=document.createElement("div");return e.innerHTML=t,e},y.prototype.getHtml=function(t){return void 0===t&&(t=document),this.toString(t.documentElement)},y.prototype.getWrapper=function(t){return void 0===t&&(t=document),t.querySelector("["+this.g.prefix+'="'+this.g.wrapper+'"]')},y.prototype.getContainer=function(t){return void 0===t&&(t=document),t.querySelector("["+this.g.prefix+'="'+this.g.container+'"]')},y.prototype.getNamespace=function(t){void 0===t&&(t=document);var e=t.querySelector("["+this.g.prefix+"-"+this.g.namespace+"]");return e?e.getAttribute(this.g.prefix+"-"+this.g.namespace):null},y.prototype.getHref=function(t){if(t.tagName&&"a"===t.tagName.toLowerCase()){var e=t.getAttribute("href");if(e)return e.baseVal||e}return null};var w=new y,b=function(){this.T=[]},T={current:{configurable:!0},previous:{configurable:!0}};b.prototype.add=function(t,e){this.T.push({url:t,ns:e})},b.prototype.remove=function(){this.T.pop()},b.prototype.push=function(t,e){this.add(t,e),window.history&&window.history.pushState(null,"",t)},b.prototype.cancel=function(){this.remove(),window.history&&window.history.back()},T.current.get=function(){return this.T[this.T.length-1]},T.previous.get=function(){return this.T.length<2?null:this.T[this.T.length-2]},Object.defineProperties(b.prototype,T);var k=new b,E=function(t,a){try{var e=function(){if(!a.next.html)return Promise.resolve(t).then(function(t){var e=a.next,i=a.trigger;if(t){var r=w.toElement(t);e.namespace=w.getNamespace(r),e.container=w.getContainer(r),e.html=t,"popstate"===i?k.add(e.url.href,e.namespace):k.push(e.url.href,e.namespace);var n=w.toDocument(t);document.title=n.title}})}();return Promise.resolve(e&&e.then?e.then(function(){}):void 0)}catch(t){return Promise.reject(t)}},O=l,R={update:E,nextTick:function(){return new Promise(function(t){window.requestAnimationFrame(t)})},pathToRegexp:O},C=function(){return window.location.origin},A=function(t){var e=t||window.location.port,i=window.location.protocol;return""!==e?parseInt(e,10):"https:"===i?443:80},M=function(t){var e,i=t.replace(C(),""),r={},n=i.indexOf("#");0<=n&&(e=i.slice(n+1),i=i.slice(0,n));var a=i.indexOf("?");return 0<=a&&(r=L(i.slice(a+1)),i=i.slice(0,a)),{hash:e,path:i,query:r}},L=function(t){return t.split("&").reduce(function(t,e){var i=e.split("=");return t[i[0]]=i[1],t},{})},D=function(t){return t.replace(/(\/#.*|\/|#.*)$/,"")},F={getHref:function(){return window.location.href},getOrigin:C,getPort:A,getPath:function(t){return M(t).path},parse:M,parseQuery:L,clean:D},z=function(t){if(this.j=[],"boolean"==typeof t)this.R=t;else{var e=Array.isArray(t)?t:[t];this.j=e.map(function(t){return O(t)})}};z.prototype.checkUrl=function(t){if("boolean"==typeof this.R)return this.R;var e=M(t).path;return this.j.some(function(t){return null!==t.exec(e)})};var N=function(e){function t(t){e.call(this,t),this.T=new Map}return e&&(t.__proto__=e),((t.prototype=Object.create(e&&e.prototype)).constructor=t).prototype.set=function(t,e,i){return this.checkUrl(t)||this.T.set(t,{action:i,request:e}),{action:i,request:e}},t.prototype.get=function(t){return this.T.get(t)},t.prototype.getRequest=function(t){return this.T.get(t).request},t.prototype.getAction=function(t){return this.T.get(t).action},t.prototype.has=function(t){return this.T.has(t)},t.prototype.delete=function(t){return this.T.delete(t)},t.prototype.update=function(t,e){var i=Object.assign({},this.T.get(t),e);return this.T.set(t,i),i},t}(z);function I(n,a,o){return void 0===a&&(a=2e3),new Promise(function(e,i){var r=new XMLHttpRequest;r.onreadystatechange=function(){if(r.readyState===XMLHttpRequest.DONE)if(200===r.status)e(r.responseText);else if(r.status){var t={status:r.status,statusText:r.statusText};o(n,t),i(t)}},r.ontimeout=function(){var t=new Error("Timeout error ["+a+"]");o(n,t),i(t)},r.onerror=function(){var t=new Error("Fetch error");o(n,t),i(t)},r.open("GET",n),r.timeout=a,r.setRequestHeader("Accept","text/html,application/xhtml+xml,application/xml"),r.setRequestHeader("x-barba","yes"),r.send()})}var j=function(){return!window.history.pushState},H=function(t){return!t.el||!t.href},B=function(t){var e=t.event;return 1<e.which||e.metaKey||e.ctrlKey||e.shiftKey||e.altKey},X=function(t){var e=t.el;return e.hasAttribute("target")&&"_blank"===e.target},q=function(t){var e=t.el;return void 0!==e.protocol&&window.location.protocol!==e.protocol||void 0!==e.hostname&&window.location.hostname!==e.hostname},Y=function(t){var e=t.el;return void 0!==e.port&&A()!==A(e.port)},V=function(t){var e=t.el;return e.getAttribute&&"string"==typeof e.getAttribute("download")},U=function(t){return t.el.hasAttribute(v.prefix+"-"+v.prevent)},W=function(t){return Boolean(t.el.closest("["+v.prefix+"-"+v.prevent+'="all"]'))},$=function(t){return D(t.href)===D(window.location.href)},G=function(e){function t(t){e.call(this,t),this.suite=[],this.tests=new Map,this.init()}return e&&(t.__proto__=e),((t.prototype=Object.create(e&&e.prototype)).constructor=t).prototype.init=function(){this.add("pushState",j),this.add("exists",H),this.add("newTab",B),this.add("blank",X),this.add("corsDomain",q),this.add("corsPort",Y),this.add("download",V),this.add("preventSelf",U),this.add("preventAll",W),this.add("sameUrl",$,!1)},t.prototype.add=function(t,e,i){void 0===i&&(i=!0),this.tests.set(t,e),i&&this.suite.push(t)},t.prototype.run=function(t,e,i,r){return this.tests.get(t)({el:e,event:i,href:r})},t.prototype.checkLink=function(e,i,r){var n=this;return this.suite.some(function(t){return n.run(t,e,i,r)})},t}(z),Z=function(t){void 0===t&&(t=[]),this.logger=new p("@barba/core"),this.all=[],this.appear=[],this.k=[{name:"namespace",type:"strings"},{name:"custom",type:"function"}],t&&(this.all=this.all.concat(t)),this.update()};Z.prototype.add=function(t,e){switch(t){case"rule":this.k.splice(e.position||0,0,e.value);break;case"transition":default:this.all.push(e)}this.update()},Z.prototype.resolve=function(n,a){var t,o=this;void 0===a&&(a={});var e=a.appear?this.appear:this.all;e=e.filter(a.self?function(t){return t.name&&"self"===t.name}:function(t){return!t.name||"self"!==t.name});var s=new Map,i=e.find(function(e){var i=!0,r={};return!(!a.self||"self"!==e.name)||(o.k.reverse().forEach(function(t){i&&(i=o.O(e,t,n,r),a.appear||(e.from&&e.to&&(i=o.O(e,t,n,r,"from")&&o.O(e,t,n,r,"to")),e.from&&!e.to&&(i=o.O(e,t,n,r,"from")),!e.from&&e.to&&(i=o.O(e,t,n,r,"to"))))}),s.set(e,r),i)}),r=s.get(i),l=[];if(l.push(a.appear?"appear":"page"),a.self&&l.push("self"),r){var u=[i];0<Object.keys(r).length&&u.push(r),(t=this.logger).info.apply(t,["Transition found ["+l.join(",")+"]"].concat(u))}else this.logger.info("No transition found ["+l.join(",")+"]");return i},Z.prototype.update=function(){var e=this;this.all=this.all.map(function(t){return e.L(t)}).sort(function(t,e){return t.priority-e.priority}).reverse().map(function(t){return delete t.priority,t}),this.appear=this.all.filter(function(t){return void 0!==t.appear})},Z.prototype.O=function(t,e,i,r,n){var a=!0,o=!1,s=t,l=e.name,u=l,c=l,h=l,f=n?s[n]:s,p="to"===n?i.next:i.current;if(n?f&&f[l]:f[l]){switch(e.type){case"strings":default:var d=Array.isArray(f[u])?f[u]:[f[u]];p[u]&&-1!==d.indexOf(p[u])&&(o=!0),-1===d.indexOf(p[u])&&(a=!1);break;case"object":var _=Array.isArray(f[c])?f[c]:[f[c]];p[c]&&(p[c].name&&-1!==_.indexOf(p[c].name)&&(o=!0),-1===_.indexOf(p[c].name)&&(a=!1));break;case"function":f[h](i)?o=!0:a=!1}o&&(n?(r[n]=r[n]||{},r[n][l]=s[n][l]):r[l]=s[l])}return a},Z.prototype.M=function(t,e,i){var r=0;return(t[e]||t.from&&t.from[e]||t.to&&t.to[e])&&(r+=Math.pow(10,i),t.from&&t.from[e]&&(r+=1),t.to&&t.to[e]&&(r+=2)),r},Z.prototype.L=function(i){var r=this,n=i.priority=0;return this.k.forEach(function(t,e){n+=r.M(i,t.name,e+1)}),i.priority=n,i};var Q=function(t){void 0===t&&(t=[]),this.logger=new p("@barba/core"),this.S=!1,this.store=new Z(t)},K={isRunning:{configurable:!0},hasAppear:{configurable:!0},hasSelf:{configurable:!0},shouldWait:{configurable:!0}};Q.prototype.get=function(t,e){return this.store.resolve(t,e)},K.isRunning.get=function(){return this.S},K.isRunning.set=function(t){this.S=t},K.hasAppear.get=function(){return 0<this.store.appear.length},K.hasSelf.get=function(){return this.store.all.some(function(t){return"self"===t.name})},K.shouldWait.get=function(){return this.store.all.some(function(t){return t.to&&!t.to.route||t.sync})},Q.prototype.doAppear=function(t){var e=t.data,i=t.transition;try{var r=this;function n(t){r.S=!1}var a=i||{};r.S=!0;var o=c(function(){return Promise.resolve(r.$("beforeAppear",e,a)).then(function(){return Promise.resolve(r.appear(e,a)).then(function(){return Promise.resolve(r.$("afterAppear",e,a)).then(function(){})})})},function(t){throw r.S=!1,r.logger.error(t),new Error("Transition error [appear]")});return o&&o.then?o.then(n):n()}catch(t){return Promise.reject(t)}},Q.prototype.doPage=function(t){var r=t.data,e=t.transition,n=t.page,a=t.wrapper;try{var o=this;function i(t){o.S=!1}var s=e||{},l=!0===s.sync||!1;o.S=!0;var u=c(function(){function t(){return Promise.resolve(o.$("before",r,s)).then(function(){function t(t){return Promise.resolve(o.$("after",r,s)).then(function(){return Promise.resolve(o.remove(r)).then(function(){})})}var e=function(){if(l)return c(function(){return Promise.resolve(o.add(r,a)).then(function(){return Promise.resolve(o.$("beforeLeave",r,s)).then(function(){return Promise.resolve(o.$("beforeEnter",r,s)).then(function(){return Promise.resolve(Promise.all([o.leave(r,s),o.enter(r,s)])).then(function(){return Promise.resolve(o.$("afterLeave",r,s)).then(function(){return Promise.resolve(o.$("afterEnter",r,s)).then(function(){})})})})})})},function(){throw new Error("Transition error [page][sync]")});function t(t){return c(function(){var t=function(){if(!1!==e)return Promise.resolve(o.add(r,a)).then(function(){return Promise.resolve(o.$("beforeEnter",r,s)).then(function(){return Promise.resolve(o.enter(r,s,e)).then(function(){return Promise.resolve(o.$("afterEnter",r,s)).then(function(){})})})})}();if(t&&t.then)return t.then(function(){})},function(){throw new Error("Transition error [page][enter]")})}var e=!1,i=c(function(){return Promise.resolve(o.$("beforeLeave",r,s)).then(function(){return Promise.resolve(Promise.all([o.leave(r,s),E(n,r)]).then(function(t){return t[0]})).then(function(t){return e=t,Promise.resolve(o.$("afterLeave",r,s)).then(function(){})})})},function(){throw new Error("Transition error [page][leave]")});return i&&i.then?i.then(t):t()}();return e&&e.then?e.then(t):t()})}var e=function(){if(l)return Promise.resolve(E(n,r)).then(function(){})}();return e&&e.then?e.then(t):t()},function(t){throw o.S=!1,o.logger.error(t),new Error("Transition error")});return u&&u.then?u.then(i):i()}catch(t){return Promise.reject(t)}},Q.prototype.appear=function(t,e){try{return Promise.resolve(s.do("appear",t,e)).then(function(){return e.appear?a(e.appear)(t):Promise.resolve()})}catch(t){return Promise.reject(t)}},Q.prototype.leave=function(t,e){try{return Promise.resolve(s.do("leave",t,e)).then(function(){return e.leave?a(e.leave)(t):Promise.resolve()})}catch(t){return Promise.reject(t)}},Q.prototype.enter=function(t,e,i){try{return Promise.resolve(s.do("enter",t,e)).then(function(){return e.enter?a(e.enter)(t,i):Promise.resolve()})}catch(t){return Promise.reject(t)}},Q.prototype.add=function(t,e){try{e.appendChild(t.next.container),s.do("nextAdded",t)}catch(t){return Promise.reject(t)}},Q.prototype.remove=function(t){try{var e=t.current.container;document.body.contains(e)&&(e.parentNode.removeChild(e),s.do("currentRemoved",t))}catch(t){return Promise.reject(t)}},Q.prototype.$=function(t,e,i){try{return Promise.resolve(s.do(t,e,i)).then(function(){return i[t]?a(i[t])(e):Promise.resolve()})}catch(t){return Promise.reject(t)}},Object.defineProperties(Q.prototype,K);var J=function(t){var e=this;this.names=["beforeAppear","afterAppear","beforeLeave","afterLeave","beforeEnter","afterEnter"],this.byNamespace=new Map,0!==t.length&&(t.forEach(function(t){e.byNamespace.set(t.namespace,t)}),this.names.forEach(function(t){s[t](e.q(t),e)}),s.ready(this.q("beforeEnter"),this),s.ready(this.q("afterEnter"),this))};J.prototype.q=function(r){var n=this;return function(t){var e=r.match(/enter/i)?t.next:t.current,i=n.byNamespace.get(e.namespace);i&&i[r]&&i[r](t)}},Element.prototype.matches||(Element.prototype.matches=Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector),Element.prototype.closest||(Element.prototype.closest=function(t){var e=this;do{if(e.matches(t))return e;e=e.parentElement||e.parentNode}while(null!==e&&1===e.nodeType);return null});var tt={container:void 0,html:void 0,namespace:void 0,url:{hash:void 0,href:void 0,path:void 0,query:{}}},et=function(){this.version="2.3.15",this.schemaPage=tt,this.Logger=p,this.logger=new p("@barba/core"),this.plugins=[],this.hooks=s,this.dom=w,this.helpers=R,this.history=k,this.request=I,this.url=F},it={data:{configurable:!0},wrapper:{configurable:!0}};return et.prototype.use=function(t,e){var i=this.plugins;-1<i.indexOf(t)?this.logger.warn("Plugin ["+t.name+"] already installed."):"function"==typeof t.install?(t.install(this,e),i.push(t)):this.logger.warn("Plugin ["+t.name+'] has no "install" method.')},et.prototype.init=function(t){void 0===t&&(t={});var e=t.transitions;void 0===e&&(e=[]);var i=t.views;void 0===i&&(i=[]);var r=t.prevent;void 0===r&&(r=null);var n=t.timeout;void 0===n&&(n=2e3);var a=t.requestError,o=t.cacheIgnore;void 0===o&&(o=!1);var s=t.prefetchIgnore;void 0===s&&(s=!1);var l=t.schema;void 0===l&&(l=v);var u=t.debug;void 0===u&&(u=!1);var c=t.logLevel;if(void 0===c&&(c="off"),p.setLevel(!0===u?"debug":c),this.logger.info(this.version),Object.keys(l).forEach(function(t){v[t]&&(v[t]=l[t])}),this.C=a,this.timeout=n,this.cacheIgnore=o,this.prefetchIgnore=s,this.B=this.dom.getWrapper(),!this.B)throw new Error("[@barba/core] No Barba wrapper found");this.B.setAttribute("aria-live","polite"),this.H();var h=this.data.current;if(!h.container)throw new Error("[@barba/core] No Barba container found");if(this.cache=new N(o),this.prevent=new G(s),this.transitions=new Q(e),this.views=new J(i),null!==r){if("function"!=typeof r)throw new Error("[@barba/core] Prevent should be a function");this.prevent.add("preventCustom",r)}this.history.add(h.url.href,h.namespace),this.I=this.I.bind(this),this.N=this.N.bind(this),this.U=this.U.bind(this),this.D(),this.plugins.forEach(function(t){return t.init()});var f=this.data;f.trigger="barba",f.next=f.current,this.hooks.do("ready",f),this.appear(),this.H()},et.prototype.destroy=function(){this.H(),this.X(),this.hooks.clear(),this.plugins=[]},it.data.get=function(){return this._},it.wrapper.get=function(){return this.B},et.prototype.force=function(t){window.location.assign(t)},et.prototype.go=function(t,e,i){var r;if(void 0===e&&(e="barba"),!(r="popstate"===e?this.history.current&&this.url.getPath(this.history.current.url)===this.url.getPath(t):this.prevent.run("sameUrl",null,null,t))||this.transitions.hasSelf)return i&&(i.stopPropagation(),i.preventDefault()),this.page(t,e,r)},et.prototype.appear=function(){try{var i=this,t=function(){if(i.transitions.hasAppear){var t=c(function(){var t=i._,e=i.transitions.get(t,{appear:!0});return Promise.resolve(i.transitions.doAppear({transition:e,data:t})).then(function(){})},function(t){i.logger.error(t)});if(t&&t.then)return t.then(function(){})}}();return t&&t.then?t.then(function(){}):void 0}catch(i){return Promise.reject(i)}},et.prototype.page=function(t,e,i){try{var r=this;function n(){var e=r.data;return Promise.resolve(r.hooks.do("page",e)).then(function(){var t=c(function(){var t=r.transitions.get(e,{appear:!1,self:i});return Promise.resolve(r.transitions.doPage({data:e,page:a,transition:t,wrapper:r.B})).then(function(){r.H()})},function(t){r.logger.error(t)});if(t&&t.then)return t.then(function(){})})}if(r.transitions.isRunning)return void r.force(t);r.data.next.url=Object.assign({},{href:t},r.url.parse(t)),r.data.trigger=e;var a=r.cache.has(t)?r.cache.update(t,{action:"click"}).request:r.cache.set(t,r.request(t,r.timeout,r.onRequestError.bind(r,e)),"click").request,o=function(){if(r.transitions.shouldWait)return Promise.resolve(E(a,r.data)).then(function(){})}();return o&&o.then?o.then(n):n()}catch(t){return Promise.reject(t)}},et.prototype.onRequestError=function(t){for(var e=[],i=arguments.length-1;0<i--;)e[i]=arguments[i+1];this.transitions.isRunning=!1;var r=e[0],n=e[1],a=this.cache.getAction(r);return this.cache.delete(r),!(this.C&&!1===this.C(t,a,r,n)||("click"===a&&this.force(r),1))},et.prototype.prefetch=function(t){var e=this;this.cache.has(t)||this.cache.set(t,this.request(t,this.timeout,this.onRequestError.bind(this,"barba")).catch(function(t){e.logger.error(t)}),"prefetch")},et.prototype.D=function(){!0!==this.prefetchIgnore&&(document.addEventListener("mouseover",this.I),document.addEventListener("touchstart",this.I)),document.addEventListener("click",this.N),window.addEventListener("popstate",this.U)},et.prototype.X=function(){!0!==this.prefetchIgnore&&(document.removeEventListener("mouseover",this.I),document.removeEventListener("touchstart",this.I)),document.removeEventListener("click",this.N),window.removeEventListener("popstate",this.U)},et.prototype.I=function(t){var e=this,i=this.F(t);if(i){var r=this.dom.getHref(i);this.prevent.checkUrl(r)||this.cache.has(r)||this.cache.set(r,this.request(r,this.timeout,this.onRequestError.bind(this,i)).catch(function(t){e.logger.error(t)}),"enter")}},et.prototype.N=function(t){var e=this.F(t);e&&this.go(this.dom.getHref(e),e,t)},et.prototype.U=function(){this.go(this.url.getHref(),"popstate")},et.prototype.F=function(t){for(var e=t.target;e&&!this.dom.getHref(e);)e=e.parentNode;if(e&&!this.prevent.checkLink(e,t,this.dom.getHref(e)))return e},et.prototype.H=function(){var t=this.url.getHref(),e={container:this.dom.getContainer(),html:this.dom.getHtml(),namespace:this.dom.getNamespace(),url:Object.assign({},{href:t},this.url.parse(t))};this._={current:e,next:Object.assign({},this.schemaPage),trigger:void 0},this.hooks.do("reset",this.data)},Object.defineProperties(et.prototype,it),new et}()},function(e,i,r){var a;!function(){"use strict";
/**
	 * @preserve FastClick: polyfill to remove click delays on browsers with touch UIs.
	 *
	 * @codingstandard ftlabs-jsv2
	 * @copyright The Financial Times Limited [All Rights Reserved]
	 * @license MIT License (see LICENSE.txt)
	 */function s(n,t){var e;if(t=t||{},this.trackingClick=!1,this.trackingClickStart=0,this.targetElement=null,this.touchStartX=0,this.touchStartY=0,this.lastTouchIdentifier=0,this.touchBoundary=t.touchBoundary||10,this.layer=n,this.tapDelay=t.tapDelay||200,this.tapTimeout=t.tapTimeout||700,!s.notNeeded(n)){for(var i=["onMouse","onClick","onTouchStart","onTouchMove","onTouchEnd","onTouchCancel"],r=0,a=i.length;r<a;r++)this[i[r]]=o(this[i[r]],this);l&&(n.addEventListener("mouseover",this.onMouse,!0),n.addEventListener("mousedown",this.onMouse,!0),n.addEventListener("mouseup",this.onMouse,!0)),n.addEventListener("click",this.onClick,!0),n.addEventListener("touchstart",this.onTouchStart,!1),n.addEventListener("touchmove",this.onTouchMove,!1),n.addEventListener("touchend",this.onTouchEnd,!1),n.addEventListener("touchcancel",this.onTouchCancel,!1),Event.prototype.stopImmediatePropagation||(n.removeEventListener=function(t,e,i){var r=Node.prototype.removeEventListener;"click"===t?r.call(n,t,e.hijacked||e,i):r.call(n,t,e,i)},n.addEventListener=function(t,e,i){var r=Node.prototype.addEventListener;"click"===t?r.call(n,t,e.hijacked||(e.hijacked=function(t){t.propagationStopped||e(t)}),i):r.call(n,t,e,i)}),"function"==typeof n.onclick&&(e=n.onclick,n.addEventListener("click",function(t){e(t)},!1),n.onclick=null)}function o(t,e){return function(){return t.apply(e,arguments)}}}var t=0<=navigator.userAgent.indexOf("Windows Phone"),l=0<navigator.userAgent.indexOf("Android")&&!t,u=/iP(ad|hone|od)/.test(navigator.userAgent)&&!t,c=u&&/OS 4_\d(_\d)?/.test(navigator.userAgent),h=u&&/OS [6-7]_\d/.test(navigator.userAgent),n=0<navigator.userAgent.indexOf("BB10");s.prototype.needsClick=function(t){switch(t.nodeName.toLowerCase()){case"button":case"select":case"textarea":if(t.disabled)return!0;break;case"input":if(u&&"file"===t.type||t.disabled)return!0;break;case"label":case"iframe":case"video":return!0}return/\bneedsclick\b/.test(t.className)},s.prototype.needsFocus=function(t){switch(t.nodeName.toLowerCase()){case"textarea":return!0;case"select":return!l;case"input":switch(t.type){case"button":case"checkbox":case"file":case"image":case"radio":case"submit":return!1}return!t.disabled&&!t.readOnly;default:return/\bneedsfocus\b/.test(t.className)}},s.prototype.sendClick=function(t,e){var i,r;document.activeElement&&document.activeElement!==t&&document.activeElement.blur(),r=e.changedTouches[0],(i=document.createEvent("MouseEvents")).initMouseEvent(this.determineEventType(t),!0,!0,window,1,r.screenX,r.screenY,r.clientX,r.clientY,!1,!1,!1,!1,0,null),i.forwardedTouchEvent=!0,t.dispatchEvent(i)},s.prototype.determineEventType=function(t){return l&&"select"===t.tagName.toLowerCase()?"mousedown":"click"},s.prototype.focus=function(t){var e;u&&t.setSelectionRange&&0!==t.type.indexOf("date")&&"time"!==t.type&&"month"!==t.type?(e=t.value.length,t.setSelectionRange(e,e)):t.focus()},s.prototype.updateScrollParent=function(t){var e,i;if(!(e=t.fastClickScrollParent)||!e.contains(t)){i=t;do{if(i.scrollHeight>i.offsetHeight){e=i,t.fastClickScrollParent=i;break}i=i.parentElement}while(i)}e&&(e.fastClickLastScrollTop=e.scrollTop)},s.prototype.getTargetElementFromEventTarget=function(t){return t.nodeType===Node.TEXT_NODE?t.parentNode:t},s.prototype.onTouchStart=function(t){var e,i,r;if(1<t.targetTouches.length)return!0;if(e=this.getTargetElementFromEventTarget(t.target),i=t.targetTouches[0],u){if((r=window.getSelection()).rangeCount&&!r.isCollapsed)return!0;if(!c){if(i.identifier&&i.identifier===this.lastTouchIdentifier)return t.preventDefault(),!1;this.lastTouchIdentifier=i.identifier,this.updateScrollParent(e)}}return this.trackingClick=!0,this.trackingClickStart=t.timeStamp,this.targetElement=e,this.touchStartX=i.pageX,this.touchStartY=i.pageY,t.timeStamp-this.lastClickTime<this.tapDelay&&t.preventDefault(),!0},s.prototype.touchHasMoved=function(t){var e=t.changedTouches[0],i=this.touchBoundary;return Math.abs(e.pageX-this.touchStartX)>i||Math.abs(e.pageY-this.touchStartY)>i},s.prototype.onTouchMove=function(t){return this.trackingClick&&(this.targetElement===this.getTargetElementFromEventTarget(t.target)&&!this.touchHasMoved(t)||(this.trackingClick=!1,this.targetElement=null)),!0},s.prototype.findControl=function(t){return void 0!==t.control?t.control:t.htmlFor?document.getElementById(t.htmlFor):t.querySelector("button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea")},s.prototype.onTouchEnd=function(t){var e,i,r,n,a,o=this.targetElement;if(!this.trackingClick)return!0;if(t.timeStamp-this.lastClickTime<this.tapDelay)return this.cancelNextClick=!0;if(t.timeStamp-this.trackingClickStart>this.tapTimeout)return!0;if(this.cancelNextClick=!1,this.lastClickTime=t.timeStamp,i=this.trackingClickStart,this.trackingClick=!1,this.trackingClickStart=0,h&&(a=t.changedTouches[0],(o=document.elementFromPoint(a.pageX-window.pageXOffset,a.pageY-window.pageYOffset)||o).fastClickScrollParent=this.targetElement.fastClickScrollParent),"label"===(r=o.tagName.toLowerCase())){if(e=this.findControl(o)){if(this.focus(o),l)return!1;o=e}}else if(this.needsFocus(o))return 100<t.timeStamp-i||u&&window.top!==window&&"input"===r?this.targetElement=null:(this.focus(o),this.sendClick(o,t),u&&"select"===r||(this.targetElement=null,t.preventDefault())),!1;return!(!u||c||!(n=o.fastClickScrollParent)||n.fastClickLastScrollTop===n.scrollTop)||(this.needsClick(o)||(t.preventDefault(),this.sendClick(o,t)),!1)},s.prototype.onTouchCancel=function(){this.trackingClick=!1,this.targetElement=null},s.prototype.onMouse=function(t){return!this.targetElement||(!!t.forwardedTouchEvent||(!t.cancelable||(!(!this.needsClick(this.targetElement)||this.cancelNextClick)||(t.stopImmediatePropagation?t.stopImmediatePropagation():t.propagationStopped=!0,t.stopPropagation(),t.preventDefault(),!1))))},s.prototype.onClick=function(t){var e;return this.trackingClick?(this.targetElement=null,!(this.trackingClick=!1)):"submit"===t.target.type&&0===t.detail||((e=this.onMouse(t))||(this.targetElement=null),e)},s.prototype.destroy=function(){var t=this.layer;l&&(t.removeEventListener("mouseover",this.onMouse,!0),t.removeEventListener("mousedown",this.onMouse,!0),t.removeEventListener("mouseup",this.onMouse,!0)),t.removeEventListener("click",this.onClick,!0),t.removeEventListener("touchstart",this.onTouchStart,!1),t.removeEventListener("touchmove",this.onTouchMove,!1),t.removeEventListener("touchend",this.onTouchEnd,!1),t.removeEventListener("touchcancel",this.onTouchCancel,!1)},s.notNeeded=function(t){var e,i,r;if(void 0===window.ontouchstart)return!0;if(i=+(/Chrome\/([0-9]+)/.exec(navigator.userAgent)||[,0])[1]){if(!l)return!0;if(e=document.querySelector("meta[name=viewport]")){if(-1!==e.content.indexOf("user-scalable=no"))return!0;if(31<i&&document.documentElement.scrollWidth<=window.outerWidth)return!0}}if(n&&10<=(r=navigator.userAgent.match(/Version\/([0-9]*)\.([0-9]*)/))[1]&&3<=r[2]&&(e=document.querySelector("meta[name=viewport]"))){if(-1!==e.content.indexOf("user-scalable=no"))return!0;if(document.documentElement.scrollWidth<=window.outerWidth)return!0}return"none"===t.style.msTouchAction||"manipulation"===t.style.touchAction||(!!(27<=+(/Firefox\/([0-9]+)/.exec(navigator.userAgent)||[,0])[1]&&(e=document.querySelector("meta[name=viewport]"))&&(-1!==e.content.indexOf("user-scalable=no")||document.documentElement.scrollWidth<=window.outerWidth))||("none"===t.style.touchAction||"manipulation"===t.style.touchAction))},s.attach=function(t,e){return new s(t,e)},void 0===(a=function(){return s}.call(i,r,i,e))||(e.exports=a)}()},function(t,e,i){var n,r;t.exports=(n=window.requestIdleCallback||function(t){var e=Date.now();return setTimeout(function(){t({didTimeout:!1,timeRemaining:function(){return Math.max(0,50-(Date.now()-e))}})},1)},(r=function(){this.name="@barba/prefetch",this.version="2.1.6",this.toPrefetch=new Set}).prototype.install=function(t,e){void 0===e&&(e={});var i=e.root;void 0===i&&(i=document.body);var r=e.timeout;void 0===r&&(r=2e3),this.logger=new t.Logger(this.name),this.logger.info(this.version),this.barba=t,this.root=i,this.timeout=r},r.prototype.init=function(){var r=this;this.barba.prefetchIgnore?this.logger.warn("barba.prefetchIgnore is enabled"):this.barba.cacheIgnore?this.logger.warn("barba.cacheIgnore is enabled"):(this.observer=new IntersectionObserver(function(t){t.forEach(function(t){if(t.isIntersecting){var e=t.target,i=r.barba.dom.getHref(e);r.toPrefetch.has(i)&&(r.observer.unobserve(e),r.barba.cache.has(i)?r.barba.cache.update(i,{action:"prefetch"}):r.barba.cache.set(i,r.barba.request(i,r.barba.timeout,r.barba.onRequestError.bind(r.barba,"barba")).catch(function(t){r.logger.error(t)}),"prefetch"))}})}),this.observe(),this.barba.hooks.after(this.observe,this))},r.prototype.observe=function(){var r=this;n(function(){r.root.querySelectorAll("a").forEach(function(t){var e=t,i=r.barba.dom.getHref(e);r.barba.cache.has(i)||r.barba.prevent.checkUrl(i)||r.barba.prevent.checkLink(e,{},i)||(r.observer.observe(t),r.toPrefetch.add(i))})},{timeout:this.timeout})},new r)},function(t,e,i){t.exports=i(7)},function(t,e){t.exports=function(t){if(!t.webpackPolyfill){var e=Object.create(t);e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),Object.defineProperty(e,"exports",{enumerable:!0}),e.webpackPolyfill=1}return e}},function(t,e){var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(t){"object"==typeof window&&(i=window)}t.exports=i},function(t,e,i){"use strict";i.r(e);var re=i(0);
/*!
 * VERSION: 2.1.3
 * DATE: 2019-05-17
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 **/
re.e._gsDefine("TweenMax",["core.Animation","core.SimpleTimeline","TweenLite"],function(){function _(t){var e,i=[],r=t.length;for(e=0;e!==r;i.push(t[e++]));return i}function m(t,e,i){var r,n,a=t.cycle;for(r in a)n=a[r],t[r]="function"==typeof n?n(i,e[i],e):n[i%n.length];delete t.cycle}function g(t){if("function"==typeof t)return t;var d="object"==typeof t?t:{each:t},_=d.ease,m=d.from||0,g=d.base||0,v={},y=isNaN(m),w=d.axis,b={center:.5,end:1}[m]||0;return function(t,e,i){var r,n,a,o,s,l,u,c,h,f=(i||d).length,p=v[f];if(!p){if(!(h="auto"===d.grid?0:(d.grid||[1/0])[0])){for(u=-1/0;u<(u=i[h++].getBoundingClientRect().left)&&h<f;);h--}for(p=v[f]=[],r=y?Math.min(h,f)*b-.5:m%h,n=y?f*b/h-.5:m/h|0,c=1/(u=0),l=0;l<f;l++)a=l%h-r,o=n-(l/h|0),p[l]=s=w?Math.abs("y"===w?o:a):Math.sqrt(a*a+o*o),u<s&&(u=s),s<c&&(c=s);p.max=u-c,p.min=c,p.v=f=d.amount||d.each*(f<h?f-1:w?"y"===w?f/h:h:Math.max(h,f/h))||0,p.b=f<0?g-f:g}return f=(p[t]-p.min)/p.max,p.b+(_?_.getRatio(f):f)*p.v}}var v=function(t,e,i){re.f.call(this,t,e,i),this._cycle=0,this._yoyo=!0===this.vars.yoyo||!!this.vars.yoyoEase,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._repeat&&this._uncache(!0),this.render=v.prototype.render},y=1e-8,w=re.f._internals,b=w.isSelector,T=w.isArray,t=v.prototype=re.f.to({},.1,{}),x=[];v.version="2.1.3",t.constructor=v,t.kill()._gc=!1,v.killTweensOf=v.killDelayedCallsTo=re.f.killTweensOf,v.getTweensOf=re.f.getTweensOf,v.lagSmoothing=re.f.lagSmoothing,v.ticker=re.f.ticker,v.render=re.f.render,v.distribute=g,t.invalidate=function(){return this._yoyo=!0===this.vars.yoyo||!!this.vars.yoyoEase,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._yoyoEase=null,this._uncache(!0),re.f.prototype.invalidate.call(this)},t.updateTo=function(t,e){var i,r=this,n=r.ratio,a=r.vars.immediateRender||t.immediateRender;for(i in e&&r._startTime<r._timeline._time&&(r._startTime=r._timeline._time,r._uncache(!1),r._gc?r._enabled(!0,!1):r._timeline.insert(r,r._startTime-r._delay)),t)r.vars[i]=t[i];if(r._initted||a)if(e)r._initted=!1,a&&r.render(0,!0,!0);else if(r._gc&&r._enabled(!0,!1),r._notifyPluginsOfEnabled&&r._firstPT&&re.f._onPluginEvent("_onDisable",r),.998<r._time/r._duration){var o=r._totalTime;r.render(0,!0,!1),r._initted=!1,r.render(o,!0,!1)}else if(r._initted=!1,r._init(),0<r._time||a)for(var s,l=1/(1-n),u=r._firstPT;u;)s=u.s+u.c,u.c*=l,u.s=s-u.c,u=u._next;return r},t.render=function(t,e,i){this._initted||0===this._duration&&this.vars.repeat&&this.invalidate();var r,n,a,o,s,l,u,c,h,f=this,p=f._dirty?f.totalDuration():f._totalDuration,d=f._time,_=f._totalTime,m=f._cycle,g=f._duration,v=f._rawPrevTime;if(p-y<=t&&0<=t?(f._totalTime=p,f._cycle=f._repeat,f._yoyo&&0!=(1&f._cycle)?(f._time=0,f.ratio=f._ease._calcEnd?f._ease.getRatio(0):0):(f._time=g,f.ratio=f._ease._calcEnd?f._ease.getRatio(1):1),f._reversed||(r=!0,n="onComplete",i=i||f._timeline.autoRemoveChildren),0===g&&(!f._initted&&f.vars.lazy&&!i||(f._startTime===f._timeline._duration&&(t=0),(v<0||t<=0&&-y<=t||v===y&&"isPause"!==f.data)&&v!==t&&(i=!0,y<v&&(n="onReverseComplete")),f._rawPrevTime=c=!e||t||v===t?t:y))):t<y?(f._totalTime=f._time=f._cycle=0,f.ratio=f._ease._calcEnd?f._ease.getRatio(0):0,(0!==_||0===g&&0<v)&&(n="onReverseComplete",r=f._reversed),-y<t?t=0:t<0&&(f._active=!1,0===g&&(!f._initted&&f.vars.lazy&&!i||(0<=v&&(i=!0),f._rawPrevTime=c=!e||t||v===t?t:y))),f._initted||(i=!0)):(f._totalTime=f._time=t,0!==f._repeat&&(o=g+f._repeatDelay,f._cycle=f._totalTime/o>>0,0!==f._cycle&&f._cycle===f._totalTime/o&&_<=t&&f._cycle--,f._time=f._totalTime-f._cycle*o,f._yoyo&&0!=(1&f._cycle)&&(f._time=g-f._time,(h=f._yoyoEase||f.vars.yoyoEase)&&(f._yoyoEase||(!0!==h||f._initted?f._yoyoEase=h=!0===h?f._ease:h instanceof re.b?h:re.b.map[h]:(h=f.vars.ease,f._yoyoEase=h=h?h instanceof re.b?h:"function"==typeof h?new re.b(h,f.vars.easeParams):re.b.map[h]||re.f.defaultEase:re.f.defaultEase)),f.ratio=h?1-h.getRatio((g-f._time)/g):0)),f._time>g?f._time=g:f._time<0&&(f._time=0)),f._easeType&&!h?(s=f._time/g,(1===(l=f._easeType)||3===l&&.5<=s)&&(s=1-s),3===l&&(s*=2),1===(u=f._easePower)?s*=s:2===u?s*=s*s:3===u?s*=s*s*s:4===u&&(s*=s*s*s*s),f.ratio=1===l?1-s:2===l?s:f._time/g<.5?s/2:1-s/2):h||(f.ratio=f._ease.getRatio(f._time/g))),d!==f._time||i||m!==f._cycle){if(!f._initted){if(f._init(),!f._initted||f._gc)return;if(!i&&f._firstPT&&(!1!==f.vars.lazy&&f._duration||f.vars.lazy&&!f._duration))return f._time=d,f._totalTime=_,f._rawPrevTime=v,f._cycle=m,w.lazyTweens.push(f),void(f._lazy=[t,e]);!f._time||r||h?r&&this._ease._calcEnd&&!h&&(f.ratio=f._ease.getRatio(0===f._time?0:1)):f.ratio=f._ease.getRatio(f._time/g)}for(!1!==f._lazy&&(f._lazy=!1),f._active||!f._paused&&f._time!==d&&0<=t&&(f._active=!0),0===_&&(2===f._initted&&0<t&&f._init(),f._startAt&&(0<=t?f._startAt.render(t,!0,i):n=n||"_dummyGS"),f.vars.onStart&&(0===f._totalTime&&0!==g||e||f._callback("onStart"))),a=f._firstPT;a;)a.f?a.t[a.p](a.c*f.ratio+a.s):a.t[a.p]=a.c*f.ratio+a.s,a=a._next;f._onUpdate&&(t<0&&f._startAt&&f._startTime&&f._startAt.render(t,!0,i),e||f._totalTime===_&&!n||f._callback("onUpdate")),f._cycle!==m&&(e||f._gc||f.vars.onRepeat&&f._callback("onRepeat")),n&&(f._gc&&!i||(t<0&&f._startAt&&!f._onUpdate&&f._startTime&&f._startAt.render(t,!0,i),r&&(f._timeline.autoRemoveChildren&&f._enabled(!1,!1),f._active=!1),!e&&f.vars[n]&&f._callback(n),0===g&&f._rawPrevTime===y&&c!==y&&(f._rawPrevTime=0)))}else _!==f._totalTime&&f._onUpdate&&(e||f._callback("onUpdate"))},v.to=function(t,e,i){return new v(t,e,i)},v.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new v(t,e,i)},v.fromTo=function(t,e,i,r){return r.startAt=i,r.immediateRender=0!=r.immediateRender&&0!=i.immediateRender,new v(t,e,r)},v.staggerTo=v.allTo=function(t,e,i,r,n,a,o){var s,l,u,c,h=[],f=g(i.stagger||r),p=i.cycle,d=(i.startAt||x).cycle;for(T(t)||("string"==typeof t&&(t=re.f.selector(t)||t),b(t)&&(t=_(t))),s=(t=t||[]).length-1,u=0;u<=s;u++){for(c in l={},i)l[c]=i[c];if(p&&(m(l,t,u),null!=l.duration&&(e=l.duration,delete l.duration)),d){for(c in d=l.startAt={},i.startAt)d[c]=i.startAt[c];m(l.startAt,t,u)}l.delay=f(u,t[u],t)+(l.delay||0),u===s&&n&&(l.onComplete=function(){i.onComplete&&i.onComplete.apply(i.onCompleteScope||this,arguments),n.apply(o||i.callbackScope||this,a||x)}),h[u]=new v(t[u],e,l)}return h},v.staggerFrom=v.allFrom=function(t,e,i,r,n,a,o){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,v.staggerTo(t,e,i,r,n,a,o)},v.staggerFromTo=v.allFromTo=function(t,e,i,r,n,a,o,s){return r.startAt=i,r.immediateRender=0!=r.immediateRender&&0!=i.immediateRender,v.staggerTo(t,e,r,n,a,o,s)},v.delayedCall=function(t,e,i,r,n){return new v(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:r,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,useFrames:n,overwrite:0})},v.set=function(t,e){return new v(t,0,e)},v.isTweening=function(t){return 0<re.f.getTweensOf(t,!0).length};var a=function(t,e){for(var i=[],r=0,n=t._first;n;)n instanceof re.f?i[r++]=n:(e&&(i[r++]=n),r=(i=i.concat(a(n,e))).length),n=n._next;return i},c=v.getAllTweens=function(t){return a(re.a._rootTimeline,t).concat(a(re.a._rootFramesTimeline,t))};v.killAll=function(t,e,i,r){null==e&&(e=!0),null==i&&(i=!0);var n,a,o,s=c(0!=r),l=s.length,u=e&&i&&r;for(o=0;o<l;o++)a=s[o],(u||a instanceof re.c||(n=a.target===a.vars.onComplete)&&i||e&&!n)&&(t?a.totalTime(a._reversed?0:a.totalDuration()):a._enabled(!1,!1))},v.killChildTweensOf=function(t,e){if(null!=t){var i,r,n,a,o,s=w.tweenLookup;if("string"==typeof t&&(t=re.f.selector(t)||t),b(t)&&(t=_(t)),T(t))for(a=t.length;-1<--a;)v.killChildTweensOf(t[a],e);else{for(n in i=[],s)for(r=s[n].target.parentNode;r;)r===t&&(i=i.concat(s[n].tweens)),r=r.parentNode;for(o=i.length,a=0;a<o;a++)e&&i[a].totalTime(i[a].totalDuration()),i[a]._enabled(!1,!1)}}};function r(t,e,i,r){e=!1!==e,i=!1!==i;for(var n,a,o=c(r=!1!==r),s=e&&i&&r,l=o.length;-1<--l;)a=o[l],(s||a instanceof re.c||(n=a.target===a.vars.onComplete)&&i||e&&!n)&&a.paused(t)}return v.pauseAll=function(t,e,i){r(!0,t,e,i)},v.resumeAll=function(t,e,i){r(!1,t,e,i)},v.globalTimeScale=function(t){var e=re.a._rootTimeline,i=re.f.ticker.time;return arguments.length?(t=t||y,e._startTime=i-(i-e._startTime)*e._timeScale/t,e=re.a._rootFramesTimeline,i=re.f.ticker.frame,e._startTime=i-(i-e._startTime)*e._timeScale/t,e._timeScale=re.a._rootTimeline._timeScale=t,t):e._timeScale},t.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!=(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this.duration()?this._time/this._duration:this.ratio},t.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()},t.time=function(t,e){if(!arguments.length)return this._time;this._dirty&&this.totalDuration();var i=this._duration,r=this._cycle,n=r*(i+this._repeatDelay);return i<t&&(t=i),this.totalTime(this._yoyo&&1&r?i-t+n:this._repeat?t+n:t,e)},t.duration=function(t){return arguments.length?re.a.prototype.duration.call(this,t):this._duration},t.totalDuration=function(t){return arguments.length?-1===this._repeat?this:this.duration((t-this._repeat*this._repeatDelay)/(this._repeat+1)):(this._dirty&&(this._totalDuration=-1===this._repeat?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat,this._dirty=!1),this._totalDuration)},t.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},t.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},t.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},v},!0);var r=re.g.TweenMax;
/*!
 * VERSION: 2.1.3
 * DATE: 2019-05-17
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 */
re.e._gsDefine("plugins.CSSPlugin",["plugins.TweenPlugin","TweenLite"],function(){var d,P,S,_,H=function(){re.d.call(this,"css"),this._overwriteProps.length=0,this.setRatio=H.prototype.setRatio},u=re.e._gsDefine.globals,m={},t=H.prototype=new re.d("css");(t.constructor=H).version="2.1.3",H.API=2,H.defaultTransformPerspective=0,H.defaultSkewType="compensated",H.defaultSmoothOrigin=!0,t="px",H.suffixMap={top:t,right:t,bottom:t,left:t,width:t,height:t,fontSize:t,padding:t,margin:t,perspective:t,lineHeight:""};function o(t,e){return e.toUpperCase()}function s(t,e){var i=tt.createElementNS?tt.createElementNS(e||"http://www.w3.org/1999/xhtml",t):tt.createElement(t);return i.style?i:tt.createElement(t)}function l(t){return j.test("string"==typeof t?t:(t.currentStyle?t.currentStyle.filter:t.style.filter)||"")?parseFloat(RegExp.$1)/100:1}function g(t){re.e.console}function k(t,e){var i,r,n=(e=e||et).style;if(void 0!==n[t])return t;for(t=t.charAt(0).toUpperCase()+t.substr(1),i=["O","Moz","ms","Ms","Webkit"],r=5;-1<--r&&void 0===n[i[r]+t];);return 0<=r?(ot="-"+(st=3===r?"ms":i[r]).toLowerCase()+"-",st+t):null}function v(t){return lt.getComputedStyle(t)}function y(t,e){var i,r,n,a={};if(e=e||v(t))if(i=e.length)for(;-1<--i;)-1!==(n=e[i]).indexOf("-transform")&&It!==n||(a[n.replace(f,o)]=e.getPropertyValue(n));else for(i in e)-1!==i.indexOf("Transform")&&Nt!==i||(a[i]=e[i]);else if(e=t.currentStyle||t.style)for(i in e)"string"==typeof i&&void 0===a[i]&&(a[i.replace(f,o)]=e[i]);return at||(a.opacity=l(t)),r=Gt(t,e,!1),a.rotation=r.rotation,a.skewX=r.skewX,a.scaleX=r.scaleX,a.scaleY=r.scaleY,a.x=r.x,a.y=r.y,Ht&&(a.z=r.z,a.rotationX=r.rotationX,a.rotationY=r.rotationY,a.scaleZ=r.scaleZ),a.filters&&delete a.filters,a}function w(t,e,i,r,n){var a,o,s,l={},u=t.style;for(o in i)"cssText"!==o&&"length"!==o&&isNaN(o)&&(e[o]!==(a=i[o])||n&&n[o])&&-1===o.indexOf("Origin")&&("number"!=typeof a&&"string"!=typeof a||(l[o]="auto"!==a||"left"!==o&&"top"!==o?""!==a&&"auto"!==a&&"none"!==a||"string"!=typeof e[o]||""===e[o].replace(c,"")?a:0:ht(t,o),void 0!==u[o]&&(s=new bt(u,o,u[o],s))));if(r)for(o in r)"className"!==o&&(l[o]=r[o]);return{difs:l,firstMPT:s}}function b(t,e,i){if("svg"===(t.nodeName+"").toLowerCase())return(i||v(t))[e]||0;if(t.getCTM&&Ut(t))return t.getBBox()[e]||0;var r=parseFloat("width"===e?t.offsetWidth:t.offsetHeight),n=ft[e],a=n.length;for(i=i||v(t);-1<--a;)r-=parseFloat(ut(t,"padding"+n[a],i,!0))||0,r-=parseFloat(ut(t,"border"+n[a]+"Width",i,!0))||0;return r}function E(t,e){return"function"==typeof t&&(t=t(D,L)),"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2)):parseFloat(t)-parseFloat(e)||0}function O(t,e){"function"==typeof t&&(t=t(D,L));var i="string"==typeof t&&"="===t.charAt(1);return"string"==typeof t&&"v"===t.charAt(t.length-2)&&(t=(i?t.substr(0,2):0)+window["inner"+("vh"===t.substr(-2)?"Height":"Width")]*(parseFloat(i?t.substr(2):t)/100)),null==t?e:i?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2))+e:parseFloat(t)||0}function R(t,e,i,r){var n,a,o,s,l;return"function"==typeof t&&(t=t(D,L)),(s=null==t?e:"number"==typeof t?t:(n=360,a=t.split("_"),o=((l="="===t.charAt(1))?parseInt(t.charAt(0)+"1",10)*parseFloat(a[0].substr(2)):parseFloat(a[0]))*(-1===t.indexOf("rad")?1:Q)-(l?0:e),a.length&&(r&&(r[i]=e+o),-1!==t.indexOf("short")&&(o%=n)!==o%180&&(o=o<0?o+n:o-n),-1!==t.indexOf("_cw")&&o<0?o=(o+3599999999640)%n-(o/n|0)*n:-1!==t.indexOf("ccw")&&0<o&&(o=(o-3599999999640)%n-(o/n|0)*n)),e+o))<1e-6&&-1e-6<s&&(s=0),s}function p(t,e,i){return 255*(6*(t=t<0?t+1:1<t?t-1:t)<1?e+(i-e)*t*6:t<.5?i:3*t<2?e+(i-e)*(2/3-t)*6:e)+.5|0}function r(t,e){var i,r,n,a=t.match(gt)||[],o=0,s="";if(!a.length)return t;for(i=0;i<a.length;i++)r=a[i],o+=(n=t.substr(o,t.indexOf(r,o)-o)).length+r.length,3===(r=mt(r,e)).length&&r.push(1),s+=n+(e?"hsla("+r[0]+","+r[1]+"%,"+r[2]+"%,"+r[3]:"rgba("+r.join(","))+")";return s+t.substr(o)}var C,T,x,B,A,M,L,D,e,i,F=/(?:\-|\.|\b)(\d|\.|e\-)+/g,z=/(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,N=/(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi,n=/(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b),?/gi,c=/(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g,I=/(?:\d|\-|\+|=|#|\.)*/g,j=/opacity *= *([^)]*)/i,X=/opacity:([^;]*)/i,a=/alpha\(opacity *=.+?\)/i,q=/^(rgb|hsl)/,h=/([A-Z])/g,f=/-([a-z])/gi,Y=/(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi,V=/(?:Left|Right|Width)/i,U=/(M11|M12|M21|M22)=[\d\-\.e]+/gi,W=/progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,$=/,(?=[^\)]*(?:\(|$))/gi,G=/[\s,\(]/i,Z=Math.PI/180,Q=180/Math.PI,K={},J={style:{}},tt=re.e.document||{createElement:function(){return J}},et=s("div"),it=s("img"),rt=H._internals={_specialProps:m},nt=(re.e.navigator||{}).userAgent||"",at=(e=nt.indexOf("Android"),i=s("a"),x=-1!==nt.indexOf("Safari")&&-1===nt.indexOf("Chrome")&&(-1===e||3<parseFloat(nt.substr(e+8,2))),A=x&&parseFloat(nt.substr(nt.indexOf("Version/")+8,2))<6,B=-1!==nt.indexOf("Firefox"),(/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(nt)||/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(nt))&&(M=parseFloat(RegExp.$1)),!!i&&(i.style.cssText="top:1px;opacity:.55;",/^0.55/.test(i.style.opacity))),ot="",st="",lt="undefined"!=typeof window?window:tt.defaultView||{getComputedStyle:function(){}},ut=H.getStyle=function(t,e,i,r,n){var a;return at||"opacity"!==e?(!r&&t.style[e]?a=t.style[e]:(i=i||v(t))?a=i[e]||i.getPropertyValue(e)||i.getPropertyValue(e.replace(h,"-$1").toLowerCase()):t.currentStyle&&(a=t.currentStyle[e]),null==n||a&&"none"!==a&&"auto"!==a&&"auto auto"!==a?a:n):l(t)},ct=rt.convertToPixels=function(t,e,i,r,n){if("px"===r||!r&&"lineHeight"!==e)return i;if("auto"===r||!i)return 0;var a,o,s,l=V.test(e),u=t,c=et.style,h=i<0,f=1===i;if(h&&(i=-i),f&&(i*=100),"lineHeight"!==e||r)if("%"===r&&-1!==e.indexOf("border"))a=i/100*(l?t.clientWidth:t.clientHeight);else{if(c.cssText="border:0 solid red;position:"+ut(t,"position")+";line-height:0;","%"!==r&&u.appendChild&&"v"!==r.charAt(0)&&"rem"!==r)c[l?"borderLeftWidth":"borderTopWidth"]=i+r;else{if(u=t.parentNode||tt.body,-1!==ut(u,"display").indexOf("flex")&&(c.position="absolute"),o=u._gsCache,s=re.f.ticker.frame,o&&l&&o.time===s)return o.width*i/100;c[l?"width":"height"]=i+r}u.appendChild(et),a=parseFloat(et[l?"offsetWidth":"offsetHeight"]),u.removeChild(et),l&&"%"===r&&!1!==H.cacheWidths&&((o=u._gsCache=u._gsCache||{}).time=s,o.width=a/i*100),0!==a||n||(a=ct(t,e,i,r,!0))}else o=v(t).lineHeight,t.style.lineHeight=i,a=parseFloat(v(t).lineHeight),t.style.lineHeight=o;return f&&(a/=100),h?-a:a},ht=rt.calculateOffset=function(t,e,i){if("absolute"!==ut(t,"position",i))return 0;var r="left"===e?"Left":"Top",n=ut(t,"margin"+r,i);return t["offset"+r]-(ct(t,e,parseFloat(n),n.replace(I,""))||0)},ft={width:["Left","Right"],height:["Top","Bottom"]},pt=["marginLeft","marginRight","marginTop","marginBottom"],dt=function(t,e){if("contain"===t||"auto"===t||"auto auto"===t)return t+" ";null!=t&&""!==t||(t="0 0");var i,r=t.split(" "),n=-1!==t.indexOf("left")?"0%":-1!==t.indexOf("right")?"100%":r[0],a=-1!==t.indexOf("top")?"0%":-1!==t.indexOf("bottom")?"100%":r[1];if(3<r.length&&!e){for(r=t.split(", ").join(",").split(","),t=[],i=0;i<r.length;i++)t.push(dt(r[i]));return t.join(",")}return null==a?a="center"===n?"50%":"0":"center"===a&&(a="50%"),("center"===n||isNaN(parseFloat(n))&&-1===(n+"").indexOf("="))&&(n="50%"),t=n+" "+a+(2<r.length?" "+r[2]:""),e&&(e.oxp=-1!==n.indexOf("%"),e.oyp=-1!==a.indexOf("%"),e.oxr="="===n.charAt(1),e.oyr="="===a.charAt(1),e.ox=parseFloat(n.replace(c,"")),e.oy=parseFloat(a.replace(c,"")),e.v=t),e||t},_t={aqua:[0,255,255],lime:[0,255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,255],navy:[0,0,128],white:[255,255,255],fuchsia:[255,0,255],olive:[128,128,0],yellow:[255,255,0],orange:[255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[255,0,0],pink:[255,192,203],cyan:[0,255,255],transparent:[255,255,255,0]},mt=H.parseColor=function(t,e){var i,r,n,a,o,s,l,u,c,h,f;if(t)if("number"==typeof t)i=[t>>16,t>>8&255,255&t];else{if(","===t.charAt(t.length-1)&&(t=t.substr(0,t.length-1)),_t[t])i=_t[t];else if("#"===t.charAt(0))4===t.length&&(t="#"+(r=t.charAt(1))+r+(n=t.charAt(2))+n+(a=t.charAt(3))+a),i=[(t=parseInt(t.substr(1),16))>>16,t>>8&255,255&t];else if("hsl"===t.substr(0,3))if(i=f=t.match(F),e){if(-1!==t.indexOf("="))return t.match(z)}else o=Number(i[0])%360/360,s=Number(i[1])/100,r=2*(l=Number(i[2])/100)-(n=l<=.5?l*(s+1):l+s-l*s),3<i.length&&(i[3]=Number(i[3])),i[0]=p(o+1/3,r,n),i[1]=p(o,r,n),i[2]=p(o-1/3,r,n);else i=t.match(F)||_t.transparent;i[0]=Number(i[0]),i[1]=Number(i[1]),i[2]=Number(i[2]),3<i.length&&(i[3]=Number(i[3]))}else i=_t.black;return e&&!f&&(r=i[0]/255,n=i[1]/255,a=i[2]/255,l=((u=Math.max(r,n,a))+(c=Math.min(r,n,a)))/2,u===c?o=s=0:(h=u-c,s=.5<l?h/(2-u-c):h/(u+c),o=u===r?(n-a)/h+(n<a?6:0):u===n?(a-r)/h+2:(r-n)/h+4,o*=60),i[0]=o+.5|0,i[1]=100*s+.5|0,i[2]=100*l+.5|0),i},gt="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b";for(t in _t)gt+="|"+t+"\\b";gt=new RegExp(gt+")","gi"),H.colorStringFilter=function(t){var e,i=t[0]+" "+t[1];gt.test(i)&&(e=-1!==i.indexOf("hsl(")||-1!==i.indexOf("hsla("),t[0]=r(t[0],e),t[1]=r(t[1],e)),gt.lastIndex=0},re.f.defaultStringFilter||(re.f.defaultStringFilter=H.colorStringFilter);function vt(t,e,a,o){if(null==t)return function(t){return t};var s,l=e?(t.match(gt)||[""])[0]:"",u=t.split(l).join("").match(N)||[],c=t.substr(0,t.indexOf(u[0])),h=")"===t.charAt(t.length-1)?")":"",f=-1!==t.indexOf(" ")?" ":",",p=u.length,d=0<p?u[0].replace(F,""):"";return p?s=e?function(t){var e,i,r,n;if("number"==typeof t)t+=d;else if(o&&$.test(t)){for(n=t.replace($,"|").split("|"),r=0;r<n.length;r++)n[r]=s(n[r]);return n.join(",")}if(e=(t.match(gt)||[l])[0],r=(i=t.split(e).join("").match(N)||[]).length,p>r--)for(;++r<p;)i[r]=a?i[(r-1)/2|0]:u[r];return c+i.join(f)+f+e+h+(-1!==t.indexOf("inset")?" inset":"")}:function(t){var e,i,r;if("number"==typeof t)t+=d;else if(o&&$.test(t)){for(i=t.replace($,"|").split("|"),r=0;r<i.length;r++)i[r]=s(i[r]);return i.join(",")}if(r=(e=t.match(","==f?N:n)||[]).length,p>r--)for(;++r<p;)e[r]=a?e[(r-1)/2|0]:u[r];return(c&&"none"!==t&&t.substr(0,t.indexOf(e[0]))||c)+e.join(f)+h}:function(t){return t}}function yt(u){return u=u.split(","),function(t,e,i,r,n,a,o){var s,l=(e+"").split(" ");for(o={},s=0;s<4;s++)o[u[s]]=l[s]=l[s]||l[(s-1)/2>>0];return r.parse(t,o,n,a)}}rt._setPluginRatio=function(t){this.plugin.setRatio(t);for(var e,i,r,n,a,o=this.data,s=o.proxy,l=o.firstMPT;l;)e=s[l.v],l.r?e=l.r(e):e<1e-6&&-1e-6<e&&(e=0),l.t[l.p]=e,l=l._next;if(o.autoRotate&&(o.autoRotate.rotation=o.mod?o.mod.call(this._tween,s.rotation,this.t,this._tween):s.rotation),1===t||0===t)for(l=o.firstMPT,a=1===t?"e":"b";l;){if((i=l.t).type){if(1===i.type){for(n=i.xs0+i.s+i.xs1,r=1;r<i.l;r++)n+=i["xn"+r]+i["xs"+(r+1)];i[a]=n}}else i[a]=i.s+i.xs0;l=l._next}};function wt(t,e,i,r,n,a){var o=new Tt(t,e,i,r-i,n,-1,a);return o.b=i,o.e=o.xs0=r,o}var bt=function(t,e,i,r,n){this.t=t,this.p=e,this.v=i,this.r=n,r&&((r._prev=this)._next=r)},Tt=(rt._parseToProxy=function(t,e,i,r,n,a){var o,s,l,u,c,h=r,f={},p={},d=i._transform,_=K;for(i._transform=null,K=e,r=c=i.parse(t,e,r,n),K=_,a&&(i._transform=d,h&&(h._prev=null,h._prev&&(h._prev._next=null)));r&&r!==h;){if(r.type<=1&&(p[s=r.p]=r.s+r.c,f[s]=r.s,a||(u=new bt(r,"s",s,u,r.r),r.c=0),1===r.type))for(o=r.l;0<--o;)l="xn"+o,p[s=r.p+"_"+l]=r.data[l],f[s]=r[l],a||(u=new bt(r,l,s,u,r.rxp[l]));r=r._next}return{proxy:f,end:p,firstMPT:u,pt:c}},rt.CSSPropTween=function(t,e,i,r,n,a,o,s,l,u,c){this.t=t,this.p=e,this.s=i,this.c=r,this.n=o||e,t instanceof Tt||_.push(this.n),this.r=s?"function"==typeof s?s:Math.round:s,this.type=a||0,l&&(this.pr=l,d=!0),this.b=void 0===u?i:u,this.e=void 0===c?i+r:c,n&&((this._next=n)._prev=this)}),xt=H.parseComplex=function(t,e,i,r,n,a,o,s,l,u){i=i||a||"","function"==typeof r&&(r=r(D,L)),o=new Tt(t,e,0,0,o,u?2:1,null,!1,s,i,r),r+="",n&&gt.test(r+i)&&(r=[i,r],H.colorStringFilter(r),i=r[0],r=r[1]);var c,h,f,p,d,_,m,g,v,y,w,b,T,x=i.split(", ").join(",").split(" "),P=r.split(", ").join(",").split(" "),S=x.length,k=!1!==C;for(-1===r.indexOf(",")&&-1===i.indexOf(",")||(P=-1!==(r+i).indexOf("rgb")||-1!==(r+i).indexOf("hsl")?(x=x.join(" ").replace($,", ").split(" "),P.join(" ").replace($,", ").split(" ")):(x=x.join(" ").split(",").join(", ").split(" "),P.join(" ").split(",").join(", ").split(" ")),S=x.length),S!==P.length&&(S=(x=(a||"").split(" ")).length),o.plugin=l,o.setRatio=u,c=gt.lastIndex=0;c<S;c++)if(p=x[c],d=P[c]+"",(g=parseFloat(p))||0===g)o.appendXtra("",g,E(d,g),d.replace(z,""),k&&-1!==d.indexOf("px")&&Math.round,!0);else if(n&&gt.test(p))b=")"+((b=d.indexOf(")")+1)?d.substr(b):""),T=-1!==d.indexOf("hsl")&&at,y=d,p=mt(p,T),d=mt(d,T),(v=6<p.length+d.length)&&!at&&0===d[3]?(o["xs"+o.l]+=o.l?" transparent":"transparent",o.e=o.e.split(P[c]).join("transparent")):(at||(v=!1),T?o.appendXtra(y.substr(0,y.indexOf("hsl"))+(v?"hsla(":"hsl("),p[0],E(d[0],p[0]),",",!1,!0).appendXtra("",p[1],E(d[1],p[1]),"%,",!1).appendXtra("",p[2],E(d[2],p[2]),v?"%,":"%"+b,!1):o.appendXtra(y.substr(0,y.indexOf("rgb"))+(v?"rgba(":"rgb("),p[0],d[0]-p[0],",",Math.round,!0).appendXtra("",p[1],d[1]-p[1],",",Math.round).appendXtra("",p[2],d[2]-p[2],v?",":b,Math.round),v&&(p=p.length<4?1:p[3],o.appendXtra("",p,(d.length<4?1:d[3])-p,b,!1))),gt.lastIndex=0;else if(_=p.match(F)){if(!(m=d.match(z))||m.length!==_.length)return o;for(h=f=0;h<_.length;h++)w=_[h],y=p.indexOf(w,f),o.appendXtra(p.substr(f,y-f),Number(w),E(m[h],w),"",k&&"px"===p.substr(y+w.length,2)&&Math.round,0===h),f=y+w.length;o["xs"+o.l]+=p.substr(f)}else o["xs"+o.l]+=o.l||o["xs"+o.l]?" "+d:d;if(-1!==r.indexOf("=")&&o.data){for(b=o.xs0+o.data.s,c=1;c<o.l;c++)b+=o["xs"+c]+o.data["xn"+c];o.e=b+o["xs"+c]}return o.l||(o.type=-1,o.xs0=o.e),o.xfirst||o},Pt=9;for((t=Tt.prototype).l=t.pr=0;0<--Pt;)t["xn"+Pt]=0,t["xs"+Pt]="";t.xs0="",t._next=t._prev=t.xfirst=t.data=t.plugin=t.setRatio=t.rxp=null,t.appendXtra=function(t,e,i,r,n,a){var o=this,s=o.l;return o["xs"+s]+=a&&(s||o["xs"+s])?" "+t:t||"",i||0===s||o.plugin?(o.l++,o.type=o.setRatio?2:1,o["xs"+o.l]=r||"",0<s?(o.data["xn"+s]=e+i,o.rxp["xn"+s]=n,o["xn"+s]=e,o.plugin||(o.xfirst=new Tt(o,"xn"+s,e,i,o.xfirst||o,0,o.n,n,o.pr),o.xfirst.xs0=0)):(o.data={s:e+i},o.rxp={},o.s=e,o.c=i,o.r=n),o):(o["xs"+s]+=e+(r||""),o)};function St(t,e){e=e||{},this.p=e.prefix&&k(t)||t,m[t]=m[this.p]=this,this.format=e.formatter||vt(e.defaultValue,e.color,e.collapsible,e.multi),e.parser&&(this.parse=e.parser),this.clrs=e.color,this.multi=e.multi,this.keyword=e.keyword,this.dflt=e.defaultValue,this.allowFunc=e.allowFunc,this.pr=e.priority||0}var kt=rt._registerComplexSpecialProp=function(t,e,i){"object"!=typeof e&&(e={parser:i});var r,n=t.split(","),a=e.defaultValue;for(i=i||[a],r=0;r<n.length;r++)e.prefix=0===r&&e.prefix,e.defaultValue=i[r]||a,new St(n[r],e)},Et=rt._registerPluginProp=function(t){if(!m[t]){var l=t.charAt(0).toUpperCase()+t.substr(1)+"Plugin";kt(t,{parser:function(t,e,i,r,n,a,o){var s=u.com.greensock.plugins[l];return s?(s._cssRegister(),m[i].parse(t,e,i,r,n,a,o)):(g(),n)}})}};(t=St.prototype).parseComplex=function(t,e,i,r,n,a){var o,s,l,u,c,h,f=this.keyword;if(this.multi&&($.test(i)||$.test(e)?(s=e.replace($,"|").split("|"),l=i.replace($,"|").split("|")):f&&(s=[e],l=[i])),l){for(u=l.length>s.length?l.length:s.length,o=0;o<u;o++)e=s[o]=s[o]||this.dflt,i=l[o]=l[o]||this.dflt,f&&(c=e.indexOf(f))!==(h=i.indexOf(f))&&(-1===h?s[o]=s[o].split(f).join(""):-1===c&&(s[o]+=" "+f));e=s.join(", "),i=l.join(", ")}return xt(t,this.p,e,i,this.clrs,this.dflt,r,this.pr,n,a)},t.parse=function(t,e,i,r,n,a,o){return this.parseComplex(t.style,this.format(ut(t,this.p,S,!1,this.dflt)),this.format(e),n,a)},H.registerSpecialProp=function(t,l,u){kt(t,{parser:function(t,e,i,r,n,a,o){var s=new Tt(t,i,0,0,n,2,i,!1,u);return s.plugin=a,s.setRatio=l(t,e,r._tween,i),s},priority:u})},H.useSVGTransformAttr=!0;function Ot(t,e,i){var r,n=tt.createElementNS("http://www.w3.org/2000/svg",t),a=/([a-z])([A-Z])/g;for(r in i)n.setAttributeNS(null,r.replace(a,"$1-$2").toLowerCase(),i[r]);return e.appendChild(n),n}function Rt(t,e,i,r,n,a){var o,s,l,u,c,h,f,p,d,_,m,g,v,y,w=t._gsTransform,b=$t(t,!0);w&&(v=w.xOrigin,y=w.yOrigin),(!r||(o=r.split(" ")).length<2)&&(0===(f=t.getBBox()).x&&0===f.y&&f.width+f.height===0&&(f={x:parseFloat(t.hasAttribute("x")?t.getAttribute("x"):t.hasAttribute("cx")?t.getAttribute("cx"):0)||0,y:parseFloat(t.hasAttribute("y")?t.getAttribute("y"):t.hasAttribute("cy")?t.getAttribute("cy"):0)||0,width:0,height:0}),o=[(-1!==(e=dt(e).split(" "))[0].indexOf("%")?parseFloat(e[0])/100*f.width:parseFloat(e[0]))+f.x,(-1!==e[1].indexOf("%")?parseFloat(e[1])/100*f.height:parseFloat(e[1]))+f.y]),i.xOrigin=u=parseFloat(o[0]),i.yOrigin=c=parseFloat(o[1]),r&&b!==Wt&&(h=b[0],f=b[1],p=b[2],d=b[3],_=b[4],m=b[5],(g=h*d-f*p)&&(s=u*(d/g)+c*(-p/g)+(p*m-d*_)/g,l=u*(-f/g)+c*(h/g)-(h*m-f*_)/g,u=i.xOrigin=o[0]=s,c=i.yOrigin=o[1]=l)),w&&(a&&(i.xOffset=w.xOffset,i.yOffset=w.yOffset,w=i),n||!1!==n&&!1!==H.defaultSmoothOrigin?(s=u-v,l=c-y,w.xOffset+=s*b[0]+l*b[2]-s,w.yOffset+=s*b[1]+l*b[3]-l):w.xOffset=w.yOffset=0),a||t.setAttribute("data-svg-origin",o.join(" "))}function Ct(t){var e,i,r=this.data,n=-r.rotation*Z,a=n+r.skewX*Z,o=1e5,s=(Math.cos(n)*r.scaleX*o|0)/o,l=(Math.sin(n)*r.scaleX*o|0)/o,u=(Math.sin(a)*-r.scaleY*o|0)/o,c=(Math.cos(a)*r.scaleY*o|0)/o,h=this.t.style,f=this.t.currentStyle;if(f){i=l,l=-u,u=-i,e=f.filter,h.filter="";var p,d,_=this.t.offsetWidth,m=this.t.offsetHeight,g="absolute"!==f.position,v="progid:DXImageTransform.Microsoft.Matrix(M11="+s+", M12="+l+", M21="+u+", M22="+c,y=r.x+_*r.xPercent/100,w=r.y+m*r.yPercent/100;if(null!=r.ox&&(y+=(p=(r.oxp?_*r.ox*.01:r.ox)-_/2)-(p*s+(d=(r.oyp?m*r.oy*.01:r.oy)-m/2)*l),w+=d-(p*u+d*c)),v+=g?", Dx="+((p=_/2)-(p*s+(d=m/2)*l)+y)+", Dy="+(d-(p*u+d*c)+w)+")":", sizingMethod='auto expand')",-1!==e.indexOf("DXImageTransform.Microsoft.Matrix(")?h.filter=e.replace(W,v):h.filter=v+" "+e,0!==t&&1!==t||1==s&&0===l&&0===u&&1==c&&(g&&-1===v.indexOf("Dx=0, Dy=0")||j.test(e)&&100!==parseFloat(RegExp.$1)||-1===e.indexOf(e.indexOf("Alpha"))&&h.removeAttribute("filter")),!g){var b,T,x,P=M<8?1:-1;for(p=r.ieOffsetX||0,d=r.ieOffsetY||0,r.ieOffsetX=Math.round((_-((s<0?-s:s)*_+(l<0?-l:l)*m))/2+y),r.ieOffsetY=Math.round((m-((c<0?-c:c)*m+(u<0?-u:u)*_))/2+w),Pt=0;Pt<4;Pt++)x=(i=-1!==(b=f[T=pt[Pt]]).indexOf("px")?parseFloat(b):ct(this.t,T,parseFloat(b),b.replace(I,""))||0)!==r[T]?Pt<2?-r.ieOffsetX:-r.ieOffsetY:Pt<2?p-r.ieOffsetX:d-r.ieOffsetY,h[T]=(r[T]=Math.round(i-x*(0===Pt||2===Pt?1:P)))+"px"}}}var At,Mt,Lt,Dt,Ft,zt="scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent".split(","),Nt=k("transform"),It=ot+"transform",jt=k("transformOrigin"),Ht=null!==k("perspective"),Bt=rt.Transform=function(){this.perspective=parseFloat(H.defaultTransformPerspective)||0,this.force3D=!(!1===H.defaultForce3D||!Ht)&&(H.defaultForce3D||"auto")},Xt=re.e.SVGElement,qt=tt.documentElement||{},Yt=(Ft=M||/Android/i.test(nt)&&!re.e.chrome,tt.createElementNS&&qt.appendChild&&!Ft&&(Mt=Ot("svg",qt),Dt=(Lt=Ot("rect",Mt,{width:100,height:50,x:100})).getBoundingClientRect().width,Lt.style[jt]="50% 50%",Lt.style[Nt]="scaleX(0.5)",Ft=Dt===Lt.getBoundingClientRect().width&&!(B&&Ht),qt.removeChild(Mt)),Ft),Vt=function(t){var e,i=s("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),r=this.parentNode,n=this.nextSibling,a=this.style.cssText;if(qt.appendChild(i),i.appendChild(this),this.style.display="block",t)try{e=this.getBBox(),this._originalGetBBox=this.getBBox,this.getBBox=Vt}catch(t){}else this._originalGetBBox&&(e=this._originalGetBBox());return n?r.insertBefore(this,n):r.appendChild(this),qt.removeChild(i),this.style.cssText=a,e},Ut=function(t){return!(!Xt||!t.getCTM||t.parentNode&&!t.ownerSVGElement||!function(e){try{return e.getBBox()}catch(t){return Vt.call(e,!0)}}(t))},Wt=[1,0,0,1,0,0],$t=function(t,e){var i,r,n,a,o,s,l,u=t._gsTransform||new Bt,c=t.style;if(Nt?r=ut(t,It,null,!0):t.currentStyle&&(r=(r=t.currentStyle.filter.match(U))&&4===r.length?[r[0].substr(4),Number(r[2].substr(4)),Number(r[1].substr(4)),r[3].substr(4),u.x||0,u.y||0].join(","):""),i=!r||"none"===r||"matrix(1, 0, 0, 1, 0, 0)"===r,Nt&&i&&!t.offsetParent&&t!==qt&&(a=c.display,c.display="block",(l=t.parentNode)&&t.offsetParent||(o=1,s=t.nextSibling,qt.appendChild(t)),i=!(r=ut(t,It,null,!0))||"none"===r||"matrix(1, 0, 0, 1, 0, 0)"===r,a?c.display=a:Jt(c,"display"),o&&(s?l.insertBefore(t,s):l?l.appendChild(t):qt.removeChild(t))),(u.svg||t.getCTM&&Ut(t))&&(i&&-1!==(c[Nt]+"").indexOf("matrix")&&(r=c[Nt],i=0),n=t.getAttribute("transform"),i&&n&&(r="matrix("+(n=t.transform.baseVal.consolidate().matrix).a+","+n.b+","+n.c+","+n.d+","+n.e+","+n.f+")",i=0)),i)return Wt;for(n=(r||"").match(F)||[],Pt=n.length;-1<--Pt;)a=Number(n[Pt]),n[Pt]=(o=a-(a|=0))?(1e5*o+(o<0?-.5:.5)|0)/1e5+a:a;return e&&6<n.length?[n[0],n[1],n[4],n[5],n[12],n[13]]:n},Gt=rt.getTransform=function(t,e,i,r){if(t._gsTransform&&i&&!r)return t._gsTransform;var n,a,o,s,l,u,c=i&&t._gsTransform||new Bt,h=c.scaleX<0,f=Ht&&(parseFloat(ut(t,jt,e,!1,"0 0 0").split(" ")[2])||c.zOrigin)||0,p=parseFloat(H.defaultTransformPerspective)||0;if(c.svg=!(!t.getCTM||!Ut(t)),c.svg&&(Rt(t,ut(t,jt,e,!1,"50% 50%")+"",c,t.getAttribute("data-svg-origin")),At=H.useSVGTransformAttr||Yt),(n=$t(t))!==Wt){if(16===n.length){var d,_,m,g,v,y=n[0],w=n[1],b=n[2],T=n[3],x=n[4],P=n[5],S=n[6],k=n[7],E=n[8],O=n[9],R=n[10],C=n[12],A=n[13],M=n[14],L=n[11],D=Math.atan2(S,R);c.zOrigin&&(C=E*(M=-c.zOrigin)-n[12],A=O*M-n[13],M=R*M+c.zOrigin-n[14]),c.rotationX=D*Q,D&&(d=x*(g=Math.cos(-D))+E*(v=Math.sin(-D)),_=P*g+O*v,m=S*g+R*v,E=x*-v+E*g,O=P*-v+O*g,R=S*-v+R*g,L=k*-v+L*g,x=d,P=_,S=m),D=Math.atan2(-b,R),c.rotationY=D*Q,D&&(_=w*(g=Math.cos(-D))-O*(v=Math.sin(-D)),m=b*g-R*v,O=w*v+O*g,R=b*v+R*g,L=T*v+L*g,y=d=y*g-E*v,w=_,b=m),D=Math.atan2(w,y),c.rotation=D*Q,D&&(d=y*(g=Math.cos(D))+w*(v=Math.sin(D)),_=x*g+P*v,m=E*g+O*v,w=w*g-y*v,P=P*g-x*v,O=O*g-E*v,y=d,x=_,E=m),c.rotationX&&359.9<Math.abs(c.rotationX)+Math.abs(c.rotation)&&(c.rotationX=c.rotation=0,c.rotationY=180-c.rotationY),D=Math.atan2(x,P),c.scaleX=(1e5*Math.sqrt(y*y+w*w+b*b)+.5|0)/1e5,c.scaleY=(1e5*Math.sqrt(P*P+S*S)+.5|0)/1e5,c.scaleZ=(1e5*Math.sqrt(E*E+O*O+R*R)+.5|0)/1e5,y/=c.scaleX,x/=c.scaleY,w/=c.scaleX,P/=c.scaleY,2e-5<Math.abs(D)?(c.skewX=D*Q,x=0,"simple"!==c.skewType&&(c.scaleY*=1/Math.cos(D))):c.skewX=0,c.perspective=L?1/(L<0?-L:L):0,c.x=C,c.y=A,c.z=M,c.svg&&(c.x-=c.xOrigin-(c.xOrigin*y-c.yOrigin*x),c.y-=c.yOrigin-(c.yOrigin*w-c.xOrigin*P))}else if(!Ht||r||!n.length||c.x!==n[4]||c.y!==n[5]||!c.rotationX&&!c.rotationY){var F=6<=n.length,z=F?n[0]:1,N=n[1]||0,I=n[2]||0,j=F?n[3]:1;c.x=n[4]||0,c.y=n[5]||0,o=Math.sqrt(z*z+N*N),s=Math.sqrt(j*j+I*I),l=z||N?Math.atan2(N,z)*Q:c.rotation||0,u=I||j?Math.atan2(I,j)*Q+l:c.skewX||0,c.scaleX=o,c.scaleY=s,c.rotation=l,c.skewX=u,Ht&&(c.rotationX=c.rotationY=c.z=0,c.perspective=p,c.scaleZ=1),c.svg&&(c.x-=c.xOrigin-(c.xOrigin*z+c.yOrigin*I),c.y-=c.yOrigin-(c.xOrigin*N+c.yOrigin*j))}for(a in 90<Math.abs(c.skewX)&&Math.abs(c.skewX)<270&&(h?(c.scaleX*=-1,c.skewX+=c.rotation<=0?180:-180,c.rotation+=c.rotation<=0?180:-180):(c.scaleY*=-1,c.skewX+=c.skewX<=0?180:-180)),c.zOrigin=f,c)c[a]<2e-5&&-2e-5<c[a]&&(c[a]=0)}return i&&(t._gsTransform=c).svg&&(At&&t.style[Nt]?re.f.delayedCall(.001,function(){Jt(t.style,Nt)}):!At&&t.getAttribute("transform")&&re.f.delayedCall(.001,function(){t.removeAttribute("transform")})),c},Zt=rt.set3DTransformRatio=rt.setTransformRatio=function(t){var e,i,r,n,a,o,s,l,u,c,h,f,p,d,_,m,g,v,y,w,b,T,x,P=this.data,S=this.t.style,k=P.rotation,E=P.rotationX,O=P.rotationY,R=P.scaleX,C=P.scaleY,A=P.scaleZ,M=P.x,L=P.y,D=P.z,F=P.svg,z=P.perspective,N=P.force3D,I=P.skewY,j=P.skewX;if(I&&(j+=I,k+=I),!((1!==t&&0!==t||"auto"!==N||this.tween._totalTime!==this.tween._totalDuration&&this.tween._totalTime)&&N||D||z||O||E||1!==A)||At&&F||!Ht)k||j||F?(k*=Z,T=j*Z,x=1e5,i=Math.cos(k)*R,a=Math.sin(k)*R,r=Math.sin(k-T)*-C,o=Math.cos(k-T)*C,T&&"simple"===P.skewType&&(e=Math.tan(T-I*Z),r*=e=Math.sqrt(1+e*e),o*=e,I&&(e=Math.tan(I*Z),i*=e=Math.sqrt(1+e*e),a*=e)),F&&(M+=P.xOrigin-(P.xOrigin*i+P.yOrigin*r)+P.xOffset,L+=P.yOrigin-(P.xOrigin*a+P.yOrigin*o)+P.yOffset,At&&(P.xPercent||P.yPercent)&&(_=this.t.getBBox(),M+=.01*P.xPercent*_.width,L+=.01*P.yPercent*_.height),M<(_=1e-6)&&-_<M&&(M=0),L<_&&-_<L&&(L=0)),y=(i*x|0)/x+","+(a*x|0)/x+","+(r*x|0)/x+","+(o*x|0)/x+","+M+","+L+")",F&&At?this.t.setAttribute("transform","matrix("+y):S[Nt]=(P.xPercent||P.yPercent?"translate("+P.xPercent+"%,"+P.yPercent+"%) matrix(":"matrix(")+y):S[Nt]=(P.xPercent||P.yPercent?"translate("+P.xPercent+"%,"+P.yPercent+"%) matrix(":"matrix(")+R+",0,0,"+C+","+M+","+L+")";else{if(B&&(R<(_=1e-4)&&-_<R&&(R=A=2e-5),C<_&&-_<C&&(C=A=2e-5),!z||P.z||P.rotationX||P.rotationY||(z=0)),k||j)k*=Z,m=i=Math.cos(k),g=a=Math.sin(k),j&&(k-=j*Z,m=Math.cos(k),g=Math.sin(k),"simple"===P.skewType&&(e=Math.tan((j-I)*Z),m*=e=Math.sqrt(1+e*e),g*=e,P.skewY&&(e=Math.tan(I*Z),i*=e=Math.sqrt(1+e*e),a*=e))),r=-g,o=m;else{if(!(O||E||1!==A||z||F))return void(S[Nt]=(P.xPercent||P.yPercent?"translate("+P.xPercent+"%,"+P.yPercent+"%) translate3d(":"translate3d(")+M+"px,"+L+"px,"+D+"px)"+(1!==R||1!==C?" scale("+R+","+C+")":""));i=o=1,r=a=0}c=1,n=s=l=u=h=f=0,p=z?-1/z:0,d=P.zOrigin,_=1e-6,w=",",b="0",(k=O*Z)&&(m=Math.cos(k),h=p*(l=-(g=Math.sin(k))),n=i*g,s=a*g,p*=c=m,i*=m,a*=m),(k=E*Z)&&(e=r*(m=Math.cos(k))+n*(g=Math.sin(k)),v=o*m+s*g,u=c*g,f=p*g,n=r*-g+n*m,s=o*-g+s*m,c*=m,p*=m,r=e,o=v),1!==A&&(n*=A,s*=A,c*=A,p*=A),1!==C&&(r*=C,o*=C,u*=C,f*=C),1!==R&&(i*=R,a*=R,l*=R,h*=R),(d||F)&&(d&&(M+=n*-d,L+=s*-d,D+=c*-d+d),F&&(M+=P.xOrigin-(P.xOrigin*i+P.yOrigin*r)+P.xOffset,L+=P.yOrigin-(P.xOrigin*a+P.yOrigin*o)+P.yOffset),M<_&&-_<M&&(M=b),L<_&&-_<L&&(L=b),D<_&&-_<D&&(D=0)),y=P.xPercent||P.yPercent?"translate("+P.xPercent+"%,"+P.yPercent+"%) matrix3d(":"matrix3d(",y+=(i<_&&-_<i?b:i)+w+(a<_&&-_<a?b:a)+w+(l<_&&-_<l?b:l),y+=w+(h<_&&-_<h?b:h)+w+(r<_&&-_<r?b:r)+w+(o<_&&-_<o?b:o),E||O||1!==A?(y+=w+(u<_&&-_<u?b:u)+w+(f<_&&-_<f?b:f)+w+(n<_&&-_<n?b:n),y+=w+(s<_&&-_<s?b:s)+w+(c<_&&-_<c?b:c)+w+(p<_&&-_<p?b:p)+w):y+=",0,0,0,0,1,0,",y+=M+w+L+w+D+w+(z?1+-D/z:1)+")",S[Nt]=y}};(t=Bt.prototype).x=t.y=t.z=t.skewX=t.skewY=t.rotation=t.rotationX=t.rotationY=t.zOrigin=t.xPercent=t.yPercent=t.xOffset=t.yOffset=0,t.scaleX=t.scaleY=t.scaleZ=1,kt("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin",{parser:function(t,e,i,r,n,a,o){if(r._lastParsedTransform===o)return n;var s=(r._lastParsedTransform=o).scale&&"function"==typeof o.scale?o.scale:0;s&&(o.scale=s(D,t));var l,u,c,h,f,p,d,_,m,g=t._gsTransform,v=t.style,y=zt.length,w=o,b={},T="transformOrigin",x=Gt(t,S,!0,w.parseTransform),P=w.transform&&("function"==typeof w.transform?w.transform(D,L):w.transform);if(x.skewType=w.skewType||x.skewType||H.defaultSkewType,r._transform=x,"rotationZ"in w&&(w.rotation=w.rotationZ),P&&"string"==typeof P&&Nt)(u=et.style)[Nt]=P,u.display="block",u.position="absolute",-1!==P.indexOf("%")&&(u.width=ut(t,"width"),u.height=ut(t,"height")),tt.body.appendChild(et),l=Gt(et,null,!1),"simple"===x.skewType&&(l.scaleY*=Math.cos(l.skewX*Z)),x.svg&&(p=x.xOrigin,d=x.yOrigin,l.x-=x.xOffset,l.y-=x.yOffset,(w.transformOrigin||w.svgOrigin)&&(P={},Rt(t,dt(w.transformOrigin),P,w.svgOrigin,w.smoothOrigin,!0),p=P.xOrigin,d=P.yOrigin,l.x-=P.xOffset-x.xOffset,l.y-=P.yOffset-x.yOffset),(p||d)&&(_=$t(et,!0),l.x-=p-(p*_[0]+d*_[2]),l.y-=d-(p*_[1]+d*_[3]))),tt.body.removeChild(et),l.perspective||(l.perspective=x.perspective),null!=w.xPercent&&(l.xPercent=O(w.xPercent,x.xPercent)),null!=w.yPercent&&(l.yPercent=O(w.yPercent,x.yPercent));else if("object"==typeof w){if(l={scaleX:O(null!=w.scaleX?w.scaleX:w.scale,x.scaleX),scaleY:O(null!=w.scaleY?w.scaleY:w.scale,x.scaleY),scaleZ:O(w.scaleZ,x.scaleZ),x:O(w.x,x.x),y:O(w.y,x.y),z:O(w.z,x.z),xPercent:O(w.xPercent,x.xPercent),yPercent:O(w.yPercent,x.yPercent),perspective:O(w.transformPerspective,x.perspective)},null!=(f=w.directionalRotation))if("object"==typeof f)for(u in f)w[u]=f[u];else w.rotation=f;"string"==typeof w.x&&-1!==w.x.indexOf("%")&&(l.x=0,l.xPercent=O(w.x,x.xPercent)),"string"==typeof w.y&&-1!==w.y.indexOf("%")&&(l.y=0,l.yPercent=O(w.y,x.yPercent)),l.rotation=R("rotation"in w?w.rotation:"shortRotation"in w?w.shortRotation+"_short":x.rotation,x.rotation,"rotation",b),Ht&&(l.rotationX=R("rotationX"in w?w.rotationX:"shortRotationX"in w?w.shortRotationX+"_short":x.rotationX||0,x.rotationX,"rotationX",b),l.rotationY=R("rotationY"in w?w.rotationY:"shortRotationY"in w?w.shortRotationY+"_short":x.rotationY||0,x.rotationY,"rotationY",b)),l.skewX=R(w.skewX,x.skewX),l.skewY=R(w.skewY,x.skewY)}for(Ht&&null!=w.force3D&&(x.force3D=w.force3D,h=!0),(c=x.force3D||x.z||x.rotationX||x.rotationY||l.z||l.rotationX||l.rotationY||l.perspective)||null==w.scale||(l.scaleZ=1);-1<--y;)(1e-6<(P=l[m=zt[y]]-x[m])||P<-1e-6||null!=w[m]||null!=K[m])&&(h=!0,n=new Tt(x,m,x[m],P,n),m in b&&(n.e=b[m]),n.xs0=0,n.plugin=a,r._overwriteProps.push(n.n));return P="function"==typeof w.transformOrigin?w.transformOrigin(D,L):w.transformOrigin,x.svg&&(P||w.svgOrigin)&&(p=x.xOffset,d=x.yOffset,Rt(t,dt(P),l,w.svgOrigin,w.smoothOrigin),n=wt(x,"xOrigin",(g?x:l).xOrigin,l.xOrigin,n,T),n=wt(x,"yOrigin",(g?x:l).yOrigin,l.yOrigin,n,T),p===x.xOffset&&d===x.yOffset||(n=wt(x,"xOffset",g?p:x.xOffset,x.xOffset,n,T),n=wt(x,"yOffset",g?d:x.yOffset,x.yOffset,n,T)),P="0px 0px"),(P||Ht&&c&&x.zOrigin)&&(Nt?(h=!0,m=jt,P=P||(P=(ut(t,m,S,!1,"50% 50%")+"").split(" "))[0]+" "+P[1]+" "+x.zOrigin+"px",P+="",(n=new Tt(v,m,0,0,n,-1,T)).b=v[m],n.plugin=a,Ht?(u=x.zOrigin,P=P.split(" "),x.zOrigin=(2<P.length?parseFloat(P[2]):u)||0,n.xs0=n.e=P[0]+" "+(P[1]||"50%")+" 0px",(n=new Tt(x,"zOrigin",0,0,n,-1,n.n)).b=u,n.xs0=n.e=x.zOrigin):n.xs0=n.e=P):dt(P+"",x)),h&&(r._transformType=x.svg&&At||!c&&3!==this._transformType?2:3),s&&(o.scale=s),n},allowFunc:!0,prefix:!0}),kt("boxShadow",{defaultValue:"0px 0px 0px 0px #999",prefix:!0,color:!0,multi:!0,keyword:"inset"}),kt("clipPath",{defaultValue:"inset(0%)",prefix:!0,multi:!0,formatter:vt("inset(0% 0% 0% 0%)",!1,!0)}),kt("borderRadius",{defaultValue:"0px",parser:function(t,e,i,r,n,a){e=this.format(e);var o,s,l,u,c,h,f,p,d,_,m,g,v,y,w,b,T=["borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius"],x=t.style;for(d=parseFloat(t.offsetWidth),_=parseFloat(t.offsetHeight),o=e.split(" "),s=0;s<T.length;s++)this.p.indexOf("border")&&(T[s]=k(T[s])),-1!==(c=u=ut(t,T[s],S,!1,"0px")).indexOf(" ")&&(c=(u=c.split(" "))[0],u=u[1]),h=l=o[s],f=parseFloat(c),g=c.substr((f+"").length),""===(m=(v="="===h.charAt(1))?(p=parseInt(h.charAt(0)+"1",10),h=h.substr(2),p*=parseFloat(h),h.substr((p+"").length-(p<0?1:0))||""):(p=parseFloat(h),h.substr((p+"").length)))&&(m=P[i]||g),m!==g&&(y=ct(t,"borderLeft",f,g),w=ct(t,"borderTop",f,g),u="%"===m?(c=y/d*100+"%",w/_*100+"%"):"em"===m?(c=y/(b=ct(t,"borderLeft",1,"em"))+"em",w/b+"em"):(c=y+"px",w+"px"),v&&(h=parseFloat(c)+p+m,l=parseFloat(u)+p+m)),n=xt(x,T[s],c+" "+u,h+" "+l,!1,"0px",n);return n},prefix:!0,formatter:vt("0px 0px 0px 0px",!1,!0)}),kt("borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius",{defaultValue:"0px",parser:function(t,e,i,r,n,a){return xt(t.style,i,this.format(ut(t,i,S,!1,"0px 0px")),this.format(e),!1,"0px",n)},prefix:!0,formatter:vt("0px 0px",!1,!0)}),kt("backgroundPosition",{defaultValue:"0 0",parser:function(t,e,i,r,n,a){var o,s,l,u,c,h,f="background-position",p=S||v(t),d=this.format((p?M?p.getPropertyValue(f+"-x")+" "+p.getPropertyValue(f+"-y"):p.getPropertyValue(f):t.currentStyle.backgroundPositionX+" "+t.currentStyle.backgroundPositionY)||"0 0"),_=this.format(e);if(-1!==d.indexOf("%")!=(-1!==_.indexOf("%"))&&_.split(",").length<2&&(h=ut(t,"backgroundImage").replace(Y,""))&&"none"!==h){for(o=d.split(" "),s=_.split(" "),it.setAttribute("src",h),l=2;-1<--l;)(u=-1!==(d=o[l]).indexOf("%"))!=(-1!==s[l].indexOf("%"))&&(c=0===l?t.offsetWidth-it.width:t.offsetHeight-it.height,o[l]=u?parseFloat(d)/100*c+"px":parseFloat(d)/c*100+"%");d=o.join(" ")}return this.parseComplex(t.style,d,_,n,a)},formatter:dt}),kt("backgroundSize",{defaultValue:"0 0",formatter:function(t){return"co"===(t+="").substr(0,2)?t:dt(-1===t.indexOf(" ")?t+" "+t:t)}}),kt("perspective",{defaultValue:"0px",prefix:!0}),kt("perspectiveOrigin",{defaultValue:"50% 50%",prefix:!0}),kt("transformStyle",{prefix:!0}),kt("backfaceVisibility",{prefix:!0}),kt("userSelect",{prefix:!0}),kt("margin",{parser:yt("marginTop,marginRight,marginBottom,marginLeft")}),kt("padding",{parser:yt("paddingTop,paddingRight,paddingBottom,paddingLeft")}),kt("clip",{defaultValue:"rect(0px,0px,0px,0px)",parser:function(t,e,i,r,n,a){var o,s,l;return e=M<9?(s=t.currentStyle,l=M<8?" ":",",o="rect("+s.clipTop+l+s.clipRight+l+s.clipBottom+l+s.clipLeft+")",this.format(e).split(",").join(l)):(o=this.format(ut(t,this.p,S,!1,this.dflt)),this.format(e)),this.parseComplex(t.style,o,e,n,a)}}),kt("textShadow",{defaultValue:"0px 0px 0px #999",color:!0,multi:!0}),kt("autoRound,strictUnits",{parser:function(t,e,i,r,n){return n}}),kt("border",{defaultValue:"0px solid #000",parser:function(t,e,i,r,n,a){var o=ut(t,"borderTopWidth",S,!1,"0px"),s=this.format(e).split(" "),l=s[0].replace(I,"");return"px"!==l&&(o=parseFloat(o)/ct(t,"borderTopWidth",1,l)+l),this.parseComplex(t.style,this.format(o+" "+ut(t,"borderTopStyle",S,!1,"solid")+" "+ut(t,"borderTopColor",S,!1,"#000")),s.join(" "),n,a)},color:!0,formatter:function(t){var e=t.split(" ");return e[0]+" "+(e[1]||"solid")+" "+(t.match(gt)||["#000"])[0]}}),kt("borderWidth",{parser:yt("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth")}),kt("float,cssFloat,styleFloat",{parser:function(t,e,i,r,n,a){var o=t.style,s="cssFloat"in o?"cssFloat":"styleFloat";return new Tt(o,s,0,0,n,-1,i,!1,0,o[s],e)}});function Qt(t){var e,i=this.t,r=i.filter||ut(this.data,"filter")||"",n=this.s+this.c*t|0;100==n&&(e=-1===r.indexOf("atrix(")&&-1===r.indexOf("radient(")&&-1===r.indexOf("oader(")?(i.removeAttribute("filter"),!ut(this.data,"filter")):(i.filter=r.replace(a,""),!0)),e||(this.xn1&&(i.filter=r=r||"alpha(opacity="+n+")"),-1===r.indexOf("pacity")?0==n&&this.xn1||(i.filter=r+" alpha(opacity="+n+")"):i.filter=r.replace(j,"opacity="+n))}kt("opacity,alpha,autoAlpha",{defaultValue:"1",parser:function(t,e,i,r,n,a){var o=parseFloat(ut(t,"opacity",S,!1,"1")),s=t.style,l="autoAlpha"===i;return"string"==typeof e&&"="===e.charAt(1)&&(e=("-"===e.charAt(0)?-1:1)*parseFloat(e.substr(2))+o),l&&1===o&&"hidden"===ut(t,"visibility",S)&&0!==e&&(o=0),at?n=new Tt(s,"opacity",o,e-o,n):((n=new Tt(s,"opacity",100*o,100*(e-o),n)).xn1=l?1:0,s.zoom=1,n.type=2,n.b="alpha(opacity="+n.s+")",n.e="alpha(opacity="+(n.s+n.c)+")",n.data=t,n.plugin=a,n.setRatio=Qt),l&&((n=new Tt(s,"visibility",0,0,n,-1,null,!1,0,0!==o?"inherit":"hidden",0===e?"hidden":"inherit")).xs0="inherit",r._overwriteProps.push(n.n),r._overwriteProps.push(i)),n}});function Kt(t){if(this.t._gsClassPT=this,1===t||0===t){this.t.setAttribute("class",0===t?this.b:this.e);for(var e=this.data,i=this.t.style;e;)e.v?i[e.p]=e.v:Jt(i,e.p),e=e._next;1===t&&this.t._gsClassPT===this&&(this.t._gsClassPT=null)}else this.t.getAttribute("class")!==this.e&&this.t.setAttribute("class",this.e)}var Jt=function(t,e){e&&(t.removeProperty?("ms"!==e.substr(0,2)&&"webkit"!==e.substr(0,6)||(e="-"+e),t.removeProperty(e.replace(h,"-$1").toLowerCase())):t.removeAttribute(e))};kt("className",{parser:function(t,e,i,r,n,a,o){var s,l,u,c,h,f=t.getAttribute("class")||"",p=t.style.cssText;if((n=r._classNamePT=new Tt(t,i,0,0,n,2)).setRatio=Kt,n.pr=-11,d=!0,n.b=f,l=y(t,S),u=t._gsClassPT){for(c={},h=u.data;h;)c[h.p]=1,h=h._next;u.setRatio(1)}return(t._gsClassPT=n).e="="!==e.charAt(1)?e:f.replace(new RegExp("(?:\\s|^)"+e.substr(2)+"(?![\\w-])"),"")+("+"===e.charAt(0)?" "+e.substr(2):""),t.setAttribute("class",n.e),s=w(t,l,y(t),o,c),t.setAttribute("class",f),n.data=s.firstMPT,t.style.cssText!==p&&(t.style.cssText=p),n=n.xfirst=r.parse(t,s.difs,n,a)}});function te(t){if((1===t||0===t)&&this.data._totalTime===this.data._totalDuration&&"isFromStart"!==this.data.data){var e,i,r,n,a,o=this.t.style,s=m.transform.parse;if("all"===this.e)n=!(o.cssText="");else for(r=(e=this.e.split(" ").join("").split(",")).length;-1<--r;)i=e[r],m[i]&&(m[i].parse===s?n=!0:i="transformOrigin"===i?jt:m[i].p),Jt(o,i);n&&(Jt(o,Nt),(a=this.t._gsTransform)&&(a.svg&&(this.t.removeAttribute("data-svg-origin"),this.t.removeAttribute("transform")),delete this.t._gsTransform))}}for(kt("clearProps",{parser:function(t,e,i,r,n){return(n=new Tt(t,i,0,0,n,2)).setRatio=te,n.e=e,n.pr=-10,n.data=r._tween,d=!0,n}}),t="bezier,throwProps,physicsProps,physics2D".split(","),Pt=t.length;Pt--;)Et(t[Pt]);(t=H.prototype)._firstPT=t._lastParsedTransform=t._transform=null,t._onInitTween=function(t,e,i,r){if(!t.nodeType)return!1;this._target=L=t,this._tween=i,this._vars=e,D=r,C=e.autoRound,d=!1,P=e.suffixMap||H.suffixMap,S=v(t),_=this._overwriteProps;var n,a,o,s,l,u,c,h,f,p=t.style;if(T&&""===p.zIndex&&("auto"!==(n=ut(t,"zIndex",S))&&""!==n||this._addLazySet(p,"zIndex",0)),"string"==typeof e&&(s=p.cssText,n=y(t,S),p.cssText=s+";"+e,n=w(t,n,y(t)).difs,!at&&X.test(e)&&(n.opacity=parseFloat(RegExp.$1)),e=n,p.cssText=s),e.className?this._firstPT=a=m.className.parse(t,e.className,"className",this,null,null,e):this._firstPT=a=this.parse(t,e,null),this._transformType){for(f=3===this._transformType,Nt?x&&(T=!0,""===p.zIndex&&("auto"!==(c=ut(t,"zIndex",S))&&""!==c||this._addLazySet(p,"zIndex",0)),A&&this._addLazySet(p,"WebkitBackfaceVisibility",this._vars.WebkitBackfaceVisibility||(f?"visible":"hidden"))):p.zoom=1,o=a;o&&o._next;)o=o._next;h=new Tt(t,"transform",0,0,null,2),this._linkCSSP(h,null,o),h.setRatio=Nt?Zt:Ct,h.data=this._transform||Gt(t,S,!0),h.tween=i,h.pr=-1,_.pop()}if(d){for(;a;){for(u=a._next,o=s;o&&o.pr>a.pr;)o=o._next;(a._prev=o?o._prev:l)?a._prev._next=a:s=a,(a._next=o)?o._prev=a:l=a,a=u}this._firstPT=s}return!0},t.parse=function(t,e,i,r){var n,a,o,s,l,u,c,h,f,p,d=t.style;for(n in e){if(u=e[n],a=m[n],"function"!=typeof u||a&&a.allowFunc||(u=u(D,L)),a)i=a.parse(t,u,n,this,i,r,e);else{if("--"===n.substr(0,2)){this._tween._propLookup[n]=this._addTween.call(this._tween,t.style,"setProperty",v(t).getPropertyValue(n)+"",u+"",n,!1,n);continue}l=ut(t,n,S)+"",f="string"==typeof u,"color"===n||"fill"===n||"stroke"===n||-1!==n.indexOf("Color")||f&&q.test(u)?(f||(u=(3<(u=mt(u)).length?"rgba(":"rgb(")+u.join(",")+")"),i=xt(d,n,l,u,!0,"transparent",i,0,r)):f&&G.test(u)?i=xt(d,n,l,u,!0,null,i,0,r):(c=(o=parseFloat(l))||0===o?l.substr((o+"").length):"",""!==l&&"auto"!==l||(c="width"===n||"height"===n?(o=b(t,n,S),"px"):"left"===n||"top"===n?(o=ht(t,n,S),"px"):(o="opacity"!==n?0:1,"")),""===(h=(p=f&&"="===u.charAt(1))?(s=parseInt(u.charAt(0)+"1",10),u=u.substr(2),s*=parseFloat(u),u.replace(I,"")):(s=parseFloat(u),f?u.replace(I,""):""))&&(h=n in P?P[n]:c),u=s||0===s?(p?s+o:s)+h:e[n],c!==h&&(""===h&&"lineHeight"!==n||(s||0===s)&&o&&(o=ct(t,n,o,c),"%"===h?(o/=ct(t,n,100,"%")/100,!0!==e.strictUnits&&(l=o+"%")):"em"===h||"rem"===h||"vw"===h||"vh"===h?o/=ct(t,n,1,h):"px"!==h&&(s=ct(t,n,s,h),h="px"),p&&(!s&&0!==s||(u=s+o+h)))),p&&(s+=o),!o&&0!==o||!s&&0!==s?void 0!==d[n]&&(u||u+""!="NaN"&&null!=u)?(i=new Tt(d,n,s||o||0,0,i,-1,n,!1,0,l,u)).xs0="none"!==u||"display"!==n&&-1===n.indexOf("Style")?u:l:g(e[n]):(i=new Tt(d,n,o,s-o,i,0,n,!1!==C&&("px"===h||"zIndex"===n),0,l,u)).xs0=h)}r&&i&&!i.plugin&&(i.plugin=r)}return i},t.setRatio=function(t){var e,i,r,n=this._firstPT;if(1!==t||this._tween._time!==this._tween._duration&&0!==this._tween._time)if(t||this._tween._time!==this._tween._duration&&0!==this._tween._time||-1e-6===this._tween._rawPrevTime)for(;n;){if(e=n.c*t+n.s,n.r?e=n.r(e):e<1e-6&&-1e-6<e&&(e=0),n.type)if(1===n.type)if(2===(r=n.l))n.t[n.p]=n.xs0+e+n.xs1+n.xn1+n.xs2;else if(3===r)n.t[n.p]=n.xs0+e+n.xs1+n.xn1+n.xs2+n.xn2+n.xs3;else if(4===r)n.t[n.p]=n.xs0+e+n.xs1+n.xn1+n.xs2+n.xn2+n.xs3+n.xn3+n.xs4;else if(5===r)n.t[n.p]=n.xs0+e+n.xs1+n.xn1+n.xs2+n.xn2+n.xs3+n.xn3+n.xs4+n.xn4+n.xs5;else{for(i=n.xs0+e+n.xs1,r=1;r<n.l;r++)i+=n["xn"+r]+n["xs"+(r+1)];n.t[n.p]=i}else-1===n.type?n.t[n.p]=n.xs0:n.setRatio&&n.setRatio(t);else n.t[n.p]=e+n.xs0;n=n._next}else for(;n;)2!==n.type?n.t[n.p]=n.b:n.setRatio(t),n=n._next;else for(;n;){if(2!==n.type)if(n.r&&-1!==n.type)if(e=n.r(n.s+n.c),n.type){if(1===n.type){for(r=n.l,i=n.xs0+e+n.xs1,r=1;r<n.l;r++)i+=n["xn"+r]+n["xs"+(r+1)];n.t[n.p]=i}}else n.t[n.p]=e+n.xs0;else n.t[n.p]=n.e;else n.setRatio(t);n=n._next}},t._enableTransforms=function(t){this._transform=this._transform||Gt(this._target,S,!0),this._transformType=this._transform.svg&&At||!t&&3!==this._transformType?2:3};function ee(t){this.t[this.p]=this.e,this.data._linkCSSP(this,this._next,null,!0)}t._addLazySet=function(t,e,i){var r=this._firstPT=new Tt(t,e,0,0,this._firstPT,2);r.e=i,r.setRatio=ee,r.data=this},t._linkCSSP=function(t,e,i,r){return t&&(e&&(e._prev=t),t._next&&(t._next._prev=t._prev),t._prev?t._prev._next=t._next:this._firstPT===t&&(this._firstPT=t._next,r=!0),i?i._next=t:r||null!==this._firstPT||(this._firstPT=t),t._next=e,t._prev=i),t},t._mod=function(t){for(var e=this._firstPT;e;)"function"==typeof t[e.p]&&(e.r=t[e.p]),e=e._next},t._kill=function(t){var e,i,r,n=t;if(t.autoAlpha||t.alpha){for(i in n={},t)n[i]=t[i];n.opacity=1,n.autoAlpha&&(n.visibility=1)}for(t.className&&(e=this._classNamePT)&&((r=e.xfirst)&&r._prev?this._linkCSSP(r._prev,e._next,r._prev._prev):r===this._firstPT&&(this._firstPT=e._next),e._next&&this._linkCSSP(e._next,e._next._next,r._prev),this._classNamePT=null),e=this._firstPT;e;)e.plugin&&e.plugin!==i&&e.plugin._kill&&(e.plugin._kill(t),i=e.plugin),e=e._next;return re.d.prototype._kill.call(this,n)};var ie=function(t,e,i){var r,n,a,o;if(t.slice)for(n=t.length;-1<--n;)ie(t[n],e,i);else for(n=(r=t.childNodes).length;-1<--n;)o=(a=r[n]).type,a.style&&(e.push(y(a)),i&&i.push(a)),1!==o&&9!==o&&11!==o||!a.childNodes.length||ie(a,e,i)};return H.cascadeTo=function(t,e,i){var r,n,a,o,s=re.f.to(t,e,i),l=[s],u=[],c=[],h=[],f=re.f._internals.reservedProps;for(t=s._targets||s.target,ie(t,u,h),s.render(e,!0,!0),ie(t,c),s.render(0,!0,!0),s._enabled(!0),r=h.length;-1<--r;)if((n=w(h[r],u[r],c[r])).firstMPT){for(a in n=n.difs,i)f[a]&&(n[a]=i[a]);for(a in o={},n)o[a]=u[r][a];l.push(re.f.fromTo(h[r],e,o,n))}return l},re.d.activate([H]),H},!0);function l(e){var i=e<1?Math.pow(10,(e+"").length-2):1;return function(t){return(Math.round(t/e)*e*i|0)/i}}function u(t,e){for(;t;)t.f||t.blob||(t.m=e||Math.round),t=t._next}var n=re.g.CSSPlugin,a=re.e._gsDefine.plugin({propName:"attr",API:2,version:"0.6.1",init:function(t,e,i,r){var n,a;if("function"!=typeof t.setAttribute)return!1;for(n in e)"function"==typeof(a=e[n])&&(a=a(r,t)),this._addTween(t,"setAttribute",t.getAttribute(n)+"",a+"",n,!1,n),this._overwriteProps.push(n);return!0}}),o=re.e._gsDefine.plugin({propName:"roundProps",version:"1.7.0",priority:-1,API:2,init:function(t,e,i){return this._tween=i,!0}}),s=o.prototype;
/*!
 * VERSION: 0.6.1
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 */s._onInitAllProps=function(){var t,e,i,r,n=this._tween,a=n.vars.roundProps,o={},s=n._propLookup.roundProps;if("object"!=typeof a||a.push)for("string"==typeof a&&(a=a.split(",")),i=a.length;-1<--i;)o[a[i]]=Math.round;else for(r in a)o[r]=l(a[r]);for(r in o)for(t=n._firstPT;t;)e=t._next,t.pg?t.t._mod(o):t.n===r&&(2===t.f&&t.t?u(t.t._firstPT,o[r]):(this._add(t.t,r,t.s,t.c,o[r]),e&&(e._prev=t._prev),t._prev?t._prev._next=e:n._firstPT===t&&(n._firstPT=e),t._next=t._prev=null,n._propLookup[r]=s)),t=e;return!1},s._add=function(t,e,i,r,n){this._addTween(t,e,i,i+r,e,n||Math.round),this._overwriteProps.push(e)};
/*!
 * VERSION: 0.3.1
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 **/
var c=re.e._gsDefine.plugin({propName:"directionalRotation",version:"0.3.1",API:2,init:function(t,e,i,r){"object"!=typeof e&&(e={rotation:e}),this.finals={};var n,a,o,s,l,u,c=!0===e.useRadians?2*Math.PI:360;for(n in e)"useRadians"!==n&&("function"==typeof(s=e[n])&&(s=s(r,t)),a=(u=(s+"").split("_"))[0],o=parseFloat("function"!=typeof t[n]?t[n]:t[n.indexOf("set")||"function"!=typeof t["get"+n.substr(3)]?n:"get"+n.substr(3)]()),l=(s=this.finals[n]="string"==typeof a&&"="===a.charAt(1)?o+parseInt(a.charAt(0)+"1",10)*Number(a.substr(2)):Number(a)||0)-o,u.length&&(-1!==(a=u.join("_")).indexOf("short")&&(l%=c)!==l%(c/2)&&(l=l<0?l+c:l-c),-1!==a.indexOf("_cw")&&l<0?l=(l+9999999999*c)%c-(l/c|0)*c:-1!==a.indexOf("ccw")&&0<l&&(l=(l-9999999999*c)%c-(l/c|0)*c)),(1e-6<l||l<-1e-6)&&(this._addTween(t,n,o,o+l,n),this._overwriteProps.push(n)));return!0},set:function(t){var e;if(1!==t)this._super.setRatio.call(this,t);else for(e=this._firstPT;e;)e.f?e.t[e.p](this.finals[e.p]):e.t[e.p]=this.finals[e.p],e=e._next}});c._autoCSS=!0,
/*!
 * VERSION: 2.1.3
 * DATE: 2019-05-17
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 */
re.e._gsDefine("TimelineLite",["core.Animation","core.SimpleTimeline","TweenLite"],function(){function d(t){re.c.call(this,t);var e,i,r=this,n=r.vars;for(i in r._labels={},r.autoRemoveChildren=!!n.autoRemoveChildren,r.smoothChildTiming=!!n.smoothChildTiming,r._sortChildren=!0,r._onUpdate=n.onUpdate,n)e=n[i],h(e)&&-1!==e.join("").indexOf("{self}")&&(n[i]=r._swapSelfInParams(e));h(n.tweens)&&r.add(n.tweens,0,n.align,n.stagger)}function _(t){var e,i={};for(e in t)i[e]=t[e];return i}function m(t,e,i){var r,n,a=t.cycle;for(r in a)n=a[r],t[r]="function"==typeof n?n(i,e[i],e):n[i%n.length];delete t.cycle}function u(t,e,i,r){var n="immediateRender";return n in e||(e[n]=!(i&&!1===i[n]||r)),e}function g(t){if("function"==typeof t)return t;var d="object"==typeof t?t:{each:t},_=d.ease,m=d.from||0,g=d.base||0,v={},y=isNaN(m),w=d.axis,b={center:.5,end:1}[m]||0;return function(t,e,i){var r,n,a,o,s,l,u,c,h,f=(i||d).length,p=v[f];if(!p){if(!(h="auto"===d.grid?0:(d.grid||[1/0])[0])){for(u=-1/0;u<(u=i[h++].getBoundingClientRect().left)&&h<f;);h--}for(p=v[f]=[],r=y?Math.min(h,f)*b-.5:m%h,n=y?f*b/h-.5:m/h|0,c=1/(u=0),l=0;l<f;l++)a=l%h-r,o=n-(l/h|0),p[l]=s=w?Math.abs("y"===w?o:a):Math.sqrt(a*a+o*o),u<s&&(u=s),s<c&&(c=s);p.max=u-c,p.min=c,p.v=f=d.amount||d.each*(f<h?f-1:w?"y"===w?f/h:h:Math.max(h,f/h))||0,p.b=f<0?g-f:g}return f=(p[t]-p.min)/p.max,p.b+(_?_.getRatio(f):f)*p.v}}var v=1e-8,t=re.f._internals,e=d._internals={},y=t.isSelector,h=t.isArray,w=t.lazyTweens,b=t.lazyRender,o=re.e._gsDefine.globals,a=e.pauseCallback=function(){},i=d.prototype=new re.c;return d.version="2.1.3",d.distribute=g,i.constructor=d,i.kill()._gc=i._forcingPlayhead=i._hasPause=!1,i.to=function(t,e,i,r){var n=i.repeat&&o.TweenMax||re.f;return e?this.add(new n(t,e,i),r):this.set(t,i,r)},i.from=function(t,e,i,r){return this.add((i.repeat&&o.TweenMax||re.f).from(t,e,u(0,i)),r)},i.fromTo=function(t,e,i,r,n){var a=r.repeat&&o.TweenMax||re.f;return r=u(0,r,i),e?this.add(a.fromTo(t,e,i,r),n):this.set(t,r,n)},i.staggerTo=function(t,e,i,r,n,a,o,s){var l,u,c=new d({onComplete:a,onCompleteParams:o,callbackScope:s,smoothChildTiming:this.smoothChildTiming}),h=g(i.stagger||r),f=i.startAt,p=i.cycle;for("string"==typeof t&&(t=re.f.selector(t)||t),y(t=t||[])&&(t=function(t){var e,i=[],r=t.length;for(e=0;e!==r;i.push(t[e++]));return i}(t)),u=0;u<t.length;u++)l=_(i),f&&(l.startAt=_(f),f.cycle&&m(l.startAt,t,u)),p&&(m(l,t,u),null!=l.duration&&(e=l.duration,delete l.duration)),c.to(t[u],e,l,h(u,t[u],t));return this.add(c,n)},i.staggerFrom=function(t,e,i,r,n,a,o,s){return i.runBackwards=!0,this.staggerTo(t,e,u(0,i),r,n,a,o,s)},i.staggerFromTo=function(t,e,i,r,n,a,o,s,l){return r.startAt=i,this.staggerTo(t,e,u(0,r,i),n,a,o,s,l)},i.call=function(t,e,i,r){return this.add(re.f.delayedCall(0,t,e,i),r)},i.set=function(t,e,i){return this.add(new re.f(t,0,u(0,e,null,!0)),i)},d.exportRoot=function(t,e){null==(t=t||{}).smoothChildTiming&&(t.smoothChildTiming=!0);var i,r,n,a,o=new d(t),s=o._timeline;for(null==e&&(e=!0),s._remove(o,!0),o._startTime=0,o._rawPrevTime=o._time=o._totalTime=s._time,n=s._first;n;)a=n._next,e&&n instanceof re.f&&n.target===n.vars.onComplete||((r=n._startTime-n._delay)<0&&(i=1),o.add(n,r)),n=a;return s.add(o,0),i&&o.totalDuration(),o},i.add=function(t,e,i,r){var n,a,o,s,l,u,c=this;if("number"!=typeof e&&(e=c._parseTimeOrLabel(e,0,!0,t)),!(t instanceof re.a)){if(t instanceof Array||t&&t.push&&h(t)){for(i=i||"normal",r=r||0,n=e,a=t.length,o=0;o<a;o++)h(s=t[o])&&(s=new d({tweens:s})),c.add(s,n),"string"!=typeof s&&"function"!=typeof s&&("sequence"===i?n=s._startTime+s.totalDuration()/s._timeScale:"start"===i&&(s._startTime-=s.delay())),n+=r;return c._uncache(!0)}if("string"==typeof t)return c.addLabel(t,e);if("function"!=typeof t)throw"Cannot add "+t+" into the timeline; it is not a tween, timeline, function, or string.";t=re.f.delayedCall(0,t)}if(re.c.prototype.add.call(c,t,e),(t._time||!t._duration&&t._initted)&&(n=(c.rawTime()-t._startTime)*t._timeScale,(!t._duration||1e-5<Math.abs(Math.max(0,Math.min(t.totalDuration(),n)))-t._totalTime)&&t.render(n,!1,!1)),(c._gc||c._time===c._duration)&&!c._paused&&c._duration<c.duration())for(u=(l=c).rawTime()>t._startTime;l._timeline;)u&&l._timeline.smoothChildTiming?l.totalTime(l._totalTime,!0):l._gc&&l._enabled(!0,!1),l=l._timeline;return c},i.remove=function(t){if(t instanceof re.a){this._remove(t,!1);var e=t._timeline=t.vars.useFrames?re.a._rootFramesTimeline:re.a._rootTimeline;return t._startTime=(t._paused?t._pauseTime:e._time)-(t._reversed?t.totalDuration()-t._totalTime:t._totalTime)/t._timeScale,this}if(t instanceof Array||t&&t.push&&h(t)){for(var i=t.length;-1<--i;)this.remove(t[i]);return this}return"string"==typeof t?this.removeLabel(t):this.kill(null,t)},i._remove=function(t,e){return re.c.prototype._remove.call(this,t,e),this._last?this._time>this.duration()&&(this._time=this._duration,this._totalTime=this._totalDuration):this._time=this._totalTime=this._duration=this._totalDuration=0,this},i.append=function(t,e){return this.add(t,this._parseTimeOrLabel(null,e,!0,t))},i.insert=i.insertMultiple=function(t,e,i,r){return this.add(t,e||0,i,r)},i.appendMultiple=function(t,e,i,r){return this.add(t,this._parseTimeOrLabel(null,e,!0,t),i,r)},i.addLabel=function(t,e){return this._labels[t]=this._parseTimeOrLabel(e),this},i.addPause=function(t,e,i,r){var n=re.f.delayedCall(0,a,i,r||this);return n.vars.onComplete=n.vars.onReverseComplete=e,n.data="isPause",this._hasPause=!0,this.add(n,t)},i.removeLabel=function(t){return delete this._labels[t],this},i.getLabelTime=function(t){return null!=this._labels[t]?this._labels[t]:-1},i._parseTimeOrLabel=function(t,e,i,r){var n,a;if(r instanceof re.a&&r.timeline===this)this.remove(r);else if(r&&(r instanceof Array||r.push&&h(r)))for(a=r.length;-1<--a;)r[a]instanceof re.a&&r[a].timeline===this&&this.remove(r[a]);if(n="number"!=typeof t||e?99999999999<this.duration()?this.recent().endTime(!1):this._duration:0,"string"==typeof e)return this._parseTimeOrLabel(e,i&&"number"==typeof t&&null==this._labels[e]?t-n:0,i);if(e=e||0,"string"!=typeof t||!isNaN(t)&&null==this._labels[t])null==t&&(t=n);else{if(-1===(a=t.indexOf("=")))return null==this._labels[t]?i?this._labels[t]=n+e:e:this._labels[t]+e;e=parseInt(t.charAt(a-1)+"1",10)*Number(t.substr(a+1)),t=1<a?this._parseTimeOrLabel(t.substr(0,a-1),0,i):n}return Number(t)+e},i.seek=function(t,e){return this.totalTime("number"==typeof t?t:this._parseTimeOrLabel(t),!1!==e)},i.stop=function(){return this.paused(!0)},i.gotoAndPlay=function(t,e){return this.play(t,e)},i.gotoAndStop=function(t,e){return this.pause(t,e)},i.render=function(t,e,i){this._gc&&this._enabled(!0,!1);var r,n,a,o,s,l,u,c,h=this,f=h._time,p=h._dirty?h.totalDuration():h._totalDuration,d=h._startTime,_=h._timeScale,m=h._paused;if(f!==h._time&&(t+=h._time-f),h._hasPause&&!h._forcingPlayhead&&!e){if(f<t)for(r=h._first;r&&r._startTime<=t&&!l;)r._duration||"isPause"!==r.data||r.ratio||0===r._startTime&&0===h._rawPrevTime||(l=r),r=r._next;else for(r=h._last;r&&r._startTime>=t&&!l;)r._duration||"isPause"===r.data&&0<r._rawPrevTime&&(l=r),r=r._prev;l&&(h._time=h._totalTime=t=l._startTime,c=h._startTime+(h._reversed?h._duration-t:t)/h._timeScale)}if(p-v<=t&&0<=t)h._totalTime=h._time=p,h._reversed||h._hasPausedChild()||(n=!0,o="onComplete",s=!!h._timeline.autoRemoveChildren,0===h._duration&&(t<=0&&-v<=t||h._rawPrevTime<0||h._rawPrevTime===v)&&h._rawPrevTime!==t&&h._first&&(s=!0,h._rawPrevTime>v&&(o="onReverseComplete"))),h._rawPrevTime=h._duration||!e||t||h._rawPrevTime===t?t:v,t=p+1e-4;else if(t<v)if(h._totalTime=h._time=0,-v<t&&(t=0),(0!==f||0===h._duration&&h._rawPrevTime!==v&&(0<h._rawPrevTime||t<0&&0<=h._rawPrevTime))&&(o="onReverseComplete",n=h._reversed),t<0)h._active=!1,h._timeline.autoRemoveChildren&&h._reversed?(s=n=!0,o="onReverseComplete"):0<=h._rawPrevTime&&h._first&&(s=!0),h._rawPrevTime=t;else{if(h._rawPrevTime=h._duration||!e||t||h._rawPrevTime===t?t:v,0===t&&n)for(r=h._first;r&&0===r._startTime;)r._duration||(n=!1),r=r._next;t=0,h._initted||(s=!0)}else h._totalTime=h._time=h._rawPrevTime=t;if(h._time!==f&&h._first||i||s||l){if(h._initted||(h._initted=!0),h._active||!h._paused&&h._time!==f&&0<t&&(h._active=!0),0===f&&h.vars.onStart&&(0===h._time&&h._duration||e||h._callback("onStart")),f<=(u=h._time))for(r=h._first;r&&(a=r._next,u===h._time&&(!h._paused||m));)(r._active||r._startTime<=u&&!r._paused&&!r._gc)&&(l===r&&(h.pause(),h._pauseTime=c),r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,i):r.render((t-r._startTime)*r._timeScale,e,i)),r=a;else for(r=h._last;r&&(a=r._prev,u===h._time&&(!h._paused||m));){if(r._active||r._startTime<=f&&!r._paused&&!r._gc){if(l===r){for(l=r._prev;l&&l.endTime()>h._time;)l.render(l._reversed?l.totalDuration()-(t-l._startTime)*l._timeScale:(t-l._startTime)*l._timeScale,e,i),l=l._prev;l=null,h.pause(),h._pauseTime=c}r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,i):r.render((t-r._startTime)*r._timeScale,e,i)}r=a}h._onUpdate&&(e||(w.length&&b(),h._callback("onUpdate"))),o&&(h._gc||d!==h._startTime&&_===h._timeScale||(0===h._time||p>=h.totalDuration())&&(n&&(w.length&&b(),h._timeline.autoRemoveChildren&&h._enabled(!1,!1),h._active=!1),!e&&h.vars[o]&&h._callback(o)))}},i._hasPausedChild=function(){for(var t=this._first;t;){if(t._paused||t instanceof d&&t._hasPausedChild())return!0;t=t._next}return!1},i.getChildren=function(t,e,i,r){r=r||-9999999999;for(var n=[],a=this._first,o=0;a;)a._startTime<r||(a instanceof re.f?!1!==e&&(n[o++]=a):(!1!==i&&(n[o++]=a),!1!==t&&(o=(n=n.concat(a.getChildren(!0,e,i))).length))),a=a._next;return n},i.getTweensOf=function(t,e){var i,r,n=this._gc,a=[],o=0;for(n&&this._enabled(!0,!0),r=(i=re.f.getTweensOf(t)).length;-1<--r;)(i[r].timeline===this||e&&this._contains(i[r]))&&(a[o++]=i[r]);return n&&this._enabled(!1,!0),a},i.recent=function(){return this._recent},i._contains=function(t){for(var e=t.timeline;e;){if(e===this)return!0;e=e.timeline}return!1},i.shiftChildren=function(t,e,i){i=i||0;for(var r,n=this._first,a=this._labels;n;)n._startTime>=i&&(n._startTime+=t),n=n._next;if(e)for(r in a)a[r]>=i&&(a[r]+=t);return this._uncache(!0)},i._kill=function(t,e){if(!t&&!e)return this._enabled(!1,!1);for(var i=e?this.getTweensOf(e):this.getChildren(!0,!0,!1),r=i.length,n=!1;-1<--r;)i[r]._kill(t,e)&&(n=!0);return n},i.clear=function(t){var e=this.getChildren(!1,!0,!0),i=e.length;for(this._time=this._totalTime=0;-1<--i;)e[i]._enabled(!1,!1);return!1!==t&&(this._labels={}),this._uncache(!0)},i.invalidate=function(){for(var t=this._first;t;)t.invalidate(),t=t._next;return re.a.prototype.invalidate.call(this)},i._enabled=function(t,e){if(t===this._gc)for(var i=this._first;i;)i._enabled(t,!0),i=i._next;return re.c.prototype._enabled.call(this,t,e)},i.totalTime=function(t,e,i){this._forcingPlayhead=!0;var r=re.a.prototype.totalTime.apply(this,arguments);return this._forcingPlayhead=!1,r},i.duration=function(t){return arguments.length?(0!==this.duration()&&0!==t&&this.timeScale(this._duration/t),this):(this._dirty&&this.totalDuration(),this._duration)},i.totalDuration=function(t){if(arguments.length)return t&&this.totalDuration()?this.timeScale(this._totalDuration/t):this;if(this._dirty){for(var e,i,r=0,n=this,a=n._last,o=999999999999;a;)e=a._prev,a._dirty&&a.totalDuration(),a._startTime>o&&n._sortChildren&&!a._paused&&!n._calculatingDuration?(n._calculatingDuration=1,n.add(a,a._startTime-a._delay),n._calculatingDuration=0):o=a._startTime,a._startTime<0&&!a._paused&&(r-=a._startTime,n._timeline.smoothChildTiming&&(n._startTime+=a._startTime/n._timeScale,n._time-=a._startTime,n._totalTime-=a._startTime,n._rawPrevTime-=a._startTime),n.shiftChildren(-a._startTime,!1,-9999999999),o=0),r<(i=a._startTime+a._totalDuration/a._timeScale)&&(r=i),a=e;n._duration=n._totalDuration=r,n._dirty=!1}return this._totalDuration},i.paused=function(t){if(!1===t&&this._paused)for(var e=this._first;e;)e._startTime===this._time&&"isPause"===e.data&&(e._rawPrevTime=0),e=e._next;return re.a.prototype.paused.apply(this,arguments)},i.usesFrames=function(){for(var t=this._timeline;t._timeline;)t=t._timeline;return t===re.a._rootFramesTimeline},i.rawTime=function(t){return t&&(this._paused||this._repeat&&0<this.time()&&this.totalProgress()<1)?this._totalTime%(this._duration+this._repeatDelay):this._paused?this._totalTime:(this._timeline.rawTime(t)-this._startTime)*this._timeScale},d},!0);var h=re.g.TimelineLite;
/*!
 * VERSION: 2.1.3
 * DATE: 2019-05-17
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 */re.e._gsDefine("TimelineMax",["TimelineLite","TweenLite","easing.Ease"],function(){function t(t){h.call(this,t),this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._cycle=0,this._yoyo=!!this.vars.yoyo,this._dirty=!0}var O=1e-8,e=re.f._internals,R=e.lazyTweens,C=e.lazyRender,s=re.e._gsDefine.globals,l=new re.b(null,null,1,0),i=t.prototype=new h;return i.constructor=t,i.kill()._gc=!1,t.version="2.1.3",i.invalidate=function(){return this._yoyo=!!this.vars.yoyo,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._uncache(!0),h.prototype.invalidate.call(this)},i.addCallback=function(t,e,i,r){return this.add(re.f.delayedCall(0,t,i,r),e)},i.removeCallback=function(t,e){if(t)if(null==e)this._kill(null,t);else for(var i=this.getTweensOf(t,!1),r=i.length,n=this._parseTimeOrLabel(e);-1<--r;)i[r]._startTime===n&&i[r]._enabled(!1,!1);return this},i.removePause=function(t){return this.removeCallback(h._internals.pauseCallback,t)},i.tweenTo=function(t,e){e=e||{};var i,r,n,a={ease:l,useFrames:this.usesFrames(),immediateRender:!1,lazy:!1},o=e.repeat&&s.TweenMax||re.f;for(r in e)a[r]=e[r];return a.time=this._parseTimeOrLabel(t),i=Math.abs(Number(a.time)-this._time)/this._timeScale||.001,n=new o(this,i,a),a.onStart=function(){n.target.paused(!0),n.vars.time===n.target.time()||i!==n.duration()||n.isFromTo||n.duration(Math.abs(n.vars.time-n.target.time())/n.target._timeScale).render(n.time(),!0,!0),e.onStart&&e.onStart.apply(e.onStartScope||e.callbackScope||n,e.onStartParams||[])},n},i.tweenFromTo=function(t,e,i){i=i||{},t=this._parseTimeOrLabel(t),i.startAt={onComplete:this.seek,onCompleteParams:[t],callbackScope:this},i.immediateRender=!1!==i.immediateRender;var r=this.tweenTo(e,i);return r.isFromTo=1,r.duration(Math.abs(r.vars.time-t)/this._timeScale||.001)},i.render=function(t,e,i){this._gc&&this._enabled(!0,!1);var r,n,a,o,s,l,u,c,h,f=this,p=f._time,d=f._dirty?f.totalDuration():f._totalDuration,_=f._duration,m=f._totalTime,g=f._startTime,v=f._timeScale,y=f._rawPrevTime,w=f._paused,b=f._cycle;if(p!==f._time&&(t+=f._time-p),d-O<=t&&0<=t)f._locked||(f._totalTime=d,f._cycle=f._repeat),f._reversed||f._hasPausedChild()||(n=!0,o="onComplete",s=!!f._timeline.autoRemoveChildren,0===f._duration&&(t<=0&&-O<=t||y<0||y===O)&&y!==t&&f._first&&(s=!0,O<y&&(o="onReverseComplete"))),f._rawPrevTime=f._duration||!e||t||f._rawPrevTime===t?t:O,f._yoyo&&1&f._cycle?f._time=t=0:t=(f._time=_)+1e-4;else if(t<O)if(f._locked||(f._totalTime=f._cycle=0),f._time=0,-O<t&&(t=0),(0!==p||0===_&&y!==O&&(0<y||t<0&&0<=y)&&!f._locked)&&(o="onReverseComplete",n=f._reversed),t<0)f._active=!1,f._timeline.autoRemoveChildren&&f._reversed?(s=n=!0,o="onReverseComplete"):0<=y&&f._first&&(s=!0),f._rawPrevTime=t;else{if(f._rawPrevTime=_||!e||t||f._rawPrevTime===t?t:O,0===t&&n)for(r=f._first;r&&0===r._startTime;)r._duration||(n=!1),r=r._next;t=0,f._initted||(s=!0)}else 0===_&&y<0&&(s=!0),f._time=f._rawPrevTime=t,f._locked||(f._totalTime=t,0!==f._repeat&&(l=_+f._repeatDelay,f._cycle=f._totalTime/l>>0,f._cycle&&f._cycle===f._totalTime/l&&m<=t&&f._cycle--,f._time=f._totalTime-f._cycle*l,f._yoyo&&1&f._cycle&&(f._time=_-f._time),f._time>_?t=(f._time=_)+1e-4:f._time<0?f._time=t=0:t=f._time));if(f._hasPause&&!f._forcingPlayhead&&!e){if(p<(t=f._time)||f._repeat&&b!==f._cycle)for(r=f._first;r&&r._startTime<=t&&!u;)r._duration||"isPause"!==r.data||r.ratio||0===r._startTime&&0===f._rawPrevTime||(u=r),r=r._next;else for(r=f._last;r&&r._startTime>=t&&!u;)r._duration||"isPause"===r.data&&0<r._rawPrevTime&&(u=r),r=r._prev;u&&(h=f._startTime+(f._reversed?f._duration-u._startTime:u._startTime)/f._timeScale,u._startTime<_&&(f._time=f._rawPrevTime=t=u._startTime,f._totalTime=t+f._cycle*(f._totalDuration+f._repeatDelay)))}if(f._cycle!==b&&!f._locked){var T=f._yoyo&&0!=(1&b),x=T===(f._yoyo&&0!=(1&f._cycle)),P=f._totalTime,S=f._cycle,k=f._rawPrevTime,E=f._time;if(f._totalTime=b*_,f._cycle<b?T=!T:f._totalTime+=_,f._time=p,f._rawPrevTime=0===_?y-1e-4:y,f._cycle=b,f._locked=!0,p=T?0:_,f.render(p,e,0===_),e||f._gc||f.vars.onRepeat&&(f._cycle=S,f._locked=!1,f._callback("onRepeat")),p!==f._time)return;if(x&&(f._cycle=b,f._locked=!0,p=T?_+1e-4:-1e-4,f.render(p,!0,!1)),f._locked=!1,f._paused&&!w)return;f._time=E,f._totalTime=P,f._cycle=S,f._rawPrevTime=k}if(f._time!==p&&f._first||i||s||u){if(f._initted||(f._initted=!0),f._active||!f._paused&&f._totalTime!==m&&0<t&&(f._active=!0),0===m&&f.vars.onStart&&(0===f._totalTime&&f._totalDuration||e||f._callback("onStart")),p<=(c=f._time))for(r=f._first;r&&(a=r._next,c===f._time&&(!f._paused||w));)(r._active||r._startTime<=f._time&&!r._paused&&!r._gc)&&(u===r&&(f.pause(),f._pauseTime=h),r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,i):r.render((t-r._startTime)*r._timeScale,e,i)),r=a;else for(r=f._last;r&&(a=r._prev,c===f._time&&(!f._paused||w));){if(r._active||r._startTime<=p&&!r._paused&&!r._gc){if(u===r){for(u=r._prev;u&&u.endTime()>f._time;)u.render(u._reversed?u.totalDuration()-(t-u._startTime)*u._timeScale:(t-u._startTime)*u._timeScale,e,i),u=u._prev;u=null,f.pause(),f._pauseTime=h}r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,i):r.render((t-r._startTime)*r._timeScale,e,i)}r=a}f._onUpdate&&(e||(R.length&&C(),f._callback("onUpdate"))),o&&(f._locked||f._gc||g!==f._startTime&&v===f._timeScale||(0===f._time||d>=f.totalDuration())&&(n&&(R.length&&C(),f._timeline.autoRemoveChildren&&f._enabled(!1,!1),f._active=!1),!e&&f.vars[o]&&f._callback(o)))}else m!==f._totalTime&&f._onUpdate&&(e||f._callback("onUpdate"))},i.getActive=function(t,e,i){var r,n,a=[],o=this.getChildren(t||null==t,e||null==t,!!i),s=0,l=o.length;for(r=0;r<l;r++)(n=o[r]).isActive()&&(a[s++]=n);return a},i.getLabelAfter=function(t){t||0!==t&&(t=this._time);var e,i=this.getLabelsArray(),r=i.length;for(e=0;e<r;e++)if(i[e].time>t)return i[e].name;return null},i.getLabelBefore=function(t){null==t&&(t=this._time);for(var e=this.getLabelsArray(),i=e.length;-1<--i;)if(e[i].time<t)return e[i].name;return null},i.getLabelsArray=function(){var t,e=[],i=0;for(t in this._labels)e[i++]={time:this._labels[t],name:t};return e.sort(function(t,e){return t.time-e.time}),e},i.invalidate=function(){return this._locked=!1,h.prototype.invalidate.call(this)},i.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!=(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this._time/this.duration()||0},i.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()||0},i.totalDuration=function(t){return arguments.length?-1!==this._repeat&&t?this.timeScale(this.totalDuration()/t):this:(this._dirty&&(h.prototype.totalDuration.call(this),this._totalDuration=-1===this._repeat?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat),this._totalDuration)},i.time=function(t,e){if(!arguments.length)return this._time;this._dirty&&this.totalDuration();var i=this._duration,r=this._cycle,n=r*(i+this._repeatDelay);return i<t&&(t=i),this.totalTime(this._yoyo&&1&r?i-t+n:this._repeat?t+n:t,e)},i.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},i.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},i.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},i.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.getLabelBefore(this._time+O)},t},!0);function v(t,e,i,r){i===r&&(i=r-(r-e)/1e6),t===e&&(e=t+(i-t)/1e6),this.a=t,this.b=e,this.c=i,this.d=r,this.da=r-t,this.ca=i-t,this.ba=e-t}function b(t,e,i,r){var n={a:t},a={},o={},s={c:r},l=(t+e)/2,u=(e+i)/2,c=(i+r)/2,h=(l+u)/2,f=(u+c)/2,p=(f-h)/8;return n.b=l+(t-l)/4,a.b=h+p,n.c=a.a=(n.b+a.b)/2,a.c=o.a=(h+f)/2,o.b=f-p,s.b=c+(r-c)/4,o.c=s.a=(o.b+s.b)/2,[n,a,o,s]}function g(t,e,i,r,n){var a,o,s,l,u,c,h,f,p,d,_,m,g,v=t.length-1,y=0,w=t[0].a;for(a=0;a<v;a++)o=(u=t[y]).a,s=u.d,l=t[y+1].d,f=n?(_=T[a],g=((m=x[a])+_)*e*.25/(r?.5:S[a]||.5),s-((c=s-(s-o)*(r?.5*e:0!==_?g/_:0))+(((h=s+(l-s)*(r?.5*e:0!==m?g/m:0))-c)*(3*_/(_+m)+.5)/4||0))):s-((c=s-(s-o)*e*.5)+(h=s+(l-s)*e*.5))/2,c+=f,h+=f,u.c=p=c,u.b=0!==a?w:w=u.a+.6*(u.c-u.a),u.da=s-o,u.ca=p-o,u.ba=w-o,i?(d=b(o,w,p,s),t.splice(y,1,d[0],d[1],d[2],d[3]),y+=4):y++,w=h;(u=t[y]).b=w,u.c=w+.4*(u.d-w),u.da=u.d-u.a,u.ca=u.c-u.a,u.ba=w-u.a,i&&(d=b(u.a,w,u.c,u.d),t.splice(y,1,d[0],d[1],d[2],d[3]))}function y(t,e,i,r){var n,a,o,s,l,u,c=[];if(r)for(a=(t=[r].concat(t)).length;-1<--a;)"string"==typeof(u=t[a][e])&&"="===u.charAt(1)&&(t[a][e]=r[e]+Number(u.charAt(0)+u.substr(2)));if((n=t.length-2)<0)return c[0]=new v(t[0][e],0,0,t[0][e]),c;for(a=0;a<n;a++)o=t[a][e],s=t[a+1][e],c[a]=new v(o,0,0,s),i&&(l=t[a+2][e],T[a]=(T[a]||0)+(s-o)*(s-o),x[a]=(x[a]||0)+(l-s)*(l-s));return c[a]=new v(t[a][e],0,0,t[a+1][e]),c}function p(t,e,i,r,n,a){var o,s,l,u,c,h,f,p,d={},_=[],m=a||t[0];for(s in n="string"==typeof n?","+n+",":",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,",null==e&&(e=1),t[0])_.push(s);if(1<t.length){for(p=t[t.length-1],f=!0,o=_.length;-1<--o;)if(s=_[o],.05<Math.abs(m[s]-p[s])){f=!1;break}f&&(t=t.concat(),a&&t.unshift(a),t.push(t[1]),a=t[t.length-3])}for(T.length=x.length=S.length=0,o=_.length;-1<--o;)s=_[o],w[s]=-1!==n.indexOf(","+s+","),d[s]=y(t,s,w[s],a);for(o=T.length;-1<--o;)T[o]=Math.sqrt(T[o]),x[o]=Math.sqrt(x[o]);if(!r){for(o=_.length;-1<--o;)if(w[s])for(h=(l=d[_[o]]).length-1,u=0;u<h;u++)c=l[u+1].da/x[u]+l[u].da/T[u]||0,S[u]=(S[u]||0)+c*c;for(o=S.length;-1<--o;)S[o]=Math.sqrt(S[o])}for(o=_.length,u=i?4:1;-1<--o;)l=d[s=_[o]],g(l,e,i,r,w[s]),f&&(l.splice(0,u),l.splice(l.length-u,u));return d}function d(t,e,i){for(var r,n,a,o,s,l,u,c,h,f,p,d=1/i,_=t.length;-1<--_;)for(a=(f=t[_]).a,o=f.d-a,s=f.c-a,l=f.b-a,r=n=0,c=1;c<=i;c++)r=n-(n=((u=d*c)*u*o+3*(h=1-u)*(u*s+h*l))*u),e[p=_*i+c-1]=(e[p]||0)+r*r}var f=re.g.TimelineMax,P=180/Math.PI,T=[],x=[],S=[],w={},m=re.e._gsDefine.globals,k=re.e._gsDefine.plugin({propName:"bezier",priority:-1,version:"1.3.9",API:2,global:!0,init:function(t,e,i){this._target=t,e instanceof Array&&(e={values:e}),this._func={},this._mod={},this._props=[],this._timeRes=null==e.timeResolution?6:parseInt(e.timeResolution,10);var r,n,a,o,s,l=e.values||[],u={},c=l[0],h=e.autoRotate||i.vars.orientToBezier;for(r in this._autoRotate=h?h instanceof Array?h:[["x","y","rotation",!0===h?0:Number(h)||0]]:null,c)this._props.push(r);for(a=this._props.length;-1<--a;)r=this._props[a],this._overwriteProps.push(r),n=this._func[r]="function"==typeof t[r],u[r]=n?t[r.indexOf("set")||"function"!=typeof t["get"+r.substr(3)]?r:"get"+r.substr(3)]():parseFloat(t[r]),s||u[r]!==l[0][r]&&(s=u);if(this._beziers="cubic"!==e.type&&"quadratic"!==e.type&&"soft"!==e.type?p(l,isNaN(e.curviness)?1:e.curviness,!1,"thruBasic"===e.type,e.correlate,s):function(t,e,i){var r,n,a,o,s,l,u,c,h,f,p,d={},_="cubic"===(e=e||"soft")?3:2,m="soft"===e,g=[];if(m&&i&&(t=[i].concat(t)),null==t||t.length<1+_)throw"invalid Bezier data";for(h in t[0])g.push(h);for(l=g.length;-1<--l;){for(d[h=g[l]]=s=[],f=0,c=t.length,u=0;u<c;u++)r=null==i?t[u][h]:"string"==typeof(p=t[u][h])&&"="===p.charAt(1)?i[h]+Number(p.charAt(0)+p.substr(2)):Number(p),m&&1<u&&u<c-1&&(s[f++]=(r+s[f-2])/2),s[f++]=r;for(c=f-_+1,u=f=0;u<c;u+=_)r=s[u],n=s[u+1],a=s[u+2],o=2==_?0:s[u+3],s[f++]=p=3==_?new v(r,n,a,o):new v(r,(2*n+r)/3,(2*n+a)/3,a);s.length=f}return d}(l,e.type,u),this._segCount=this._beziers[r].length,this._timeRes){var f=function(t,e){var i,r,n,a,o=[],s=[],l=0,u=0,c=(e=e>>0||6)-1,h=[],f=[];for(i in t)d(t[i],o,e);for(n=o.length,r=0;r<n;r++)l+=Math.sqrt(o[r]),f[a=r%e]=l,a===c&&(u+=l,h[a=r/e>>0]=f,s[a]=u,l=0,f=[]);return{length:u,lengths:s,segments:h}}(this._beziers,this._timeRes);this._length=f.length,this._lengths=f.lengths,this._segments=f.segments,this._l1=this._li=this._s1=this._si=0,this._l2=this._lengths[0],this._curSeg=this._segments[0],this._s2=this._curSeg[0],this._prec=1/this._curSeg.length}if(h=this._autoRotate)for(this._initialRotations=[],h[0]instanceof Array||(this._autoRotate=h=[h]),a=h.length;-1<--a;){for(o=0;o<3;o++)r=h[a][o],this._func[r]="function"==typeof t[r]&&t[r.indexOf("set")||"function"!=typeof t["get"+r.substr(3)]?r:"get"+r.substr(3)];r=h[a][2],this._initialRotations[a]=(this._func[r]?this._func[r].call(this._target):this._target[r])||0,this._overwriteProps.push(r)}return this._startRatio=i.vars.runBackwards?1:0,!0},set:function(t){var e,i,r,n,a,o,s,l,u,c,h,f=this._segCount,p=this._func,d=this._target,_=t!==this._startRatio;if(this._timeRes){if(u=this._lengths,c=this._curSeg,h=t*this._length,r=this._li,h>this._l2&&r<f-1){for(l=f-1;r<l&&(this._l2=u[++r])<=h;);this._l1=u[r-1],this._li=r,this._curSeg=c=this._segments[r],this._s2=c[this._s1=this._si=0]}else if(h<this._l1&&0<r){for(;0<r&&(this._l1=u[--r])>=h;);0===r&&h<this._l1?this._l1=0:r++,this._l2=u[r],this._li=r,this._curSeg=c=this._segments[r],this._s1=c[(this._si=c.length-1)-1]||0,this._s2=c[this._si]}if(e=r,h-=this._l1,r=this._si,h>this._s2&&r<c.length-1){for(l=c.length-1;r<l&&(this._s2=c[++r])<=h;);this._s1=c[r-1],this._si=r}else if(h<this._s1&&0<r){for(;0<r&&(this._s1=c[--r])>=h;);0===r&&h<this._s1?this._s1=0:r++,this._s2=c[r],this._si=r}o=1===t?1:(r+(h-this._s1)/(this._s2-this._s1))*this._prec||0}else o=(t-(e=t<0?0:1<=t?f-1:f*t>>0)*(1/f))*f;for(i=1-o,r=this._props.length;-1<--r;)n=this._props[r],s=(o*o*(a=this._beziers[n][e]).da+3*i*(o*a.ca+i*a.ba))*o+a.a,this._mod[n]&&(s=this._mod[n](s,d)),p[n]?d[n](s):d[n]=s;if(this._autoRotate){var m,g,v,y,w,b,T,x=this._autoRotate;for(r=x.length;-1<--r;)n=x[r][2],b=x[r][3]||0,T=!0===x[r][4]?1:P,a=this._beziers[x[r][0]],m=this._beziers[x[r][1]],a&&m&&(a=a[e],m=m[e],g=a.a+(a.b-a.a)*o,g+=((y=a.b+(a.c-a.b)*o)-g)*o,y+=(a.c+(a.d-a.c)*o-y)*o,v=m.a+(m.b-m.a)*o,v+=((w=m.b+(m.c-m.b)*o)-v)*o,w+=(m.c+(m.d-m.c)*o-w)*o,s=_?Math.atan2(w-v,y-g)*T+b:this._initialRotations[r],this._mod[n]&&(s=this._mod[n](s,d)),p[n]?d[n](s):d[n]=s)}}}),_=k.prototype;
/*!
 * VERSION: 1.3.9
 * DATE: 2019-05-17
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 **/k.bezierThrough=p,k.cubicToQuadratic=b,k._autoCSS=!0,k.quadraticToCubic=function(t,e,i){return new v(t,(2*e+t)/3,(2*e+i)/3,i)},k._cssRegister=function(){var t=m.CSSPlugin;if(t){var e=t._internals,p=e._parseToProxy,d=e._setPluginRatio,_=e.CSSPropTween;e._registerComplexSpecialProp("bezier",{parser:function(t,e,i,r,n,a){e instanceof Array&&(e={values:e}),a=new k;var o,s,l,u=e.values,c=u.length-1,h=[],f={};if(c<0)return n;for(o=0;o<=c;o++)l=p(t,u[o],r,n,a,c!==o),h[o]=l.end;for(s in e)f[s]=e[s];return f.values=h,(n=new _(t,"bezier",0,0,l.pt,2)).data=l,n.plugin=a,n.setRatio=d,0===f.autoRotate&&(f.autoRotate=!0),!f.autoRotate||f.autoRotate instanceof Array||(o=!0===f.autoRotate?0:Number(f.autoRotate),f.autoRotate=null!=l.end.left?[["left","top","rotation",o,!1]]:null!=l.end.x&&[["x","y","rotation",o,!1]]),f.autoRotate&&(r._transform||r._enableTransforms(!1),l.autoRotate=r._target._gsTransform,l.proxy.rotation=l.autoRotate.rotation||0,r._overwriteProps.push("rotation")),a._onInitTween(l.proxy,f,r._tween),n}})}},_._mod=function(t){for(var e,i=this._overwriteProps,r=i.length;-1<--r;)(e=t[i[r]])&&"function"==typeof e&&(this._mod[i[r]]=e)},_._kill=function(t){var e,i,r=this._props;for(e in this._beziers)if(e in t)for(delete this._beziers[e],delete this._func[e],i=r.length;-1<--i;)r[i]===e&&r.splice(i,1);if(r=this._autoRotate)for(i=r.length;-1<--i;)t[r[i][2]]&&r.splice(i,1);return this._super._kill.call(this,t)},
/*!
 * VERSION: 1.16.1
 * DATE: 2018-08-27
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 * 
 * @author: Jack Doyle, jack@greensock.com
 **/
re.e._gsDefine("easing.Back",["easing.Ease"],function(){function t(t,e){var i=h("easing."+t,function(){},!0),r=i.prototype=new re.b;return r.constructor=i,r.getRatio=e,i}function e(t,e,i,r,n){var a=h("easing."+t,{easeOut:new e,easeIn:new i,easeInOut:new r},!0);return f(a,t),a}function m(t,e,i){this.t=t,this.v=e,i&&(((this.next=i).prev=this).c=i.v-e,this.gap=i.t-t)}function i(t,e){var i=h("easing."+t,function(t){this._p1=t||0===t?t:1.70158,this._p2=1.525*this._p1},!0),r=i.prototype=new re.b;return r.constructor=i,r.getRatio=e,r.config=function(t){return new i(t)},i}var r,n,a,o,s=re.e.GreenSockGlobals||re.e,l=s.com.greensock,u=2*Math.PI,c=Math.PI/2,h=l._class,f=re.b.register||function(){},p=e("Back",i("BackOut",function(t){return(t-=1)*t*((this._p1+1)*t+this._p1)+1}),i("BackIn",function(t){return t*t*((this._p1+1)*t-this._p1)}),i("BackInOut",function(t){return(t*=2)<1?.5*t*t*((this._p2+1)*t-this._p2):.5*((t-=2)*t*((this._p2+1)*t+this._p2)+2)})),d=h("easing.SlowMo",function(t,e,i){e=e||0===e?e:.7,null==t?t=.7:1<t&&(t=1),this._p=1!==t?e:0,this._p1=(1-t)/2,this._p2=t,this._p3=this._p1+this._p2,this._calcEnd=!0===i},!0),_=d.prototype=new re.b;return _.constructor=d,_.getRatio=function(t){var e=t+(.5-t)*this._p;return t<this._p1?this._calcEnd?1-(t=1-t/this._p1)*t:e-(t=1-t/this._p1)*t*t*t*e:t>this._p3?this._calcEnd?1===t?0:1-(t=(t-this._p3)/this._p1)*t:e+(t-e)*(t=(t-this._p3)/this._p1)*t*t*t:this._calcEnd?1:e},d.ease=new d(.7,.7),_.config=d.config=function(t,e,i){return new d(t,e,i)},(_=(r=h("easing.SteppedEase",function(t,e){t=t||1,this._p1=1/t,this._p2=t+(e?0:1),this._p3=e?1:0},!0)).prototype=new re.b).constructor=r,_.getRatio=function(t){return t<0?t=0:1<=t&&(t=.999999999),((this._p2*t|0)+this._p3)*this._p1},_.config=r.config=function(t,e){return new r(t,e)},(_=(n=h("easing.ExpoScaleEase",function(t,e,i){this._p1=Math.log(e/t),this._p2=e-t,this._p3=t,this._ease=i},!0)).prototype=new re.b).constructor=n,_.getRatio=function(t){return this._ease&&(t=this._ease.getRatio(t)),(this._p3*Math.exp(this._p1*t)-this._p3)/this._p2},_.config=n.config=function(t,e,i){return new n(t,e,i)},(_=(a=h("easing.RoughEase",function(t){for(var e,i,r,n,a,o,s=(t=t||{}).taper||"none",l=[],u=0,c=0|(t.points||20),h=c,f=!1!==t.randomize,p=!0===t.clamp,d=t.template instanceof re.b?t.template:null,_="number"==typeof t.strength?.4*t.strength:.4;-1<--h;)e=f?Math.random():1/c*h,i=d?d.getRatio(e):e,r="none"===s?_:"out"===s?(n=1-e)*n*_:"in"===s?e*e*_:e<.5?(n=2*e)*n*.5*_:(n=2*(1-e))*n*.5*_,f?i+=Math.random()*r-.5*r:h%2?i+=.5*r:i-=.5*r,p&&(1<i?i=1:i<0&&(i=0)),l[u++]={x:e,y:i};for(l.sort(function(t,e){return t.x-e.x}),o=new m(1,1,null),h=c;-1<--h;)a=l[h],o=new m(a.x,a.y,o);this._prev=new m(0,0,0!==o.t?o:o.next)},!0)).prototype=new re.b).constructor=a,_.getRatio=function(t){var e=this._prev;if(t>e.t){for(;e.next&&t>=e.t;)e=e.next;e=e.prev}else for(;e.prev&&t<=e.t;)e=e.prev;return(this._prev=e).v+(t-e.t)/e.gap*e.c},_.config=function(t){return new a(t)},a.ease=new a,e("Bounce",t("BounceOut",function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}),t("BounceIn",function(t){return(t=1-t)<1/2.75?1-7.5625*t*t:t<2/2.75?1-(7.5625*(t-=1.5/2.75)*t+.75):t<2.5/2.75?1-(7.5625*(t-=2.25/2.75)*t+.9375):1-(7.5625*(t-=2.625/2.75)*t+.984375)}),t("BounceInOut",function(t){var e=t<.5;return(t=e?1-2*t:2*t-1)<1/2.75?t*=7.5625*t:t=t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375,e?.5*(1-t):.5*t+.5})),e("Circ",t("CircOut",function(t){return Math.sqrt(1-(t-=1)*t)}),t("CircIn",function(t){return-(Math.sqrt(1-t*t)-1)}),t("CircInOut",function(t){return(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)})),e("Elastic",(o=function(t,e,i){var r=h("easing."+t,function(t,e){this._p1=1<=t?t:1,this._p2=(e||i)/(t<1?t:1),this._p3=this._p2/u*(Math.asin(1/this._p1)||0),this._p2=u/this._p2},!0),n=r.prototype=new re.b;return n.constructor=r,n.getRatio=e,n.config=function(t,e){return new r(t,e)},r})("ElasticOut",function(t){return this._p1*Math.pow(2,-10*t)*Math.sin((t-this._p3)*this._p2)+1},.3),o("ElasticIn",function(t){return-this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2)},.3),o("ElasticInOut",function(t){return(t*=2)<1?this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2)*-.5:this._p1*Math.pow(2,-10*(t-=1))*Math.sin((t-this._p3)*this._p2)*.5+1},.45)),e("Expo",t("ExpoOut",function(t){return 1-Math.pow(2,-10*t)}),t("ExpoIn",function(t){return Math.pow(2,10*(t-1))-.001}),t("ExpoInOut",function(t){return(t*=2)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*(t-1)))})),e("Sine",t("SineOut",function(t){return Math.sin(t*c)}),t("SineIn",function(t){return 1-Math.cos(t*c)}),t("SineInOut",function(t){return-.5*(Math.cos(Math.PI*t)-1)})),h("easing.EaseLookup",{find:function(t){return re.b.map[t]}},!0),f(s.SlowMo,"SlowMo","ease,"),f(a,"RoughEase","ease,"),f(r,"SteppedEase","ease,"),p},!0);var E=re.g.Back,O=re.g.Elastic,R=re.g.Bounce,C=re.g.RoughEase,A=re.g.SlowMo,M=re.g.SteppedEase,L=re.g.Circ,D=re.g.Expo,F=re.g.Sine,z=re.g.ExpoScaleEase,N=r;N._autoActivated=[h,f,n,a,k,o,c,E,O,R,C,A,M,L,D,F,z];
/*!
 * VERSION: 2.1.3
 * DATE: 2019-05-17
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2019, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 *
 * @author: Jack Doyle, jack@greensock.com
 **/
var I=i(2),j=i.n(I),H=i(1),B=i.n(H),X=i(3),q=i.n(X),Y=Y||{};Y.randSpreadToSpherecal=function(t){var e=THREE.Math.degToRad(360*Math.random()),i=THREE.Math.randFloat(-1,1),r=Math.sqrt(1-i*i)*Math.cos(e),n=Math.sqrt(1-i*i)*Math.sin(e);return new THREE.Vector3(r,n,i).multiplyScalar(t)},Y.spreadToCircumference=function(t,e,i){var r=360/e*i,n=THREE.Math.degToRad(r);return new THREE.Vector3(Math.sin(n)*t,0,Math.cos(n)*t)},Y.googleTagManagerTrigger=function(t){window.dataLayer&&window.dataLayer.push({event:"pjax",newPageUrl:t}),window.mouseflow&&window.mouseflow.newPageView()};var V,U,W,G,Z,Q,K,J,tt,et,it,rt,nt,at,ot,st,lt,ut,ct,ht,ft,pt,dt,_t=Y;
/*! NodeOfWorld.js v1.1 <6th August 2019> | (c) VIADUCT Ltd. | https://viaduct.co.jp */function mt(){this.init.apply(this,arguments)}var gt,vt,yt,wt,bt,Tt,xt,Pt,St,kt,Et,Ot,Rt,Ct,At,Mt,Lt,Dt,Ft,zt,Nt,It,jt=((mt.prototype={init:function(t){V=this;var e,i=t||{};return U=i.worldSize||1e4,W=i.maxPoints||500,G=i.minDistance||1e3,Z=i.pointSize||25,Q=i.maxVelocity||15,K=null==i.autoRender||i.autoRender,J=U/2,i.canvas?e=document.querySelector(i.canvas):(e=document.createElement("canvas"),document.body.insertBefore(e,document.body.firstChild)),V.initStage(e),pt=!1,V.createPoints(Ht.pointsVS,Ht.pointsFS).createLines(Ht.linesVS,Ht.linesFS),pt=!0,K&&V.animate(),window.addEventListener("resize",V.onResize,!1),V},initStage:function(t){(tt=new THREE.WebGLRenderer({canvas:t,antialias:!0})).setPixelRatio(window.devicePixelRatio),tt.setSize(window.innerWidth,window.innerHeight),tt.domElement.style.position="fixed",(et=new THREE.PerspectiveCamera(50,window.innerWidth/window.innerHeight,1,2*U)).position.set(0,0,1),et.lookAt(0,0,0),it=new THREE.Scene;var e=new THREE.RenderPass(it,et);return nt=new THREE.UnrealBloomPass(new THREE.Vector2(window.innerWidth,window.innerHeight),1.5,.3,.3),(rt=new THREE.EffectComposer(tt)).addPass(e),rt.addPass(nt),V},createPoints:function(t,e){st=new Array(W),lt=new Array(W);for(var i=0,r=W;i<r;i++)switch(st[i]=1e-4*THREE.Math.randFloat(1,Q),i%3){case 0:lt[i]=new THREE.Vector3(1,0,0);break;case 1:lt[i]=new THREE.Vector3(0,1,0);break;case 2:lt[i]=new THREE.Vector3(0,0,1)}ot=new Float32Array(3*W);for(var n=0,a=3*W;n<a;n+=3){var o=_t.randSpreadToSpherecal(J);ot[n+0]=o.x,ot[n+1]=o.y,ot[n+2]=o.z}var s=new THREE.BufferGeometry;s.addAttribute("position",new THREE.BufferAttribute(ot,3));var l={size:{type:"f",value:Z},resolution:{type:"v2",value:new THREE.Vector2(window.innerWidth,window.innerHeight)}},u=new THREE.ShaderMaterial({transparent:!0,blending:THREE.AdditiveBlending,uniforms:l,vertexShader:t,fragmentShader:e});return at=new THREE.Points(s,u),it.add(at),V},createLines:function(t,e){ct=new Float32Array(W*W*3),ht=new Float32Array(W*W*3);var i=new THREE.BufferGeometry;i.addAttribute("position",new THREE.BufferAttribute(ct,3)),i.addAttribute("alpha",new THREE.BufferAttribute(ht,3)),i.setDrawRange(0,0);var r=new THREE.ShaderMaterial({transparent:!0,blending:THREE.AdditiveBlending,vertexShader:t,fragmentShader:e});return ut=new THREE.LineSegments(i,r),it.add(ut),V},stop:function(){return dt=!0,V},resume:function(){return dt=!1,V},drawNodes:function(){for(var t=G*G,e=ft=0,i=3*W;e<i;e+=3){var r=e/3,n=new THREE.Vector3(ot[e+0],ot[e+1],ot[e+2]);n.applyAxisAngle(lt[r],st[r]),ot[e+0]=n.x,ot[e+1]=n.y,ot[e+2]=n.z}for(var a=0,o=3*W;a<o;a+=3)for(var s=new THREE.Vector3(ot[a+0],ot[a+1],ot[a+2]),l=0;l<o;l+=3){var u=new THREE.Vector3(ot[l+0],ot[l+1],ot[l+2]),c=s.distanceToSquared(u);if(c<t){var h=6*(++ft-1);ct[0+h]=s.x,ct[1+h]=s.y,ct[2+h]=s.z,ct[3+h]=u.x,ct[4+h]=u.y,ct[5+h]=u.z;var f=1-THREE.Math.smoothstep(c,0,t);ht[0+h]=f,ht[1+h]=f,ht[2+h]=f,ht[3+h]=f,ht[4+h]=f,ht[5+h]=f}}return at.geometry.attributes.position.needsUpdate=!0,ut.geometry.attributes.position.needsUpdate=!0,ut.geometry.attributes.alpha.needsUpdate=!0,ut.geometry.setDrawRange(0,2*ft),V},updateCamera:function(t){return pt&&(et.position.copy(t.position),et.rotation.copy(t.rotation)),V},onResize:function(){var t=window.innerWidth,e=window.innerHeight;return et.aspect=t/e,et.updateProjectionMatrix(),tt.setSize(t,e),rt&&rt.setSize(t,e),nt&&nt.setSize(t,e),V},animate:function(){return requestAnimationFrame(V.animate),V.render(),V},render:function(){return pt&&(dt||V.drawNodes(),rt?rt.render():tt.render(it,et)),V}}).isReady=function(){return pt},mt.prototype.autoRender=function(){return K},mt.prototype.camera=function(){return et},mt),Ht={pointsVS:"uniform float size;\n\t\tvarying vec4 vColor;\n\t\tvoid main(void){\n\t\t\tvColor = vec4(1.0);\n\t\t\tvec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n\t\t\tgl_Position = projectionMatrix * mvPosition;\n\t\t\tgl_PointSize = size;\n\t\t}",pointsFS:"uniform vec2 resolution;\n\t\tvarying vec4 vColor;\n\t\tvoid main(void){\n\t\t\tfloat f = length(gl_PointCoord - vec2(0.5, 0.5));\n\t\t\tif (f > 0.1) {\n\t\t\t\tdiscard;\n\t\t\t}\n\t\t\tgl_FragColor = vColor;\n\t\t}",linesVS:"attribute float alpha;\n\t\tvarying vec4 vColor;\n\t\tvoid main(void){\n\t\t\tvColor = vec4(1.0, 1.0, 1.0, alpha);\n\t\t\tvec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n\t\t\tgl_Position = projectionMatrix * mvPosition;\n\t\t}",linesFS:"varying vec4 vColor;\n\t\tvoid main(void){\n\t\t\tgl_FragColor = vColor;\n\t\t}"};function Bt(){this.init.apply(this,arguments)}new(Nt=["home","works","about","recruit","contact"],It={id:null,name:null,type:null},Bt.prototype={init:function(){gt=this,vt=$(document),yt=$("body"),wt=document.getElementsByTagName("body")[0],bt=document.getElementById("container");var t=navigator.userAgent;return Mt=t.match(/Trident/),At=t.match(/iPhone|iPod|iPad|Android|Windows Phone/),Et=new jt({canvas:"#bg",worldSize:1e4,maxPoints:At||Mt?200:400,minDistance:At||Mt?1800:1200,pointSize:25,maxVelocity:10,autoRender:!1}),(Tt=document.createElement("div")).id="dummy",bt.appendChild(Tt),["meta[name='keywords']","meta[name='description']","meta[property^='og']"].join(","),Lt=!0,It.id=0,Rt=[],gt.initStage().attachEvents().animate(),gt},initStage:function(){var t=document.getElementById("stage");return(St=new THREE.CSS3DRenderer).setSize(window.innerWidth,window.innerHeight),t.appendChild(St.domElement),(xt=new THREE.PerspectiveCamera(50,window.innerWidth/window.innerHeight,1,1e4)).position.set(0,0,1),xt.lookAt(0,0,0),Pt=new THREE.Scene,Et.updateCamera(xt),gt},attachEvents:function(){return document.addEventListener("DOMContentLoaded",function(t){gt.readyPage(),bt.classList.add("loaded")}),window.addEventListener("load",function(t){gt.loadPage(2e3)}),window.addEventListener("scroll",function(t){Dt?(t.preventDefault(),t.stopPropagation()):gt.onScroll()}),window.addEventListener("resize",function(t){gt.onResize()}),B.a.use(q.a),B.a.init({timeout:5e3,cacheIgnore:["/contact/"],transitions:[{beforeAppear:function(t){},appear:function(t){},afterAppear:function(t){},beforeLeave:function(t){},leave:function(t){bt.classList.add("leave")},afterLeave:function(t){t.next.html.match(/body class="([^\"]+)/);var e=RegExp.$1;yt.removeClass().addClass(e);var i=$("<head>").html($.parseHTML(t.next.html.match(/<head[^>]*>([\s\S.]*)<\/head>/i)[0],document,!0)),r=['meta[name="keywords"]','meta[name="description"]','meta[property^="og"]','meta[name^="twitter"]',"meta[itemprop]","link[itemprop]",'link[rel="prev"]','link[rel="next"]','link[rel="canonical"]'].join(",");$("head").find(r).remove(),i.find(r).appendTo("head")},beforeEnter:function(t){gt.readyPage()},enter:function(t){bt.classList.remove("leave"),bt.classList.add("enter"),_t.googleTagManagerTrigger(location.pathname)},afterEnter:function(t){gt.loadPage(500)}}]}),vt.on("wpcf7:invalid",function(t){gt.resetForm()}).on("wpcf7:spam",function(t){gt.resetForm()}).on("wpcf7:unaccepted",function(t){gt.resetForm()}).on("wpcf7:aborted",function(t){gt.resetForm()}).on("wpcf7:unaccepted",function(t){gt.resetForm()}).on("wpcf7:mailfailed",function(t){gt.resetForm()}).on("wpcf7:mailsent",function(t){_t.googleTagManagerTrigger("/contact/thanks.php"),gt.resetForm()}),vt.on("click","#nav .btn-prev",function(t){bt.classList.add("loadPrevPage")}).on("click","#nav .btn-next",function(t){bt.classList.add("loadNextPage")}).on("click","#pagination .btn-prev",function(t){bt.classList.add("loadPrevPost")}).on("click","#pagination .btn-next",function(t){bt.classList.add("loadNextPost")}).on("click","#btn-resetview",function(t){var e=gt.getCurrentLayer();gt.animateCamera(e,!1)}),"function"==typeof Event?Ot=new Event("onAnimateCamera"):(Ot=document.createEvent("Event")).initEvent("onAnimateCamera",!0,!0),document.addEventListener("onAnimateCamera",gt.onAnimateCamera),gt},resetForm:function(){return setTimeout(function(){var t=gt.getCurrentLayer();gt.setPageHeight(t.element.clientHeight).resetScroll().animateCamera(t)},500),gt},reloadScripts:function(){var t=$('script[src*="recaptcha"]');if(t){t.remove();var e=document.createElement("script");e.src="https://www.google.com/recaptcha/api.js?hl=ja",e.async="async";var i=document.getElementsByTagName("script")[0];i.parentNode.insertBefore(e,i)}var r=$('script[src*="contact-form-7"]');if(r){r.remove();var n=document.createElement("script");n.src="/wp/wp-content/plugins/contact-form-7/includes/js/scripts.js",n.defer="defer";var a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(n,a)}return gt},readyPage:function(){j.a.attach(document.body);var t=location.href.split("/");return It.name=""===t[3]?"home":t[3],It.id=Nt.indexOf(It.name),It.type=-1!==wt.className.indexOf("archive")?"archive":-1!==wt.className.indexOf("single")?"single":-1!==wt.className.indexOf("page")?"page":"home","contact"===It.name&&gt.reloadScripts(),gt},loadPage:function(t){return zt=!0,setTimeout(function(){gt.initPage()},t),gt},initPage:function(){var t;if("home"===It.type)gt.resetScroll(),gt.setPageHeight(0),(t=new THREE.Object3D).position.set(0,0,0),Rt.push(t),Ct=1,gt.animateCamera(t,!0);else{var e=document.getElementById("contents"),i=e.querySelectorAll(".layer");if(i.length<1)return gt;gt.resetScroll(),gt.setPageHeight(i[0].clientHeight),gt.addLayers(i);for(var r=0,n=i.length;r<n;r++)e.removeChild(i[r]);t=gt.getCurrentLayer(),gt.animateCamera(t,!Lt)}return Lt=!1,bt.classList.remove("loadPrevPage","loadNextPage","loadPrevPost","loadNextPost","enter"),gt},addLayers:function(t){for(var e=0,i=t.length;e<i;e++){var r,n=new THREE.CSS3DObject(t[e]),a=1e3*Math.random()+1e3;r=_t.randSpreadToSpherecal(a),n.position.set(r.x,r.y,r.z),n.lookAt(0,0,0),n.element.classList.add("activate"),Pt.add(n),Rt.push(n)}return Ct=t.length-1,gt},removeLayers:function(){for(var t="works"===It.name&&"archive"===It.type?1:Rt.length-1,e=function(t,e){var i=Rt[t];i.element?(i.element.addEventListener("transitionend",function(){Pt.remove(i)},{once:!0}),i.element.classList.remove("activate"),i.element.classList.add("dispose")):Pt.remove(i)},i=0,r=t;i<r;i++)e(i);return Rt=Rt.slice(t),gt},getCurrentLayer:function(){return Rt[Rt.length-1]},moveLayer:function(t){bt.classList.remove("loadPrevPost","loadNextPost"),Ct=(Ct+=t)>Rt.length-1?0:Ct<0?Rt.length-1:Ct;var e=Rt[Ct];return gt.animateCamera(e,!1),gt},setPageHeight:function(t){return Tt.style.height=t+"px",gt},getPageHeight:function(){return Tt.clientHeight},getDepthForOriginalScale:function(){var t=xt.fov*(Math.PI/180),e=2*Math.tan(t/2);return window.innerHeight/e},getCameraOffset:function(){if("home"===It.type)return new THREE.Vector3(0,0,1e4);var t=gt.getPageHeight(),e=-1*(window.scrollY||window.pageYOffset);t>window.innerHeight&&(e+=(window.innerHeight-t)/2*-1);var i=gt.getDepthForOriginalScale();return new THREE.Vector3(0,e,i)},animateCamera:function(t,e){Dt=!0,e&&1<Rt.length&&gt.removeLayers(),t.updateMatrixWorld();var i=gt.getCameraOffset();return i.applyMatrix4(t.matrixWorld),N.to(xt.position,1.5,{x:i.x,y:i.y,z:i.z,ease:Power3.easeInOut,onUpdate:function(){Ot&&document.dispatchEvent(Ot)},onComplete:function(){zt=Dt=!1}}),N.to(xt.rotation,1.5,{x:t.rotation.x,y:t.rotation.y,z:t.rotation.z,ease:Power3.easeInOut}),gt},onAnimateCamera:function(t){return Et.updateCamera(xt),gt},updateCamera:function(){var t=gt.getCurrentLayer();if(null==t)return gt;var e=window.innerWidth,i=window.innerHeight,r=gt.getCameraOffset();return r.applyMatrix4(t.matrixWorld),xt.position.copy(r),xt.aspect=e/i,xt.updateProjectionMatrix(),Ot&&document.dispatchEvent(Ot),gt},removeControls:function(){return kt.removeEventListener("change",gt.onAnimateCamera),kt.dispose(),kt=null,gt},addControls:function(t){return(kt=new THREE.TrackballControls(xt)).noZoom=!0,kt.addEventListener("change",gt.onAnimateCamera),gt.onAnimateCamera(),gt},resetScroll:function(){return Ft=0,window.scrollTo(0,0),gt},onScroll:function(){if(zt)return gt;var t=window.scrollY||window.pageYOffset,e=Ft-t,i=new THREE.Vector3(0,e,0);return i.applyMatrix4(xt.matrixWorld),xt.position.copy(i),Ft=t,Ot&&document.dispatchEvent(Ot),gt},onResize:function(){var t=window.innerWidth,e=window.innerHeight;return St.setSize(t,e),gt.updateCamera(),gt},animate:function(){return requestAnimationFrame(gt.animate),gt.render(),gt},render:function(){return Et&&!Et.autoRender()&&Et.render(),St.render(Pt,xt),kt&&kt.update(),gt}},Bt)}]);
var wpcf7={"apiSettings":{"root":"https:\/\/viaduct.co.jp\/wp-json\/contact-form-7\/v1","namespace":"contact-form-7\/v1"},"recaptcha":{"messages":{"empty":"\u3042\u306a\u305f\u304c\u30ed\u30dc\u30c3\u30c8\u3067\u306f\u306a\u3044\u3053\u3068\u3092\u8a3c\u660e\u3057\u3066\u304f\u3060\u3055\u3044\u3002"}},"cached":"1"};
(function($){'use strict';if(typeof wpcf7==='undefined'||wpcf7===null){return;}
wpcf7=$.extend({cached:0,inputs:[]},wpcf7);$(function(){wpcf7.supportHtml5=(function(){var features={};var input=document.createElement('input');features.placeholder='placeholder'in input;var inputTypes=['email','url','tel','number','range','date'];$.each(inputTypes,function(index,value){input.setAttribute('type',value);features[value]=input.type!=='text';});return features;})();$('div.wpcf7 > form').each(function(){var $form=$(this);wpcf7.initForm($form);if(wpcf7.cached){wpcf7.refill($form);}});});wpcf7.getId=function(form){return parseInt($('input[name="_wpcf7"]',form).val(),10);};wpcf7.initForm=function(form){var $form=$(form);$form.submit(function(event){if(!wpcf7.supportHtml5.placeholder){$('[placeholder].placeheld',$form).each(function(i,n){$(n).val('').removeClass('placeheld');});}
if(typeof window.FormData==='function'){wpcf7.submit($form);event.preventDefault();}});$('.wpcf7-submit',$form).after('<span class="ajax-loader"></span>');wpcf7.toggleSubmit($form);$form.on('click','.wpcf7-acceptance',function(){wpcf7.toggleSubmit($form);});$('.wpcf7-exclusive-checkbox',$form).on('click','input:checkbox',function(){var name=$(this).attr('name');$form.find('input:checkbox[name="'+name+'"]').not(this).prop('checked',false);});$('.wpcf7-list-item.has-free-text',$form).each(function(){var $freetext=$(':input.wpcf7-free-text',this);var $wrap=$(this).closest('.wpcf7-form-control');if($(':checkbox, :radio',this).is(':checked')){$freetext.prop('disabled',false);}else{$freetext.prop('disabled',true);}
$wrap.on('change',':checkbox, :radio',function(){var $cb=$('.has-free-text',$wrap).find(':checkbox, :radio');if($cb.is(':checked')){$freetext.prop('disabled',false).focus();}else{$freetext.prop('disabled',true);}});});if(!wpcf7.supportHtml5.placeholder){$('[placeholder]',$form).each(function(){$(this).val($(this).attr('placeholder'));$(this).addClass('placeheld');$(this).focus(function(){if($(this).hasClass('placeheld')){$(this).val('').removeClass('placeheld');}});$(this).blur(function(){if(''===$(this).val()){$(this).val($(this).attr('placeholder'));$(this).addClass('placeheld');}});});}
if(wpcf7.jqueryUi&&!wpcf7.supportHtml5.date){$form.find('input.wpcf7-date[type="date"]').each(function(){$(this).datepicker({dateFormat:'yy-mm-dd',minDate:new Date($(this).attr('min')),maxDate:new Date($(this).attr('max'))});});}
if(wpcf7.jqueryUi&&!wpcf7.supportHtml5.number){$form.find('input.wpcf7-number[type="number"]').each(function(){$(this).spinner({min:$(this).attr('min'),max:$(this).attr('max'),step:$(this).attr('step')});});}
$('.wpcf7-character-count',$form).each(function(){var $count=$(this);var name=$count.attr('data-target-name');var down=$count.hasClass('down');var starting=parseInt($count.attr('data-starting-value'),10);var maximum=parseInt($count.attr('data-maximum-value'),10);var minimum=parseInt($count.attr('data-minimum-value'),10);var updateCount=function(target){var $target=$(target);var length=$target.val().length;var count=down?starting-length:length;$count.attr('data-current-value',count);$count.text(count);if(maximum&&maximum<length){$count.addClass('too-long');}else{$count.removeClass('too-long');}
if(minimum&&length<minimum){$count.addClass('too-short');}else{$count.removeClass('too-short');}};$(':input[name="'+name+'"]',$form).each(function(){updateCount(this);$(this).keyup(function(){updateCount(this);});});});$form.on('change','.wpcf7-validates-as-url',function(){var val=$.trim($(this).val());if(val&&!val.match(/^[a-z][a-z0-9.+-]*:/i)&&-1!==val.indexOf('.')){val=val.replace(/^\/+/,'');val='http://'+val;}
$(this).val(val);});};wpcf7.submit=function(form){if(typeof window.FormData!=='function'){return;}
var $form=$(form);$('.ajax-loader',$form).addClass('is-active');wpcf7.clearResponse($form);var formData=new FormData($form.get(0));var detail={id:$form.closest('div.wpcf7').attr('id'),status:'init',inputs:[],formData:formData};$.each($form.serializeArray(),function(i,field){if('_wpcf7'==field.name){detail.contactFormId=field.value;}else if('_wpcf7_version'==field.name){detail.pluginVersion=field.value;}else if('_wpcf7_locale'==field.name){detail.contactFormLocale=field.value;}else if('_wpcf7_unit_tag'==field.name){detail.unitTag=field.value;}else if('_wpcf7_container_post'==field.name){detail.containerPostId=field.value;}else if(field.name.match(/^_wpcf7_\w+_free_text_/)){var owner=field.name.replace(/^_wpcf7_\w+_free_text_/,'');detail.inputs.push({name:owner+'-free-text',value:field.value});}else if(field.name.match(/^_/)){}else{detail.inputs.push(field);}});wpcf7.triggerEvent($form.closest('div.wpcf7'),'beforesubmit',detail);var ajaxSuccess=function(data,status,xhr,$form){detail.id=$(data.into).attr('id');detail.status=data.status;detail.apiResponse=data;var $message=$('.wpcf7-response-output',$form);switch(data.status){case'validation_failed':$.each(data.invalidFields,function(i,n){$(n.into,$form).each(function(){wpcf7.notValidTip(this,n.message);$('.wpcf7-form-control',this).addClass('wpcf7-not-valid');$('[aria-invalid]',this).attr('aria-invalid','true');});});$message.addClass('wpcf7-validation-errors');$form.addClass('invalid');wpcf7.triggerEvent(data.into,'invalid',detail);break;case'acceptance_missing':$message.addClass('wpcf7-acceptance-missing');$form.addClass('unaccepted');wpcf7.triggerEvent(data.into,'unaccepted',detail);break;case'spam':$message.addClass('wpcf7-spam-blocked');$form.addClass('spam');$('[name="g-recaptcha-response"]',$form).each(function(){if(''===$(this).val()){var $recaptcha=$(this).closest('.wpcf7-form-control-wrap');wpcf7.notValidTip($recaptcha,wpcf7.recaptcha.messages.empty);}});wpcf7.triggerEvent(data.into,'spam',detail);break;case'aborted':$message.addClass('wpcf7-aborted');$form.addClass('aborted');wpcf7.triggerEvent(data.into,'aborted',detail);break;case'mail_sent':$message.addClass('wpcf7-mail-sent-ok');$form.addClass('sent');wpcf7.triggerEvent(data.into,'mailsent',detail);break;case'mail_failed':$message.addClass('wpcf7-mail-sent-ng');$form.addClass('failed');wpcf7.triggerEvent(data.into,'mailfailed',detail);break;default:var customStatusClass='custom-'
+data.status.replace(/[^0-9a-z]+/i,'-');$message.addClass('wpcf7-'+customStatusClass);$form.addClass(customStatusClass);}
wpcf7.refill($form,data);wpcf7.triggerEvent(data.into,'submit',detail);if('mail_sent'==data.status){$form.each(function(){this.reset();});wpcf7.toggleSubmit($form);}
if(!wpcf7.supportHtml5.placeholder){$form.find('[placeholder].placeheld').each(function(i,n){$(n).val($(n).attr('placeholder'));});}
$message.html('').append(data.message).slideDown('fast');$message.attr('role','alert');$('.screen-reader-response',$form.closest('.wpcf7')).each(function(){var $response=$(this);$response.html('').attr('role','').append(data.message);if(data.invalidFields){var $invalids=$('<ul></ul>');$.each(data.invalidFields,function(i,n){if(n.idref){var $li=$('<li></li>').append($('<a></a>').attr('href','#'+n.idref).append(n.message));}else{var $li=$('<li></li>').append(n.message);}
$invalids.append($li);});$response.append($invalids);}
$response.attr('role','alert').focus();});};$.ajax({type:'POST',url:wpcf7.apiSettings.getRoute('/contact-forms/'+wpcf7.getId($form)+'/feedback'),data:formData,dataType:'json',processData:false,contentType:false}).done(function(data,status,xhr){ajaxSuccess(data,status,xhr,$form);$('.ajax-loader',$form).removeClass('is-active');}).fail(function(xhr,status,error){var $e=$('<div class="ajax-error"></div>').text(error.message);$form.after($e);});};wpcf7.triggerEvent=function(target,name,detail){var $target=$(target);var event=new CustomEvent('wpcf7'+name,{bubbles:true,detail:detail});$target.get(0).dispatchEvent(event);$target.trigger('wpcf7:'+name,detail);$target.trigger(name+'.wpcf7',detail);};wpcf7.toggleSubmit=function(form,state){var $form=$(form);var $submit=$('input:submit',$form);if(typeof state!=='undefined'){$submit.prop('disabled',!state);return;}
if($form.hasClass('wpcf7-acceptance-as-validation')){return;}
$submit.prop('disabled',false);$('.wpcf7-acceptance',$form).each(function(){var $span=$(this);var $input=$('input:checkbox',$span);if(!$span.hasClass('optional')){if($span.hasClass('invert')&&$input.is(':checked')||!$span.hasClass('invert')&&!$input.is(':checked')){$submit.prop('disabled',true);return false;}}});};wpcf7.notValidTip=function(target,message){var $target=$(target);$('.wpcf7-not-valid-tip',$target).remove();$('<span role="alert" class="wpcf7-not-valid-tip"></span>').text(message).appendTo($target);if($target.is('.use-floating-validation-tip *')){var fadeOut=function(target){$(target).not(':hidden').animate({opacity:0},'fast',function(){$(this).css({'z-index':-100});});};$target.on('mouseover','.wpcf7-not-valid-tip',function(){fadeOut(this);});$target.on('focus',':input',function(){fadeOut($('.wpcf7-not-valid-tip',$target));});}};wpcf7.refill=function(form,data){var $form=$(form);var refillCaptcha=function($form,items){$.each(items,function(i,n){$form.find(':input[name="'+i+'"]').val('');$form.find('img.wpcf7-captcha-'+i).attr('src',n);var match=/([0-9]+)\.(png|gif|jpeg)$/.exec(n);$form.find('input:hidden[name="_wpcf7_captcha_challenge_'+i+'"]').attr('value',match[1]);});};var refillQuiz=function($form,items){$.each(items,function(i,n){$form.find(':input[name="'+i+'"]').val('');$form.find(':input[name="'+i+'"]').siblings('span.wpcf7-quiz-label').text(n[0]);$form.find('input:hidden[name="_wpcf7_quiz_answer_'+i+'"]').attr('value',n[1]);});};if(typeof data==='undefined'){$.ajax({type:'GET',url:wpcf7.apiSettings.getRoute('/contact-forms/'+wpcf7.getId($form)+'/refill'),beforeSend:function(xhr){var nonce=$form.find(':input[name="_wpnonce"]').val();if(nonce){xhr.setRequestHeader('X-WP-Nonce',nonce);}},dataType:'json'}).done(function(data,status,xhr){if(data.captcha){refillCaptcha($form,data.captcha);}
if(data.quiz){refillQuiz($form,data.quiz);}});}else{if(data.captcha){refillCaptcha($form,data.captcha);}
if(data.quiz){refillQuiz($form,data.quiz);}}};wpcf7.clearResponse=function(form){var $form=$(form);$form.removeClass('invalid spam sent failed');$form.siblings('.screen-reader-response').html('').attr('role','');$('.wpcf7-not-valid-tip',$form).remove();$('[aria-invalid]',$form).attr('aria-invalid','false');$('.wpcf7-form-control',$form).removeClass('wpcf7-not-valid');$('.wpcf7-response-output',$form).hide().empty().removeAttr('role').removeClass('wpcf7-mail-sent-ok wpcf7-mail-sent-ng wpcf7-validation-errors wpcf7-spam-blocked');};wpcf7.apiSettings.getRoute=function(path){var url=wpcf7.apiSettings.root;url=url.replace(wpcf7.apiSettings.namespace,wpcf7.apiSettings.namespace+path);return url;};})(jQuery);(function(){if(typeof window.CustomEvent==="function")return false;function CustomEvent(event,params){params=params||{bubbles:false,cancelable:false,detail:undefined};var evt=document.createEvent('CustomEvent');evt.initCustomEvent(event,params.bubbles,params.cancelable,params.detail);return evt;}
CustomEvent.prototype=window.Event.prototype;window.CustomEvent=CustomEvent;})();